let rec read_ch_until_newline_or_eof.1: Int = () {
  let c.2: Int = ExtApply(minimbt_read_char, [])
  let _3: Int = Int(10)
  if (c.2 == _3) then {
    Int(-1)
  } else {
    let _4: Int = Int(13)
    if (c.2 == _4) then {
      Int(-1)
    } else {
      Var(c.2)
    }
  }
}
let move_left.5: Int = Int(60)
let move_right.6: Int = Int(62)
let increase.7: Int = Int(43)
let decrease.8: Int = Int(45)
let print.9: Int = Int(46)
let read.10: Int = Int(44)
let loop_start.11: Int = Int(91)
let loop_end.12: Int = Int(93)
let rec bf.13: Unit = (len.15: Int, prog.17: Array(Int)) {
  let _18: Int = Int(1)
  let _19: Int = Int(0)
  let ptr.20: Array(Int) = ExtApply(minimbt_create_array, [_18, _19, ])
  let _21: Int = Int(1024)
  let _22: Int = Int(1024)
  let _23: Int = Mul(_21, _22)
  let _24: Int = Int(0)
  let cells.25: Array(Int) = ExtApply(minimbt_create_array, [_23, _24, ])
  let _26: Int = Int(1)
  let _27: Int = Int(0)
  let next_pc.28: Array(Int) = ExtApply(minimbt_create_array, [_26, _27, ])
  let rec skip.29: Var({val: Some(Int)}) = (pc.31: Var({val: Some(Int)}), level.33: Int) {
    if (len.15 <= pc.31) then {
      Var(pc.31)
    } else {
      let i.34: Int = Get prog.17[pc.31]
      if (i.34 == loop_start.11) then {
        let _35: Int = Int(1)
        let _36: Int = Add(pc.31, _35)
        let _37: Int = Int(1)
        let _38: Int = Add(level.33, _37)
        Apply(skip.29, [_36, _38, ])
      } else {
        if (i.34 == loop_end.12) then {
          let _39: Int = Int(0)
          if (level.33 == _39) then {
            Var(pc.31)
          } else {
            let _40: Int = Int(1)
            let _41: Int = Add(pc.31, _40)
            let _42: Int = Int(1)
            let _43: Int = Sub(level.33, _42)
            Apply(skip.29, [_41, _43, ])
          }
        } else {
          let _44: Int = Int(1)
          let _45: Int = Add(pc.31, _44)
          Apply(skip.29, [_45, level.33, ])
        }
      }
    }
  }
  let rec aux.46: Var({val: Some(Int)}) = (pc.48: Var({val: Some(Int)})) {
    if (len.15 <= pc.48) then {
      Var(pc.48)
    } else {
      let i.49: Int = Get prog.17[pc.48]
      if (i.49 == move_right.6) then {
        let _50: Int = Int(0)
        let _51: Int = Int(0)
        let _52: Int = Get ptr.20[_51]
        let _53: Int = Int(1)
        let _54: Int = Add(_52, _53)
        let _56: Unit = Put ptr.20[_50] = _54
        let _57: Int = Int(1)
        let _58: Int = Add(pc.48, _57)
        Apply(aux.46, [_58, ])
      } else {
        if (i.49 == move_left.5) then {
          let _59: Int = Int(0)
          let _60: Int = Int(0)
          let _61: Int = Get ptr.20[_60]
          let _62: Int = Int(1)
          let _63: Int = Sub(_61, _62)
          let _65: Unit = Put ptr.20[_59] = _63
          let _66: Int = Int(1)
          let _67: Int = Add(pc.48, _66)
          Apply(aux.46, [_67, ])
        } else {
          if (i.49 == increase.7) then {
            let _68: Int = Int(0)
            let _69: Int = Get ptr.20[_68]
            let _70: Int = Int(0)
            let _71: Int = Get ptr.20[_70]
            let _72: Int = Get cells.25[_71]
            let _73: Int = Int(1)
            let _74: Int = Add(_72, _73)
            let _76: Unit = Put cells.25[_69] = _74
            let _77: Int = Int(1)
            let _78: Int = Add(pc.48, _77)
            Apply(aux.46, [_78, ])
          } else {
            if (i.49 == decrease.8) then {
              let _79: Int = Int(0)
              let _80: Int = Get ptr.20[_79]
              let _81: Int = Int(0)
              let _82: Int = Get ptr.20[_81]
              let _83: Int = Get cells.25[_82]
              let _84: Int = Int(1)
              let _85: Int = Sub(_83, _84)
              let _87: Unit = Put cells.25[_80] = _85
              let _88: Int = Int(1)
              let _89: Int = Add(pc.48, _88)
              Apply(aux.46, [_89, ])
            } else {
              if (i.49 == print.9) then {
                let _90: Int = Int(0)
                let _91: Int = Get ptr.20[_90]
                let _92: Int = Get cells.25[_91]
                let _94: Unit = ExtApply(minimbt_print_char, [_92, ])
                let _95: Int = Int(1)
                let _96: Int = Add(pc.48, _95)
                Apply(aux.46, [_96, ])
              } else {
                if (i.49 == read.10) then {
                  let _97: Int = Int(0)
                  let _98: Int = Get ptr.20[_97]
                  let _99: Int = Apply(read_ch_until_newline_or_eof.1, [])
                  let _101: Unit = Put cells.25[_98] = _99
                  let _102: Int = Int(1)
                  let _103: Int = Add(pc.48, _102)
                  Apply(aux.46, [_103, ])
                } else {
                  if (i.49 == loop_start.11) then {
                    let _104: Int = Int(0)
                    let _106: Unit = Put next_pc.28[_104] = pc.48
                    let rec lp.107: Var({val: Some(Unit)}) = () {
                      let _108: Int = Int(0)
                      let _109: Int = Get ptr.20[_108]
                      let _110: Int = Get cells.25[_109]
                      let _111: Int = Int(0)
                      if (_110 == _111) then {
                        let _112: Int = Int(0)
                        let _113: Int = Int(1)
                        let _114: Int = Add(pc.48, _113)
                        let _115: Int = Int(0)
                        let _116: Var({val: Some(Int)}) = Apply(skip.29, [_114, _115, ])
                        let _118: Unit = Put next_pc.28[_112] = _116
                        Unit
                      } else {
                        let _119: Int = Int(0)
                        let _120: Int = Int(1)
                        let _121: Int = Add(pc.48, _120)
                        let _122: Var({val: Some(Int)}) = Apply(aux.46, [_121, ])
                        let _124: Unit = Put next_pc.28[_119] = _122
                        Apply(lp.107, [])
                      }
                    }
                    let _126: Var({val: Some(Unit)}) = Apply(lp.107, [])
                    let _127: Int = Int(0)
                    let _128: Int = Get next_pc.28[_127]
                    let _129: Int = Int(1)
                    let _130: Int = Add(_128, _129)
                    Apply(aux.46, [_130, ])
                  } else {
                    if (i.49 == loop_end.12) then {
                      Var(pc.48)
                    } else {
                      Var(pc.48)
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  let _131: Int = Int(0)
  let _133: Var({val: Some(Int)}) = Apply(aux.46, [_131, ])
  Unit
}
let rec main.134: Var({val: Some(Unit)}) = () {
  let len.135: Int = Int(1024)
  let _136: Int = Int(0)
  let prog.137: Array(Int) = ExtApply(minimbt_create_array, [len.135, _136, ])
  let rec read_prog.138: Var({val: Some(Unit)}) = (i.140: Var({val: Some(Int)})) {
    let x.141: Int = Apply(read_ch_until_newline_or_eof.1, [])
    let _142: Int = Int(-1)
    if (x.141 == _142) then {
      Apply(bf.13, [i.140, prog.137, ])
    } else {
      let _144: Unit = Put prog.137[i.140] = x.141
      let _145: Int = Int(1)
      let _146: Int = Add(i.140, _145)
      Apply(read_prog.138, [_146, ])
    }
  }
  let _147: Int = Int(0)
  let _149: Var({val: Some(Unit)}) = Apply(read_prog.138, [_147, ])
  Unit
}
Apply(main.134, [])
