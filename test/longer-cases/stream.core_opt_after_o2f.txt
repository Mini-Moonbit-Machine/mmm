# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn fold.84 #f0 : fn(closure(unit) -> (int32, int32), closure(int32, int32) -> int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = apply $f0(())
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    jump b3($f2)
  }
  .bb #b2 () {
    let %4: int32 = apply $f1($f2, %2)
    let %5: int32 = call f0($f0, $f1, %4)
    jump b3(%5)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn aux.193 #f4 : closure(unit) -> (int32, int32)
.freevars (array[int32], int32, array[int32], int32, int32, int32)
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field(^1, 0 * @32)
    let %1: bool = eq(%0, ^2)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: #(int32, int32) = pack 0, 0
    jump b3(%2)
  }
  .bb #b2 () {
    let %3: int32 = add(%0, 1)
    let _ = store int32 field(^1, 0 * @32) <- %3
    let %5: #(int32, int32) = pack 1, %0
    jump b3(%5)
  }
  .bb #b3 (#(int32, int32)) {
    let %6: int32 = extract $b3.0 0
    let %7: int32 = extract $b3.0 1
    let %8: bool = eq(%6, 0)
    br %8 b4() b5()
  }
  .bb #b4 () {
    let %9: int32 = load int32 field(^3, 0 * @32)
    let %10: bool = eq(%9, ^4)
    br %10 b6() b7()
  }
  .bb #b5 () {
    let %15: #(int32, int32) = pack 1, %7
    jump b9(%15)
  }
  .bb #b6 () {
    let %11: #(int32, int32) = pack 0, 0
    jump b8(%11)
  }
  .bb #b7 () {
    let %12: int32 = add(%9, 1)
    let _ = store int32 field(^3, 0 * @32) <- %12
    let %14: #(int32, int32) = pack 1, %9
    jump b8(%14)
  }
  .bb #b8 (#(int32, int32)) {
    jump b9($b8.0)
  }
  .bb #b9 (#(int32, int32)) {
    let %16: int32 = extract $b9.0 0
    let %17: int32 = extract $b9.0 1
    let %18: bool = eq(%16, 0)
    br %18 b10() b11()
  }
  .bb #b10 () {
    let %19: #(int32, int32) = pack 0, 0
    jump b12(%19)
  }
  .bb #b11 () {
    let %20: int32 = add(^5, %17)
    let %21: #(int32, int32) = pack 1, %20
    jump b12(%21)
  }
  .bb #b12 (#(int32, int32)) {
    let %22: int32 = extract $b12.0 0
    let %23: int32 = extract $b12.0 1
    let %24: bool = eq(%22, 0)
    br %24 b13() b14()
  }
  .bb #b13 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b21(f4.m0)
  }
  .bb #b14 () {
    let %26: bool = le(^6, %23)
    br %26 b15() b16()
  }
  .bb #b15 () {
    jump b17(0)
  }
  .bb #b16 () {
    jump b17(1)
  }
  .bb #b17 (int32) {
    let %27: bool = eq($b17.0, 0)
    br %27 b18() b19()
  }
  .bb #b18 () {
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %23
    jump b20(f4.m1)
  }
  .bb #b19 () {
    let %29: (int32, int32) = apply self(())
    jump b20(%29)
  }
  .bb #b20 ((int32, int32)) {
    jump b21($b20.0)
  }
  .bb #b21 ((int32, int32)) {
    return $b21.0
  }
}
.fn main.120 #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m1: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m2: closure(unit) -> (int32, int32) heap(7)> <- [0] = f4, [1] = f1.m0, [2] = 100, [3] = f1.m1, [4] = 1000, [5] = 1, [6] = 50
    let _ = alloc <m3: closure(unit) -> (int32, int32) heap(3)> <- [0] = f6, [1] = f1.m2, [2] = 1200
    let _ = alloc <m4: closure(int32, int32) -> int32 heap(1)> <- [0] = f8
    let %5: int32 = call f0(f1.m3, f1.m4, 0)
    let %6: unit = ext_call minimbt_print_int(%5)
    let %7: unit = ext_call minimbt_print_char(10)
    return ()
  }
}
.fn add.221 #f8 : closure(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, $f1)
    return %0
  }
}
.fn T$start #f10 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn aux.208 #f6 : closure(unit) -> (int32, int32)
.freevars (closure(unit) -> (int32, int32), int32)
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = apply ^1(())
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b9(f6.m0)
  }
  .bb #b2 () {
    let %5: bool = le(%2, ^2)
    br %5 b3() b4()
  }
  .bb #b3 () {
    jump b5(0)
  }
  .bb #b4 () {
    jump b5(1)
  }
  .bb #b5 (int32) {
    let %6: bool = eq($b5.0, 0)
    br %6 b6() b7()
  }
  .bb #b6 () {
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %2
    jump b8(f6.m1)
  }
  .bb #b7 () {
    let %8: (int32, int32) = apply self(())
    jump b8(%8)
  }
  .bb #b8 ((int32, int32)) {
    jump b9($b8.0)
  }
  .bb #b9 ((int32, int32)) {
    return $b9.0
  }
}
.thunk ::0 start

