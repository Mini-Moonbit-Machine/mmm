# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn aux111.203l7_6 #f6 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f1, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(0)
  }
  .bb #b2 () {
    jump b3(1)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn aux81.190l5_4 #f4 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f1, $f0)
    return %0
  }
}
.fn aux25.205l8_7 #f7 : fn(unit, int32, int32, int32, int32, array[int32], array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = call f5((), $f1, $f2, $f3, $f5, $f6)
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b6(f7.m0)
  }
  .bb #b2 () {
    let %5: int32 = call f6(%2, $f4)
    let %6: bool = eq(%5, 0)
    br %6 b3() b4()
  }
  .bb #b3 () {
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %2
    jump b5(f7.m1)
  }
  .bb #b4 () {
    let %8: (int32, int32) = call f7((), $f1, $f2, $f3, $f4, $f5, $f6)
    jump b5(%8)
  }
  .bb #b5 ((int32, int32)) {
    jump b6($b5.0)
  }
  .bb #b6 ((int32, int32)) {
    return $b6.0
  }
}
.fn aux6.192l6_5 #f5 : fn(unit, int32, int32, int32, array[int32], array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = call f3((), $f1, $f2, $f4, $f5)
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f5.m0)
  }
  .bb #b2 () {
    let %5: int32 = call f4(%2, $f3)
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %5
    jump b3(f5.m1)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn aux117.218l9_8 #f8 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f0, $f1)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(0)
  }
  .bb #b2 () {
    jump b3(1)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn aux46.181l4_3 #f3 : fn(unit, int32, int32, array[int32], array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = call f1((), $f1, $f3)
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let %4: (int32, int32) = call f2((), $f2, $f4)
    jump b3(%4)
  }
  .bb #b2 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 1, [1] = %2
    jump b3(f3.m0)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn aux65.157l2_1 #f1 : fn(unit, int32, array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f2, 0 * @32)
    let %1: bool = eq(%0, $f1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f1.m0)
  }
  .bb #b2 () {
    let %3: int32 = add(%0, 1)
    let _ = store int32 field($f2, 0 * @32) <- %3
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %0
    jump b3(f1.m1)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn main120l1_11 #f11 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m1: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m2: closure(unit) -> (int32, int32) heap(8)> <- [0] = f24, [1] = 100, [2] = 1000, [3] = 1, [4] = 50, [5] = 1200, [6] = f11.m0, [7] = f11.m1
    let _ = alloc <m3: closure(int32, int32) -> int32 heap(1)> <- [0] = f26
    let %4: int32 = call f0(f11.m2, f11.m3, 0)
    let %5: unit = ext_call minimbt_print_int(%4)
    let %6: unit = ext_call minimbt_print_char(10)
    return ()
  }
}
.fn fold84l0_0 #f0 : fn(closure(unit) -> (int32, int32), closure(int32, int32) -> int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = apply $f0(())
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    jump b6($f2)
  }
  .bb #b2 () {
    let %4: int32 = apply $f1($f2, %2)
    let %5: (int32, int32) = apply $f0(())
    let %6: int32 = load int32 field(%5, 0 * @(@32, @(@32, @32)))
    let %7: int32 = load int32 field(%5, 1 * @(@32, @(@32, @32)))
    let %8: bool = eq(%6, 0)
    br %8 b3() b4()
  }
  .bb #b3 () {
    jump b5(%4)
  }
  .bb #b4 () {
    let %9: int32 = apply $f1(%4, %7)
    let %10: int32 = call f0($f0, $f1, %9)
    jump b5(%10)
  }
  .bb #b5 (int32) {
    jump b6($b5.0)
  }
  .bb #b6 (int32) {
    return $b6.0
  }
}
.fn add102.233l11_10 #f10 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, $f1)
    return %0
  }
}
.fn T$start_28 #f28 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f11()
    return %0
  }
}
.fn aux25.220l10_9 #f9 : fn(unit, int32, int32, int32, int32, int32, array[int32], array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = call f7((), $f1, $f2, $f3, $f4, $f6, $f7)
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b6(f9.m0)
  }
  .bb #b2 () {
    let %5: int32 = call f8(%2, $f5)
    let %6: bool = eq(%5, 0)
    br %6 b3() b4()
  }
  .bb #b3 () {
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %2
    jump b5(f9.m1)
  }
  .bb #b4 () {
    let %8: (int32, int32) = call f9((), $f1, $f2, $f3, $f4, $f5, $f6, $f7)
    jump b5(%8)
  }
  .bb #b5 ((int32, int32)) {
    jump b6($b5.0)
  }
  .bb #b6 ((int32, int32)) {
    return $b6.0
  }
}
.fn aux65.170l3_2 #f2 : fn(unit, int32, array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f2, 0 * @32)
    let %1: bool = eq(%0, $f1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f2.m0)
  }
  .bb #b2 () {
    let %3: int32 = add(%0, 1)
    let _ = store int32 field($f2, 0 * @32) <- %3
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %0
    jump b3(f2.m1)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn aux25.220l10c0_24 #f24 : closure(unit) -> (int32, int32)
.freevars (int32, int32, int32, int32, int32, array[int32], array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = call f9($f0, ^1, ^2, ^3, ^4, ^5, ^6, ^7)
    return %0
  }
}
.fn add102.233l11c0_26 #f26 : closure(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f10($f0, $f1)
    return %0
  }
}
.thunk ::0 start
