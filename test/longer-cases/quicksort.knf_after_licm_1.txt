let rec swap.85: Unit = (arr.2: Array(Int), i.3: Int, j.4: Int) {
  let tmp.5: Int = Get arr.2[i.3]
  let _6: Int = Get arr.2[j.4]
  let _7: Unit = Put arr.2[i.3] = _6
  let _8: Unit = Put arr.2[j.4] = tmp.5
  Unit
}
let rec l.87: Var({val: Some(Unit)}) = (j.19: Var({val: Some(Int)}), i.17: Array(Int), arr.10: Array(Int), high.12: Int, pivot.13: Int) {
  let _20: Int = Int(1)
  let _21: Int = Sub(high.12, _20)
  if (j.19 <= _21) then {
    let _22: Int = Get arr.10[j.19]
    if (_22 <= pivot.13) then {
      let _23: Int = Int(0)
      let _24: Int = Int(0)
      let _25: Int = Get i.17[_24]
      let _26: Int = Int(1)
      let _27: Int = Add(_25, _26)
      let _28: Unit = Put i.17[_23] = _27
      let _29: Int = Int(0)
      let _30: Int = Get i.17[_29]
      let _31: Unit = Apply(swap.85, [arr.10, _30, j.19, ])
      let _32: Int = Int(1)
      let _33: Int = Add(j.19, _32)
      Apply(l.87, [_33, i.17, arr.10, high.12, pivot.13, ])
    } else {
      let _31: Unit = Unit
      let _32: Int = Int(1)
      let _33: Int = Add(j.19, _32)
      Apply(l.87, [_33, i.17, arr.10, high.12, pivot.13, ])
    }
  } else {
    Unit
  }
}
let rec partition.86: Int = (arr.10: Array(Int), low.11: Int, high.12: Int) {
  let pivot.13: Int = Get arr.10[high.12]
  let _14: Int = Int(1)
  let _15: Int = Int(1)
  let _16: Int = Sub(low.11, _15)
  let i.17: Array(Int) = ExtApply(minimbt_create_array, [_14, _16, ])
  let _34: Var({val: Some(Unit)}) = Apply(l.87, [low.11, i.17, arr.10, high.12, pivot.13, ])
  let _35: Int = Int(0)
  let _36: Int = Int(0)
  let _37: Int = Get i.17[_36]
  let _38: Int = Int(1)
  let _39: Int = Add(_37, _38)
  let _40: Unit = Put i.17[_35] = _39
  let _41: Int = Int(0)
  let _42: Int = Get i.17[_41]
  let _43: Unit = Apply(swap.85, [arr.10, _42, high.12, ])
  let _44: Int = Int(0)
  Get i.17[_44]
}
let rec quicksort.88: Unit = (arr.46: Array(Int), low.47: Int, high.48: Int) {
  let _49: Int = Int(1)
  let _50: Int = Sub(high.48, _49)
  if (low.47 <= _50) then {
    let pi.51: Int = Apply(partition.86, [arr.46, low.47, high.48, ])
    let _52: Int = Int(1)
    let _53: Int = Sub(pi.51, _52)
    let _54: Unit = Apply(quicksort.88, [arr.46, low.47, _53, ])
    let _55: Int = Int(1)
    let _56: Int = Add(pi.51, _55)
    Apply(quicksort.88, [arr.46, _56, high.48, ])
  } else {
    Unit
  }
}
let rec input.90: Var({val: Some(Unit)}) = (i.62: Int, arr.60: Array(Int), len.58: Int) {
  let _63: Int = Int(1)
  let _64: Int = Sub(len.58, _63)
  if (i.62 <= _64) then {
    let _65: Int = ExtApply(minimbt_read_int, [])
    let _66: Unit = Put arr.60[i.62] = _65
    let _67: Int = Int(1)
    let _68: Int = Add(i.62, _67)
    Apply(input.90, [_68, arr.60, len.58, ])
  } else {
    Unit
  }
}
let rec output.91: Var({val: Some(Unit)}) = (i.76: Int, arr.60: Array(Int), len.58: Int) {
  let _77: Int = Int(1)
  let _78: Int = Sub(len.58, _77)
  if (i.76 <= _78) then {
    let _79: Int = Get arr.60[i.76]
    let _80: Unit = ExtApply(minimbt_print_int, [_79, ])
    let _81: Unit = ExtApply(minimbt_print_endline, [])
    let _82: Int = Int(1)
    let _83: Int = Add(i.76, _82)
    Apply(output.91, [_83, arr.60, len.58, ])
  } else {
    Unit
  }
}
let rec main.89: Var({val: Some(Unit)}) = () {
  let len.58: Int = ExtApply(minimbt_read_int, [])
  let _59: Int = Int(0)
  let arr.60: Array(Int) = ExtApply(minimbt_create_array, [len.58, _59, ])
  let _69: Int = Int(0)
  let _70: Var({val: Some(Unit)}) = Apply(input.90, [_69, arr.60, len.58, ])
  let _71: Int = Int(0)
  let _72: Int = Int(1)
  let _73: Int = Sub(len.58, _72)
  let _74: Unit = Apply(quicksort.88, [arr.60, _71, _73, ])
  let _84: Int = Int(0)
  Apply(output.91, [_84, arr.60, len.58, ])
}
Apply(main.89, [])