let rec swap1: Unit = (arr2.3: Array(Int), i4.5: Int, j6.7: Int) {
  let tmp.8: Int = Get arr2.3[i4.5]
  let _9: Int = Get arr2.3[j6.7]
  let _11: Unit = Put arr2.3[i4.5] = _9
  let _13: Unit = Put arr2.3[j6.7] = tmp.8
  Unit
}
let rec quicksort59: Unit = (arr60.61: Array(Int), low62.63: Int, high64.65: Int) {
  let _66: Int = Int(1)
  let _67: Int = Sub(high64.65, _66)
  if (low62.63 <= _67) then {
    let pivot.118: Int = Get arr60.61[high64.65]
    let _119: Int = Int(1)
    let _120: Int = Int(1)
    let _121: Int = Sub(low62.63, _120)
    let i.122: Array(Int) = ExtApply(minimbt_create_array, [_119, _121, ])
    let rec l26.123: Var({val: Some(Unit)}) = (j27.124: Var({val: Some(Int)})) {
      let _125: Int = Int(1)
      let _126: Int = Sub(high64.65, _125)
      if (j27.124 <= _126) then {
        let _127: Int = Get arr60.61[j27.124]
        let _128: Unit = if (_127 <= pivot.118) then {
          let _129: Int = Int(0)
          let _130: Int = Int(0)
          let _131: Int = Get i.122[_130]
          let _132: Int = Int(1)
          let _133: Int = Add(_131, _132)
          let _134: Unit = Put i.122[_129] = _133
          let _135: Int = Int(0)
          let _136: Int = Get i.122[_135]
          Apply(swap1, [arr60.61, _136, j27.124, ])
        } else {
          Unit
        }
        let _137: Int = Int(1)
        let _138: Int = Add(j27.124, _137)
        Apply(l26.123, [_138, ])
      } else {
        Unit
      }
    }
    let _139: Var({val: Some(Unit)}) = Apply(l26.123, [low62.63, ])
    let _140: Int = Int(0)
    let _141: Int = Int(0)
    let _142: Int = Get i.122[_141]
    let _143: Int = Int(1)
    let _144: Int = Add(_142, _143)
    let _145: Unit = Put i.122[_140] = _144
    let _146: Int = Int(0)
    let _147: Int = Get i.122[_146]
    let _148: Unit = Apply(swap1, [arr60.61, _147, high64.65, ])
    let _149: Int = Int(0)
    let pi.68: Int = Get i.122[_149]
    let _69: Int = Int(1)
    let _70: Int = Sub(pi.68, _69)
    let _72: Unit = Apply(quicksort59, [arr60.61, low62.63, _70, ])
    let _73: Int = Int(1)
    let _74: Int = Add(pi.68, _73)
    Apply(quicksort59, [arr60.61, _74, high64.65, ])
  } else {
    Unit
  }
}
let rec main75: Var({val: Some(Unit)}) = () {
  let len.76: Int = ExtApply(minimbt_read_int, [])
  let _77: Int = Int(0)
  let arr.78: Array(Int) = ExtApply(minimbt_create_array, [len.76, _77, ])
  let rec input79: Var({val: Some(Unit)}) = (i80.81: Int) {
    let _82: Int = Int(1)
    let _83: Int = Sub(len.76, _82)
    if (i80.81 <= _83) then {
      let _84: Int = ExtApply(minimbt_read_int, [])
      let _86: Unit = Put arr.78[i80.81] = _84
      let _87: Int = Int(1)
      let _88: Int = Add(i80.81, _87)
      Apply(input79, [_88, ])
    } else {
      Unit
    }
  }
  let _89: Int = Int(0)
  let _91: Var({val: Some(Unit)}) = Apply(input79, [_89, ])
  let _92: Int = Int(0)
  let _93: Int = Int(1)
  let _94: Int = Sub(len.76, _93)
  let _96: Unit = Apply(quicksort59, [arr.78, _92, _94, ])
  let rec output97: Var({val: Some(Unit)}) = (i98.99: Int) {
    let _100: Int = Int(1)
    let _101: Int = Sub(len.76, _100)
    if (i98.99 <= _101) then {
      let _102: Int = Get arr.78[i98.99]
      let _104: Unit = ExtApply(minimbt_print_int, [_102, ])
      let _106: Unit = ExtApply(minimbt_print_endline, [])
      let _107: Int = Int(1)
      let _108: Int = Add(i98.99, _107)
      Apply(output97, [_108, ])
    } else {
      Unit
    }
  }
  let _109: Int = Int(0)
  Apply(output97, [_109, ])
}
Apply(main75, [])