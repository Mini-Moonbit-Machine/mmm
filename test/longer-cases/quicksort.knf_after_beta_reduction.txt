let rec swap1: Unit = (arr2.3: Array(Int), i4.5: Int, j6.7: Int) {
  let tmp.8: Int = Get arr2.3[i4.5]
  let _9: Int = Get arr2.3[j6.7]
  let _11: Unit = Put arr2.3[i4.5] = _9
  let _13: Unit = Put arr2.3[j6.7] = tmp.8
  Unit
}
let rec partition14: Int = (arr15.16: Array(Int), low17.18: Int, high19.20: Int) {
  let pivot.21: Int = Get arr15.16[high19.20]
  let _22: Int = Int(1)
  let _23: Int = Int(1)
  let _24: Int = Sub(low17.18, _23)
  let i.25: Array(Int) = ExtApply(minimbt_create_array, [_22, _24, ])
  let rec l26: Var({val: Some(Unit)}) = (j27.28: Var({val: Some(Int)})) {
    let _29: Int = Int(1)
    let _30: Int = Sub(high19.20, _29)
    if (j27.28 <= _30) then {
      let _31: Int = Get arr15.16[j27.28]
      let _42: Unit = if (_31 <= pivot.21) then {
        let _32: Int = Int(0)
        let _33: Int = Int(0)
        let _34: Int = Get i.25[_33]
        let _35: Int = Int(1)
        let _36: Int = Add(_34, _35)
        let _38: Unit = Put i.25[_32] = _36
        let _39: Int = Int(0)
        let _40: Int = Get i.25[_39]
        let tmp.110: Int = Get arr15.16[_40]
        let _111: Int = Get arr15.16[j27.28]
        let _112: Unit = Put arr15.16[_40] = _111
        let _113: Unit = Put arr15.16[j27.28] = tmp.110
        Unit
      } else {
        Unit
      }
      let _43: Int = Int(1)
      let _44: Int = Add(j27.28, _43)
      let _114: Int = Int(1)
      let _115: Int = Sub(high19.20, _114)
      if (_44 <= _115) then {
        let _116: Int = Get arr15.16[_44]
        let _117: Unit = if (_116 <= pivot.21) then {
          let _118: Int = Int(0)
          let _119: Int = Int(0)
          let _120: Int = Get i.25[_119]
          let _121: Int = Int(1)
          let _122: Int = Add(_120, _121)
          let _123: Unit = Put i.25[_118] = _122
          let _124: Int = Int(0)
          let _125: Int = Get i.25[_124]
          Apply(swap1, [arr15.16, _125, _44, ])
        } else {
          Unit
        }
        let _126: Int = Int(1)
        let _127: Int = Add(_44, _126)
        Apply(l26, [_127, ])
      } else {
        Unit
      }
    } else {
      Unit
    }
  }
  let _128: Int = Int(1)
  let _129: Int = Sub(high19.20, _128)
  let _46: Var({val: Some(Unit)}) = if (low17.18 <= _129) then {
    let _130: Int = Get arr15.16[low17.18]
    let _131: Unit = if (_130 <= pivot.21) then {
      let _132: Int = Int(0)
      let _133: Int = Int(0)
      let _134: Int = Get i.25[_133]
      let _135: Int = Int(1)
      let _136: Int = Add(_134, _135)
      let _137: Unit = Put i.25[_132] = _136
      let _138: Int = Int(0)
      let _139: Int = Get i.25[_138]
      Apply(swap1, [arr15.16, _139, low17.18, ])
    } else {
      Unit
    }
    let _140: Int = Int(1)
    let _141: Int = Add(low17.18, _140)
    Apply(l26, [_141, ])
  } else {
    Unit
  }
  let _47: Int = Int(0)
  let _48: Int = Int(0)
  let _49: Int = Get i.25[_48]
  let _50: Int = Int(1)
  let _51: Int = Add(_49, _50)
  let _53: Unit = Put i.25[_47] = _51
  let _54: Int = Int(0)
  let _55: Int = Get i.25[_54]
  let tmp.142: Int = Get arr15.16[_55]
  let _143: Int = Get arr15.16[high19.20]
  let _144: Unit = Put arr15.16[_55] = _143
  let _145: Unit = Put arr15.16[high19.20] = tmp.142
  let _57: Unit = Unit
  let _58: Int = Int(0)
  Get i.25[_58]
}
let rec quicksort59: Unit = (arr60.61: Array(Int), low62.63: Int, high64.65: Int) {
  let _66: Int = Int(1)
  let _67: Int = Sub(high64.65, _66)
  if (low62.63 <= _67) then {
    let pivot.146: Int = Get arr60.61[high64.65]
    let _147: Int = Int(1)
    let _148: Int = Int(1)
    let _149: Int = Sub(low62.63, _148)
    let i.150: Array(Int) = ExtApply(minimbt_create_array, [_147, _149, ])
    let rec l26.151: Var({val: Some(Unit)}) = (j27.152: Var({val: Some(Int)})) {
      let _153: Int = Int(1)
      let _154: Int = Sub(high64.65, _153)
      if (j27.152 <= _154) then {
        let _155: Int = Get arr60.61[j27.152]
        let _156: Unit = if (_155 <= pivot.146) then {
          let _157: Int = Int(0)
          let _158: Int = Int(0)
          let _159: Int = Get i.150[_158]
          let _160: Int = Int(1)
          let _161: Int = Add(_159, _160)
          let _162: Unit = Put i.150[_157] = _161
          let _163: Int = Int(0)
          let _164: Int = Get i.150[_163]
          Apply(swap1, [arr60.61, _164, j27.152, ])
        } else {
          Unit
        }
        let _165: Int = Int(1)
        let _166: Int = Add(j27.152, _165)
        Apply(l26.151, [_166, ])
      } else {
        Unit
      }
    }
    let _167: Var({val: Some(Unit)}) = Apply(l26.151, [low62.63, ])
    let _168: Int = Int(0)
    let _169: Int = Int(0)
    let _170: Int = Get i.150[_169]
    let _171: Int = Int(1)
    let _172: Int = Add(_170, _171)
    let _173: Unit = Put i.150[_168] = _172
    let _174: Int = Int(0)
    let _175: Int = Get i.150[_174]
    let _176: Unit = Apply(swap1, [arr60.61, _175, high64.65, ])
    let _177: Int = Int(0)
    let pi.68: Int = Get i.150[_177]
    let _69: Int = Int(1)
    let _70: Int = Sub(pi.68, _69)
    let _178: Int = Int(1)
    let _179: Int = Sub(_70, _178)
    let _72: Unit = if (low62.63 <= _179) then {
      let pi.180: Int = Apply(partition14, [arr60.61, low62.63, _70, ])
      let _181: Int = Int(1)
      let _182: Int = Sub(pi.180, _181)
      let _183: Unit = Apply(quicksort59, [arr60.61, low62.63, _182, ])
      let _184: Int = Int(1)
      let _185: Int = Add(pi.180, _184)
      Apply(quicksort59, [arr60.61, _185, _70, ])
    } else {
      Unit
    }
    let _73: Int = Int(1)
    let _74: Int = Add(pi.68, _73)
    let _186: Int = Int(1)
    let _187: Int = Sub(high64.65, _186)
    if (_74 <= _187) then {
      let pi.188: Int = Apply(partition14, [arr60.61, _74, high64.65, ])
      let _189: Int = Int(1)
      let _190: Int = Sub(pi.188, _189)
      let _191: Unit = Apply(quicksort59, [arr60.61, _74, _190, ])
      let _192: Int = Int(1)
      let _193: Int = Add(pi.188, _192)
      Apply(quicksort59, [arr60.61, _193, high64.65, ])
    } else {
      Unit
    }
  } else {
    Unit
  }
}
let rec main75: Var({val: Some(Unit)}) = () {
  let len.76: Int = ExtApply(minimbt_read_int, [])
  let _77: Int = Int(0)
  let arr.78: Array(Int) = ExtApply(minimbt_create_array, [len.76, _77, ])
  let rec input79: Var({val: Some(Unit)}) = (i80.81: Int) {
    let _82: Int = Int(1)
    let _83: Int = Sub(len.76, _82)
    if (i80.81 <= _83) then {
      let _84: Int = ExtApply(minimbt_read_int, [])
      let _86: Unit = Put arr.78[i80.81] = _84
      let _87: Int = Int(1)
      let _88: Int = Add(i80.81, _87)
      let _194: Int = Int(1)
      let _195: Int = Sub(len.76, _194)
      if (_88 <= _195) then {
        let _196: Int = ExtApply(minimbt_read_int, [])
        let _197: Unit = Put arr.78[_88] = _196
        let _198: Int = Int(1)
        let _199: Int = Add(_88, _198)
        Apply(input79, [_199, ])
      } else {
        Unit
      }
    } else {
      Unit
    }
  }
  let _89: Int = Int(0)
  let _200: Int = Int(1)
  let _201: Int = Sub(len.76, _200)
  let _91: Var({val: Some(Unit)}) = if (_89 <= _201) then {
    let _202: Int = ExtApply(minimbt_read_int, [])
    let _203: Unit = Put arr.78[_89] = _202
    let _204: Int = Int(1)
    let _205: Int = Add(_89, _204)
    Apply(input79, [_205, ])
  } else {
    Unit
  }
  let _92: Int = Int(0)
  let _93: Int = Int(1)
  let _94: Int = Sub(len.76, _93)
  let _206: Int = Int(1)
  let _207: Int = Sub(_94, _206)
  let _96: Unit = if (_92 <= _207) then {
    let pi.208: Int = Apply(partition14, [arr.78, _92, _94, ])
    let _209: Int = Int(1)
    let _210: Int = Sub(pi.208, _209)
    let _211: Unit = Apply(quicksort59, [arr.78, _92, _210, ])
    let _212: Int = Int(1)
    let _213: Int = Add(pi.208, _212)
    Apply(quicksort59, [arr.78, _213, _94, ])
  } else {
    Unit
  }
  let rec output97: Var({val: Some(Unit)}) = (i98.99: Int) {
    let _100: Int = Int(1)
    let _101: Int = Sub(len.76, _100)
    if (i98.99 <= _101) then {
      let _102: Int = Get arr.78[i98.99]
      let _104: Unit = ExtApply(minimbt_print_int, [_102, ])
      let _106: Unit = ExtApply(minimbt_print_endline, [])
      let _107: Int = Int(1)
      let _108: Int = Add(i98.99, _107)
      let _214: Int = Int(1)
      let _215: Int = Sub(len.76, _214)
      if (_108 <= _215) then {
        let _216: Int = Get arr.78[_108]
        let _217: Unit = ExtApply(minimbt_print_int, [_216, ])
        let _218: Unit = ExtApply(minimbt_print_endline, [])
        let _219: Int = Int(1)
        let _220: Int = Add(_108, _219)
        Apply(output97, [_220, ])
      } else {
        Unit
      }
    } else {
      Unit
    }
  }
  let _109: Int = Int(0)
  let _221: Int = Int(1)
  let _222: Int = Sub(len.76, _221)
  if (_109 <= _222) then {
    let _223: Int = Get arr.78[_109]
    let _224: Unit = ExtApply(minimbt_print_int, [_223, ])
    let _225: Unit = ExtApply(minimbt_print_endline, [])
    let _226: Int = Int(1)
    let _227: Int = Add(_109, _226)
    Apply(output97, [_227, ])
  } else {
    Unit
  }
}
Apply(main75, [])