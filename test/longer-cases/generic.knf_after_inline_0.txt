let rec main.33: Var({val: Some(Unit)}) = () {
  let _34: Int = Int(5)
  let _35: Int = Int(1)
  let arr.36: Array(Int) = ExtApply(minimbt_create_array, [_34, _35, ])
  let _37: Int = Int(0)
  let _38: Int = Int(1)
  let _40: Unit = Put arr.36[_37] = _38
  let _41: Int = Int(1)
  let _42: Int = Int(2)
  let _44: Unit = Put arr.36[_41] = _42
  let _45: Int = Int(2)
  let _46: Int = Int(3)
  let _48: Unit = Put arr.36[_45] = _46
  let _49: Int = Int(3)
  let _50: Int = Int(4)
  let _52: Unit = Put arr.36[_49] = _50
  let _53: Int = Int(4)
  let _54: Int = Int(5)
  let _56: Unit = Put arr.36[_53] = _54
  let _57: Int = Int(5)
  let rec do.97: Bool = (yield.98: Var({val: Some(Fun([Var({val: None})], Bool))})) {
    let rec next.99: Bool = (i.100: Var({val: Some(Int)})) {
      let _101: Int = Int(1)
      let _102: Int = Int(4)
      if (i.100 <= _102) then {
        let _103: Named("T") = Get arr.36[i.100]
        let _104: Bool = Apply(yield.98, [_103, ])
        let _105: Bool = Bool(true)
        if (_104 == _105) then {
          let _106: Int = Int(1)
          let _107: Int = Add(i.100, _106)
          Apply(next.99, [_107, ])
        } else {
          Bool(false)
        }
      } else {
        Bool(false)
      }
    }
    let _108: Int = Int(0)
    Apply(next.99, [_108, ])
  }
  let rec print_i.59: Unit = (x.61: Var({val: Some(Int)})) {
    ExtApply(minimbt_print_int, [x.61, ])
  }
  let rec yield.109: Bool = (x.110: Var({val: None})) {
    let _111: Unit = Apply(print_i.59, [x.110, ])
    Bool(true)
  }
  let rec do.112: Var({val: Some(Unit)}) = () {
    let _113: Bool = Apply(do.97, [yield.109, ])
    let _114: Bool = Bool(true)
    if (_113 == _114) then {
      Apply(do.112, [])
    } else {
      Unit
    }
  }
  let _63: Unit = Apply(do.112, [])
  let _64: Int = Int(6)
  let _65: Double = Double(0)
  let arr.66: Array(Double) = ExtApply(minimbt_create_float_array, [_64, _65, ])
  let _67: Int = Int(0)
  let _68: Double = Double(1)
  let _70: Unit = Put arr.66[_67] = _68
  let _71: Int = Int(1)
  let _72: Double = Double(2)
  let _74: Unit = Put arr.66[_71] = _72
  let _75: Int = Int(2)
  let _76: Double = Double(3)
  let _78: Unit = Put arr.66[_75] = _76
  let _79: Int = Int(3)
  let _80: Double = Double(4)
  let _82: Unit = Put arr.66[_79] = _80
  let _83: Int = Int(4)
  let _84: Double = Double(5)
  let _86: Unit = Put arr.66[_83] = _84
  let _87: Int = Int(5)
  let _88: Double = Double(6)
  let _90: Unit = Put arr.66[_87] = _88
  let _91: Int = Int(6)
  let rec do.115: Bool = (yield.116: Var({val: Some(Fun([Var({val: None})], Bool))})) {
    let rec next.117: Bool = (i.118: Var({val: Some(Int)})) {
      let _119: Int = Int(1)
      let _120: Int = Int(5)
      if (i.118 <= _120) then {
        let _121: Named("T") = Get arr.66[i.118]
        let _122: Bool = Apply(yield.116, [_121, ])
        let _123: Bool = Bool(true)
        if (_122 == _123) then {
          let _124: Int = Int(1)
          let _125: Int = Add(i.118, _124)
          Apply(next.117, [_125, ])
        } else {
          Bool(false)
        }
      } else {
        Bool(false)
      }
    }
    let _126: Int = Int(0)
    Apply(next.117, [_126, ])
  }
  let rec print_d.93: Unit = (x.95: Var({val: Some(Double)})) {
    let _96: Int = ExtApply(minimbt_int_of_float, [x.95, ])
    ExtApply(minimbt_print_int, [_96, ])
  }
  let rec yield.127: Bool = (x.128: Var({val: None})) {
    let _129: Unit = Apply(print_d.93, [x.128, ])
    Bool(true)
  }
  let rec do.130: Var({val: Some(Unit)}) = () {
    let _131: Bool = Apply(do.115, [yield.127, ])
    let _132: Bool = Bool(true)
    if (_131 == _132) then {
      Apply(do.130, [])
    } else {
      Unit
    }
  }
  Apply(do.130, [])
}
Apply(main.33, [])
