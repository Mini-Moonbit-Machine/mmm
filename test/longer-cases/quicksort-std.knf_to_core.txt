# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn sort_2.392 #f4 : fn(int32, int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f2, $f1 * @32)
    let %1: int32 = load int32 offset($f2, $f0 * @32)
    let %2: int32 = sub(%1, 1)
    let %3: bool = le(%0, %2)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let %4: int32 = load int32 offset($f2, $f0 * @32)
    let %5: int32 = load int32 offset($f2, $f1 * @32)
    let _ = store int32 offset($f2, $f0 * @32) <- %5
    let _ = store int32 offset($f2, $f1 * @32) <- %4
    let %8: int32 = load int32 offset($f3, 0 * @32)
    let %9: int32 = add(%8, 1)
    let _ = store int32 offset($f3, 0 * @32) <- %9
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn g.388 #f0 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
    .block #b6
    .block #b7
    .block #b8
  }
  .bb #b2 (int32) {
    let %0: int32 = add(1, $f2)
    let %1: bool = le(%0, $b2.0)
    br %1 b3() b4()
  }
  .bb #b3 () {
    let %2: int32 = load int32 offset($f1, $b2.0 * @32)
    let %3: int32 = sub($b2.0, 1)
    let %4: int32 = load int32 offset($f1, %3 * @32)
    let %5: int32 = sub(%4, 1)
    let %6: bool = le(%2, %5)
    br %6 b5() b6()
  }
  .bb #b4 () {
    jump b8(())
  }
  .bb #b5 () {
    let %7: int32 = sub($b2.0, 1)
    let %8: int32 = load int32 offset($f1, $b2.0 * @32)
    let %9: int32 = load int32 offset($f1, %7 * @32)
    let _ = store int32 offset($f1, $b2.0 * @32) <- %9
    let _ = store int32 offset($f1, %7 * @32) <- %8
    let %12: int32 = sub($b2.0, 1)
    jump b2(%12)
  }
  .bb #b6 () {
    jump b7(())
  }
  .bb #b7 (any) {
    jump b8($b7.0)
  }
  .bb #b8 (any) {
    return $b8.0
  }
}
.fn choose_pivot.391 #f5 : fn(array[int32], int32, int32) -> (int32, bool)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let %1: int32 = sub($f2, $f1)
    let %2: int32 = div(%1, 4)
    let %3: int32 = mul(%2, 2)
    let %4: int32 = add($f1, %3)
    let %5: bool = le(8, %1)
    br %5 b1() b2()
  }
  .bb #b1 () {
    let %6: int32 = div(%1, 4)
    let %7: int32 = mul(%6, 1)
    let %8: int32 = add($f1, %7)
    let %9: int32 = div(%1, 4)
    let %10: int32 = mul(%9, 3)
    let %11: int32 = add($f1, %10)
    let %12: int32 = sub(%1, 1)
    let %13: bool = le(50, %12)
    br %13 b3() b4()
  }
  .bb #b2 () {
    let %43: int32 = load int32 offset(f5.m0, 0 * @32)
    let %44: bool = eq(%43, 0)
    br %44 b12() b13()
  }
  .bb #b3 () {
    let %14: int32 = sub(%8, 1)
    let %15: int32 = add(%8, 1)
    let %16: unit = call f4(%14, %8, $f0, f5.m0)
    let %17: unit = call f4(%8, %15, $f0, f5.m0)
    let %18: unit = call f4(%14, %8, $f0, f5.m0)
    let %19: int32 = sub(%4, 1)
    let %20: int32 = add(%4, 1)
    let %21: unit = call f4(%19, %4, $f0, f5.m0)
    let %22: unit = call f4(%4, %20, $f0, f5.m0)
    let %23: unit = call f4(%19, %4, $f0, f5.m0)
    let %24: int32 = sub(%11, 1)
    let %25: int32 = add(%11, 1)
    let %26: unit = call f4(%24, %11, $f0, f5.m0)
    let %27: unit = call f4(%11, %25, $f0, f5.m0)
    let %28: unit = call f4(%24, %11, $f0, f5.m0)
    let %29: unit = call f4(%8, %4, $f0, f5.m0)
    let %30: unit = call f4(%4, %11, $f0, f5.m0)
    let %31: unit = call f4(%8, %4, $f0, f5.m0)
    let %32: int32 = load int32 offset(f5.m0, 0 * @32)
    let %33: bool = eq(%32, 0)
    br %33 b5() b6()
  }
  .bb #b4 () {
    let %36: unit = call f4(%8, %4, $f0, f5.m0)
    let %37: unit = call f4(%4, %11, $f0, f5.m0)
    let %38: unit = call f4(%8, %4, $f0, f5.m0)
    let %39: int32 = load int32 offset(f5.m0, 0 * @32)
    let %40: bool = eq(%39, 0)
    br %40 b8() b9()
  }
  .bb #b5 () {
    let _ = alloc <m1: (int32, bool) heap(2)> <- [0] = %4, [1] = true
    jump b7(f5.m1)
  }
  .bb #b6 () {
    let _ = alloc <m2: (int32, bool) heap(2)> <- [0] = %4, [1] = false
    jump b7(f5.m2)
  }
  .bb #b7 ((int32, bool)) {
    jump b11($b7.0)
  }
  .bb #b8 () {
    let _ = alloc <m3: (int32, bool) heap(2)> <- [0] = %4, [1] = true
    jump b10(f5.m3)
  }
  .bb #b9 () {
    let _ = alloc <m4: (int32, bool) heap(2)> <- [0] = %4, [1] = false
    jump b10(f5.m4)
  }
  .bb #b10 ((int32, bool)) {
    jump b11($b10.0)
  }
  .bb #b11 ((int32, bool)) {
    jump b15($b11.0)
  }
  .bb #b12 () {
    let _ = alloc <m5: (int32, bool) heap(2)> <- [0] = %4, [1] = true
    jump b14(f5.m5)
  }
  .bb #b13 () {
    let _ = alloc <m6: (int32, bool) heap(2)> <- [0] = %4, [1] = false
    jump b14(f5.m6)
  }
  .bb #b14 ((int32, bool)) {
    jump b15($b14.0)
  }
  .bb #b15 ((int32, bool)) {
    return $b15.0
  }
}
.fn aux.390 #f2 : fn(int32, array[int32], array[int32], int32, int32, array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
    .block #b6
    .block #b7
    .block #b8
    .block #b9
    .block #b10
    .block #b11
  }
  .bb #b2 (int32) {
    let %0: int32 = sub($f3, 2)
    let %1: bool = le($b2.0, %0)
    br %1 b3() b4()
  }
  .bb #b3 () {
    let %2: int32 = load int32 offset($f2, $b2.0 * @32)
    let %3: int32 = sub($f4, 1)
    let %4: bool = le(%2, %3)
    br %4 b5() b6()
  }
  .bb #b4 () {
    jump b11(())
  }
  .bb #b5 () {
    let %5: int32 = load int32 offset($f1, 0 * @32)
    let %6: bool = eq(%5, $b2.0)
    br %6 b7() b8()
  }
  .bb #b6 () {
    let %21: int32 = add($b2.0, 1)
    jump b2(%21)
  }
  .bb #b7 () {
    let %7: int32 = load int32 offset($f1, 0 * @32)
    let %8: int32 = add(%7, 1)
    let _ = store int32 offset($f1, 0 * @32) <- %8
    let %10: int32 = add($b2.0, 1)
    jump b2(%10)
  }
  .bb #b8 () {
    let %11: int32 = load int32 offset($f1, 0 * @32)
    let %12: int32 = load int32 offset($f2, %11 * @32)
    let %13: int32 = load int32 offset($f2, $b2.0 * @32)
    let _ = store int32 offset($f2, %11 * @32) <- %13
    let _ = store int32 offset($f2, $b2.0 * @32) <- %12
    let _ = store int32 offset($f5, 0 * @32) <- 0
    let %17: int32 = load int32 offset($f1, 0 * @32)
    let %18: int32 = add(%17, 1)
    let _ = store int32 offset($f1, 0 * @32) <- %18
    let %20: int32 = add($b2.0, 1)
    jump b2(%20)
  }
  .bb #b9 (any) {
    jump b10($b9.0)
  }
  .bb #b10 (any) {
    jump b11($b10.0)
  }
  .bb #b11 (any) {
    return $b11.0
  }
}
.fn quick_sort.393 #f6 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f2, $f1)
    let %1: bool = le(%0, 16)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: unit = call f1($f0, $f1, $f2)
    jump b3(%2)
  }
  .bb #b2 () {
    let %3: (int32, bool) = call f5($f0, $f1, $f2)
    let %4: int32 = load int32 field(%3, 0 * @(@32, @(@32, @32)))
    let %5: bool = load bool field(%3, 1 * @(@32, @(@32, @32)))
    let %6: (int32, bool) = call f3($f0, %4, $f1, $f2)
    let %7: int32 = load int32 field(%6, 0 * @(@32, @(@32, @32)))
    let %8: bool = load bool field(%6, 1 * @(@32, @(@32, @32)))
    let %9: unit = call f6($f0, $f1, %7)
    let %10: int32 = add(%7, 1)
    let %11: unit = call f6($f0, %10, $f2)
    jump b3(%11)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn main.394 #f7 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = 0
    jump b1(0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b10
  }
  .bb #b2 (int32) {
    let %2: int32 = sub(%0, 1)
    let %3: bool = le($b2.0, %2)
    br %3 b3() b4()
  }
  .bb #b3 () {
    let %4: int32 = ext_call minimbt_read_int()
    let _ = store int32 offset(f7.m0, $b2.0 * @32) <- %4
    let %6: int32 = add($b2.0, 1)
    jump b2(%6)
  }
  .bb #b4 () {
    let %7: unit = call f6(f7.m0, 0, %0)
    jump b5(f7.m0, 0, %0)
  }
  .loop #b5 pre #Some(b4) header #b6 {
    .block #b7
    .block #b8
    .block #b9
  }
  .bb #b6 (array[int32], int32, int32) {
    let %8: int32 = sub($b6.2, 1)
    let %9: bool = le($b6.1, %8)
    br %9 b7() b8()
  }
  .bb #b7 () {
    let %10: int32 = load int32 offset($b6.0, $b6.1 * @32)
    let %11: unit = ext_call minimbt_print_int(%10)
    let %12: unit = ext_call minimbt_print_endline()
    let %13: int32 = add($b6.1, 1)
    jump b6($b6.0, %13, $b6.2)
  }
  .bb #b8 () {
    jump b9(())
  }
  .bb #b9 (any) {
    return $b9.0
  }
  .bb #b10 (any) {
    return $b10.0
  }
}
.fn T$start #f16 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f7()
    return %0
  }
}
.fn insertion_sort.387 #f1 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f1, 1)
    jump b1(%0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32) {
    let %1: int32 = sub($f2, 1)
    let %2: bool = le($b2.0, %1)
    br %2 b3() b4()
  }
  .bb #b3 () {
    let %3: unit = call f0($b2.0, $f0, $f1)
    let %4: int32 = add($b2.0, 1)
    jump b2(%4)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (any) {
    return $b5.0
  }
}
.fn partition.389 #f3 : fn(array[int32], int32, int32, int32) -> (int32, bool)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f3, 1)
    let %1: int32 = load int32 offset($f0, $f1 * @32)
    let %2: int32 = load int32 offset($f0, %0 * @32)
    let _ = store int32 offset($f0, $f1 * @32) <- %2
    let _ = store int32 offset($f0, %0 * @32) <- %1
    let %5: int32 = sub($f3, 1)
    let %6: int32 = load int32 offset($f0, %5 * @32)
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = $f2
    let _ = alloc <m1: array[int32] heap(1)> <- [..] = 1
    let %9: unit = call f2($f2, f3.m0, $f0, $f3, %6, f3.m1)
    let %10: int32 = load int32 offset(f3.m0, 0 * @32)
    let %11: int32 = sub($f3, 1)
    let %12: int32 = load int32 offset($f0, %10 * @32)
    let %13: int32 = load int32 offset($f0, %11 * @32)
    let _ = store int32 offset($f0, %10 * @32) <- %13
    let _ = store int32 offset($f0, %11 * @32) <- %12
    let %16: int32 = load int32 offset(f3.m0, 0 * @32)
    let %17: int32 = load int32 offset(f3.m1, 0 * @32)
    let %18: bool = eq(%17, 1)
    br %18 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m2: (int32, bool) heap(2)> <- [0] = %16, [1] = true
    jump b3(f3.m2)
  }
  .bb #b2 () {
    let _ = alloc <m3: (int32, bool) heap(2)> <- [0] = %16, [1] = false
    jump b3(f3.m3)
  }
  .bb #b3 ((int32, bool)) {
    return $b3.0
  }
}
.thunk ::0 start
