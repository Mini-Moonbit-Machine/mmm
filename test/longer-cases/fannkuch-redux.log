// [Asm] pre_assigned_registers: FnParam(fref=f6, fpref=$f.4) -> v6, Insn(iref=%15) -> v21, FnParam(fref=f6, fpref=$f.0) -> v2, Insn(iref=%9) -> v16, Insn(iref=%16) -> v22, Insn(iref=%8) -> v15, FnParam(fref=f6, fpref=$f.2) -> v4, Insn(iref=%10) -> v17, Insn(iref=%14) -> v20, Self(fref=f6) -> v0, Insn(iref=%5) -> v31, Insn(iref=%0) -> v8, Insn(iref=%19) -> v25, Insn(iref=%4) -> v30, FnParam(fref=f6, fpref=$f.1) -> v3, Insn(iref=%3) -> v12, Insn(iref=%18) -> v24, FnParam(fref=f6, fpref=$f.3) -> v5, BlockParam(bref=b11, bpref=$b.0) -> v10, Insn(iref=%7) -> v14, Insn(iref=%22) -> v27, Insn(iref=%17) -> v23, Insn(iref=%23) -> v28, Insn(iref=%2) -> v11, Insn(iref=%1) -> v9, Insn(iref=%20) -> v29, Insn(iref=%11) -> v18, FnParam(fref=f6, fpref=$f.5) -> v7, Insn(iref=%21) -> v26, Insn(iref=%6) -> v13, Insn(iref=%12) -> v19
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%18)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%2), FnParam(fref=f6, fpref=$f.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Bool(val=true)])
// [Asm] defs: [v26]
// [Asm] live_set: [v2, v5, zero, v26, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v2, v5, zero, v27, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v5, zero, v13, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v5, zero, a0, v7, v4, v6, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v5, zero, a0, v7, v4, a1, v6, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, v5, zero, a0, v7, v4, a2, a1, v6, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v5, zero, a0, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v2, v5, v16, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v5, v16, zero, v7, v4, v17, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v2, v5, v46, zero, v7, v4, v17, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v2, v5, zero, v7, v4, v47, v17, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v2, v5, zero, v7, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v2, v5, zero, v42, v7, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v2, v5, zero, v7, v19, v4, v6, v43, v3]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v2, v5, zero, v20, v7, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v2, v5, v21, zero, v7, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v2, v5, v21, zero, v7, v4, v6, v39, v3]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v2, v40, v5, v21, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v2, v5, zero, v23, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v2, v5, zero, v7, v35, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v2, v5, zero, v7, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v24, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v24, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v3, v11, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v2, v5, v53, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of go_loop.607"];
// [Asm]   r0 [label="v26 ← a0", color=green];
// [Asm]   r38 [label="v24 ← a0", color=green];
// [Asm]   r33 [label="v39 ← a0", color=green];
// [Asm]   r9 [label="v13 ← a0", color=green];
// [Asm]   r26 [label="v46 ← a0", color=green];
// [Asm]   r6 [label="v6 ← s4", color=green];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r42 [label="v8 ← a0", color=green];
// [Asm]   r4 [label="v7 ← s2", color=green];
// [Asm]   r29 [label="v42 ← a1", color=green];
// [Asm]   r35 [label="v23 ← a0", color=green];
// [Asm]   r7 [label="v3 ← s5", color=green];
// [Asm]   r10 [label="a0", color=blue];
// [Asm]   r8 [label="v27 ← a0", color=green];
// [Asm]   r5 [label="v4 ← s3", color=green];
// [Asm]   r36 [label="v35 ← a0", color=green];
// [Asm]   r15 [label="a5", color=blue];
// [Asm]   r24 [label="v16 ← a0", color=green];
// [Asm]   r32 [label="v21 ← a1", color=green];
// [Asm]   r43 [label="v53 ← a1", color=green];
// [Asm]   r31 [label="v20 ← a1", color=green];
// [Asm]   r39 [label="v34 ← a1", color=green];
// [Asm]   r17 [label="a7", color=blue];
// [Asm]   r12 [label="a2", color=blue];
// [Asm]   r37 [label="v36 ← a0", color=green];
// [Asm]   r20 [label="t2", color=blue];
// [Asm]   r23 [label="v15 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v47 ← a0", color=green];
// [Asm]   r1 [label="v2 ← s0", color=green];
// [Asm]   r40 [label="v11 ← a0", color=green];
// [Asm]   r41 [label="v10 ← a0", color=green];
// [Asm]   r28 [label="v19 ← a0", color=green];
// [Asm]   r11 [label="a1", color=blue];
// [Asm]   r34 [label="v40 ← a0", color=green];
// [Asm]   r22 [label="t4", color=blue];
// [Asm]   r14 [label="a4", color=blue];
// [Asm]   r30 [label="v43 ← a1", color=green];
// [Asm]   r25 [label="v17 ← a1", color=green];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r16 [label="a6", color=blue];
// [Asm]   r18 [label="t0", color=blue];
// [Asm]   r19 [label="t1", color=blue];
// [Asm]   r21 [label="t3", color=blue];
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r2 -- r38;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r1 -- r26;
// [Asm]   r28 -- r32;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r6 -- r35;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r2 -- r43;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r28 -- r30;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r29;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r37;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r27;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r32;
// [Asm]   r7 -- r35;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r2 -- r34;
// [Asm]   r0 -- r6;
// [Asm]   r5 -- r31;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r5 -- r35;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r10 -- r18;
// [Asm]   r3 -- r39;
// [Asm]   r10 -- r12;
// [Asm]   r7 -- r38;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r5 -- r32;
// [Asm]   r10 -- r22;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r4 -- r25;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r32 -- r34;
// [Asm]   r2 -- r36;
// [Asm]   r1 -- r38;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r6 -- r23;
// [Asm]   r1 -- r35;
// [Asm]   r7 -- r42;
// [Asm]   r0 -- r4;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r5 -- r36;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r7 -- r29;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r43;
// [Asm]   r28 -- r31;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r3 -- r38;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r34;
// [Asm]   r7 -- r24;
// [Asm]   r6 -- r33;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r20;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r38;
// [Asm]   r6 -- r20;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r2 -- r40;
// [Asm]   r7 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r32 -- r33;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r29;
// [Asm]   r10 -- r15;
// [Asm]   r3 -- r29;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r36;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r4 -- r36;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r6 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r7 -- r16;
// [Asm]   r6 -- r38;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r35;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r12;
// [Asm]   r3 -- r23;
// [Asm]   r7 -- r14;
// [Asm]   r2 -- r27;
// [Asm]   r1 -- r24;
// [Asm]   r1 -- r42;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r39;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r38;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r6 -- r36;
// [Asm]   r1 -- r37;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r43;
// [Asm]   r7 -- r40;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r10 -- r19;
// [Asm]   r6 -- r29;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r32;
// [Asm]   r5 -- r42;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r42 -- r43;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r4 -- r40;
// [Asm]   r3 -- r18;
// [Asm]   r4 -- r42;
// [Asm]   r3 -- r34;
// [Asm]   r4 -- r35;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r6 -- r13;
// [Asm]   r7 -- r34;
// [Asm]   r2 -- r33;
// [Asm]   r4 -- r33;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r43;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r7 -- r10;
// [Asm]   r3 -- r40;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r6 -- r31;
// [Asm]   r28 -- r29;
// [Asm]   r3 -- r27;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r24;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r32;
// [Asm]   r5 -- r34;
// [Asm]   r10 -- r17;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r4 -- r37;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r25 -- r27;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r25 -- r26;
// [Asm]   r7 -- r30;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r26;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r40;
// [Asm]   r6 -- r24;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r7 -- r33;
// [Asm]   r5 -- r37;
// [Asm]   r6 -- r28;
// [Asm]   r6 -- r42;
// [Asm]   r7 -- r11;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r7 -- r39;
// [Asm]   r3 -- r14;
// [Asm]   r7 -- r43;
// [Asm]   r7 -- r31;
// [Asm]   r4 -- r39;
// [Asm]   r3 -- r36;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r38 -- r39;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r43;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r21;
// [Asm]   r5 -- r40;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v26-> 1:v2-> 2:v5-> 3:zero-> 4:v7-> 5:v4-> 6:v6-> 7:v3-> 8:v27-> 9:v13-> 10:a0-> 11:a1-> 12:a2-> 13:a3-> 14:a4-> 15:a5-> 16:a6-> 17:a7-> 18:t0-> 19:t1-> 20:t2-> 21:t3-> 22:t4-> 23:v15-> 24:v16-> 25:v17-> 26:v46-> 27:v47-> 28:v19-> 29:v42-> 30:v43-> 31:v20-> 32:v21-> 33:v39-> 34:v40-> 35:v23-> 36:v35-> 37:v36-> 38:v24-> 39:v34-> 40:v11-> 42:v8-> 43:v53-> 41:v10"
// [Asm]   comment = "v26<-a0;v24<-a0;v39<-a0;v13<-a0;v46<-a0;v6<-s4;v8<-a0;v7<-s2;v42<-a1;v23<-a0;v3<-s5;v27<-a0;v4<-s3;v35<-a0;v16<-a0;v21<-a1;v53<-a1;v20<-a1;v34<-a1;v36<-a0;v15<-a0;v47<-a0;v2<-s0;v11<-a0;v10<-a0;v19<-a0;v40<-a0;v43<-a1;v17<-a1;v5<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of go_loop.607"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v26, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   addi v27, v26, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v27, 0(v3) ->   sw a0, 0(s5)
// [Asm] subst   j .go_loop.607_2 ->   j .go_loop.607_2
// [Asm] subst   lw v13, 0(v6) ->   lw a0, 0(s4)
// [Asm] subst   sw v13, 0(v4) ->   sw a0, 0(s3)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v3 ->   mv a1, s5
// [Asm] subst   mv a2, v6 ->   mv a2, s4
// [Asm] subst   call move_perm1_forward.608 ->   call move_perm1_forward.608
// [Asm] subst   lw v16, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   lw v17, 0(v4) ->   lw a1, 0(s3)
// [Asm] subst   slliw v46, v16, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v47, v6, v46 ->   add a0, s4, a0
// [Asm] subst   sw v17, 0(v47) ->   sw a1, 0(a0)
// [Asm] subst   lw v19, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   slliw v42, v19, 2 ->   slliw a1, a0, 2
// [Asm] subst   add v43, v7, v42 ->   add a1, s2, a1
// [Asm] subst   lw v20, 0(v43) ->   lw a1, 0(a1)
// [Asm] subst   addi v21, v20, -1 ->   addi a1, a1, -1
// [Asm] subst   slliw v39, v19, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v40, v7, v39 ->   add a0, s2, a0
// [Asm] subst   sw v21, 0(v40) ->   sw a1, 0(a0)
// [Asm] subst   lw v23, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   slliw v35, v23, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v36, v7, v35 ->   add a0, s2, a0
// [Asm] subst   lw v24, 0(v36) ->   lw a0, 0(a0)
// [Asm] subst   li v34, 1 ->   li a1, 1
// [Asm] subst   bge v24, v34, .go_loop.607_7 ->   bge a0, a1, .go_loop.607_7
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(s1)
// [Asm] subst   j .go_loop.607_2 ->   j .go_loop.607_2
// [Asm] subst   lw v11, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   beq v11, v2, .go_loop.607_5 ->   beq a0, s0, .go_loop.607_5
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(s1)
// [Asm] subst   sw zero, 0(v3) ->   sw zero, 0(s5)
// [Asm] subst   j .go_loop.607_2 ->   j .go_loop.607_2
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v8, 0(v5) ->   lw a0, 0(s1)
// [Asm] subst   li v53, 1 ->   li a1, 1
// [Asm] subst   bne v8, v53, .go_loop.607_4 ->   bne a0, a1, .go_loop.607_4
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s5, a1
// [Asm] subst   mv v4, a2 ->   mv s3, a2
// [Asm] subst   mv v5, a3 ->   mv s1, a3
// [Asm] subst   mv v6, a4 ->   mv s4, a4
// [Asm] subst   mv v7, a5 ->   mv s2, a5
// [Asm] pre_assigned_registers: FnParam(fref=f4, fpref=$f.0) -> v2, Insn(iref=%15) -> v21, FnParam(fref=f4, fpref=$f.3) -> v5, Insn(iref=%9) -> v16, Insn(iref=%16) -> v22, Insn(iref=%8) -> v15, FnParam(fref=f4, fpref=$f.4) -> v6, Insn(iref=%10) -> v17, Insn(iref=%14) -> v20, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%5) -> v31, Insn(iref=%19) -> v25, Insn(iref=%0) -> v8, Insn(iref=%4) -> v30, Insn(iref=%3) -> v12, Insn(iref=%18) -> v24, BlockParam(bref=b11, bpref=$b.0) -> v10, FnParam(fref=f4, fpref=$f.5) -> v7, Insn(iref=%7) -> v14, Insn(iref=%22) -> v27, Insn(iref=%17) -> v23, Insn(iref=%23) -> v28, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%2) -> v11, Insn(iref=%1) -> v9, Insn(iref=%20) -> v29, Insn(iref=%11) -> v18, Self(fref=f4) -> v0, Insn(iref=%21) -> v26, Insn(iref=%6) -> v13, Insn(iref=%12) -> v19
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%18)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%2), FnParam(fref=f4, fpref=$f.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Bool(val=true)])
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v2, v5, v53, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v2, v5, zero, v26, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v2, v5, zero, v27, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v3, v11, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v5, zero, v13, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v5, zero, a0, v7, v4, v6, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v5, zero, a0, v7, v4, a1, v6, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, v5, zero, a0, v7, v4, a2, a1, v6, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v5, zero, a0, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v2, v5, v16, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v5, v16, zero, v7, v4, v17, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v2, v5, v46, zero, v7, v4, v17, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v2, v5, zero, v7, v4, v47, v17, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v2, v5, zero, v7, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v2, v5, zero, v42, v7, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v2, v5, zero, v7, v19, v4, v6, v43, v3]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v2, v5, zero, v20, v7, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v2, v5, v21, zero, v7, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v2, v5, v21, zero, v7, v4, v6, v39, v3]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v2, v40, v5, v21, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v2, v5, zero, v23, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v2, v5, zero, v7, v35, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v2, v5, zero, v7, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v24, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v24, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of go_loop.605"];
// [Asm]   r0 [label="v8 ← a0", color=green];
// [Asm]   r38 [label="v23 ← a0", color=green];
// [Asm]   r33 [label="v43 ← a1", color=green];
// [Asm]   r9 [label="a5", color=blue];
// [Asm]   r26 [label="v15 ← a0", color=green];
// [Asm]   r6 [label="v6 ← s4", color=green];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r42 [label="v34 ← a1", color=green];
// [Asm]   r4 [label="v7 ← s2", color=green];
// [Asm]   r29 [label="v46 ← a0", color=green];
// [Asm]   r35 [label="v21 ← a1", color=green];
// [Asm]   r7 [label="v3 ← s5", color=green];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r8 [label="v53 ← a1", color=green];
// [Asm]   r5 [label="v4 ← s3", color=green];
// [Asm]   r36 [label="v39 ← a0", color=green];
// [Asm]   r24 [label="t3", color=blue];
// [Asm]   r15 [label="v27 ← a0", color=green];
// [Asm]   r32 [label="v42 ← a1", color=green];
// [Asm]   r43 [label="v10 ← a0", color=green];
// [Asm]   r31 [label="v19 ← a0", color=green];
// [Asm]   r39 [label="v35 ← a0", color=green];
// [Asm]   r17 [label="a0", color=blue];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r37 [label="v40 ← a0", color=green];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="t2", color=blue];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v16 ← a0", color=green];
// [Asm]   r1 [label="v2 ← s0", color=green];
// [Asm]   r40 [label="v36 ← a0", color=green];
// [Asm]   r28 [label="v17 ← a1", color=green];
// [Asm]   r41 [label="v24 ← a0", color=green];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r34 [label="v20 ← a1", color=green];
// [Asm]   r22 [label="t1", color=blue];
// [Asm]   r14 [label="v26 ← a0", color=green];
// [Asm]   r30 [label="v47 ← a0", color=green];
// [Asm]   r25 [label="t4", color=blue];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r16 [label="v11 ← a0", color=green];
// [Asm]   r18 [label="v13 ← a0", color=green];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r21 [label="t0", color=blue];
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r2 -- r38;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r6 -- r35;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r28 -- r30;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r29;
// [Asm]   r3 -- r37;
// [Asm]   r27 -- r28;
// [Asm]   r2 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r27;
// [Asm]   r2 -- r41;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r7 -- r32;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r19;
// [Asm]   r4 -- r31;
// [Asm]   r2 -- r34;
// [Asm]   r0 -- r6;
// [Asm]   r5 -- r31;
// [Asm]   r31 -- r35;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r5 -- r35;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r39;
// [Asm]   r7 -- r38;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r5 -- r32;
// [Asm]   r1 -- r2;
// [Asm]   r41 -- r42;
// [Asm]   r4 -- r29;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r3 -- r17;
// [Asm]   r2 -- r36;
// [Asm]   r35 -- r37;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r6 -- r23;
// [Asm]   r1 -- r35;
// [Asm]   r0 -- r4;
// [Asm]   r7 -- r42;
// [Asm]   r4 -- r14;
// [Asm]   r5 -- r36;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r7 -- r29;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r38;
// [Asm]   r6 -- r41;
// [Asm]   r1 -- r34;
// [Asm]   r7 -- r24;
// [Asm]   r6 -- r33;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r20;
// [Asm]   r5 -- r19;
// [Asm]   r11 -- r12;
// [Asm]   r17 -- r24;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r18;
// [Asm]   r6 -- r22;
// [Asm]   r2 -- r11;
// [Asm]   r17 -- r25;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r38;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r2 -- r40;
// [Asm]   r7 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r29;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r36;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r25;
// [Asm]   r4 -- r36;
// [Asm]   r7 -- r41;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r6 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r7 -- r16;
// [Asm]   r12 -- r17;
// [Asm]   r31 -- r33;
// [Asm]   r6 -- r38;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r35;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r12;
// [Asm]   r3 -- r23;
// [Asm]   r7 -- r14;
// [Asm]   r2 -- r27;
// [Asm]   r1 -- r24;
// [Asm]   r1 -- r42;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r39;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r38;
// [Asm]   r5 -- r41;
// [Asm]   r17 -- r21;
// [Asm]   r4 -- r41;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r6 -- r36;
// [Asm]   r1 -- r37;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r7 -- r40;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r32;
// [Asm]   r5 -- r42;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r4 -- r40;
// [Asm]   r3 -- r18;
// [Asm]   r4 -- r42;
// [Asm]   r3 -- r34;
// [Asm]   r4 -- r35;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r6 -- r13;
// [Asm]   r7 -- r34;
// [Asm]   r2 -- r33;
// [Asm]   r4 -- r33;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r3 -- r40;
// [Asm]   r17 -- r22;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r6 -- r31;
// [Asm]   r28 -- r29;
// [Asm]   r3 -- r27;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r24;
// [Asm]   r31 -- r34;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r32;
// [Asm]   r5 -- r34;
// [Asm]   r17 -- r20;
// [Asm]   r10 -- r17;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r4 -- r37;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r7 -- r30;
// [Asm]   r4 -- r30;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r26;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r40;
// [Asm]   r6 -- r24;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r17 -- r23;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r8;
// [Asm]   r7 -- r33;
// [Asm]   r5 -- r37;
// [Asm]   r6 -- r28;
// [Asm]   r6 -- r42;
// [Asm]   r7 -- r11;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r41;
// [Asm]   r6 -- r17;
// [Asm]   r7 -- r39;
// [Asm]   r3 -- r14;
// [Asm]   r7 -- r31;
// [Asm]   r4 -- r39;
// [Asm]   r3 -- r36;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r31 -- r32;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r5 -- r40;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   comment = "0:v8-> 1:v2-> 2:v5-> 3:zero-> 4:v7-> 5:v4-> 6:v6-> 7:v3-> 8:v53-> 9:a5-> 17:a0-> 10:a4-> 11:a2-> 12:a1-> 13:a3-> 19:a6-> 20:a7-> 21:t0-> 22:t1-> 23:t2-> 24:t3-> 25:t4-> 14:v26-> 15:v27-> 16:v11-> 18:v13-> 26:v15-> 27:v16-> 28:v17-> 29:v46-> 30:v47-> 31:v19-> 32:v42-> 33:v43-> 34:v20-> 35:v21-> 36:v39-> 37:v40-> 38:v23-> 39:v35-> 40:v36-> 41:v24-> 42:v34-> 43:v10"
// [Asm]   comment = "v8<-a0;v23<-a0;v43<-a1;v15<-a0;v6<-s4;v34<-a1;v7<-s2;v46<-a0;v21<-a1;v3<-s5;v53<-a1;v4<-s3;v39<-a0;v27<-a0;v42<-a1;v10<-a0;v19<-a0;v35<-a0;v40<-a0;v16<-a0;v2<-s0;v36<-a0;v17<-a1;v24<-a0;v20<-a1;v26<-a0;v47<-a0;v5<-s1;v11<-a0;v13<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of go_loop.605"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v8, 0(v5) ->   lw a0, 0(s1)
// [Asm] subst   li v53, 1 ->   li a1, 1
// [Asm] subst   bne v8, v53, .go_loop.605_4 ->   bne a0, a1, .go_loop.605_4
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s5, a1
// [Asm] subst   mv v4, a2 ->   mv s3, a2
// [Asm] subst   mv v5, a3 ->   mv s1, a3
// [Asm] subst   mv v6, a4 ->   mv s4, a4
// [Asm] subst   mv v7, a5 ->   mv s2, a5
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(s1)
// [Asm] subst   j .go_loop.605_2 ->   j .go_loop.605_2
// [Asm] subst   lw v26, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   addi v27, v26, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v27, 0(v3) ->   sw a0, 0(s5)
// [Asm] subst   j .go_loop.605_2 ->   j .go_loop.605_2
// [Asm] subst   lw v11, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   beq v11, v2, .go_loop.605_5 ->   beq a0, s0, .go_loop.605_5
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(s1)
// [Asm] subst   sw zero, 0(v3) ->   sw zero, 0(s5)
// [Asm] subst   j .go_loop.605_2 ->   j .go_loop.605_2
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v13, 0(v6) ->   lw a0, 0(s4)
// [Asm] subst   sw v13, 0(v4) ->   sw a0, 0(s3)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v3 ->   mv a1, s5
// [Asm] subst   mv a2, v6 ->   mv a2, s4
// [Asm] subst   call move_perm1_forward.606 ->   call move_perm1_forward.606
// [Asm] subst   lw v16, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   lw v17, 0(v4) ->   lw a1, 0(s3)
// [Asm] subst   slliw v46, v16, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v47, v6, v46 ->   add a0, s4, a0
// [Asm] subst   sw v17, 0(v47) ->   sw a1, 0(a0)
// [Asm] subst   lw v19, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   slliw v42, v19, 2 ->   slliw a1, a0, 2
// [Asm] subst   add v43, v7, v42 ->   add a1, s2, a1
// [Asm] subst   lw v20, 0(v43) ->   lw a1, 0(a1)
// [Asm] subst   addi v21, v20, -1 ->   addi a1, a1, -1
// [Asm] subst   slliw v39, v19, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v40, v7, v39 ->   add a0, s2, a0
// [Asm] subst   sw v21, 0(v40) ->   sw a1, 0(a0)
// [Asm] subst   lw v23, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   slliw v35, v23, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v36, v7, v35 ->   add a0, s2, a0
// [Asm] subst   lw v24, 0(v36) ->   lw a0, 0(a0)
// [Asm] subst   li v34, 1 ->   li a1, 1
// [Asm] subst   bge v24, v34, .go_loop.605_7 ->   bge a0, a1, .go_loop.605_7
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v35, FnParam(fref=f8, fpref=$f.0) -> v2, Insn(iref=%41) -> v76, Insn(iref=%33) -> v69, Insn(iref=%63) -> v60, Insn(iref=%8) -> v24, Insn(iref=%10) -> v26, Insn(iref=%27) -> v44, Insn(iref=%25) -> v42, Insn(iref=%39) -> v74, BlockParam(bref=b18, bpref=$b.0) -> v28, Insn(iref=%59) -> v56, Insn(iref=%4) -> v91, Mem(fref=f8, mref=m8) -> v5, Insn(iref=%56) -> v53, Insn(iref=%49) -> v85, Insn(iref=%42) -> v77, Insn(iref=%65) -> v62, Mem(fref=f8, mref=m0) -> v8, Insn(iref=%68) -> v66, Mem(fref=f8, mref=m7) -> v15, Insn(iref=%26) -> v43, Insn(iref=%31) -> v67, Insn(iref=%64) -> v61, BlockParam(bref=b22, bpref=$b.0) -> v37, Insn(iref=%38) -> v73, Insn(iref=%16) -> v29, Mem(fref=f8, mref=m6) -> v3, Insn(iref=%53) -> v51, Mem(fref=f8, mref=m4) -> v4, Insn(iref=%60) -> v57, Insn(iref=%67) -> v65, Insn(iref=%5) -> v21, Mem(fref=f8, mref=m1) -> v10, Insn(iref=%19) -> v39, Mem(fref=f8, mref=m19) -> v9, Insn(iref=%13) -> v33, Insn(iref=%7) -> v23, Insn(iref=%55) -> v52, Insn(iref=%66) -> v64, Insn(iref=%23) -> v40, Insn(iref=%48) -> v84, Insn(iref=%20) -> v87, Mem(fref=f8, mref=m3) -> v14, Mem(fref=f8, mref=m2) -> v12, Insn(iref=%34) -> v70, Mem(fref=f8, mref=m18) -> v13, BlockParam(bref=b31, bpref=$b.0) -> v83, BlockParam(bref=b2, bpref=$b.0) -> v18, Mem(fref=f8, mref=m5) -> v11, Mem(fref=f8, mref=m17) -> v6, Insn(iref=%50) -> v86, Insn(iref=%14) -> v34, Insn(iref=%51) -> v49, Mem(fref=f8, mref=m16) -> v7, Insn(iref=%52) -> v50, Mem(fref=f8, mref=m20) -> v16, Insn(iref=%44) -> v79, Insn(iref=%32) -> v68, Insn(iref=%58) -> v55, BlockParam(bref=b6, bpref=$b.0) -> v32, Insn(iref=%1) -> v19, Insn(iref=%11) -> v27, Insn(iref=%57) -> v54, Insn(iref=%6) -> v22, Insn(iref=%35) -> v71, Insn(iref=%62) -> v59, BlockParam(bref=b32, bpref=$b.0) -> v63, BlockParam(bref=b29, bpref=$b.0) -> v31, Insn(iref=%28) -> v46, Insn(iref=%46) -> v81, Insn(iref=%9) -> v25, Insn(iref=%24) -> v41, Insn(iref=%37) -> v72, Insn(iref=%45) -> v80, Insn(iref=%29) -> v47, Insn(iref=%47) -> v82, Insn(iref=%0) -> v17, Insn(iref=%61) -> v58, Insn(iref=%18) -> v38, Insn(iref=%3) -> v90, BlockParam(bref=b5, bpref=$b.0) -> v36, Insn(iref=%22) -> v89, Insn(iref=%17) -> v30, Insn(iref=%2) -> v20, Insn(iref=%43) -> v78, Insn(iref=%30) -> v48, BlockParam(bref=b30, bpref=$b.0) -> v45, Insn(iref=%21) -> v88, Self(fref=f8) -> v0, Insn(iref=%40) -> v75
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%28), Insn(iref=%29)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b22, bpref=$b.0), Insn(iref=%18)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%16)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b2, bpref=$b.0), Insn(iref=%1)])
// [Asm] defs: [v37]
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v37, v4, v12, s11, v28, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v37 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v18, zero, v8, v19, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v18, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v36]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, v12, s11, v28, zero, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v11, v14, v10, a0, v12, s11, v28, zero, v8, v4, v3]
// [Asm] move_origin: [v28]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v11, v14, v10, a0, a1, v12, s11, v28, zero, v8, v4, v3]
// [Asm] move_origin: [v12]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v11, v14, v10, a0, v12, s11, v28, zero, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v40]
// [Asm] live_set: [v2, v11, v14, v10, v12, s11, v28, zero, v8, v4, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, v12, s11, v28, zero, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, v12, s11, v28, zero, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [v42]
// [Asm] live_set: [v2, v11, v14, v10, v42, v12, s11, v28, zero, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v11, v14, v10, v42, v7, v12, v28, zero, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v11, v14, v10, v42, v7, s11, v12, v28, zero, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, v7, s11, v12, v28, zero, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, v7, s11, v12, v28, zero, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v11, v14, v10, a0, s11, v12, v28, zero, v8, v4, v3]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v11, v14, v10, a0, a1, s11, v12, v28, zero, v8, v4, v3]
// [Asm] move_origin: [v10]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, v11, v14, v10, a0, a2, a1, s11, v12, v28, zero, v8, v4, v3]
// [Asm] move_origin: [v14]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v11, v14, v10, zero, a0, v8, v4, s11, v12, v28, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v44]
// [Asm] live_set: [v3, v11, v14, v10, zero, v8, v4, s11, v12, v28, v44, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v14, v10, zero, v8, v4, s11, v12, v28, v44, v2]
// [Asm] move_origin: []
// [Asm] defs: [v45]
// [Asm] live_set: [v3, v11, v14, v10, zero, v45, v8, v4, s11, v12, v28, v2]
// [Asm] move_origin: [v44]
// [Asm] defined: v45 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v11, v4, s11, v31]
// [Asm] move_origin: [zero]
// [Asm] defined: v31 is X
// [Asm] defs: [v161]
// [Asm] live_set: [v161, zero, v8, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v161 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v10, zero, v8, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v10, zero, v8, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [v159]
// [Asm] live_set: [v10, zero, v159, v8, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v159 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v10, zero, v8, v12, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v10, zero, v8, v12, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v10, zero, v8, v12, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v10, zero, v8, v12, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v14, v10, zero, v8, v12, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v10, zero, v8, v12, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v14, v10, zero, v8, v4, v12, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v14, v10, zero, v8, v4, v12, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v10, zero, v8, v4, v12, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v14, v10, zero, v8, v4, v12, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v14, v10, zero, v8, v4, v12, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v10, zero, v8, v4, v12, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v15, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v15, v12, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v15, v12, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [v3, v11, v14, v46, v10, zero, v8, v4, s11, v12, v28, v2]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v3, v11, v14, v46, v10, zero, v8, v4, v47, s11, v12, v28, v2]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v14, v10, zero, v8, v4, s11, v12, v28, v2]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] move_origin: [v15]
// [Asm] defined: v28 is X
// [Asm] defs: [v98]
// [Asm] live_set: [v3, v11, v14, v10, v37, v12, s11, v28, v98, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v98 is X
// [Asm] defs: [v99]
// [Asm] live_set: [v3, v11, v14, v10, v37, v12, s11, v28, v99, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v99 is X
// [Asm] defs: [v87]
// [Asm] live_set: [v3, v11, v14, v87, v10, v37, v12, s11, v28, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v87 is X
// [Asm] defs: [v96]
// [Asm] live_set: [v3, v11, v14, v87, v10, v37, v12, s11, v28, v96, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v96 is X
// [Asm] defs: [v97]
// [Asm] live_set: [v3, v11, v14, v87, v10, v37, v12, s11, v28, zero, v97, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v97 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v37, v12, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defs: [v89]
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v89, v3]
// [Asm] move_origin: []
// [Asm] defined: v89 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v37, v4, v12, s11, v28, v3]
// [Asm] move_origin: [v89]
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v37, v4, v12, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v164]
// [Asm] live_set: [v164, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v164 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, s11, zero, v8]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v2, v18, s11, zero, v8]
// [Asm] move_origin: [zero]
// [Asm] defined: v18 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v11, s11, v33]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [s11, v34, v33]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v34, v33]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v34, v33]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v34]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v36]
// [Asm] live_set: [v36]
// [Asm] move_origin: [v5]
// [Asm] defined: v36 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v3, v11, v14, v10, v37, s11, v12, v28, zero, v8, v4, v38, v2]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v37, v4, v12, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defs: [v64]
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v64, v3]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v65, v12, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] move_origin: [v28]
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v2, v11, v14, v10, zero, v29, v8, v4, v12, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v152]
// [Asm] live_set: [v2, v11, v14, v10, zero, v29, v8, v152, v4, v12, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: v152 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defs: [v93]
// [Asm] live_set: [v2, v93, s11, v18, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v93 is X
// [Asm] defs: [v94]
// [Asm] live_set: [v2, v94, s11, v18, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v94 is X
// [Asm] defs: []
// [Asm] live_set: [v2, s11, v18, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v91]
// [Asm] live_set: [v2, v91, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v91 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v2, v18, s11, zero, v8]
// [Asm] move_origin: [v91]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v18, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v11, v32, v4, s11]
// [Asm] move_origin: [v31]
// [Asm] defined: v32 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v3, v11, v14, v49, v10, v12, s11, v28, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v3, v11, v14, v49, v10, v12, s11, v28, zero, v50, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v3, v11, v14, v49, v10, v12, s11, v28, v51, zero, v50, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: [v137]
// [Asm] live_set: [v3, v11, v14, v49, v10, v12, s11, v28, v51, zero, v50, v8, v4, v137, v2]
// [Asm] move_origin: []
// [Asm] defined: v137 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v3, v11, v14, v49, v10, v12, s11, v52, v28, v51, zero, v50, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: [v135]
// [Asm] live_set: [v3, v11, v14, v49, v10, v12, s11, v52, v28, v51, zero, v50, v8, v4, v135, v2]
// [Asm] move_origin: []
// [Asm] defined: v135 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v3, v11, v14, v49, v10, v53, v12, s11, v28, v51, zero, v50, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v3, v11, v14, v49, v10, v12, s11, v28, zero, v50, v8, v4, v54, v2]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [v132]
// [Asm] live_set: [v3, v132, v11, v14, v49, v10, v12, s11, v28, zero, v50, v8, v4, v54, v2]
// [Asm] move_origin: []
// [Asm] defined: v132 is X
// [Asm] defs: [v55]
// [Asm] live_set: [v3, v11, v14, v10, v49, v12, s11, v28, zero, v50, v8, v4, v55, v2]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: [v130]
// [Asm] live_set: [v3, v11, v14, v10, v49, v12, s11, v28, v130, zero, v50, v8, v4, v55, v2]
// [Asm] move_origin: []
// [Asm] defined: v130 is X
// [Asm] defs: [v56]
// [Asm] live_set: [v3, v11, v14, v10, v49, v12, s11, v28, v56, zero, v50, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v3, v11, v14, v10, v49, v12, s11, v28, zero, v8, v4, v57, v2]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v3, v11, v14, v58, v10, v12, s11, v28, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v58 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v14, v10, v12, s11, v28, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v3, v11, v14, v10, v12, v28, v9, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v11, v14, v10, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v127]
// [Asm] live_set: [v3, v11, v14, v10, v127, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v127 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v14, v10, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v11, v14, v16, v10, v12, v28, v9, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v11, v14, v16, v10, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v14, v16, v10, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v14, v16, v10, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v11, v14, v16, v10, a0, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v11, v14, v16, v10, a0, a1, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm] move_origin: [v28]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v3, v11, v14, v10, a0, a2, a1, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm] move_origin: [v16]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v3, v11, v14, v10, a0, a2, a1, v12, s11, a3, v28, zero, v8, v4, v2]
// [Asm] move_origin: [v9]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v3, v11, v14, v10, a0, a2, a1, v12, s11, a3, v28, zero, a4, v8, v4, v2]
// [Asm] move_origin: [v8]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v3, v11, v14, v10, a5, a0, a2, a1, v12, s11, a3, v28, zero, a4, v8, v4, v2]
// [Asm] move_origin: [v12]
// [Asm] defined: a5 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v11, v14, v10, zero, a0, v8, v4, v12, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v62]
// [Asm] live_set: [v2, v11, v62, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v62 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v62, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defs: [v63]
// [Asm] live_set: [v2, v11, v63, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] move_origin: [v62]
// [Asm] defined: v63 is X
// [Asm] defs: [v84]
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v84, v4, v12, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: v84 is X
// [Asm] defs: [v85]
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v85, v4, v12, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: v85 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] move_origin: [v28]
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defs: [v67]
// [Asm] live_set: [v3, v11, v14, v10, v67, v12, s11, v28, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v14, v10, v12, s11, v28, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v69]
// [Asm] live_set: [v3, v11, v14, v69, v10, v12, s11, v28, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: [v70]
// [Asm] live_set: [v3, v11, v14, v69, v10, v12, s11, v28, zero, v8, v4, v70, v2]
// [Asm] move_origin: []
// [Asm] defined: v70 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v3, v11, v14, v71, v69, v10, v12, s11, v28, zero, v8, v4, v70, v2]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: [v116]
// [Asm] live_set: [v3, v11, v116, v14, v71, v69, v10, v12, s11, v28, zero, v8, v4, v70, v2]
// [Asm] move_origin: []
// [Asm] defined: v116 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v3, v11, v69, v14, v71, v10, v12, s11, v28, v72, zero, v8, v4, v70, v2]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: [v114]
// [Asm] live_set: [v3, v11, v69, v14, v71, v10, v114, v12, s11, v28, v72, zero, v8, v4, v70, v2]
// [Asm] move_origin: []
// [Asm] defined: v114 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v3, v11, v69, v14, v71, v10, v12, s11, v28, v73, zero, v8, v4, v70, v2]
// [Asm] move_origin: []
// [Asm] defined: v73 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v3, v11, v69, v14, v10, v12, s11, v28, zero, v8, v4, v70, v74, v2]
// [Asm] move_origin: []
// [Asm] defined: v74 is X
// [Asm] defs: [v111]
// [Asm] live_set: [v3, v11, v69, v14, v10, v111, v12, s11, v28, zero, v8, v4, v70, v74, v2]
// [Asm] move_origin: []
// [Asm] defined: v111 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v3, v11, v69, v14, v10, v12, s11, v28, v75, zero, v8, v4, v70, v2]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: [v109]
// [Asm] live_set: [v3, v11, v69, v14, v10, v12, s11, v28, v109, v75, zero, v8, v4, v70, v2]
// [Asm] move_origin: []
// [Asm] defined: v109 is X
// [Asm] defs: [v76]
// [Asm] live_set: [v3, v76, v11, v69, v14, v10, v12, s11, v28, zero, v8, v4, v70, v2]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: [v77]
// [Asm] live_set: [v3, v11, v14, v69, v10, v12, s11, v28, zero, v77, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v77 is X
// [Asm] defs: [v78]
// [Asm] live_set: [v3, v11, v14, v10, v78, v12, s11, v28, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v78 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v14, v10, v12, s11, v28, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v11, v14, v10, v12, v28, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v11, v14, v10, v12, s11, v28, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v106]
// [Asm] live_set: [v3, v11, v14, v10, v12, s11, v28, v106, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v106 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v14, v10, v12, s11, v28, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v11, v14, v10, v13, v12, v28, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v11, v14, v10, v13, v12, s11, v28, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v14, v10, v13, v12, s11, v28, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v14, v10, v13, v12, s11, v28, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v11, v14, v10, a0, v13, v12, s11, v28, zero, v8, v4, v6, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v11, v14, v10, a0, v13, a1, v12, s11, v28, zero, v8, v4, v6, v2]
// [Asm] move_origin: [v28]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v3, v11, v14, v10, a0, a2, a1, v12, s11, v28, zero, v8, v4, v6, v2]
// [Asm] move_origin: [v13]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v3, v11, v14, v10, a0, a2, a1, v12, s11, a3, v28, zero, v8, v4, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v3, v11, v14, v10, a0, a2, a1, v12, s11, a3, v28, zero, a4, v8, v4, v2]
// [Asm] move_origin: [v8]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v3, v11, v14, v10, a5, a0, a2, a1, v12, s11, a3, v28, zero, a4, v8, v4, v2]
// [Asm] move_origin: [v12]
// [Asm] defined: a5 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v11, v14, v10, zero, a0, v8, v4, v12, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v82]
// [Asm] live_set: [v2, v11, v14, v82, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v82 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v82, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defs: [v83]
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v83, v12, s11, v28, v3]
// [Asm] move_origin: [v82]
// [Asm] defined: v83 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of fannkuch.600"];
// [Asm]   r0 [label="v37 ← a0", color=green];
// [Asm]   r46 [label="v34 ← a1", color=green];
// [Asm]   r33 [label="v161 ← a0", color=green];
// [Asm]   r59 [label="v50 ← a1", color=green];
// [Asm]   r76 [label="v63 ← a0", color=green];
// [Asm]   r9 [label="s11", color=blue];
// [Asm]   r26 [label="t4", color=blue];
// [Asm]   r86 [label="v73 ← a3", color=green];
// [Asm]   r44 [label="v164 ← a0", color=green];
// [Asm]   r53 [label="v152 ← a1", color=green];
// [Asm]   r56 [label="v91 ← a0", color=green];
// [Asm]   r10 [label="v28 ← s7", color=green];
// [Asm]   r5 [label="zero", color=blue];
// [Asm]   r54 [label="v93 ← a0", color=green];
// [Asm]   r24 [label="t2", color=blue];
// [Asm]   r43 [label="v89 ← a0", color=green];
// [Asm]   r88 [label="v111 ← a3", color=green];
// [Asm]   r80 [label="v69 ← a0", color=green];
// [Asm]   r31 [label="v45 ← a0", color=green];
// [Asm]   r39 [label="v99 ← a1", color=green];
// [Asm]   r17 [label="a3", color=blue];
// [Asm]   r52 [label="v29 ← a0", color=green];
// [Asm]   r65 [label="v54 ← a2", color=green];
// [Asm]   r79 [label="v67 ← a0", color=green];
// [Asm]   r20 [label="a6", color=blue];
// [Asm]   r61 [label="v137 ← a3", color=green];
// [Asm]   r23 [label="t1", color=blue];
// [Asm]   r3 [label="v14 ← s2", color=green];
// [Asm]   r82 [label="v71 ← a2", color=green];
// [Asm]   r67 [label="v55 ← a2", color=green];
// [Asm]   r77 [label="v84 ← a0", color=green];
// [Asm]   r27 [label="v40 ← a0", color=green];
// [Asm]   r75 [label="v62 ← a0", color=green];
// [Asm]   r62 [label="v52 ← a3", color=green];
// [Asm]   r40 [label="v87 ← a1", color=green];
// [Asm]   r11 [label="v3 ← s8", color=green];
// [Asm]   r58 [label="v49 ← a0", color=green];
// [Asm]   r34 [label="v159 ← a0", color=green];
// [Asm]   r83 [label="v116 ← a3", color=green];
// [Asm]   r14 [label="a0", color=blue];
// [Asm]   r51 [label="v65 ← a0", color=green];
// [Asm]   r96 [label="v13 ← a2", color=green];
// [Asm]   r78 [label="v85 ← a0", color=green];
// [Asm]   r55 [label="v94 ← a0", color=green];
// [Asm]   r16 [label="a2", color=blue];
// [Asm]   r21 [label="a7", color=blue];
// [Asm]   r60 [label="v51 ← a2", color=green];
// [Asm]   r73 [label="v127 ← a0", color=green];
// [Asm]   r93 [label="v78 ← a0", color=green];
// [Asm]   r38 [label="v98 ← a1", color=green];
// [Asm]   r72 [label="v9 ← a3", color=green];
// [Asm]   r87 [label="v74 ← a2", color=green];
// [Asm]   r85 [label="v114 ← a4", color=green];
// [Asm]   r47 [label="v5 ← a2", color=green];
// [Asm]   r6 [label="v8 ← s4", color=green];
// [Asm]   r13 [label="v18 ← a1", color=green];
// [Asm]   r42 [label="v97 ← a2", color=green];
// [Asm]   r4 [label="v10 ← s3", color=green];
// [Asm]   r29 [label="v7 ← a1", color=green];
// [Asm]   r95 [label="v106 ← a0", color=green];
// [Asm]   r35 [label="v15 ← a0", color=green];
// [Asm]   r7 [label="v4 ← s5", color=green];
// [Asm]   r64 [label="v53 ← a3", color=green];
// [Asm]   r8 [label="v12 ← s6", color=green];
// [Asm]   r36 [label="v46 ← a0", color=green];
// [Asm]   r66 [label="v132 ← a3", color=green];
// [Asm]   r32 [label="v31 ← a0", color=green];
// [Asm]   r15 [label="a1", color=blue];
// [Asm]   r49 [label="v38 ← a1", color=green];
// [Asm]   r74 [label="v16 ← a2", color=green];
// [Asm]   r57 [label="v32 ← a0", color=green];
// [Asm]   r68 [label="v130 ← a3", color=green];
// [Asm]   r98 [label="v83 ← a0", color=green];
// [Asm]   r91 [label="v76 ← a2", color=green];
// [Asm]   r70 [label="v57 ← a1", color=green];
// [Asm]   r12 [label="v19 ← a0", color=green];
// [Asm]   r48 [label="v36 ← a0", color=green];
// [Asm]   r37 [label="v47 ← a1", color=green];
// [Asm]   r1 [label="v2 ← s0", color=green];
// [Asm]   r28 [label="v42 ← a0", color=green];
// [Asm]   r41 [label="v96 ← a2", color=green];
// [Asm]   r71 [label="v58 ← a0", color=green];
// [Asm]   r69 [label="v56 ← a2", color=green];
// [Asm]   r22 [label="t0", color=blue];
// [Asm]   r84 [label="v72 ← a3", color=green];
// [Asm]   r50 [label="v64 ← a0", color=green];
// [Asm]   r89 [label="v75 ← a2", color=green];
// [Asm]   r30 [label="v44 ← a0", color=green];
// [Asm]   r92 [label="v77 ← a1", color=green];
// [Asm]   r45 [label="v33 ← a0", color=green];
// [Asm]   r25 [label="t3", color=blue];
// [Asm]   r63 [label="v135 ← a4", color=green];
// [Asm]   r2 [label="v11 ← s1", color=green];
// [Asm]   r18 [label="a4", color=blue];
// [Asm]   r19 [label="a5", color=blue];
// [Asm]   r90 [label="v109 ← a3", color=green];
// [Asm]   r97 [label="v82 ← a0", color=green];
// [Asm]   r81 [label="v70 ← a1", color=green];
// [Asm]   r94 [label="v6 ← a3", color=green];
// [Asm]   r10 -- r64;
// [Asm]   r5 -- r69;
// [Asm]   r2 -- r38;
// [Asm]   r6 -- r70;
// [Asm]   r15 -- r94;
// [Asm]   r2 -- r78;
// [Asm]   r10 -- r53;
// [Asm]   r11 -- r78;
// [Asm]   r11 -- r35;
// [Asm]   r8 -- r36;
// [Asm]   r6 -- r68;
// [Asm]   r6 -- r88;
// [Asm]   r4 -- r90;
// [Asm]   r3 -- r9;
// [Asm]   r2 -- r91;
// [Asm]   r9 -- r78;
// [Asm]   r7 -- r78;
// [Asm]   r5 -- r65;
// [Asm]   r3 -- r86;
// [Asm]   r2 -- r51;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r70;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r62;
// [Asm]   r2 -- r41;
// [Asm]   r7 -- r32;
// [Asm]   r1 -- r68;
// [Asm]   r9 -- r73;
// [Asm]   r9 -- r14;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r62;
// [Asm]   r6 -- r69;
// [Asm]   r8 -- r95;
// [Asm]   r5 -- r35;
// [Asm]   r10 -- r98;
// [Asm]   r11 -- r80;
// [Asm]   r59 -- r65;
// [Asm]   r8 -- r16;
// [Asm]   r80 -- r87;
// [Asm]   r10 -- r18;
// [Asm]   r4 -- r83;
// [Asm]   r11 -- r73;
// [Asm]   r8 -- r97;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r38;
// [Asm]   r4 -- r29;
// [Asm]   r11 -- r43;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r51;
// [Asm]   r2 -- r98;
// [Asm]   r1 -- r35;
// [Asm]   r6 -- r56;
// [Asm]   r9 -- r39;
// [Asm]   r2 -- r69;
// [Asm]   r40 -- r42;
// [Asm]   r6 -- r25;
// [Asm]   r59 -- r61;
// [Asm]   r58 -- r70;
// [Asm]   r72 -- r74;
// [Asm]   r11 -- r62;
// [Asm]   r59 -- r67;
// [Asm]   r2 -- r73;
// [Asm]   r6 -- r62;
// [Asm]   r10 -- r94;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r55;
// [Asm]   r11 -- r70;
// [Asm]   r72 -- r73;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r80 -- r81;
// [Asm]   r9 -- r76;
// [Asm]   r9 -- r30;
// [Asm]   r11 -- r86;
// [Asm]   r3 -- r83;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r42;
// [Asm]   r9 -- r84;
// [Asm]   r16 -- r18;
// [Asm]   r7 -- r75;
// [Asm]   r5 -- r74;
// [Asm]   r10 -- r81;
// [Asm]   r9 -- r11;
// [Asm]   r3 -- r65;
// [Asm]   r9 -- r83;
// [Asm]   r5 -- r93;
// [Asm]   r5 -- r97;
// [Asm]   r2 -- r14;
// [Asm]   r11 -- r52;
// [Asm]   r9 -- r63;
// [Asm]   r14 -- r25;
// [Asm]   r10 -- r15;
// [Asm]   r9 -- r24;
// [Asm]   r81 -- r85;
// [Asm]   r8 -- r35;
// [Asm]   r8 -- r18;
// [Asm]   r9 -- r36;
// [Asm]   r1 -- r72;
// [Asm]   r7 -- r36;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r60;
// [Asm]   r4 -- r63;
// [Asm]   r6 -- r38;
// [Asm]   r9 -- r46;
// [Asm]   r11 -- r87;
// [Asm]   r15 -- r19;
// [Asm]   r3 -- r23;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r2 -- r58;
// [Asm]   r5 -- r12;
// [Asm]   r10 -- r62;
// [Asm]   r6 -- r95;
// [Asm]   r10 -- r79;
// [Asm]   r2 -- r45;
// [Asm]   r9 -- r25;
// [Asm]   r8 -- r93;
// [Asm]   r4 -- r41;
// [Asm]   r11 -- r68;
// [Asm]   r5 -- r63;
// [Asm]   r0 -- r49;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r6 -- r66;
// [Asm]   r8 -- r68;
// [Asm]   r7 -- r77;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r85;
// [Asm]   r10 -- r19;
// [Asm]   r6 -- r54;
// [Asm]   r1 -- r17;
// [Asm]   r9 -- r31;
// [Asm]   r9 -- r45;
// [Asm]   r4 -- r78;
// [Asm]   r4 -- r91;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r60;
// [Asm]   r3 -- r89;
// [Asm]   r4 -- r22;
// [Asm]   r9 -- r41;
// [Asm]   r3 -- r18;
// [Asm]   r6 -- r77;
// [Asm]   r8 -- r91;
// [Asm]   r4 -- r35;
// [Asm]   r4 -- r69;
// [Asm]   r59 -- r69;
// [Asm]   r1 -- r70;
// [Asm]   r1 -- r31;
// [Asm]   r81 -- r90;
// [Asm]   r1 -- r87;
// [Asm]   r3 -- r97;
// [Asm]   r5 -- r86;
// [Asm]   r4 -- r86;
// [Asm]   r6 -- r96;
// [Asm]   r7 -- r93;
// [Asm]   r58 -- r59;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r63;
// [Asm]   r8 -- r78;
// [Asm]   r4 -- r28;
// [Asm]   r8 -- r94;
// [Asm]   r3 -- r40;
// [Asm]   r9 -- r59;
// [Asm]   r9 -- r87;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r69;
// [Asm]   r5 -- r80;
// [Asm]   r2 -- r97;
// [Asm]   r80 -- r92;
// [Asm]   r3 -- r95;
// [Asm]   r8 -- r29;
// [Asm]   r5 -- r7;
// [Asm]   r11 -- r96;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r10 -- r25;
// [Asm]   r3 -- r7;
// [Asm]   r45 -- r47;
// [Asm]   r58 -- r68;
// [Asm]   r4 -- r49;
// [Asm]   r11 -- r25;
// [Asm]   r10 -- r17;
// [Asm]   r67 -- r68;
// [Asm]   r2 -- r72;
// [Asm]   r9 -- r98;
// [Asm]   r9 -- r60;
// [Asm]   r7 -- r88;
// [Asm]   r11 -- r91;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r9 -- r29;
// [Asm]   r46 -- r47;
// [Asm]   r4 -- r79;
// [Asm]   r16 -- r19;
// [Asm]   r7 -- r71;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r60;
// [Asm]   r6 -- r16;
// [Asm]   r5 -- r87;
// [Asm]   r4 -- r30;
// [Asm]   r1 -- r65;
// [Asm]   r10 -- r27;
// [Asm]   r1 -- r66;
// [Asm]   r9 -- r67;
// [Asm]   r82 -- r86;
// [Asm]   r1 -- r39;
// [Asm]   r9 -- r44;
// [Asm]   r2 -- r63;
// [Asm]   r7 -- r37;
// [Asm]   r2 -- r57;
// [Asm]   r4 -- r11;
// [Asm]   r9 -- r38;
// [Asm]   r15 -- r17;
// [Asm]   r3 -- r84;
// [Asm]   r8 -- r52;
// [Asm]   r8 -- r67;
// [Asm]   r4 -- r72;
// [Asm]   r10 -- r23;
// [Asm]   r1 -- r83;
// [Asm]   r60 -- r61;
// [Asm]   r6 -- r82;
// [Asm]   r11 -- r79;
// [Asm]   r1 -- r84;
// [Asm]   r9 -- r65;
// [Asm]   r9 -- r16;
// [Asm]   r4 -- r39;
// [Asm]   r1 -- r73;
// [Asm]   r2 -- r71;
// [Asm]   r9 -- r19;
// [Asm]   r7 -- r50;
// [Asm]   r11 -- r27;
// [Asm]   r7 -- r68;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r43;
// [Asm]   r7 -- r69;
// [Asm]   r9 -- r54;
// [Asm]   r5 -- r76;
// [Asm]   r10 -- r21;
// [Asm]   r1 -- r93;
// [Asm]   r7 -- r51;
// [Asm]   r6 -- r81;
// [Asm]   r8 -- r31;
// [Asm]   r5 -- r82;
// [Asm]   r3 -- r91;
// [Asm]   r1 -- r90;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r8 -- r51;
// [Asm]   r4 -- r34;
// [Asm]   r10 -- r61;
// [Asm]   r1 -- r30;
// [Asm]   r81 -- r91;
// [Asm]   r7 -- r97;
// [Asm]   r4 -- r97;
// [Asm]   r11 -- r74;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r81;
// [Asm]   r5 -- r85;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r84;
// [Asm]   r11 -- r67;
// [Asm]   r10 -- r89;
// [Asm]   r1 -- r52;
// [Asm]   r5 -- r29;
// [Asm]   r11 -- r18;
// [Asm]   r10 -- r40;
// [Asm]   r9 -- r68;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r89;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r61;
// [Asm]   r8 -- r24;
// [Asm]   r3 -- r92;
// [Asm]   r8 -- r75;
// [Asm]   r2 -- r25;
// [Asm]   r6 -- r60;
// [Asm]   r81 -- r88;
// [Asm]   r14 -- r74;
// [Asm]   r2 -- r83;
// [Asm]   r10 -- r38;
// [Asm]   r13 -- r55;
// [Asm]   r1 -- r77;
// [Asm]   r2 -- r67;
// [Asm]   r94 -- r95;
// [Asm]   r10 -- r31;
// [Asm]   r94 -- r96;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r4 -- r25;
// [Asm]   r9 -- r74;
// [Asm]   r5 -- r55;
// [Asm]   r8 -- r70;
// [Asm]   r3 -- r49;
// [Asm]   r2 -- r36;
// [Asm]   r1 -- r80;
// [Asm]   r6 -- r55;
// [Asm]   r7 -- r42;
// [Asm]   r6 -- r23;
// [Asm]   r11 -- r36;
// [Asm]   r4 -- r14;
// [Asm]   r7 -- r67;
// [Asm]   r7 -- r65;
// [Asm]   r14 -- r15;
// [Asm]   r9 -- r89;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r43;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r34;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r9 -- r91;
// [Asm]   r8 -- r9;
// [Asm]   r6 -- r33;
// [Asm]   r9 -- r94;
// [Asm]   r80 -- r82;
// [Asm]   r2 -- r65;
// [Asm]   r2 -- r88;
// [Asm]   r2 -- r80;
// [Asm]   r10 -- r29;
// [Asm]   r6 -- r22;
// [Asm]   r10 -- r51;
// [Asm]   r8 -- r64;
// [Asm]   r4 -- r71;
// [Asm]   r6 -- r27;
// [Asm]   r2 -- r40;
// [Asm]   r4 -- r80;
// [Asm]   r4 -- r15;
// [Asm]   r11 -- r65;
// [Asm]   r9 -- r70;
// [Asm]   r12 -- r13;
// [Asm]   r0 -- r42;
// [Asm]   r5 -- r28;
// [Asm]   r10 -- r43;
// [Asm]   r1 -- r81;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r1 -- r94;
// [Asm]   r11 -- r59;
// [Asm]   r14 -- r21;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r87;
// [Asm]   r7 -- r85;
// [Asm]   r80 -- r91;
// [Asm]   r5 -- r70;
// [Asm]   r81 -- r83;
// [Asm]   r7 -- r41;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r5 -- r98;
// [Asm]   r7 -- r57;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r81 -- r86;
// [Asm]   r7 -- r14;
// [Asm]   r1 -- r54;
// [Asm]   r9 -- r81;
// [Asm]   r8 -- r60;
// [Asm]   r2 -- r39;
// [Asm]   r6 -- r71;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r87;
// [Asm]   r4 -- r38;
// [Asm]   r15 -- r72;
// [Asm]   r2 -- r94;
// [Asm]   r4 -- r66;
// [Asm]   r1 -- r12;
// [Asm]   r8 -- r84;
// [Asm]   r14 -- r16;
// [Asm]   r7 -- r40;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r88;
// [Asm]   r2 -- r95;
// [Asm]   r8 -- r90;
// [Asm]   r1 -- r18;
// [Asm]   r11 -- r92;
// [Asm]   r2 -- r10;
// [Asm]   r1 -- r69;
// [Asm]   r1 -- r20;
// [Asm]   r89 -- r90;
// [Asm]   r3 -- r24;
// [Asm]   r5 -- r73;
// [Asm]   r4 -- r40;
// [Asm]   r87 -- r88;
// [Asm]   r10 -- r58;
// [Asm]   r3 -- r51;
// [Asm]   r65 -- r66;
// [Asm]   r2 -- r74;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r10 -- r49;
// [Asm]   r15 -- r18;
// [Asm]   r10 -- r37;
// [Asm]   r10 -- r92;
// [Asm]   r4 -- r43;
// [Asm]   r4 -- r98;
// [Asm]   r11 -- r82;
// [Asm]   r5 -- r53;
// [Asm]   r13 -- r54;
// [Asm]   r8 -- r37;
// [Asm]   r7 -- r10;
// [Asm]   r3 -- r80;
// [Asm]   r6 -- r94;
// [Asm]   r3 -- r82;
// [Asm]   r7 -- r70;
// [Asm]   r1 -- r27;
// [Asm]   r2 -- r79;
// [Asm]   r28 -- r29;
// [Asm]   r8 -- r39;
// [Asm]   r11 -- r63;
// [Asm]   r7 -- r98;
// [Asm]   r14 -- r72;
// [Asm]   r7 -- r61;
// [Asm]   r4 -- r50;
// [Asm]   r8 -- r22;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r5 -- r50;
// [Asm]   r1 -- r49;
// [Asm]   r8 -- r96;
// [Asm]   r7 -- r96;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r58 -- r65;
// [Asm]   r11 -- r30;
// [Asm]   r58 -- r66;
// [Asm]   r3 -- r58;
// [Asm]   r2 -- r70;
// [Asm]   r7 -- r64;
// [Asm]   r2 -- r87;
// [Asm]   r6 -- r58;
// [Asm]   r9 -- r72;
// [Asm]   r17 -- r18;
// [Asm]   r1 -- r58;
// [Asm]   r10 -- r72;
// [Asm]   r4 -- r24;
// [Asm]   r11 -- r40;
// [Asm]   r14 -- r17;
// [Asm]   r6 -- r15;
// [Asm]   r9 -- r35;
// [Asm]   r11 -- r71;
// [Asm]   r9 -- r15;
// [Asm]   r5 -- r77;
// [Asm]   r0 -- r41;
// [Asm]   r14 -- r23;
// [Asm]   r62 -- r63;
// [Asm]   r80 -- r84;
// [Asm]   r4 -- r59;
// [Asm]   r7 -- r26;
// [Asm]   r6 -- r79;
// [Asm]   r6 -- r51;
// [Asm]   r1 -- r78;
// [Asm]   r5 -- r52;
// [Asm]   r5 -- r84;
// [Asm]   r9 -- r42;
// [Asm]   r5 -- r44;
// [Asm]   r45 -- r46;
// [Asm]   r3 -- r28;
// [Asm]   r8 -- r38;
// [Asm]   r14 -- r24;
// [Asm]   r7 -- r9;
// [Asm]   r8 -- r65;
// [Asm]   r6 -- r40;
// [Asm]   r4 -- r60;
// [Asm]   r7 -- r66;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r5 -- r64;
// [Asm]   r6 -- r34;
// [Asm]   r8 -- r28;
// [Asm]   r10 -- r91;
// [Asm]   r9 -- r80;
// [Asm]   r10 -- r50;
// [Asm]   r7 -- r92;
// [Asm]   r11 -- r42;
// [Asm]   r15 -- r96;
// [Asm]   r4 -- r73;
// [Asm]   r18 -- r19;
// [Asm]   r10 -- r84;
// [Asm]   r8 -- r85;
// [Asm]   r10 -- r90;
// [Asm]   r3 -- r64;
// [Asm]   r10 -- r52;
// [Asm]   r6 -- r42;
// [Asm]   r10 -- r39;
// [Asm]   r3 -- r81;
// [Asm]   r3 -- r75;
// [Asm]   r7 -- r58;
// [Asm]   r11 -- r69;
// [Asm]   r7 -- r31;
// [Asm]   r4 -- r96;
// [Asm]   r4 -- r77;
// [Asm]   r4 -- r17;
// [Asm]   r10 -- r80;
// [Asm]   r1 -- r36;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r24;
// [Asm]   r3 -- r63;
// [Asm]   r5 -- r40;
// [Asm]   r10 -- r14;
// [Asm]   r58 -- r61;
// [Asm]   r3 -- r52;
// [Asm]   r2 -- r31;
// [Asm]   r11 -- r61;
// [Asm]   r9 -- r53;
// [Asm]   r1 -- r26;
// [Asm]   r6 -- r75;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r4 -- r51;
// [Asm]   r3 -- r53;
// [Asm]   r2 -- r49;
// [Asm]   r59 -- r66;
// [Asm]   r7 -- r25;
// [Asm]   r7 -- r72;
// [Asm]   r4 -- r64;
// [Asm]   r3 -- r62;
// [Asm]   r58 -- r63;
// [Asm]   r6 -- r84;
// [Asm]   r3 -- r11;
// [Asm]   r9 -- r26;
// [Asm]   r2 -- r7;
// [Asm]   r10 -- r69;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r17 -- r19;
// [Asm]   r11 -- r19;
// [Asm]   r1 -- r50;
// [Asm]   r9 -- r82;
// [Asm]   r10 -- r93;
// [Asm]   r6 -- r86;
// [Asm]   r10 -- r67;
// [Asm]   r3 -- r8;
// [Asm]   r3 -- r85;
// [Asm]   r9 -- r56;
// [Asm]   r60 -- r64;
// [Asm]   r9 -- r88;
// [Asm]   r1 -- r9;
// [Asm]   r9 -- r75;
// [Asm]   r5 -- r6;
// [Asm]   r11 -- r97;
// [Asm]   r9 -- r66;
// [Asm]   r1 -- r64;
// [Asm]   r3 -- r74;
// [Asm]   r7 -- r79;
// [Asm]   r59 -- r60;
// [Asm]   r3 -- r39;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r59;
// [Asm]   r5 -- r58;
// [Asm]   r80 -- r90;
// [Asm]   r5 -- r54;
// [Asm]   r8 -- r23;
// [Asm]   r5 -- r60;
// [Asm]   r10 -- r22;
// [Asm]   r8 -- r59;
// [Asm]   r8 -- r72;
// [Asm]   r3 -- r71;
// [Asm]   r2 -- r5;
// [Asm]   r1 -- r51;
// [Asm]   r3 -- r17;
// [Asm]   r6 -- r72;
// [Asm]   r11 -- r15;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r6 -- r50;
// [Asm]   r2 -- r96;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r80 -- r89;
// [Asm]   r5 -- r36;
// [Asm]   r2 -- r86;
// [Asm]   r3 -- r94;
// [Asm]   r58 -- r62;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r76;
// [Asm]   r4 -- r62;
// [Asm]   r14 -- r26;
// [Asm]   r16 -- r94;
// [Asm]   r1 -- r75;
// [Asm]   r6 -- r41;
// [Asm]   r9 -- r40;
// [Asm]   r4 -- r88;
// [Asm]   r9 -- r93;
// [Asm]   r6 -- r98;
// [Asm]   r2 -- r84;
// [Asm]   r4 -- r81;
// [Asm]   r7 -- r20;
// [Asm]   r9 -- r61;
// [Asm]   r8 -- r76;
// [Asm]   r6 -- r53;
// [Asm]   r11 -- r23;
// [Asm]   r8 -- r25;
// [Asm]   r11 -- r51;
// [Asm]   r11 -- r85;
// [Asm]   r11 -- r94;
// [Asm]   r5 -- r38;
// [Asm]   r11 -- r37;
// [Asm]   r6 -- r59;
// [Asm]   r10 -- r16;
// [Asm]   r58 -- r60;
// [Asm]   r3 -- r22;
// [Asm]   r82 -- r83;
// [Asm]   r8 -- r81;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r8 -- r62;
// [Asm]   r82 -- r84;
// [Asm]   r7 -- r19;
// [Asm]   r1 -- r79;
// [Asm]   r2 -- r89;
// [Asm]   r1 -- r97;
// [Asm]   r5 -- r68;
// [Asm]   r11 -- r41;
// [Asm]   r3 -- r29;
// [Asm]   r1 -- r89;
// [Asm]   r3 -- r66;
// [Asm]   r5 -- r81;
// [Asm]   r1 -- r95;
// [Asm]   r4 -- r36;
// [Asm]   r6 -- r39;
// [Asm]   r2 -- r75;
// [Asm]   r5 -- r25;
// [Asm]   r10 -- r36;
// [Asm]   r14 -- r94;
// [Asm]   r2 -- r93;
// [Asm]   r6 -- r74;
// [Asm]   r9 -- r58;
// [Asm]   r4 -- r74;
// [Asm]   r4 -- r10;
// [Asm]   r11 -- r28;
// [Asm]   r2 -- r27;
// [Asm]   r11 -- r90;
// [Asm]   r11 -- r29;
// [Asm]   r1 -- r42;
// [Asm]   r6 -- r52;
// [Asm]   r10 -- r86;
// [Asm]   r2 -- r62;
// [Asm]   r3 -- r67;
// [Asm]   r14 -- r20;
// [Asm]   r6 -- r36;
// [Asm]   r10 -- r60;
// [Asm]   r1 -- r37;
// [Asm]   r82 -- r85;
// [Asm]   r1 -- r98;
// [Asm]   r4 -- r58;
// [Asm]   r5 -- r95;
// [Asm]   r1 -- r19;
// [Asm]   r10 -- r88;
// [Asm]   r1 -- r88;
// [Asm]   r5 -- r42;
// [Asm]   r6 -- r63;
// [Asm]   r2 -- r16;
// [Asm]   r5 -- r92;
// [Asm]   r1 -- r62;
// [Asm]   r8 -- r98;
// [Asm]   r11 -- r53;
// [Asm]   r1 -- r67;
// [Asm]   r8 -- r79;
// [Asm]   r2 -- r59;
// [Asm]   r14 -- r19;
// [Asm]   r2 -- r92;
// [Asm]   r8 -- r71;
// [Asm]   r2 -- r68;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r30;
// [Asm]   r0 -- r40;
// [Asm]   r5 -- r83;
// [Asm]   r9 -- r28;
// [Asm]   r8 -- r77;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r10;
// [Asm]   r3 -- r10;
// [Asm]   r7 -- r95;
// [Asm]   r5 -- r91;
// [Asm]   r60 -- r62;
// [Asm]   r10 -- r75;
// [Asm]   r4 -- r92;
// [Asm]   r8 -- r63;
// [Asm]   r4 -- r84;
// [Asm]   r59 -- r64;
// [Asm]   r5 -- r90;
// [Asm]   r1 -- r6;
// [Asm]   r9 -- r95;
// [Asm]   r14 -- r22;
// [Asm]   r2 -- r23;
// [Asm]   r9 -- r47;
// [Asm]   r7 -- r82;
// [Asm]   r6 -- r92;
// [Asm]   r80 -- r88;
// [Asm]   r5 -- r89;
// [Asm]   r10 -- r95;
// [Asm]   r8 -- r82;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r52;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r8 -- r66;
// [Asm]   r4 -- r95;
// [Asm]   r9 -- r57;
// [Asm]   r6 -- r49;
// [Asm]   r1 -- r53;
// [Asm]   r8 -- r19;
// [Asm]   r11 -- r49;
// [Asm]   r5 -- r79;
// [Asm]   r8 -- r43;
// [Asm]   r3 -- r87;
// [Asm]   r1 -- r15;
// [Asm]   r10 -- r41;
// [Asm]   r80 -- r83;
// [Asm]   r4 -- r89;
// [Asm]   r6 -- r12;
// [Asm]   r7 -- r81;
// [Asm]   r6 -- r24;
// [Asm]   r9 -- r51;
// [Asm]   r7 -- r73;
// [Asm]   r11 -- r83;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r6 -- r37;
// [Asm]   r10 -- r28;
// [Asm]   r9 -- r34;
// [Asm]   r58 -- r64;
// [Asm]   r10 -- r63;
// [Asm]   r7 -- r60;
// [Asm]   r11 -- r98;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r10 -- r73;
// [Asm]   r0 -- r8;
// [Asm]   r9 -- r33;
// [Asm]   r6 -- r28;
// [Asm]   r1 -- r59;
// [Asm]   r4 -- r85;
// [Asm]   r11 -- r39;
// [Asm]   r9 -- r69;
// [Asm]   r1 -- r74;
// [Asm]   r11 -- r50;
// [Asm]   r6 -- r67;
// [Asm]   r7 -- r11;
// [Asm]   r11 -- r89;
// [Asm]   r8 -- r88;
// [Asm]   r9 -- r37;
// [Asm]   r6 -- r90;
// [Asm]   r8 -- r73;
// [Asm]   r7 -- r39;
// [Asm]   r7 -- r43;
// [Asm]   r11 -- r26;
// [Asm]   r40 -- r41;
// [Asm]   r8 -- r58;
// [Asm]   r9 -- r32;
// [Asm]   r11 -- r58;
// [Asm]   r3 -- r36;
// [Asm]   r3 -- r93;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r30;
// [Asm]   r1 -- r82;
// [Asm]   r1 -- r92;
// [Asm]   r10 -- r96;
// [Asm]   r9 -- r50;
// [Asm]   r4 -- r52;
// [Asm]   r11 -- r21;
// [Asm]   r10 -- r66;
// [Asm]   r81 -- r87;
// [Asm]   r4 -- r19;
// [Asm]   r2 -- r64;
// [Asm]   r52 -- r53;
// [Asm]   r4 -- r53;
// [Asm]   r4 -- r75;
// [Asm]   r2 -- r32;
// [Asm]   r81 -- r82;
// [Asm]   r11 -- r76;
// [Asm]   r4 -- r68;
// [Asm]   r6 -- r73;
// [Asm]   r3 -- r98;
// [Asm]   r6 -- r35;
// [Asm]   r9 -- r86;
// [Asm]   r1 -- r86;
// [Asm]   r5 -- r72;
// [Asm]   r9 -- r79;
// [Asm]   r11 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r11 -- r66;
// [Asm]   r2 -- r43;
// [Asm]   r5 -- r59;
// [Asm]   r5 -- r18;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r84 -- r85;
// [Asm]   r9 -- r49;
// [Asm]   r3 -- r68;
// [Asm]   r7 -- r27;
// [Asm]   r6 -- r85;
// [Asm]   r7 -- r91;
// [Asm]   r14 -- r96;
// [Asm]   r5 -- r31;
// [Asm]   r58 -- r67;
// [Asm]   r5 -- r62;
// [Asm]   r3 -- r78;
// [Asm]   r2 -- r6;
// [Asm]   r6 -- r80;
// [Asm]   r16 -- r72;
// [Asm]   r6 -- r91;
// [Asm]   r4 -- r67;
// [Asm]   r0 -- r9;
// [Asm]   r9 -- r23;
// [Asm]   r4 -- r65;
// [Asm]   r5 -- r78;
// [Asm]   r7 -- r94;
// [Asm]   r7 -- r38;
// [Asm]   r1 -- r40;
// [Asm]   r5 -- r67;
// [Asm]   r6 -- r83;
// [Asm]   r11 -- r93;
// [Asm]   r10 -- r42;
// [Asm]   r0 -- r10;
// [Asm]   r6 -- r64;
// [Asm]   r7 -- r80;
// [Asm]   r5 -- r66;
// [Asm]   r6 -- r65;
// [Asm]   r0 -- r4;
// [Asm]   r8 -- r86;
// [Asm]   r8 -- r30;
// [Asm]   r11 -- r84;
// [Asm]   r10 -- r59;
// [Asm]   r6 -- r76;
// [Asm]   r7 -- r76;
// [Asm]   r3 -- r19;
// [Asm]   r7 -- r29;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r77;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r38;
// [Asm]   r11 -- r64;
// [Asm]   r5 -- r71;
// [Asm]   r2 -- r90;
// [Asm]   r11 -- r16;
// [Asm]   r81 -- r84;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r2 -- r52;
// [Asm]   r1 -- r13;
// [Asm]   r9 -- r64;
// [Asm]   r11 -- r22;
// [Asm]   r7 -- r74;
// [Asm]   r10 -- r70;
// [Asm]   r7 -- r49;
// [Asm]   r8 -- r20;
// [Asm]   r6 -- r20;
// [Asm]   r9 -- r52;
// [Asm]   r3 -- r50;
// [Asm]   r7 -- r17;
// [Asm]   r8 -- r41;
// [Asm]   r9 -- r85;
// [Asm]   r9 -- r97;
// [Asm]   r8 -- r53;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r1 -- r29;
// [Asm]   r0 -- r39;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r8 -- r92;
// [Asm]   r10 -- r85;
// [Asm]   r2 -- r77;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r5 -- r56;
// [Asm]   r5 -- r94;
// [Asm]   r5 -- r61;
// [Asm]   r81 -- r89;
// [Asm]   r1 -- r61;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r3 -- r73;
// [Asm]   r4 -- r82;
// [Asm]   r8 -- r83;
// [Asm]   r8 -- r26;
// [Asm]   r11 -- r72;
// [Asm]   r7 -- r87;
// [Asm]   r10 -- r65;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r6;
// [Asm]   r59 -- r62;
// [Asm]   r4 -- r93;
// [Asm]   r9 -- r13;
// [Asm]   r58 -- r69;
// [Asm]   r8 -- r50;
// [Asm]   r59 -- r63;
// [Asm]   r2 -- r20;
// [Asm]   r1 -- r76;
// [Asm]   r5 -- r41;
// [Asm]   r8 -- r89;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r71;
// [Asm]   r3 -- r43;
// [Asm]   r9 -- r27;
// [Asm]   r9 -- r77;
// [Asm]   r1 -- r7;
// [Asm]   r2 -- r85;
// [Asm]   r1 -- r56;
// [Asm]   r3 -- r60;
// [Asm]   r3 -- r79;
// [Asm]   r1 -- r63;
// [Asm]   r5 -- r96;
// [Asm]   r6 -- r29;
// [Asm]   r11 -- r31;
// [Asm]   r7 -- r53;
// [Asm]   r5 -- r49;
// [Asm]   r1 -- r91;
// [Asm]   r4 -- r27;
// [Asm]   r10 -- r77;
// [Asm]   r4 -- r42;
// [Asm]   r7 -- r83;
// [Asm]   r4 -- r21;
// [Asm]   r2 -- r76;
// [Asm]   r6 -- r13;
// [Asm]   r3 -- r76;
// [Asm]   r7 -- r90;
// [Asm]   r8 -- r17;
// [Asm]   r11 -- r81;
// [Asm]   r3 -- r96;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r69;
// [Asm]   r5 -- r75;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r6 -- r93;
// [Asm]   r10 -- r74;
// [Asm]   r2 -- r8;
// [Asm]   r6 -- r31;
// [Asm]   r6 -- r78;
// [Asm]   r8 -- r80;
// [Asm]   r10 -- r30;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r1 -- r44;
// [Asm]   r3 -- r61;
// [Asm]   r7 -- r8;
// [Asm]   r8 -- r87;
// [Asm]   r4 -- r94;
// [Asm]   r6 -- r61;
// [Asm]   r6 -- r97;
// [Asm]   r4 -- r9;
// [Asm]   r3 -- r88;
// [Asm]   r5 -- r34;
// [Asm]   r2 -- r53;
// [Asm]   r2 -- r61;
// [Asm]   r36 -- r37;
// [Asm]   r9 -- r90;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r10 -- r83;
// [Asm]   r10 -- r87;
// [Asm]   r14 -- r18;
// [Asm]   r11 -- r17;
// [Asm]   r5 -- r20;
// [Asm]   r4 -- r37;
// [Asm]   r2 -- r18;
// [Asm]   r9 -- r96;
// [Asm]   r10 -- r68;
// [Asm]   r10 -- r78;
// [Asm]   r7 -- r89;
// [Asm]   r5 -- r13;
// [Asm]   r10 -- r71;
// [Asm]   r10 -- r76;
// [Asm]   r2 -- r82;
// [Asm]   r7 -- r86;
// [Asm]   r7 -- r30;
// [Asm]   r3 -- r90;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r8 -- r49;
// [Asm]   r3 -- r77;
// [Asm]   r4 -- r70;
// [Asm]   r9 -- r22;
// [Asm]   r9 -- r92;
// [Asm]   r80 -- r85;
// [Asm]   r1 -- r96;
// [Asm]   r11 -- r75;
// [Asm]   r5 -- r37;
// [Asm]   r8 -- r74;
// [Asm]   r11 -- r95;
// [Asm]   r8 -- r40;
// [Asm]   r9 -- r43;
// [Asm]   r2 -- r66;
// [Asm]   r3 -- r72;
// [Asm]   r15 -- r74;
// [Asm]   r10 -- r97;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r41;
// [Asm]   r59 -- r68;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r9 -- r55;
// [Asm]   r11 -- r88;
// [Asm]   r10 -- r82;
// [Asm]   r60 -- r63;
// [Asm]   r3 -- r59;
// [Asm]   r11 -- r38;
// [Asm]   r80 -- r86;
// [Asm]   r5 -- r27;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r26;
// [Asm]   r9 -- r71;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r61;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v37-> 1:v2-> 2:v11-> 3:v14-> 4:v10-> 5:zero-> 6:v8-> 7:v4-> 8:v12-> 9:s11-> 10:v28-> 11:v3-> 38:v98-> 39:v99-> 40:v87-> 41:v96-> 42:v97-> 49:v38-> 14:a0-> 15:a1-> 16:a2-> 17:a3-> 18:a4-> 19:a5-> 72:v9-> 74:v16-> 94:v6-> 96:v13-> 20:a6-> 21:a7-> 22:t0-> 23:t1-> 24:t2-> 25:t3-> 26:t4-> 73:v127-> 95:v106-> 27:v40-> 28:v42-> 29:v7-> 30:v44-> 31:v45-> 36:v46-> 37:v47-> 43:v89-> 50:v64-> 51:v65-> 52:v29-> 53:v152-> 58:v49-> 59:v50-> 60:v51-> 61:v137-> 62:v52-> 63:v135-> 64:v53-> 65:v54-> 66:v132-> 67:v55-> 68:v130-> 69:v56-> 70:v57-> 71:v58-> 75:v62-> 76:v63-> 77:v84-> 78:v85-> 79:v67-> 80:v69-> 81:v70-> 82:v71-> 83:v116-> 84:v72-> 85:v114-> 86:v73-> 87:v74-> 88:v111-> 89:v75-> 90:v109-> 91:v76-> 92:v77-> 93:v78-> 97:v82-> 98:v83-> 35:v15-> 34:v159-> 12:v19-> 13:v18-> 54:v93-> 55:v94-> 33:v161-> 56:v91-> 32:v31-> 44:v164-> 57:v32-> 45:v33-> 46:v34-> 47:v5-> 48:v36"
// [Asm]   comment = "v37<-a0;v34<-a1;v161<-a0;v50<-a1;v63<-a0;v73<-a3;v164<-a0;v152<-a1;v91<-a0;v28<-s7;v93<-a0;v89<-a0;v111<-a3;v69<-a0;v45<-a0;v99<-a1;v29<-a0;v54<-a2;v67<-a0;v137<-a3;v14<-s2;v71<-a2;v55<-a2;v84<-a0;v40<-a0;v62<-a0;v52<-a3;v87<-a1;v3<-s8;v49<-a0;v159<-a0;v116<-a3;v65<-a0;v13<-a2;v85<-a0;v94<-a0;v51<-a2;v127<-a0;v78<-a0;v98<-a1;v9<-a3;v74<-a2;v114<-a4;v5<-a2;v8<-s4;v18<-a1;v97<-a2;v10<-s3;v7<-a1;v106<-a0;v15<-a0;v4<-s5;v53<-a3;v12<-s6;v46<-a0;v132<-a3;v31<-a0;v38<-a1;v16<-a2;v32<-a0;v130<-a3;v83<-a0;v76<-a2;v57<-a1;v19<-a0;v36<-a0;v47<-a1;v2<-s0;v42<-a0;v96<-a2;v58<-a0;v56<-a2;v72<-a3;v64<-a0;v75<-a2;v44<-a0;v77<-a1;v33<-a0;v135<-a4;v11<-s1;v109<-a3;v82<-a0;v70<-a1;v6<-a3;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of fannkuch.600"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v37, zero ->   mv a0, zero
// [Asm] subst   addi v19, v2, -1 ->   addi a0, s0, -1
// [Asm] subst   bge v19, v18, .fannkuch.600_3 ->   bge a0, a1, .fannkuch.600_3
// [Asm] subst   ret ->   ret
// [Asm] subst   mv a0, v28 ->   mv a0, s7
// [Asm] subst   mv a1, v12 ->   mv a1, s6
// [Asm] subst   call init_count.602 ->   call init_count.602
// [Asm] subst   sw zero, 0(v14) ->   sw zero, 0(s2)
// [Asm] subst   lw v42, 0(v10) ->   lw a0, 0(s3)
// [Asm] subst   addi v7, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v7, -8 ->   andi s11, a1, -8
// [Asm] subst   sw v42, 0(v7) ->   sw a0, 0(a1)
// [Asm] subst   mv a0, v7 ->   mv a0, a1
// [Asm] subst   mv a1, v10 ->   mv a1, s3
// [Asm] subst   mv a2, v14 ->   mv a2, s2
// [Asm] subst   call do_flip.603 ->   call do_flip.603
// [Asm] subst   mv v31, zero ->   mv a0, zero
// [Asm] subst   slliw v161, v2, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v10, s11, v161 ->   sub s3, s11, a0
// [Asm] subst   andi s11, v10, -8 ->   andi s11, s3, -8
// [Asm] subst   mv a1, v2 ->   mv a1, s0
// [Asm] subst   slliw v159, v2, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v12, s11, v159 ->   sub s6, s11, a0
// [Asm] subst   andi s11, v12, -8 ->   andi s11, s6, -8
// [Asm] subst   mv a1, v2 ->   mv a1, s0
// [Asm] subst   addi v14, s11, -4 ->   addi s2, s11, -4
// [Asm] subst   andi s11, v14, -8 ->   andi s11, s2, -8
// [Asm] subst   sw zero, 0(v14) ->   sw zero, 0(s2)
// [Asm] subst   addi v4, s11, -4 ->   addi s5, s11, -4
// [Asm] subst   andi s11, v4, -8 ->   andi s11, s5, -8
// [Asm] subst   sw zero, 0(v4) ->   sw zero, 0(s5)
// [Asm] subst   addi v11, s11, -4 ->   addi s1, s11, -4
// [Asm] subst   andi s11, v11, -8 ->   andi s11, s1, -8
// [Asm] subst   sw zero, 0(v11) ->   sw zero, 0(s1)
// [Asm] subst   addi v3, s11, -4 ->   addi s8, s11, -4
// [Asm] subst   andi s11, v3, -8 ->   andi s11, s8, -8
// [Asm] subst   sw zero, 0(v3) ->   sw zero, 0(s8)
// [Asm] subst   addi v15, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi s11, v15, -8 ->   andi s11, a0, -8
// [Asm] subst   sw v2, 0(v15) ->   sw s0, 0(a0)
// [Asm] subst   lw v46, 0(v4) ->   lw a0, 0(s5)
// [Asm] subst   lw v47, 0(v14) ->   lw a1, 0(s2)
// [Asm] subst   blt v47, v46, .fannkuch.600_26 ->   blt a1, a0, .fannkuch.600_26
// [Asm] subst   mv v28, v15 ->   mv s7, a0
// [Asm] subst   slliw v98, v37, 2 ->   slliw a1, a0, 2
// [Asm] subst   add v99, v8, v98 ->   add a1, s4, a1
// [Asm] subst   lw v87, 0(v99) ->   lw a1, 0(a1)
// [Asm] subst   slliw v96, v37, 2 ->   slliw a2, a0, 2
// [Asm] subst   add v97, v10, v96 ->   add a2, s3, a2
// [Asm] subst   sw v87, 0(v97) ->   sw a1, 0(a2)
// [Asm] subst   addi v89, v37, 1 ->   addi a0, a0, 1
// [Asm] subst   j .fannkuch.600_22 ->   j .fannkuch.600_22
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   slliw v164, v2, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v8, s11, v164 ->   sub s4, s11, a0
// [Asm] subst   andi s11, v8, -8 ->   andi s11, s4, -8
// [Asm] subst   mv a1, v2 ->   mv a1, s0
// [Asm] subst   mv v18, zero ->   mv a1, zero
// [Asm] subst   lw v33, 0(v4) ->   lw a0, 0(s5)
// [Asm] subst   lw v34, 0(v11) ->   lw a1, 0(s1)
// [Asm] subst   addi v5, s11, -8 ->   addi a2, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a2, -8
// [Asm] subst   sw v33, 0(v5) ->   sw a0, 0(a2)
// [Asm] subst   sw v34, 4(v5) ->   sw a1, 4(a2)
// [Asm] subst   mv v36, v5 ->   mv a0, a2
// [Asm] subst   addi v38, v2, -1 ->   addi a1, s0, -1
// [Asm] subst   bge v38, v37, .fannkuch.600_23 ->   bge a1, a0, .fannkuch.600_23
// [Asm] subst   lw v64, 0(v3) ->   lw a0, 0(s8)
// [Asm] subst   addi v65, v64, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v65, 0(v3) ->   sw a0, 0(s8)
// [Asm] subst   j .fannkuch.600_18 ->   j .fannkuch.600_18
// [Asm] subst   lw v29, 0(v28) ->   lw a0, 0(s7)
// [Asm] subst   li v152, 1 ->   li a1, 1
// [Asm] subst   blt v29, v152, .fannkuch.600_20 ->   blt a0, a1, .fannkuch.600_20
// [Asm] subst   slliw v93, v18, 2 ->   slliw a0, a1, 2
// [Asm] subst   add v94, v8, v93 ->   add a0, s4, a0
// [Asm] subst   sw v18, 0(v94) ->   sw a1, 0(a0)
// [Asm] subst   addi v91, v18, 1 ->   addi a0, a1, 1
// [Asm] subst   mv v18, v91 ->   mv a1, a0
// [Asm] subst   j .fannkuch.600_2 ->   j .fannkuch.600_2
// [Asm] subst   lw v49, 0(v11) ->   lw a0, 0(s1)
// [Asm] subst   lw v50, 0(v14) ->   lw a1, 0(s2)
// [Asm] subst   lw v51, 0(v3) ->   lw a2, 0(s8)
// [Asm] subst   li v137, 2 ->   li a3, 2
// [Asm] subst   div v52, v51, v137 ->   div a3, a2, a3
// [Asm] subst   li v135, 2 ->   li a4, 2
// [Asm] subst   mul v53, v52, v135 ->   mul a3, a3, a4
// [Asm] subst   sub v54, v51, v53 ->   sub a2, a2, a3
// [Asm] subst   li v132, 2 ->   li a3, 2
// [Asm] subst   mul v55, v54, v132 ->   mul a2, a2, a3
// [Asm] subst   li v130, 1 ->   li a3, 1
// [Asm] subst   sub v56, v130, v55 ->   sub a2, a3, a2
// [Asm] subst   mul v57, v50, v56 ->   mul a1, a1, a2
// [Asm] subst   add v58, v49, v57 ->   add a0, a0, a1
// [Asm] subst   sw v58, 0(v11) ->   sw a0, 0(s1)
// [Asm] subst   addi v9, s11, -4 ->   addi a3, s11, -4
// [Asm] subst   andi s11, v9, -8 ->   andi s11, a3, -8
// [Asm] subst   li v127, 1 ->   li a0, 1
// [Asm] subst   sw v127, 0(v9) ->   sw a0, 0(a3)
// [Asm] subst   addi v16, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi s11, v16, -8 ->   andi s11, a2, -8
// [Asm] subst   sw zero, 0(v16) ->   sw zero, 0(a2)
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a1, v28 ->   mv a1, s7
// [Asm] subst   mv a4, v8 ->   mv a4, s4
// [Asm] subst   mv a5, v12 ->   mv a5, s6
// [Asm] subst   call go_loop.607 ->   call go_loop.607
// [Asm] subst   lw v84, 0(v3) ->   lw a0, 0(s8)
// [Asm] subst   addi v85, v84, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v85, 0(v3) ->   sw a0, 0(s8)
// [Asm] subst   j .fannkuch.600_18 ->   j .fannkuch.600_18
// [Asm] subst   lw v67, 0(v14) ->   lw a0, 0(s2)
// [Asm] subst   sw v67, 0(v4) ->   sw a0, 0(s5)
// [Asm] subst   lw v69, 0(v11) ->   lw a0, 0(s1)
// [Asm] subst   lw v70, 0(v14) ->   lw a1, 0(s2)
// [Asm] subst   lw v71, 0(v3) ->   lw a2, 0(s8)
// [Asm] subst   li v116, 2 ->   li a3, 2
// [Asm] subst   div v72, v71, v116 ->   div a3, a2, a3
// [Asm] subst   li v114, 2 ->   li a4, 2
// [Asm] subst   mul v73, v72, v114 ->   mul a3, a3, a4
// [Asm] subst   sub v74, v71, v73 ->   sub a2, a2, a3
// [Asm] subst   li v111, 2 ->   li a3, 2
// [Asm] subst   mul v75, v74, v111 ->   mul a2, a2, a3
// [Asm] subst   li v109, 1 ->   li a3, 1
// [Asm] subst   sub v76, v109, v75 ->   sub a2, a3, a2
// [Asm] subst   mul v77, v70, v76 ->   mul a1, a1, a2
// [Asm] subst   add v78, v69, v77 ->   add a0, a0, a1
// [Asm] subst   sw v78, 0(v11) ->   sw a0, 0(s1)
// [Asm] subst   addi v6, s11, -4 ->   addi a3, s11, -4
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a3, -8
// [Asm] subst   li v106, 1 ->   li a0, 1
// [Asm] subst   sw v106, 0(v6) ->   sw a0, 0(a3)
// [Asm] subst   addi v13, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi s11, v13, -8 ->   andi s11, a2, -8
// [Asm] subst   sw zero, 0(v13) ->   sw zero, 0(a2)
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a1, v28 ->   mv a1, s7
// [Asm] subst   mv a4, v8 ->   mv a4, s4
// [Asm] subst   mv a5, v12 ->   mv a5, s6
// [Asm] subst   call go_loop.605 ->   call go_loop.605
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v6, Insn(iref=%1) -> v3, Insn(iref=%3) -> v5, Self(fref=f9) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.609"];
// [Asm]   r0 [label="v11 ← a0", color=green];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a5", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a6", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r14 [label="v2 ← a0", color=green];
// [Asm]   r8 [label="a7", color=blue];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r15 [label="v3 ← s0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="v4 ← a0", color=green];
// [Asm]   r18 [label="v6 ← a0", color=green];
// [Asm]   r17 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r4 -- r15;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r15 -- r17;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r8 -- r15;
// [Asm]   r9 -- r15;
// [Asm]   r1 -- r4;
// [Asm]   r7 -- r15;
// [Asm]   r10 -- r15;
// [Asm]   r12 -- r15;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r11 -- r15;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r3;
// [Asm]   r15 -- r16;
// [Asm]   r14 -- r15;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v11-> 1:a0-> 2:a1-> 15:v3-> 3:a2-> 4:a3-> 5:a4-> 6:a5-> 7:a6-> 8:a7-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:v2-> 16:v4-> 17:v5-> 18:v6"
// [Asm]   comment = "v11<-a0;v2<-a0;v3<-s0;v4<-a0;v6<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.609"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v11, 9 ->   li a0, 9
// [Asm] subst   call fannkuch.600 ->   call fannkuch.600
// [Asm] subst   lw v3, 0(v2) ->   lw s0, 0(a0)
// [Asm] subst   lw v4, 4(v2) ->   lw a0, 4(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v3 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v7, FnParam(fref=f0, fpref=$f.1) -> v3, Insn(iref=%7) -> v10, Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v13, Insn(iref=%2) -> v6, Insn(iref=%9) -> v12, Insn(iref=%8) -> v11, Insn(iref=%1) -> v5, Insn(iref=%6) -> v9, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v8, Insn(iref=%0) -> v4
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=1)])
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v2, v4, v21, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v7, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v6, v17, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v2, v6, v18, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v2, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init_count.602"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="t1", color=blue];
// [Asm]   r23 [label="t4", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r9 [label="v17 ← a3", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="v4 ← a2", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="v9 ← a2", color=green];
// [Asm]   r7 [label="v6 ← a2", color=green];
// [Asm]   r10 [label="v18 ← a3", color=green];
// [Asm]   r22 [label="t3", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="v7 ← a3", color=green];
// [Asm]   r5 [label="v21 ← a3", color=green];
// [Asm]   r24 [label="v12 ← a0", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r25 [label="v13 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="t0", color=blue];
// [Asm]   r21 [label="t2", color=blue];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="v10 ← a2", color=green];
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r3 -- r6;
// [Asm]   r6 -- r14;
// [Asm]   r3 -- r12;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r6 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r6 -- r23;
// [Asm]   r2 -- r24;
// [Asm]   r2 -- r19;
// [Asm]   r7 -- r8;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r2 -- r23;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v2-> 1:a1-> 2:zero-> 3:v3-> 4:v4-> 5:v21-> 6:a0-> 7:v6-> 8:v7-> 9:v17-> 10:v18-> 11:v9-> 12:v10-> 13:a2-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:t0-> 20:t1-> 21:t2-> 22:t3-> 23:t4-> 24:v12-> 25:v13"
// [Asm]   comment = "v2<-a0;v3<-a1;v17<-a3;v4<-a2;v9<-a2;v6<-a2;v18<-a3;v7<-a3;v21<-a3;v12<-a0;v13<-a0;v10<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init_count.602"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v4, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   li v21, 1 ->   li a3, 1
// [Asm] subst   beq v4, v21, .init_count.602_1 ->   beq a2, a3, .init_count.602_1
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v6, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   addi v7, v6, -1 ->   addi a3, a2, -1
// [Asm] subst   slliw v17, v7, 2 ->   slliw a3, a3, 2
// [Asm] subst   add v18, v3, v17 ->   add a3, a1, a3
// [Asm] subst   sw v6, 0(v18) ->   sw a2, 0(a3)
// [Asm] subst   lw v9, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   addi v10, v9, -1 ->   addi a2, a2, -1
// [Asm] subst   sw v10, 0(v2) ->   sw a2, 0(a0)
// [Asm] subst   call init_count.602 ->   call init_count.602
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   j .init_count.602_3 ->   j .init_count.602_3
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v9, Insn(iref=%3) -> v8, FnParam(fref=f5, fpref=$f.0) -> v2, Self(fref=f5) -> v0, Insn(iref=%7) -> v11, FnParam(fref=f5, fpref=$f.2) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v12, Insn(iref=%2) -> v7, Insn(iref=%1) -> v6, Insn(iref=%5) -> v10, Insn(iref=%0) -> v5, FnParam(fref=f5, fpref=$f.1) -> v3
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f5, fpref=$f.0), Insn(iref=%1)])
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v8, v2, v4, v16, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v8, v2, v4, v17, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v8, v2, v4, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v8, v4, v14, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v8, v4, v15, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v12 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of move_perm1_forward.608"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="t2", color=blue];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v8 ← a3", color=green];
// [Asm]   r26 [label="v11 ← a0", color=green];
// [Asm]   r6 [label="v5 ← a3", color=green];
// [Asm]   r13 [label="v14 ← a0", color=green];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="v17 ← a4", color=green];
// [Asm]   r7 [label="v6 ← a3", color=green];
// [Asm]   r10 [label="v16 ← a4", color=green];
// [Asm]   r22 [label="t1", color=blue];
// [Asm]   r14 [label="v15 ← a0", color=green];
// [Asm]   r8 [label="v12 ← a0", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r24 [label="t3", color=blue];
// [Asm]   r15 [label="a0", color=blue];
// [Asm]   r25 [label="t4", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a3", color=blue];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r17 [label="a4", color=blue];
// [Asm]   r21 [label="t0", color=blue];
// [Asm]   r12 [label="v9 ← a4", color=green];
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r15 -- r22;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r11;
// [Asm]   r3 -- r24;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r5 -- r11;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r22;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r15 -- r18;
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r13;
// [Asm]   r15 -- r17;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r9 -- r12;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r14;
// [Asm]   r15 -- r24;
// [Asm]   r4 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r14;
// [Asm]   r15 -- r23;
// [Asm]   r0 -- r11;
// [Asm]   r12 -- r14;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r9 -- r13;
// [Asm]   r0 -- r7;
// [Asm]   r4 -- r14;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v2-> 1:a2-> 2:a1-> 3:zero-> 4:v3-> 5:v4-> 15:a0-> 6:v5-> 7:v6-> 9:v8-> 10:v16-> 11:v17-> 12:v9-> 13:v14-> 14:v15-> 16:a3-> 17:a4-> 18:a5-> 19:a6-> 20:a7-> 21:t0-> 22:t1-> 23:t2-> 24:t3-> 25:t4-> 26:v11-> 8:v12"
// [Asm]   comment = "v2<-a0;v8<-a3;v11<-a0;v5<-a3;v14<-a0;v3<-a1;v17<-a4;v6<-a3;v16<-a4;v15<-a0;v12<-a0;v4<-a2;v9<-a4;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of move_perm1_forward.608"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v5, 0(v3) ->   lw a3, 0(a1)
// [Asm] subst   addi v6, v5, -1 ->   addi a3, a3, -1
// [Asm] subst   blt v6, v2, .move_perm1_forward.608_2 ->   blt a3, a0, .move_perm1_forward.608_2
// [Asm] subst   mv v12, zero ->   mv a0, zero
// [Asm] subst   j .move_perm1_forward.608_3 ->   j .move_perm1_forward.608_3
// [Asm] subst   addi v8, v2, 1 ->   addi a3, a0, 1
// [Asm] subst   slliw v16, v8, 2 ->   slliw a4, a3, 2
// [Asm] subst   add v17, v4, v16 ->   add a4, a2, a4
// [Asm] subst   lw v9, 0(v17) ->   lw a4, 0(a4)
// [Asm] subst   slliw v14, v2, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v15, v4, v14 ->   add a0, a2, a0
// [Asm] subst   sw v9, 0(v15) ->   sw a4, 0(a0)
// [Asm] subst   mv a0, v8 ->   mv a0, a3
// [Asm] subst   call move_perm1_forward.608 ->   call move_perm1_forward.608
// [Asm] subst   mv v12, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b2, bpref=$b.0) -> v6, Insn(iref=%15) -> v24, Insn(iref=%9) -> v11, Insn(iref=%16) -> v25, Insn(iref=%8) -> v20, Self(fref=f2) -> v0, Insn(iref=%10) -> v12, Insn(iref=%14) -> v23, BlockParam(bref=b14, bpref=$b.0) -> v14, Insn(iref=%5) -> v17, Insn(iref=%0) -> v7, Insn(iref=%19) -> v28, Insn(iref=%4) -> v16, Insn(iref=%18) -> v27, Insn(iref=%13) -> v22, Mem(fref=f2, mref=m0) -> v5, BlockParam(bref=b11, bpref=$b.0) -> v10, Insn(iref=%7) -> v19, BlockParam(bref=b5, bpref=$b.0) -> v32, Insn(iref=%22) -> v31, BlockParam(bref=b6, bpref=$b.0) -> v15, Insn(iref=%17) -> v26, Insn(iref=%2) -> v9, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v8, Insn(iref=%20) -> v29, Insn(iref=%11) -> v13, Insn(iref=%21) -> v30, Insn(iref=%6) -> v18, FnParam(fref=f2, fpref=$f.0) -> v2, FnParam(fref=f2, fpref=$f.2) -> v4, Insn(iref=%12) -> v21
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b11, bpref=$b.0), Insn(iref=%10)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=0)])
// [Asm] defs: [v15]
// [Asm] live_set: [v4, v6, v15, s11, zero, v3]
// [Asm] move_origin: [v14]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v32]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v11, v5, v10, zero, v4, v6, s11, v52, v3]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v32]
// [Asm] move_origin: [zero]
// [Asm] defined: v32 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v5, v46, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v5, v10, zero, v4, v47, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v10, v21, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v5, v10, zero, v23, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v24, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v5, v10, zero, v4, v41, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v5, v10, zero, v42, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v25, v5, v10, zero, v4, v6, s11, v39, v3]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v40, v25, v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v5, v10, zero, v27, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v5, v10, zero, v29, v4, v6, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v5, v10, zero, v29, v4, v6, s11, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v5, v10, zero, v29, v35, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v5, zero, v4, v6, s11, v31, v3]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: [v31]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v4, v14, v6, s11, zero, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v18, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [zero, v19, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of do_flip.603"];
// [Asm]   r0 [label="v15 ← a0", color=green];
// [Asm]   r33 [label="v14 ← a0", color=green];
// [Asm]   r9 [label="v10 ← a0", color=green];
// [Asm]   r26 [label="v40 ← a6", color=green];
// [Asm]   r6 [label="v2 ← a0", color=green];
// [Asm]   r13 [label="v11 ← a5", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="v29 ← a6", color=green];
// [Asm]   r35 [label="v18 ← a0", color=green];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="v5 ← a4", color=green];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="v3 ← a3", color=green];
// [Asm]   r36 [label="v19 ← a0", color=green];
// [Asm]   r24 [label="v25 ← a5", color=green];
// [Asm]   r15 [label="v12 ← a5", color=green];
// [Asm]   r32 [label="v31 ← a0", color=green];
// [Asm]   r31 [label="v35 ← a5", color=green];
// [Asm]   r17 [label="v46 ← a5", color=green];
// [Asm]   r12 [label="v7 ← a0", color=green];
// [Asm]   r20 [label="v23 ← a5", color=green];
// [Asm]   r23 [label="v42 ← a5", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r27 [label="v27 ← a5", color=green];
// [Asm]   r1 [label="v4 ← a1", color=green];
// [Asm]   r28 [label="v28 ← a5", color=green];
// [Asm]   r11 [label="a0", color=blue];
// [Asm]   r34 [label="v16 ← a0", color=green];
// [Asm]   r22 [label="v41 ← a5", color=green];
// [Asm]   r14 [label="v52 ← a6", color=green];
// [Asm]   r30 [label="v34 ← a5", color=green];
// [Asm]   r25 [label="v39 ← a6", color=green];
// [Asm]   r2 [label="v6 ← a2", color=green];
// [Asm]   r16 [label="v32 ← a0", color=green];
// [Asm]   r18 [label="v47 ← a5", color=green];
// [Asm]   r19 [label="v21 ← a5", color=green];
// [Asm]   r21 [label="v24 ← a5", color=green];
// [Asm]   r10 -- r24;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r5 -- r12;
// [Asm]   r10 -- r14;
// [Asm]   r2 -- r20;
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r9 -- r25;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r1 -- r26;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r1 -- r30;
// [Asm]   r2 -- r15;
// [Asm]   r9 -- r27;
// [Asm]   r5 -- r10;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r10 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r10 -- r19;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r32;
// [Asm]   r29 -- r31;
// [Asm]   r1 -- r17;
// [Asm]   r9 -- r26;
// [Asm]   r5 -- r29;
// [Asm]   r1 -- r20;
// [Asm]   r9 -- r31;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r9 -- r17;
// [Asm]   r4 -- r22;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r3 -- r34;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r35;
// [Asm]   r9 -- r18;
// [Asm]   r4 -- r31;
// [Asm]   r2 -- r34;
// [Asm]   r9 -- r14;
// [Asm]   r5 -- r31;
// [Asm]   r1 -- r31;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r33;
// [Asm]   r5 -- r35;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r30;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r9 -- r28;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r9 -- r23;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r12;
// [Asm]   r5 -- r32;
// [Asm]   r3 -- r10;
// [Asm]   r10 -- r31;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r10 -- r22;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r28 -- r29;
// [Asm]   r3 -- r33;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r13;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r17;
// [Asm]   r10 -- r30;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r2 -- r36;
// [Asm]   r5 -- r14;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r10 -- r25;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r35;
// [Asm]   r2 -- r24;
// [Asm]   r0 -- r4;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r34;
// [Asm]   r5 -- r36;
// [Asm]   r10 -- r17;
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r20;
// [Asm]   r9 -- r15;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r29 -- r30;
// [Asm]   r9 -- r29;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r32;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r13;
// [Asm]   r10 -- r29;
// [Asm]   r9 -- r30;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r10 -- r27;
// [Asm]   r24 -- r26;
// [Asm]   r1 -- r28;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r9 -- r22;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r15;
// [Asm]   r10 -- r28;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r1 -- r29;
// [Asm]   r10 -- r15;
// [Asm]   r13 -- r14;
// [Asm]   r9 -- r24;
// [Asm]   r10 -- r23;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r4 -- r36;
// [Asm]   r2 -- r17;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r25;
// [Asm]   r3 -- r36;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r9 -- r19;
// [Asm]   r2 -- r9;
// [Asm]   r10 -- r32;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r36;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r9 -- r13;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r10 -- r21;
// [Asm]   r2 -- r27;
// [Asm]   comment = "0:v15-> 1:v4-> 2:v6-> 3:s11-> 4:zero-> 5:v3-> 9:v10-> 10:v5-> 13:v11-> 14:v52-> 15:v12-> 17:v46-> 18:v47-> 19:v21-> 20:v23-> 21:v24-> 22:v41-> 23:v42-> 24:v25-> 25:v39-> 26:v40-> 27:v27-> 28:v28-> 29:v29-> 30:v34-> 31:v35-> 32:v31-> 12:v7-> 34:v16-> 35:v18-> 36:v19-> 6:v2-> 33:v14-> 7:a2-> 8:a1-> 11:a0-> 16:v32"
// [Asm]   comment = "v15<-a0;v14<-a0;v10<-a0;v40<-a6;v2<-a0;v11<-a5;v29<-a6;v18<-a0;v5<-a4;v3<-a3;v19<-a0;v25<-a5;v12<-a5;v31<-a0;v35<-a5;v46<-a5;v7<-a0;v23<-a5;v42<-a5;v27<-a5;v4<-a1;v28<-a5;v16<-a0;v41<-a5;v52<-a6;v34<-a5;v39<-a6;v6<-a2;v32<-a0;v47<-a5;v21<-a5;v24<-a5;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of do_flip.603"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v3, a1 ->   mv a3, a1
// [Asm] subst   mv v4, a2 ->   mv a1, a2
// [Asm] subst   mv v6, v2 ->   mv a2, a0
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v7, 0(v6) ->   lw a0, 0(a2)
// [Asm] subst   beq v7, zero, .do_flip.603_3 ->   beq a0, zero, .do_flip.603_3
// [Asm] subst   addi v5, s11, -4 ->   addi a4, s11, -4
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a4, -8
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a4)
// [Asm] subst   lw v11, 0(v6) ->   lw a5, 0(a2)
// [Asm] subst   li v52, 2 ->   li a6, 2
// [Asm] subst   div v12, v11, v52 ->   div a5, a5, a6
// [Asm] subst   blt v12, v10, .do_flip.603_13 ->   blt a5, a0, .do_flip.603_13
// [Asm] subst   mv v32, zero ->   mv a0, zero
// [Asm] subst   slliw v46, v10, 2 ->   slliw a5, a0, 2
// [Asm] subst   add v47, v3, v46 ->   add a5, a3, a5
// [Asm] subst   lw v21, 0(v47) ->   lw a5, 0(a5)
// [Asm] subst   sw v21, 0(v5) ->   sw a5, 0(a4)
// [Asm] subst   lw v23, 0(v6) ->   lw a5, 0(a2)
// [Asm] subst   sub v24, v23, v10 ->   sub a5, a5, a0
// [Asm] subst   slliw v41, v24, 2 ->   slliw a5, a5, 2
// [Asm] subst   add v42, v3, v41 ->   add a5, a3, a5
// [Asm] subst   lw v25, 0(v42) ->   lw a5, 0(a5)
// [Asm] subst   slliw v39, v10, 2 ->   slliw a6, a0, 2
// [Asm] subst   add v40, v3, v39 ->   add a6, a3, a6
// [Asm] subst   sw v25, 0(v40) ->   sw a5, 0(a6)
// [Asm] subst   lw v27, 0(v6) ->   lw a5, 0(a2)
// [Asm] subst   sub v28, v27, v10 ->   sub a5, a5, a0
// [Asm] subst   lw v29, 0(v5) ->   lw a6, 0(a4)
// [Asm] subst   slliw v34, v28, 2 ->   slliw a5, a5, 2
// [Asm] subst   add v35, v3, v34 ->   add a5, a3, a5
// [Asm] subst   sw v29, 0(v35) ->   sw a6, 0(a5)
// [Asm] subst   addi v31, v10, 1 ->   addi a0, a0, 1
// [Asm] subst   j .do_flip.603_11 ->   j .do_flip.603_11
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   lw v16, 0(v3) ->   lw a0, 0(a3)
// [Asm] subst   sw v16, 0(v6) ->   sw a0, 0(a2)
// [Asm] subst   lw v18, 0(v4) ->   lw a0, 0(a1)
// [Asm] subst   addi v19, v18, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v19, 0(v4) ->   sw a0, 0(a1)
// [Asm] subst   j .do_flip.603_2 ->   j .do_flip.603_2
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v9, FnParam(fref=f3, fpref=$f.2) -> v4, Insn(iref=%3) -> v8, Insn(iref=%7) -> v11, FnParam(fref=f3, fpref=$f.1) -> v3, BlockParam(bref=b3, bpref=$b.0) -> v12, Insn(iref=%2) -> v7, Insn(iref=%1) -> v6, FnParam(fref=f3, fpref=$f.0) -> v2, Insn(iref=%5) -> v10, Self(fref=f3) -> v0, Insn(iref=%0) -> v5
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f3, fpref=$f.0), Insn(iref=%1)])
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v8, v2, v4, v16, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v8, v2, v4, v17, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v8, v2, v4, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v8, v4, v14, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v8, v4, v15, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v12 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of move_perm1_forward.606"];
// [Asm]   r0 [label="v12 ← a0", color=green];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="t2", color=blue];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="a0", color=blue];
// [Asm]   r26 [label="v11 ← a0", color=green];
// [Asm]   r6 [label="v4 ← a2", color=green];
// [Asm]   r13 [label="v9 ← a4", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r11 [label="v16 ← a4", color=green];
// [Asm]   r7 [label="v5 ← a3", color=green];
// [Asm]   r10 [label="v8 ← a3", color=green];
// [Asm]   r22 [label="t1", color=blue];
// [Asm]   r14 [label="v14 ← a0", color=green];
// [Asm]   r8 [label="v6 ← a3", color=green];
// [Asm]   r5 [label="v3 ← a1", color=green];
// [Asm]   r15 [label="v15 ← a0", color=green];
// [Asm]   r24 [label="t3", color=blue];
// [Asm]   r25 [label="t4", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r16 [label="a3", color=blue];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r17 [label="a4", color=blue];
// [Asm]   r21 [label="t0", color=blue];
// [Asm]   r12 [label="v17 ← a4", color=green];
// [Asm]   r5 -- r12;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r16;
// [Asm]   r9 -- r25;
// [Asm]   r6 -- r11;
// [Asm]   r13 -- r15;
// [Asm]   r4 -- r24;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r7;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r9 -- r17;
// [Asm]   r4 -- r18;
// [Asm]   r4 -- r22;
// [Asm]   r5 -- r11;
// [Asm]   r6 -- r12;
// [Asm]   r9 -- r18;
// [Asm]   r6 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r9 -- r22;
// [Asm]   r6 -- r13;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r5 -- r9;
// [Asm]   r10 -- r12;
// [Asm]   r6 -- r10;
// [Asm]   r9 -- r23;
// [Asm]   r13 -- r14;
// [Asm]   r10 -- r15;
// [Asm]   r9 -- r24;
// [Asm]   r10 -- r11;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r9 -- r20;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r16;
// [Asm]   r5 -- r14;
// [Asm]   r4 -- r17;
// [Asm]   r9 -- r19;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r9 -- r21;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v12-> 1:v2-> 2:a2-> 3:a1-> 4:zero-> 5:v3-> 6:v4-> 9:a0-> 7:v5-> 8:v6-> 10:v8-> 11:v16-> 12:v17-> 13:v9-> 14:v14-> 15:v15-> 16:a3-> 17:a4-> 18:a5-> 19:a6-> 20:a7-> 21:t0-> 22:t1-> 23:t2-> 24:t3-> 25:t4-> 26:v11"
// [Asm]   comment = "v12<-a0;v11<-a0;v4<-a2;v9<-a4;v2<-a0;v16<-a4;v5<-a3;v8<-a3;v14<-a0;v6<-a3;v3<-a1;v15<-a0;v17<-a4;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of move_perm1_forward.606"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v12, zero ->   mv a0, zero
// [Asm] subst   j .move_perm1_forward.606_3 ->   j .move_perm1_forward.606_3
// [Asm] subst   lw v5, 0(v3) ->   lw a3, 0(a1)
// [Asm] subst   addi v6, v5, -1 ->   addi a3, a3, -1
// [Asm] subst   blt v6, v2, .move_perm1_forward.606_2 ->   blt a3, a0, .move_perm1_forward.606_2
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v8, v2, 1 ->   addi a3, a0, 1
// [Asm] subst   slliw v16, v8, 2 ->   slliw a4, a3, 2
// [Asm] subst   add v17, v4, v16 ->   add a4, a2, a4
// [Asm] subst   lw v9, 0(v17) ->   lw a4, 0(a4)
// [Asm] subst   slliw v14, v2, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v15, v4, v14 ->   add a0, a2, a0
// [Asm] subst   sw v9, 0(v15) ->   sw a4, 0(a0)
// [Asm] subst   mv a0, v8 ->   mv a0, a3
// [Asm] subst   call move_perm1_forward.606 ->   call move_perm1_forward.606
// [Asm] subst   mv v12, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: Self(fref=f20) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.609 ->   call main.609
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] move_perm1_forward.606:
// [Asm] # block info: defs: [v3, v4, v5, v6, v2], uses: [v2, v5, a0, a2, a1, v6, v3], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v3, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.606_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm]   lw v5, 0(v3)  # live: [v2, v4, v5, zero, v3]
// [Asm]   addi v6, v5, -1  # live: [v2, v4, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v6, v2, .move_perm1_forward.606_2  # live: [v2, v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v16, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v3, v16, v14, a0, zero, v8, v4, a2, a1, v17, v15, v9, v2], upward_exposed: [v3, v4, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v4, zero, v3], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.606_1:
// [Asm]   addi v8, v2, 1  # live: [v8, v2, v4, zero, v3]
// [Asm]   slliw v16, v8, 2  # live: [v8, v2, v4, v16, zero, v3]
// [Asm]   add v17, v4, v16  # live: [v8, v2, v4, v17, zero, v3]
// [Asm]   lw v9, 0(v17)  # live: [v8, v2, v4, zero, v9, v3]
// [Asm]   slliw v14, v2, 2  # live: [v8, v4, v14, zero, v9, v3]
// [Asm]   add v15, v4, v14  # live: [v8, v4, v15, zero, v9, v3]
// [Asm]   sw v9, 0(v15)  # live: [v8, v4, zero, v3]
// [Asm]   # save_ctx2  # live: [v8, v4, zero, v3]
// [Asm]   mv a0, v8  # live: [v4, zero, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, zero, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, zero, a0]
// [Asm]   call move_perm1_forward.606  # live: [zero, a0]
// [Asm]   mv v11, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v12, zero  # live: [v12]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v12, a0], upward_exposed: [v12], params_defs: [v12]
// [Asm] # live_in: [v12], live_out: []
// [Asm] # block parameters: [v12]
// [Asm] .move_perm1_forward.606_3:
// [Asm] # control
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.606_2:
// [Asm] # control
// [Asm]   mv v12, zero  # live: [v12]
// [Asm]   j .move_perm1_forward.606_3  # live: [v12]
// [Asm] 
// [Asm] # leaf false
// [Asm] go_loop.607:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [a2, a1, a3, a5, a0, a4], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.607_0:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v53, v8], uses: [v5, v53, v8], upward_exposed: [v5], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.607_2:
// [Asm]   lw v8, 0(v5)  # live: [v2, v5, zero, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   li v53, 1  # live: [v2, v5, v53, zero, v7, v8, v4, v6, v3]
// [Asm]   bne v8, v53, .go_loop.607_4  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [v2, v11, v3], upward_exposed: [v2, v3], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .go_loop.607_3:
// [Asm]   lw v11, 0(v3)  # live: [v3, v11, v5, zero, v7, v4, v6, v2]
// [Asm] # control
// [Asm]   beq v11, v2, .go_loop.607_5  # live: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v13, v42, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, v19, a6, v47, ft5, ft10, v34, ft7, ft4, v46, ft9, v21, a5, fa4, a0, v36, ft2, a2, v43, v17, a3, v24, v39, ft8, t3, fa7, a7, t0, fa5, fa3, v23, ft3, v35, fa0, t4, t2, v15, v40], uses: [v40, v16, v46, v21, v13, a0, v42, v7, v36, a2, a1, v43, v17, v24, v39, zero, v20, v23, v35, v19, v47, v4, v6, v34, v3], upward_exposed: [v7, v4, v6, zero, v3], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.607_6:
// [Asm]   lw v13, 0(v6)  # live: [v2, v5, zero, v13, v7, v4, v6, v3]
// [Asm]   sw v13, 0(v4)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   # save_ctx2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   mv a0, zero  # live: [v2, v5, zero, a0, v7, v4, v6, v3]
// [Asm]   mv a1, v3  # live: [v2, v5, zero, a0, v7, v4, a1, v6, v3]
// [Asm]   mv a2, v6  # live: [v2, v5, zero, a0, v7, v4, a2, a1, v6, v3]
// [Asm]   call move_perm1_forward.608  # live: [v2, v5, zero, a0, v7, v4, v6, v3]
// [Asm]   mv v15, a0  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   # restore_ctx2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   lw v16, 0(v3)  # live: [v2, v5, v16, zero, v7, v4, v6, v3]
// [Asm]   lw v17, 0(v4)  # live: [v2, v5, v16, zero, v7, v4, v17, v6, v3]
// [Asm]   slliw v46, v16, 2  # live: [v2, v5, v46, zero, v7, v4, v17, v6, v3]
// [Asm]   add v47, v6, v46  # live: [v2, v5, zero, v7, v4, v47, v17, v6, v3]
// [Asm]   sw v17, 0(v47)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   lw v19, 0(v3)  # live: [v2, v5, zero, v7, v19, v4, v6, v3]
// [Asm]   slliw v42, v19, 2  # live: [v2, v5, zero, v42, v7, v19, v4, v6, v3]
// [Asm]   add v43, v7, v42  # live: [v2, v5, zero, v7, v19, v4, v6, v43, v3]
// [Asm]   lw v20, 0(v43)  # live: [v2, v5, zero, v20, v7, v19, v4, v6, v3]
// [Asm]   addi v21, v20, -1  # live: [v2, v5, v21, zero, v7, v19, v4, v6, v3]
// [Asm]   slliw v39, v19, 2  # live: [v2, v5, v21, zero, v7, v4, v6, v39, v3]
// [Asm]   add v40, v7, v39  # live: [v2, v40, v5, v21, zero, v7, v4, v6, v3]
// [Asm]   sw v21, 0(v40)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   lw v23, 0(v3)  # live: [v2, v5, zero, v23, v7, v4, v6, v3]
// [Asm]   slliw v35, v23, 2  # live: [v2, v5, zero, v7, v35, v4, v6, v3]
// [Asm]   add v36, v7, v35  # live: [v2, v5, zero, v7, v36, v4, v6, v3]
// [Asm]   lw v24, 0(v36)  # live: [v2, v5, zero, v7, v4, v6, v24, v3]
// [Asm] # control
// [Asm]   li v34, 1  # live: [v2, v5, zero, v7, v4, v6, v24, v34, v3]
// [Asm]   bge v24, v34, .go_loop.607_7  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v26, v27], uses: [v26, v27, v3], upward_exposed: [v3], params_defs: []
// [Asm] # live_in: [v3, v5, zero, v7, v4, v6, v2], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.607_8:
// [Asm]   lw v26, 0(v3)  # live: [v2, v5, zero, v26, v7, v4, v6, v3]
// [Asm]   addi v27, v26, 1  # live: [v2, v5, zero, v27, v7, v4, v6, v3]
// [Asm]   sw v27, 0(v3)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   j .go_loop.607_2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .go_loop.607_4:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .go_loop.607_11:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [], uses: [v5, zero, v3], upward_exposed: [v5, zero, v3], params_defs: []
// [Asm] # live_in: [v3, v5, zero, v7, v4, v6, v2], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.607_5:
// [Asm]   sw zero, 0(v5)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   sw zero, 0(v3)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   j .go_loop.607_2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v5, zero], upward_exposed: [v5, zero], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.607_7:
// [Asm]   sw zero, 0(v5)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   j .go_loop.607_2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # leaf false
// [Asm] fannkuch.600:
// [Asm] # block info: defs: [v8, v164, a1, s11, v18, v2], uses: [v8, v164, s11, a0, zero, v2], upward_exposed: [s11, a0, zero], params_defs: []
// [Asm] # live_in: [s11, a0, zero], live_out: [v8, v18, s11, zero, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.600_0:
// [Asm]   # save_ctx1  # live: [s11, zero, a0]
// [Asm]   mv v2, a0  # live: [s11, zero, v2]
// [Asm]   slliw v164, v2, 2  # live: [v164, s11, zero, v2]
// [Asm]   sub v8, s11, v164  # live: [v2, zero, v8]
// [Asm]   andi s11, v8, -8  # live: [v2, s11, zero, v8]
// [Asm]   mv a1, v2  # live: [v2, s11, zero, v8]
// [Asm] # control
// [Asm]   mv v18, zero  # live: [v2, v18, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v19, v18, v2], upward_exposed: [v18, v2], params_defs: [v18]
// [Asm] # live_in: [v8, v18, s11, zero, v2], live_out: [v2, v18, s11, zero, v8]
// [Asm] # block parameters: [v18]
// [Asm] .fannkuch.600_2:
// [Asm]   addi v19, v2, -1  # live: [v18, zero, v8, v19, s11, v2]
// [Asm] # control
// [Asm]   bge v19, v18, .fannkuch.600_3  # live: [v8, v18, s11, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v11, v14, v161, v10, v159, v4, a1, s11, v12, v15, v3], uses: [v3, v11, v14, v161, v10, zero, v159, v4, s11, v12, v15, v2], upward_exposed: [s11, zero, v2], params_defs: []
// [Asm] # live_in: [v8, s11, zero, v2], live_out: [v3, v11, v14, v10, zero, v8, v4, v15, v12, s11, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.600_4:
// [Asm]   slliw v161, v2, 2  # live: [v161, zero, v8, s11, v2]
// [Asm]   sub v10, s11, v161  # live: [v10, zero, v8, v2]
// [Asm]   andi s11, v10, -8  # live: [v10, zero, v8, s11, v2]
// [Asm]   mv a1, v2  # live: [v10, zero, v8, s11, v2]
// [Asm]   slliw v159, v2, 2  # live: [v10, zero, v159, v8, s11, v2]
// [Asm]   sub v12, s11, v159  # live: [v10, zero, v8, v12, v2]
// [Asm]   andi s11, v12, -8  # live: [v10, zero, v8, v12, s11, v2]
// [Asm]   mv a1, v2  # live: [v10, zero, v8, v12, s11, v2]
// [Asm]   addi v14, s11, -4  # live: [v14, v10, zero, v8, v12, v2]
// [Asm]   andi s11, v14, -8  # live: [v14, v10, zero, v8, v12, s11, v2]
// [Asm]   sw zero, 0(v14)  # live: [v14, v10, zero, v8, v12, s11, v2]
// [Asm]   addi v4, s11, -4  # live: [v14, v10, zero, v8, v4, v12, v2]
// [Asm]   andi s11, v4, -8  # live: [v14, v10, zero, v8, v4, v12, s11, v2]
// [Asm]   sw zero, 0(v4)  # live: [v14, v10, zero, v8, v4, v12, s11, v2]
// [Asm]   addi v11, s11, -4  # live: [v11, v14, v10, zero, v8, v4, v12, v2]
// [Asm]   andi s11, v11, -8  # live: [v11, v14, v10, zero, v8, v4, v12, s11, v2]
// [Asm]   sw zero, 0(v11)  # live: [v11, v14, v10, zero, v8, v4, v12, s11, v2]
// [Asm]   addi v3, s11, -4  # live: [v2, v11, v14, v10, zero, v8, v4, v12, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v3]
// [Asm]   sw zero, 0(v3)  # live: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v3]
// [Asm]   addi v15, s11, -4  # live: [v2, v11, v14, v10, zero, v8, v4, v15, v12, v3]
// [Asm]   andi s11, v15, -8  # live: [v2, v11, v14, v10, zero, v8, v4, v15, v12, s11, v3]
// [Asm]   sw v2, 0(v15)  # live: [v2, v11, v14, v10, zero, v8, v4, v15, v12, s11, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v28], uses: [v15], upward_exposed: [v15], params_defs: []
// [Asm] # live_in: [v3, v11, v14, v10, zero, v8, v4, v15, v12, s11, v2], live_out: [v3, v11, v14, v10, zero, v8, v4, v12, s11, v28, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.600_16:
// [Asm] # control
// [Asm]   mv v28, v15  # live: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] 
// [Asm] # block info: defs: [v29, v152], uses: [v28, v29, v152], upward_exposed: [v28], params_defs: [v28]
// [Asm] # live_in: [v3, v11, v14, v10, zero, v8, v4, v12, s11, v28, v2], live_out: [v3, v11, v14, v10, zero, v8, v4, v12, s11, v28, v2]
// [Asm] # block parameters: [v28]
// [Asm] .fannkuch.600_18:
// [Asm]   lw v29, 0(v28)  # live: [v2, v11, v14, v10, zero, v29, v8, v4, v12, s11, v28, v3]
// [Asm] # control
// [Asm]   li v152, 1  # live: [v2, v11, v14, v10, zero, v29, v8, v152, v4, v12, s11, v28, v3]
// [Asm]   blt v29, v152, .fannkuch.600_20  # live: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] 
// [Asm] # block info: defs: [v37], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v3, v11, v14, v10, zero, v8, v4, v12, s11, v28, v2], live_out: [v3, v11, v14, v10, zero, v8, v37, v4, v12, s11, v28, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.600_19:
// [Asm] # control
// [Asm]   mv v37, zero  # live: [v2, v11, v14, v10, zero, v8, v37, v4, v12, s11, v28, v3]
// [Asm] 
// [Asm] # block info: defs: [v38], uses: [v38, v37, v2], upward_exposed: [v37, v2], params_defs: [v37]
// [Asm] # live_in: [v3, v11, v14, v10, zero, v8, v37, v4, v12, s11, v28, v2], live_out: [v3, v11, v14, v10, zero, v8, v37, v4, v12, s11, v28, v2]
// [Asm] # block parameters: [v37]
// [Asm] .fannkuch.600_22:
// [Asm]   addi v38, v2, -1  # live: [v3, v11, v14, v10, v37, s11, v12, v28, zero, v8, v4, v38, v2]
// [Asm] # control
// [Asm]   bge v38, v37, .fannkuch.600_23  # live: [v2, v11, v14, v10, zero, v8, v37, v4, v12, s11, v28, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v42, v7, ft0, ft1, a1, s11, v44, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, v45, t4, t2, v40], uses: [v14, v10, zero, a0, v42, v7, a2, a1, v12, s11, v28, v44], upward_exposed: [v14, v10, zero, v12, s11, v28], params_defs: []
// [Asm] # live_in: [v3, v11, v14, v10, zero, v8, v4, v12, s11, v28, v2], live_out: [v2, v11, v14, v10, zero, v45, v8, v4, s11, v12, v28, v3]
// [Asm] # block parameters: []
// [Asm] .fannkuch.600_24:
// [Asm]   # save_ctx2  # live: [v2, v11, v14, v10, v12, s11, v28, zero, v8, v4, v3]
// [Asm]   mv a0, v28  # live: [v2, v11, v14, v10, a0, v12, s11, v28, zero, v8, v4, v3]
// [Asm]   mv a1, v12  # live: [v2, v11, v14, v10, a0, a1, v12, s11, v28, zero, v8, v4, v3]
// [Asm]   call init_count.602  # live: [v2, v11, v14, v10, a0, v12, s11, v28, zero, v8, v4, v3]
// [Asm]   mv v40, a0  # live: [v2, v11, v14, v10, v12, s11, v28, zero, v8, v4, v3]
// [Asm]   # restore_ctx2  # live: [v2, v11, v14, v10, v12, s11, v28, zero, v8, v4, v3]
// [Asm]   sw zero, 0(v14)  # live: [v2, v11, v14, v10, v12, s11, v28, zero, v8, v4, v3]
// [Asm]   lw v42, 0(v10)  # live: [v2, v11, v14, v10, v42, v12, s11, v28, zero, v8, v4, v3]
// [Asm]   addi v7, s11, -4  # live: [v2, v11, v14, v10, v42, v7, v12, v28, zero, v8, v4, v3]
// [Asm]   andi s11, v7, -8  # live: [v2, v11, v14, v10, v42, v7, s11, v12, v28, zero, v8, v4, v3]
// [Asm]   sw v42, 0(v7)  # live: [v2, v11, v14, v10, v7, s11, v12, v28, zero, v8, v4, v3]
// [Asm]   # save_ctx2  # live: [v2, v11, v14, v10, v7, s11, v12, v28, zero, v8, v4, v3]
// [Asm]   mv a0, v7  # live: [v2, v11, v14, v10, a0, s11, v12, v28, zero, v8, v4, v3]
// [Asm]   mv a1, v10  # live: [v2, v11, v14, v10, a0, a1, s11, v12, v28, zero, v8, v4, v3]
// [Asm]   mv a2, v14  # live: [v2, v11, v14, v10, a0, a2, a1, s11, v12, v28, zero, v8, v4, v3]
// [Asm]   call do_flip.603  # live: [v3, v11, v14, v10, zero, a0, v8, v4, s11, v12, v28, v2]
// [Asm]   mv v44, a0  # live: [v3, v11, v14, v10, zero, v8, v4, s11, v12, v28, v44, v2]
// [Asm]   # restore_ctx2  # live: [v3, v11, v14, v10, zero, v8, v4, s11, v12, v28, v44, v2]
// [Asm] # control
// [Asm]   mv v45, v44  # live: [v3, v11, v14, v10, zero, v45, v8, v4, s11, v12, v28, v2]
// [Asm] 
// [Asm] # block info: defs: [v47, v46], uses: [v4, v47, v14, v46], upward_exposed: [v4, v14], params_defs: [v45]
// [Asm] # live_in: [v3, v11, v14, v10, zero, v45, v8, v4, s11, v12, v28, v2], live_out: [v2, v11, v14, v10, zero, v8, v4, s11, v12, v28, v3]
// [Asm] # block parameters: [v45]
// [Asm] .fannkuch.600_30:
// [Asm]   lw v46, 0(v4)  # live: [v3, v11, v14, v46, v10, zero, v8, v4, s11, v12, v28, v2]
// [Asm]   lw v47, 0(v14)  # live: [v3, v11, v14, v46, v10, zero, v8, v4, v47, s11, v12, v28, v2]
// [Asm] # control
// [Asm]   blt v47, v46, .fannkuch.600_26  # live: [v3, v11, v14, v10, zero, v8, v4, s11, v12, v28, v2]
// [Asm] 
// [Asm] # block info: defs: [v67, a1, s11, fa1, v73, v82, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, v116, ft4, ft9, fa4, ft2, a3, a7, fa7, v75, fa3, ft3, t2, t1, v69, v13, ft0, ft1, v109, v106, v74, ft7, v71, a5, a0, v78, v114, a2, v111, ft8, t3, v72, t0, fa5, v77, fa0, t4, v70, v83, v76], uses: [v2, v3, v69, v14, v13, v67, a1, s11, v12, v28, v73, v109, v106, v82, zero, a4, v8, v4, v74, v6, v116, v11, v71, a5, a0, v78, v114, a2, v111, a3, v72, v75, v77, v70, v76], upward_exposed: [v2, v11, v14, zero, v8, v4, s11, v12, v28, v3], params_defs: []
// [Asm] # live_in: [v3, v11, v14, v10, zero, v8, v4, s11, v12, v28, v2], live_out: [v3, v11, v14, v10, zero, v8, v4, v83, v12, s11, v28, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.600_25:
// [Asm]   lw v67, 0(v14)  # live: [v3, v11, v14, v10, v67, v12, s11, v28, zero, v8, v4, v2]
// [Asm]   sw v67, 0(v4)  # live: [v3, v11, v14, v10, v12, s11, v28, zero, v8, v4, v2]
// [Asm]   lw v69, 0(v11)  # live: [v3, v11, v14, v69, v10, v12, s11, v28, zero, v8, v4, v2]
// [Asm]   lw v70, 0(v14)  # live: [v3, v11, v14, v69, v10, v12, s11, v28, zero, v8, v4, v70, v2]
// [Asm]   lw v71, 0(v3)  # live: [v3, v11, v14, v71, v69, v10, v12, s11, v28, zero, v8, v4, v70, v2]
// [Asm]   li v116, 2  # live: [v3, v11, v116, v14, v71, v69, v10, v12, s11, v28, zero, v8, v4, v70, v2]
// [Asm]   div v72, v71, v116  # live: [v3, v11, v69, v14, v71, v10, v12, s11, v28, v72, zero, v8, v4, v70, v2]
// [Asm]   li v114, 2  # live: [v3, v11, v69, v14, v71, v10, v114, v12, s11, v28, v72, zero, v8, v4, v70, v2]
// [Asm]   mul v73, v72, v114  # live: [v3, v11, v69, v14, v71, v10, v12, s11, v28, v73, zero, v8, v4, v70, v2]
// [Asm]   sub v74, v71, v73  # live: [v3, v11, v69, v14, v10, v12, s11, v28, zero, v8, v4, v70, v74, v2]
// [Asm]   li v111, 2  # live: [v3, v11, v69, v14, v10, v111, v12, s11, v28, zero, v8, v4, v70, v74, v2]
// [Asm]   mul v75, v74, v111  # live: [v3, v11, v69, v14, v10, v12, s11, v28, v75, zero, v8, v4, v70, v2]
// [Asm]   li v109, 1  # live: [v3, v11, v69, v14, v10, v12, s11, v28, v109, v75, zero, v8, v4, v70, v2]
// [Asm]   sub v76, v109, v75  # live: [v3, v76, v11, v69, v14, v10, v12, s11, v28, zero, v8, v4, v70, v2]
// [Asm]   mul v77, v70, v76  # live: [v3, v11, v14, v69, v10, v12, s11, v28, zero, v77, v8, v4, v2]
// [Asm]   add v78, v69, v77  # live: [v3, v11, v14, v10, v78, v12, s11, v28, zero, v8, v4, v2]
// [Asm]   sw v78, 0(v11)  # live: [v3, v11, v14, v10, v12, s11, v28, zero, v8, v4, v2]
// [Asm]   addi v6, s11, -4  # live: [v3, v11, v14, v10, v12, v28, zero, v8, v4, v6, v2]
// [Asm]   andi s11, v6, -8  # live: [v3, v11, v14, v10, v12, s11, v28, zero, v8, v4, v6, v2]
// [Asm]   li v106, 1  # live: [v3, v11, v14, v10, v12, s11, v28, v106, zero, v8, v4, v6, v2]
// [Asm]   sw v106, 0(v6)  # live: [v3, v11, v14, v10, v12, s11, v28, zero, v8, v4, v6, v2]
// [Asm]   addi v13, s11, -4  # live: [v3, v11, v14, v10, v13, v12, v28, zero, v8, v4, v6, v2]
// [Asm]   andi s11, v13, -8  # live: [v3, v11, v14, v10, v13, v12, s11, v28, zero, v8, v4, v6, v2]
// [Asm]   sw zero, 0(v13)  # live: [v3, v11, v14, v10, v13, v12, s11, v28, zero, v8, v4, v6, v2]
// [Asm]   # save_ctx2  # live: [v3, v11, v14, v10, v13, v12, s11, v28, zero, v8, v4, v6, v2]
// [Asm]   mv a0, v2  # live: [v3, v11, v14, v10, a0, v13, v12, s11, v28, zero, v8, v4, v6, v2]
// [Asm]   mv a1, v28  # live: [v3, v11, v14, v10, a0, v13, a1, v12, s11, v28, zero, v8, v4, v6, v2]
// [Asm]   mv a2, v13  # live: [v3, v11, v14, v10, a0, a2, a1, v12, s11, v28, zero, v8, v4, v6, v2]
// [Asm]   mv a3, v6  # live: [v3, v11, v14, v10, a0, a2, a1, v12, s11, a3, v28, zero, v8, v4, v2]
// [Asm]   mv a4, v8  # live: [v3, v11, v14, v10, a0, a2, a1, v12, s11, a3, v28, zero, a4, v8, v4, v2]
// [Asm]   mv a5, v12  # live: [v3, v11, v14, v10, a5, a0, a2, a1, v12, s11, a3, v28, zero, a4, v8, v4, v2]
// [Asm]   call go_loop.605  # live: [v2, v11, v14, v10, zero, a0, v8, v4, v12, s11, v28, v3]
// [Asm]   mv v82, a0  # live: [v2, v11, v14, v82, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm]   # restore_ctx2  # live: [v2, v11, v14, v82, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] # control
// [Asm]   mv v83, v82  # live: [v2, v11, v14, v10, zero, v8, v4, v83, v12, s11, v28, v3]
// [Asm] 
// [Asm] # block info: defs: [v84, v85], uses: [v85, v84, v28, v3], upward_exposed: [v28, v3], params_defs: [v83]
// [Asm] # live_in: [v3, v11, v14, v10, zero, v8, v4, v83, v12, s11, v28, v2], live_out: [v3, v11, v14, v10, zero, v8, v4, v12, s11, v28, v2]
// [Asm] # block parameters: [v83]
// [Asm] .fannkuch.600_31:
// [Asm]   lw v84, 0(v3)  # live: [v2, v11, v14, v10, zero, v8, v84, v4, v12, s11, v28, v3]
// [Asm]   addi v85, v84, 1  # live: [v2, v11, v14, v10, zero, v8, v85, v4, v12, s11, v28, v3]
// [Asm]   sw v85, 0(v3)  # live: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] # control
// [Asm]   mv v28, v28  # live: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm]   j .fannkuch.600_18  # live: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] 
// [Asm] # block info: defs: [v94, v91, v18, v93], uses: [v93, v94, v91, v18, v8], upward_exposed: [v18, v8], params_defs: []
// [Asm] # live_in: [v2, v18, s11, zero, v8], live_out: [v8, v18, s11, zero, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.600_3:
// [Asm]   slliw v93, v18, 2  # live: [v2, v93, s11, v18, zero, v8]
// [Asm]   add v94, v8, v93  # live: [v2, v94, s11, v18, zero, v8]
// [Asm]   sw v18, 0(v94)  # live: [v2, s11, v18, zero, v8]
// [Asm]   addi v91, v18, 1  # live: [v2, v91, s11, zero, v8]
// [Asm] # control
// [Asm]   mv v18, v91  # live: [v2, v18, s11, zero, v8]
// [Asm]   j .fannkuch.600_2  # live: [v2, v18, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v31], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v4, s11, zero], live_out: [v11, v4, s11, v31]
// [Asm] # block parameters: []
// [Asm] .fannkuch.600_20:
// [Asm] # control
// [Asm]   mv v31, zero  # live: [v11, v4, s11, v31]
// [Asm] 
// [Asm] # block info: defs: [v32], uses: [v31], upward_exposed: [v31], params_defs: [v31]
// [Asm] # live_in: [v11, v4, s11, v31], live_out: [v11, v32, v4, s11]
// [Asm] # block parameters: [v31]
// [Asm] .fannkuch.600_29:
// [Asm] # control
// [Asm]   mv v32, v31  # live: [v11, v32, v4, s11]
// [Asm] 
// [Asm] # block info: defs: [v5, s11, v33, v34, v36], uses: [v11, v5, v4, s11, v33, v34], upward_exposed: [v11, v4, s11], params_defs: [v32]
// [Asm] # live_in: [v11, v32, v4, s11], live_out: [v36]
// [Asm] # block parameters: [v32]
// [Asm] .fannkuch.600_6:
// [Asm]   lw v33, 0(v4)  # live: [v11, s11, v33]
// [Asm]   lw v34, 0(v11)  # live: [s11, v34, v33]
// [Asm]   addi v5, s11, -8  # live: [v5, v34, v33]
// [Asm]   andi s11, v5, -8  # live: [v5, v34, v33]
// [Asm]   sw v33, 0(v5)  # live: [v5, v34]
// [Asm]   sw v34, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv v36, v5  # live: [v36]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v36], upward_exposed: [v36], params_defs: [v36]
// [Asm] # live_in: [v36], live_out: []
// [Asm] # block parameters: [v36]
// [Asm] .fannkuch.600_5:
// [Asm] # control
// [Asm]   mv a0, v36  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v87, v99, v96, v97, v37, v89, v98], uses: [v87, v10, v99, v96, v97, v8, v37, v89, v98], upward_exposed: [v37, v10, v8], params_defs: []
// [Asm] # live_in: [v3, v11, v14, v10, zero, v8, v37, v4, v12, s11, v28, v2], live_out: [v3, v11, v14, v10, zero, v8, v37, v4, v12, s11, v28, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.600_23:
// [Asm]   slliw v98, v37, 2  # live: [v3, v11, v14, v10, v37, v12, s11, v28, v98, zero, v8, v4, v2]
// [Asm]   add v99, v8, v98  # live: [v3, v11, v14, v10, v37, v12, s11, v28, v99, zero, v8, v4, v2]
// [Asm]   lw v87, 0(v99)  # live: [v3, v11, v14, v87, v10, v37, v12, s11, v28, zero, v8, v4, v2]
// [Asm]   slliw v96, v37, 2  # live: [v3, v11, v14, v87, v10, v37, v12, s11, v28, v96, zero, v8, v4, v2]
// [Asm]   add v97, v10, v96  # live: [v3, v11, v14, v87, v10, v37, v12, s11, v28, zero, v97, v8, v4, v2]
// [Asm]   sw v87, 0(v97)  # live: [v2, v11, v14, v10, zero, v8, v4, v37, v12, s11, v28, v3]
// [Asm]   addi v89, v37, 1  # live: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v89, v3]
// [Asm] # control
// [Asm]   mv v37, v89  # live: [v2, v11, v14, v10, zero, v8, v37, v4, v12, s11, v28, v3]
// [Asm]   j .fannkuch.600_22  # live: [v2, v11, v14, v10, zero, v8, v37, v4, v12, s11, v28, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v58, v16, v127, ft0, ft1, a1, s11, fa1, v51, v63, v130, fa2, ft6, a4, v50, fa6, a6, ft5, ft10, v57, v54, v137, ft7, v62, ft4, v53, v49, ft9, a5, a0, fa4, ft2, a2, v52, a3, v9, ft8, a7, t3, fa7, t0, fa5, v56, fa3, ft3, fa0, t4, t2, v55, v135, v132], uses: [v3, v2, v58, v16, v14, v127, a1, s11, v12, v28, v51, v130, zero, v50, a4, v8, v57, v137, v54, v11, v62, v49, v53, a5, a0, a2, v52, a3, v9, v56, v55, v135, v132], upward_exposed: [v3, v11, v14, zero, v8, s11, v12, v28, v2], params_defs: []
// [Asm] # live_in: [v2, v11, v14, v10, zero, v8, v4, s11, v12, v28, v3], live_out: [v3, v11, v63, v14, v10, zero, v8, v4, v12, s11, v28, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.600_26:
// [Asm]   lw v49, 0(v11)  # live: [v3, v11, v14, v49, v10, v12, s11, v28, zero, v8, v4, v2]
// [Asm]   lw v50, 0(v14)  # live: [v3, v11, v14, v49, v10, v12, s11, v28, zero, v50, v8, v4, v2]
// [Asm]   lw v51, 0(v3)  # live: [v3, v11, v14, v49, v10, v12, s11, v28, v51, zero, v50, v8, v4, v2]
// [Asm]   li v137, 2  # live: [v3, v11, v14, v49, v10, v12, s11, v28, v51, zero, v50, v8, v4, v137, v2]
// [Asm]   div v52, v51, v137  # live: [v3, v11, v14, v49, v10, v12, s11, v52, v28, v51, zero, v50, v8, v4, v2]
// [Asm]   li v135, 2  # live: [v3, v11, v14, v49, v10, v12, s11, v52, v28, v51, zero, v50, v8, v4, v135, v2]
// [Asm]   mul v53, v52, v135  # live: [v3, v11, v14, v49, v10, v53, v12, s11, v28, v51, zero, v50, v8, v4, v2]
// [Asm]   sub v54, v51, v53  # live: [v3, v11, v14, v49, v10, v12, s11, v28, zero, v50, v8, v4, v54, v2]
// [Asm]   li v132, 2  # live: [v3, v132, v11, v14, v49, v10, v12, s11, v28, zero, v50, v8, v4, v54, v2]
// [Asm]   mul v55, v54, v132  # live: [v3, v11, v14, v10, v49, v12, s11, v28, zero, v50, v8, v4, v55, v2]
// [Asm]   li v130, 1  # live: [v3, v11, v14, v10, v49, v12, s11, v28, v130, zero, v50, v8, v4, v55, v2]
// [Asm]   sub v56, v130, v55  # live: [v3, v11, v14, v10, v49, v12, s11, v28, v56, zero, v50, v8, v4, v2]
// [Asm]   mul v57, v50, v56  # live: [v3, v11, v14, v10, v49, v12, s11, v28, zero, v8, v4, v57, v2]
// [Asm]   add v58, v49, v57  # live: [v3, v11, v14, v58, v10, v12, s11, v28, zero, v8, v4, v2]
// [Asm]   sw v58, 0(v11)  # live: [v3, v11, v14, v10, v12, s11, v28, zero, v8, v4, v2]
// [Asm]   addi v9, s11, -4  # live: [v3, v11, v14, v10, v12, v28, v9, zero, v8, v4, v2]
// [Asm]   andi s11, v9, -8  # live: [v3, v11, v14, v10, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm]   li v127, 1  # live: [v3, v11, v14, v10, v127, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm]   sw v127, 0(v9)  # live: [v3, v11, v14, v10, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm]   addi v16, s11, -4  # live: [v3, v11, v14, v16, v10, v12, v28, v9, zero, v8, v4, v2]
// [Asm]   andi s11, v16, -8  # live: [v3, v11, v14, v16, v10, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm]   sw zero, 0(v16)  # live: [v3, v11, v14, v16, v10, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm]   # save_ctx2  # live: [v3, v11, v14, v16, v10, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm]   mv a0, v2  # live: [v3, v11, v14, v16, v10, a0, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm]   mv a1, v28  # live: [v3, v11, v14, v16, v10, a0, a1, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm]   mv a2, v16  # live: [v3, v11, v14, v10, a0, a2, a1, v12, s11, v28, v9, zero, v8, v4, v2]
// [Asm]   mv a3, v9  # live: [v3, v11, v14, v10, a0, a2, a1, v12, s11, a3, v28, zero, v8, v4, v2]
// [Asm]   mv a4, v8  # live: [v3, v11, v14, v10, a0, a2, a1, v12, s11, a3, v28, zero, a4, v8, v4, v2]
// [Asm]   mv a5, v12  # live: [v3, v11, v14, v10, a5, a0, a2, a1, v12, s11, a3, v28, zero, a4, v8, v4, v2]
// [Asm]   call go_loop.607  # live: [v2, v11, v14, v10, zero, a0, v8, v4, v12, s11, v28, v3]
// [Asm]   mv v62, a0  # live: [v2, v11, v62, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm]   # restore_ctx2  # live: [v2, v11, v62, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] # control
// [Asm]   mv v63, v62  # live: [v2, v11, v63, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] 
// [Asm] # block info: defs: [v65, v64], uses: [v65, v28, v64, v3], upward_exposed: [v28, v3], params_defs: [v63]
// [Asm] # live_in: [v3, v11, v63, v14, v10, zero, v8, v4, v12, s11, v28, v2], live_out: [v3, v11, v14, v10, zero, v8, v4, v12, s11, v28, v2]
// [Asm] # block parameters: [v63]
// [Asm] .fannkuch.600_32:
// [Asm]   lw v64, 0(v3)  # live: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v64, v3]
// [Asm]   addi v65, v64, 1  # live: [v2, v11, v14, v10, zero, v8, v4, v65, v12, s11, v28, v3]
// [Asm]   sw v65, 0(v3)  # live: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] # control
// [Asm]   mv v28, v28  # live: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm]   j .fannkuch.600_18  # live: [v2, v11, v14, v10, zero, v8, v4, v12, s11, v28, v3]
// [Asm] 
// [Asm] # leaf true
// [Asm] do_flip.603:
// [Asm] # block info: defs: [v3, v4, v6, v2], uses: [a2, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v4, v6, s11, zero, v3]
// [Asm] # block parameters: []
// [Asm] .do_flip.603_0:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v7], uses: [v6, zero, v7], upward_exposed: [v6, zero], params_defs: [v6]
// [Asm] # live_in: [v4, v6, s11, zero, v3], live_out: [v4, v6, s11, zero, v3]
// [Asm] # block parameters: [v6]
// [Asm] .do_flip.603_2:
// [Asm]   lw v7, 0(v6)  # live: [zero, v7, v4, v6, s11, v3]
// [Asm] # control
// [Asm]   beq v7, zero, .do_flip.603_3  # live: [v4, v6, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v5, s11], uses: [v5, s11, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [v4, v6, s11, zero, v3], live_out: [v5, zero, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .do_flip.603_4:
// [Asm]   addi v5, s11, -4  # live: [v5, zero, v4, v6, v3]
// [Asm]   andi s11, v5, -8  # live: [v5, zero, v4, v6, s11, v3]
// [Asm]   sw zero, 0(v5)  # live: [v4, v5, v6, s11, zero, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, zero, v4, v6, s11, v3], live_out: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .do_flip.603_9:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v11, v52, v12], uses: [v11, v6, v52, v12, v10], upward_exposed: [v6, v10], params_defs: [v10]
// [Asm] # live_in: [v5, v10, zero, v4, v6, s11, v3], live_out: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] # block parameters: [v10]
// [Asm] .do_flip.603_11:
// [Asm]   lw v11, 0(v6)  # live: [v11, v5, v10, zero, v4, v6, s11, v3]
// [Asm]   li v52, 2  # live: [v11, v5, v10, zero, v4, v6, s11, v52, v3]
// [Asm]   div v12, v11, v52  # live: [v5, v10, zero, v4, v6, s11, v12, v3]
// [Asm] # control
// [Asm]   blt v12, v10, .do_flip.603_13  # live: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v25, v46, v21, v10, v42, v41, v24, v28, v31, v39, v29, v27, v23, v35, v47, v34, v40], uses: [v40, v25, v46, v5, v21, v10, v42, v41, v24, v28, v31, v39, v29, v23, v27, v35, v47, v6, v34, v3], upward_exposed: [v5, v6, v10, v3], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v4, v6, s11, v3], live_out: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .do_flip.603_12:
// [Asm]   slliw v46, v10, 2  # live: [v5, v46, v10, zero, v4, v6, s11, v3]
// [Asm]   add v47, v3, v46  # live: [v5, v10, zero, v4, v47, v6, s11, v3]
// [Asm]   lw v21, 0(v47)  # live: [v5, v10, v21, zero, v4, v6, s11, v3]
// [Asm]   sw v21, 0(v5)  # live: [v5, v10, zero, v4, v6, s11, v3]
// [Asm]   lw v23, 0(v6)  # live: [v5, v10, zero, v23, v4, v6, s11, v3]
// [Asm]   sub v24, v23, v10  # live: [v5, v10, zero, v4, v6, s11, v24, v3]
// [Asm]   slliw v41, v24, 2  # live: [v5, v10, zero, v4, v41, v6, s11, v3]
// [Asm]   add v42, v3, v41  # live: [v5, v10, zero, v42, v4, v6, s11, v3]
// [Asm]   lw v25, 0(v42)  # live: [v25, v5, v10, zero, v4, v6, s11, v3]
// [Asm]   slliw v39, v10, 2  # live: [v25, v5, v10, zero, v4, v6, s11, v39, v3]
// [Asm]   add v40, v3, v39  # live: [v40, v25, v5, v10, zero, v4, v6, s11, v3]
// [Asm]   sw v25, 0(v40)  # live: [v5, v10, zero, v4, v6, s11, v3]
// [Asm]   lw v27, 0(v6)  # live: [v5, v10, zero, v27, v4, v6, s11, v3]
// [Asm]   sub v28, v27, v10  # live: [v5, v10, zero, v4, v6, s11, v28, v3]
// [Asm]   lw v29, 0(v5)  # live: [v5, v10, zero, v29, v4, v6, s11, v28, v3]
// [Asm]   slliw v34, v28, 2  # live: [v5, v10, zero, v29, v4, v6, s11, v34, v3]
// [Asm]   add v35, v3, v34  # live: [v5, v10, zero, v29, v35, v4, v6, s11, v3]
// [Asm]   sw v29, 0(v35)  # live: [v5, v10, zero, v4, v6, s11, v3]
// [Asm]   addi v31, v10, 1  # live: [v5, zero, v4, v6, s11, v31, v3]
// [Asm] # control
// [Asm]   mv v10, v31  # live: [v5, v10, zero, v4, v6, s11, v3]
// [Asm]   j .do_flip.603_11  # live: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v32], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v32]
// [Asm] # block parameters: []
// [Asm] .do_flip.603_3:
// [Asm] # control
// [Asm]   mv v32, zero  # live: [v32]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v32, a0], upward_exposed: [v32], params_defs: [v32]
// [Asm] # live_in: [v32], live_out: []
// [Asm] # block parameters: [v32]
// [Asm] .do_flip.603_5:
// [Asm] # control
// [Asm]   mv a0, v32  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v4, v6, s11, zero, v3], live_out: [v14, zero, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .do_flip.603_13:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v4, v14, v6, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [v14], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14, zero, v4, v6, s11, v3], live_out: [zero, v4, v6, v15, s11, v3]
// [Asm] # block parameters: [v14]
// [Asm] .do_flip.603_14:
// [Asm] # control
// [Asm]   mv v15, v14  # live: [v4, v6, v15, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v19, v16, v18], uses: [v16, v18, v19, v4, v6, v3], upward_exposed: [v4, v6, v3], params_defs: [v15]
// [Asm] # live_in: [zero, v4, v6, v15, s11, v3], live_out: [v4, v6, s11, zero, v3]
// [Asm] # block parameters: [v15]
// [Asm] .do_flip.603_6:
// [Asm]   lw v16, 0(v3)  # live: [v16, zero, v4, v6, s11, v3]
// [Asm]   sw v16, 0(v6)  # live: [zero, v4, v6, s11, v3]
// [Asm]   lw v18, 0(v4)  # live: [v18, zero, v4, v6, s11, v3]
// [Asm]   addi v19, v18, 1  # live: [zero, v19, v4, v6, s11, v3]
// [Asm]   sw v19, 0(v4)  # live: [v4, v6, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v6  # live: [v4, v6, s11, zero, v3]
// [Asm]   j .do_flip.603_2  # live: [v4, v6, s11, zero, v3]
// [Asm] 
// [Asm] # leaf false
// [Asm] main.609:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v2, v11, a0, v4, v6, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.609_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v11, 9  # live: [v11]
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   call fannkuch.600  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm]   lw v3, 0(v2)  # live: [v2, v3]
// [Asm]   lw v4, 4(v2)  # live: [v4, v3]
// [Asm]   # save_ctx2  # live: [v4, v3]
// [Asm]   mv a0, v4  # live: [a0, v3]
// [Asm]   call minimbt_print_int  # live: [a0, v3]
// [Asm]   mv v5, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm]   # save_ctx2  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] go_loop.605:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [a2, a1, a3, a5, a0, a4], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.605_0:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v53, v8], uses: [v5, v53, v8], upward_exposed: [v5], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.605_2:
// [Asm]   lw v8, 0(v5)  # live: [v2, v5, zero, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   li v53, 1  # live: [v2, v5, v53, zero, v7, v8, v4, v6, v3]
// [Asm]   bne v8, v53, .go_loop.605_4  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [v2, v11, v3], upward_exposed: [v2, v3], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .go_loop.605_3:
// [Asm]   lw v11, 0(v3)  # live: [v3, v11, v5, zero, v7, v4, v6, v2]
// [Asm] # control
// [Asm]   beq v11, v2, .go_loop.605_5  # live: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v13, v42, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, v19, a6, v47, ft5, ft10, v34, ft7, ft4, v46, ft9, v21, a5, fa4, a0, v36, ft2, a2, v43, v17, a3, v24, v39, ft8, t3, fa7, a7, t0, fa5, fa3, v23, ft3, v35, fa0, t4, t2, v15, v40], uses: [v40, v16, v46, v21, v13, a0, v42, v7, v36, a2, a1, v43, v17, v24, v39, zero, v20, v23, v35, v19, v47, v4, v6, v34, v3], upward_exposed: [v7, v4, v6, zero, v3], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.605_6:
// [Asm]   lw v13, 0(v6)  # live: [v2, v5, zero, v13, v7, v4, v6, v3]
// [Asm]   sw v13, 0(v4)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   # save_ctx2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   mv a0, zero  # live: [v2, v5, zero, a0, v7, v4, v6, v3]
// [Asm]   mv a1, v3  # live: [v2, v5, zero, a0, v7, v4, a1, v6, v3]
// [Asm]   mv a2, v6  # live: [v2, v5, zero, a0, v7, v4, a2, a1, v6, v3]
// [Asm]   call move_perm1_forward.606  # live: [v2, v5, zero, a0, v7, v4, v6, v3]
// [Asm]   mv v15, a0  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   # restore_ctx2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   lw v16, 0(v3)  # live: [v2, v5, v16, zero, v7, v4, v6, v3]
// [Asm]   lw v17, 0(v4)  # live: [v2, v5, v16, zero, v7, v4, v17, v6, v3]
// [Asm]   slliw v46, v16, 2  # live: [v2, v5, v46, zero, v7, v4, v17, v6, v3]
// [Asm]   add v47, v6, v46  # live: [v2, v5, zero, v7, v4, v47, v17, v6, v3]
// [Asm]   sw v17, 0(v47)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   lw v19, 0(v3)  # live: [v2, v5, zero, v7, v19, v4, v6, v3]
// [Asm]   slliw v42, v19, 2  # live: [v2, v5, zero, v42, v7, v19, v4, v6, v3]
// [Asm]   add v43, v7, v42  # live: [v2, v5, zero, v7, v19, v4, v6, v43, v3]
// [Asm]   lw v20, 0(v43)  # live: [v2, v5, zero, v20, v7, v19, v4, v6, v3]
// [Asm]   addi v21, v20, -1  # live: [v2, v5, v21, zero, v7, v19, v4, v6, v3]
// [Asm]   slliw v39, v19, 2  # live: [v2, v5, v21, zero, v7, v4, v6, v39, v3]
// [Asm]   add v40, v7, v39  # live: [v2, v40, v5, v21, zero, v7, v4, v6, v3]
// [Asm]   sw v21, 0(v40)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   lw v23, 0(v3)  # live: [v2, v5, zero, v23, v7, v4, v6, v3]
// [Asm]   slliw v35, v23, 2  # live: [v2, v5, zero, v7, v35, v4, v6, v3]
// [Asm]   add v36, v7, v35  # live: [v2, v5, zero, v7, v36, v4, v6, v3]
// [Asm]   lw v24, 0(v36)  # live: [v2, v5, zero, v7, v4, v6, v24, v3]
// [Asm] # control
// [Asm]   li v34, 1  # live: [v2, v5, zero, v7, v4, v6, v24, v34, v3]
// [Asm]   bge v24, v34, .go_loop.605_7  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v26, v27], uses: [v26, v27, v3], upward_exposed: [v3], params_defs: []
// [Asm] # live_in: [v3, v5, zero, v7, v4, v6, v2], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.605_8:
// [Asm]   lw v26, 0(v3)  # live: [v2, v5, zero, v26, v7, v4, v6, v3]
// [Asm]   addi v27, v26, 1  # live: [v2, v5, zero, v27, v7, v4, v6, v3]
// [Asm]   sw v27, 0(v3)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   j .go_loop.605_2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .go_loop.605_4:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .go_loop.605_11:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [], uses: [v5, zero, v3], upward_exposed: [v5, zero, v3], params_defs: []
// [Asm] # live_in: [v3, v5, zero, v7, v4, v6, v2], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.605_5:
// [Asm]   sw zero, 0(v5)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   sw zero, 0(v3)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   j .go_loop.605_2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v5, zero], upward_exposed: [v5, zero], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.605_7:
// [Asm]   sw zero, 0(v5)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   j .go_loop.605_2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # leaf false
// [Asm] move_perm1_forward.608:
// [Asm] # block info: defs: [v3, v4, v5, v6, v2], uses: [v2, v5, a0, a2, a1, v6, v3], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v3, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.608_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm]   lw v5, 0(v3)  # live: [v2, v4, v5, zero, v3]
// [Asm]   addi v6, v5, -1  # live: [v2, v4, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v6, v2, .move_perm1_forward.608_2  # live: [v2, v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v16, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v3, v16, v14, a0, zero, v8, v4, a2, a1, v17, v15, v9, v2], upward_exposed: [v3, v4, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v4, zero, v3], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.608_1:
// [Asm]   addi v8, v2, 1  # live: [v8, v2, v4, zero, v3]
// [Asm]   slliw v16, v8, 2  # live: [v8, v2, v4, v16, zero, v3]
// [Asm]   add v17, v4, v16  # live: [v8, v2, v4, v17, zero, v3]
// [Asm]   lw v9, 0(v17)  # live: [v8, v2, v4, zero, v9, v3]
// [Asm]   slliw v14, v2, 2  # live: [v8, v4, v14, zero, v9, v3]
// [Asm]   add v15, v4, v14  # live: [v8, v4, v15, zero, v9, v3]
// [Asm]   sw v9, 0(v15)  # live: [v8, v4, zero, v3]
// [Asm]   # save_ctx2  # live: [v8, v4, zero, v3]
// [Asm]   mv a0, v8  # live: [v4, zero, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, zero, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, zero, a0]
// [Asm]   call move_perm1_forward.608  # live: [zero, a0]
// [Asm]   mv v11, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v12, zero  # live: [v12]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v12, a0], upward_exposed: [v12], params_defs: [v12]
// [Asm] # live_in: [v12], live_out: []
// [Asm] # block parameters: [v12]
// [Asm] .move_perm1_forward.608_3:
// [Asm] # control
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.608_2:
// [Asm] # control
// [Asm]   mv v12, zero  # live: [v12]
// [Asm]   j .move_perm1_forward.608_3  # live: [v12]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.609  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] init_count.602:
// [Asm] # block info: defs: [v3, v4, v21, v2], uses: [v4, a1, v21, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v3, zero, v2]
// [Asm] # block parameters: []
// [Asm] .init_count.602_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm]   lw v4, 0(v2)  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   li v21, 1  # live: [v2, v4, v21, zero, v3]
// [Asm]   beq v4, v21, .init_count.602_1  # live: [v2, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, v7, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, v10, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v2, v18, v10, a0, zero, v7, v6, v17, a1, v9, v3], upward_exposed: [v3, zero, v2], params_defs: []
// [Asm] # live_in: [v2, zero, v3], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .init_count.602_2:
// [Asm]   lw v6, 0(v2)  # live: [v2, v6, zero, v3]
// [Asm]   addi v7, v6, -1  # live: [v2, v7, v6, zero, v3]
// [Asm]   slliw v17, v7, 2  # live: [v2, v6, v17, zero, v3]
// [Asm]   add v18, v3, v17  # live: [v2, v6, v18, zero, v3]
// [Asm]   sw v6, 0(v18)  # live: [v2, zero, v3]
// [Asm]   lw v9, 0(v2)  # live: [v2, zero, v9, v3]
// [Asm]   addi v10, v9, -1  # live: [v2, v10, zero, v3]
// [Asm]   sw v10, 0(v2)  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [zero, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, zero, a0]
// [Asm]   call init_count.602  # live: [zero, a0]
// [Asm]   mv v12, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .init_count.602_3:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .init_count.602_1:
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v13]
// [Asm]   j .init_count.602_3  # live: [v13]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("fannkuch", Tuple([Int, Int])), args: [("n", Int)], body: LetRec({name: ("gen_perm1", Array(Int)), args: [("len", Int)], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))}, Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("gen_perm1", Array(Int)), args: [("len", Int)], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))}, Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr")))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))
// [Knf] build_knf: App(Var("init_arr"), [Int(0)])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))))
// [Knf] build_knf: App(Var("gen_perm1"), [Var("n")])
// [Knf] build_knf: Var("gen_perm1")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))
// [Knf] build_knf: Array(Int(1), Var("n"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))
// [Knf] build_knf: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i")))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm1"), Var("i"))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("copy_perm")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))
// [Knf] build_knf: App(Var("copy_perm"), [Int(0)])
// [Knf] build_knf: Var("copy_perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)
// [Knf] build_knf: If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit)
// [Knf] build_knf: If(Eq(Get(Var("r"), Int(0)), Int(1)), Unit, Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), [])))
// [Knf] build_knf: Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))
// [Knf] build_knf: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("init_count"), [])
// [Knf] build_knf: Var("init_count")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))
// [Knf] build_knf: App(Var("init_count"), [])
// [Knf] build_knf: Var("init_count")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))
// [Knf] build_knf: Put(Var("flips"), Int(0), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))
// [Knf] build_knf: Array(Int(1), Get(Var("perm"), Int(0)))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("perm"), Int(0))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))
// [Knf] build_knf: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)
// [Knf] build_knf: If(Eq(Get(Var("k"), Int(0)), Int(0)), Unit, Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Put(Var("t"), Int(0), Get(Var("perm"), Var("i")))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm"), Var("i"))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0)))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("t"), Int(0))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("flip_loop")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))))
// [Knf] build_knf: App(Var("flip_loop"), [Int(0)])
// [Knf] build_knf: Var("flip_loop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))
// [Knf] build_knf: Put(Var("k"), Int(0), Get(Var("perm"), Int(0)))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm"), Int(0))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))
// [Knf] build_knf: Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("do_flip"), [Var("k")])
// [Knf] build_knf: Var("do_flip")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))
// [Knf] build_knf: App(Var("do_flip"), [Var("k")])
// [Knf] build_knf: Var("do_flip")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))
// [Knf] build_knf: If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit)
// [Knf] build_knf: Get(Var("max_flips"), Int(0))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0)))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))
// [Knf] build_knf: Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int)))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("check_sum"), Int(0))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int))
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))
// [Knf] build_knf: Array(Int(1), Bool(true))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))
// [Knf] build_knf: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)
// [Knf] build_knf: Get(Var("go"), Int(0))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), []))
// [Knf] build_knf: If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))))))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit))
// [Knf] build_knf: Put(Var("go"), Int(0), Bool(false))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)
// [Knf] build_knf: Put(Var("r"), Int(0), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))
// [Knf] build_knf: Put(Var("t"), Int(0), Get(Var("perm1"), Int(0)))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm1"), Int(0))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit))
// [Knf] build_knf: Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)
// [Knf] build_knf: App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("move_perm1_forward")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))
// [Knf] build_knf: App(Var("move_perm1_forward"), [Int(0)])
// [Knf] build_knf: Var("move_perm1_forward")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))
// [Knf] build_knf: Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0)))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("t"), Int(0))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))
// [Knf] build_knf: Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("count"), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)
// [Knf] build_knf: If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("count"), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Put(Var("go"), Int(0), Bool(false))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("go_loop"), [])
// [Knf] build_knf: Var("go_loop")
// [Knf] build_knf: Unit
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))
// [Knf] build_knf: App(Var("go_loop"), [])
// [Knf] build_knf: Var("go_loop")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))
// [Knf] build_knf: Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("compute"), [Var("r")])
// [Knf] build_knf: Var("compute")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))
// [Knf] build_knf: App(Var("compute"), [Var("r")])
// [Knf] build_knf: Var("compute")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])
// [Knf] build_knf: Get(Var("max_flips"), Int(0))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("check_sum"), Int(0))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))}, App(Var("main"), []))
// [Knf] build_knf: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))
// [Knf] build_knf: App(Var("fannkuch"), [Int(9)])
// [Knf] build_knf: Var("fannkuch")
// [Knf] build_knf: Int(9)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")]))
// [Knf] build_knf: App(Var("print_int"), [Var("check_sum")])
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: App(Var("print_int"), [Var("max_flips")])
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b1 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%13)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f1, fpref=$f.0)]) already set
// [Core] b3 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b4 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0)]) already set
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f2, fpref=$f.0)]) already set
// [Core] b1 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b7 control: Jump(target=b2, args=[]) already set
// [Core] b8 control: Jump(target=b2, args=[]) already set
// [Core] b6 control: Panic -> Branch(cond=Insn(iref=%19), t=b7, t_args=[], f=b8, f_args=[])
// [Core] b5 control: Jump(target=b2, args=[]) already set
// [Core] b9 control: Panic -> Jump(target=b10, args=[BlockParam(bref=b9, bpref=$b.0)])
// [Core] b3 control: Panic -> Branch(cond=Insn(iref=%3), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b10 control: Panic -> Jump(target=b11, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Core] b4 control: Panic -> Jump(target=b11, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b11 control: Panic -> Return(args=[BlockParam(bref=b11, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[]) already set
// [Core] b1 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b7 control: Jump(target=b2, args=[]) already set
// [Core] b8 control: Jump(target=b2, args=[]) already set
// [Core] b6 control: Panic -> Branch(cond=Insn(iref=%19), t=b7, t_args=[], f=b8, f_args=[])
// [Core] b5 control: Jump(target=b2, args=[]) already set
// [Core] b9 control: Panic -> Jump(target=b10, args=[BlockParam(bref=b9, bpref=$b.0)])
// [Core] b3 control: Panic -> Branch(cond=Insn(iref=%3), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b10 control: Panic -> Jump(target=b11, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Core] b4 control: Panic -> Jump(target=b11, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b11 control: Panic -> Return(args=[BlockParam(bref=b11, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[]) already set
// [Core] b9 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0)]) already set
// [Core] b10 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0)]) already set
// [Core] b8 control: Panic -> Branch(cond=Insn(iref=%14), t=b9, t_args=[], f=b10, f_args=[])
// [Core] b7 control: Jump(target=b6, args=[Insn(iref=%6)]) already set
// [Core] b11 control: Panic -> Jump(target=b12, args=[BlockParam(bref=b11, bpref=$b.0)])
// [Core] b6 control: Panic -> Branch(cond=Insn(iref=%3), t=b7, t_args=[], f=b8, f_args=[])
// [Core] b12 control: Panic -> Return(args=[BlockParam(bref=b12, bpref=$b.0)])
// [Core] b3 control: Jump(target=b5, args=[Int32(val=0)]) already set
// [Core] b4 control: Panic -> Jump(target=b13, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b13 control: Panic -> Return(args=[BlockParam(bref=b13, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f7, fpref=$f.0)]) already set
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%4)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Mem(fref=f8, mref=m8)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[Int32(val=0)]) already set
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%4)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main] beta reduce perm1.16 = arr.573
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl move_perm1_forward.606
// [Main]   .type move_perm1_forward.606, @function
// [Main] # leaf false
// [Main] move_perm1_forward.606:
// [Main] .move_perm1_forward.606_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a3, 0(a1)
// [Main]   addi a3, a3, -1
// [Main]   blt a3, a0, .move_perm1_forward.606_2
// [Main] 
// [Main] .move_perm1_forward.606_1:
// [Main]   addi a3, a0, 1
// [Main]   slliw a4, a3, 2
// [Main]   add a4, a2, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a2, a0
// [Main]   sw a4, 0(a0)
// [Main]   mv a0, a3
// [Main]   call move_perm1_forward.606
// [Main]   mv a0, zero
// [Main] 
// [Main] .move_perm1_forward.606_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .move_perm1_forward.606_2:
// [Main]   mv a0, zero
// [Main]   j .move_perm1_forward.606_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl go_loop.607
// [Main]   .type go_loop.607, @function
// [Main] # leaf false
// [Main] go_loop.607:
// [Main] .go_loop.607_0:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv s0, a0
// [Main]   mv s5, a1
// [Main]   mv s3, a2
// [Main]   mv s1, a3
// [Main]   mv s4, a4
// [Main]   mv s2, a5
// [Main] 
// [Main] .go_loop.607_2:
// [Main]   lw a0, 0(s1)
// [Main]   li a1, 1
// [Main]   bne a0, a1, .go_loop.607_4
// [Main] 
// [Main] .go_loop.607_3:
// [Main]   lw a0, 0(s5)
// [Main]   beq a0, s0, .go_loop.607_5
// [Main] 
// [Main] .go_loop.607_6:
// [Main]   lw a0, 0(s4)
// [Main]   sw a0, 0(s3)
// [Main]   mv a0, zero
// [Main]   mv a1, s5
// [Main]   mv a2, s4
// [Main]   call move_perm1_forward.608
// [Main]   lw a0, 0(s5)
// [Main]   lw a1, 0(s3)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s5)
// [Main]   slliw a1, a0, 2
// [Main]   add a1, s2, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s2, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s5)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s2, a0
// [Main]   lw a0, 0(a0)
// [Main]   li a1, 1
// [Main]   bge a0, a1, .go_loop.607_7
// [Main] 
// [Main] .go_loop.607_8:
// [Main]   lw a0, 0(s5)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s5)
// [Main]   j .go_loop.607_2
// [Main] 
// [Main] .go_loop.607_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .go_loop.607_11:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .go_loop.607_5:
// [Main]   sw zero, 0(s1)
// [Main]   sw zero, 0(s5)
// [Main]   j .go_loop.607_2
// [Main] 
// [Main] .go_loop.607_7:
// [Main]   sw zero, 0(s1)
// [Main]   j .go_loop.607_2
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl fannkuch.600
// [Main]   .type fannkuch.600, @function
// [Main] # leaf false
// [Main] fannkuch.600:
// [Main] .fannkuch.600_0:
// [Main]   addi sp, sp, -80
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   sd s8, 72(sp)
// [Main]   mv s0, a0
// [Main]   slliw a0, s0, 2
// [Main]   sub s4, s11, a0
// [Main]   andi s11, s4, -8
// [Main]   mv a1, s0
// [Main]   mv a1, zero
// [Main] 
// [Main] .fannkuch.600_2:
// [Main]   addi a0, s0, -1
// [Main]   bge a0, a1, .fannkuch.600_3
// [Main] 
// [Main] .fannkuch.600_4:
// [Main]   slliw a0, s0, 2
// [Main]   sub s3, s11, a0
// [Main]   andi s11, s3, -8
// [Main]   mv a1, s0
// [Main]   slliw a0, s0, 2
// [Main]   sub s6, s11, a0
// [Main]   andi s11, s6, -8
// [Main]   mv a1, s0
// [Main]   addi s2, s11, -4
// [Main]   andi s11, s2, -8
// [Main]   sw zero, 0(s2)
// [Main]   addi s5, s11, -4
// [Main]   andi s11, s5, -8
// [Main]   sw zero, 0(s5)
// [Main]   addi s1, s11, -4
// [Main]   andi s11, s1, -8
// [Main]   sw zero, 0(s1)
// [Main]   addi s8, s11, -4
// [Main]   andi s11, s8, -8
// [Main]   sw zero, 0(s8)
// [Main]   addi a0, s11, -4
// [Main]   andi s11, a0, -8
// [Main]   sw s0, 0(a0)
// [Main] 
// [Main] .fannkuch.600_16:
// [Main]   mv s7, a0
// [Main] 
// [Main] .fannkuch.600_18:
// [Main]   lw a0, 0(s7)
// [Main]   li a1, 1
// [Main]   blt a0, a1, .fannkuch.600_20
// [Main] 
// [Main] .fannkuch.600_19:
// [Main]   mv a0, zero
// [Main] 
// [Main] .fannkuch.600_22:
// [Main]   addi a1, s0, -1
// [Main]   bge a1, a0, .fannkuch.600_23
// [Main] 
// [Main] .fannkuch.600_24:
// [Main]   mv a0, s7
// [Main]   mv a1, s6
// [Main]   call init_count.602
// [Main]   sw zero, 0(s2)
// [Main]   lw a0, 0(s3)
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw a0, 0(a1)
// [Main]   mv a0, a1
// [Main]   mv a1, s3
// [Main]   mv a2, s2
// [Main]   call do_flip.603
// [Main] 
// [Main] .fannkuch.600_30:
// [Main]   lw a0, 0(s5)
// [Main]   lw a1, 0(s2)
// [Main]   blt a1, a0, .fannkuch.600_26
// [Main] 
// [Main] .fannkuch.600_25:
// [Main]   lw a0, 0(s2)
// [Main]   sw a0, 0(s5)
// [Main]   lw a0, 0(s1)
// [Main]   lw a1, 0(s2)
// [Main]   lw a2, 0(s8)
// [Main]   li a3, 2
// [Main]   div a3, a2, a3
// [Main]   li a4, 2
// [Main]   mul a3, a3, a4
// [Main]   sub a2, a2, a3
// [Main]   li a3, 2
// [Main]   mul a2, a2, a3
// [Main]   li a3, 1
// [Main]   sub a2, a3, a2
// [Main]   mul a1, a1, a2
// [Main]   add a0, a0, a1
// [Main]   sw a0, 0(s1)
// [Main]   addi a3, s11, -4
// [Main]   andi s11, a3, -8
// [Main]   li a0, 1
// [Main]   sw a0, 0(a3)
// [Main]   addi a2, s11, -4
// [Main]   andi s11, a2, -8
// [Main]   sw zero, 0(a2)
// [Main]   mv a0, s0
// [Main]   mv a1, s7
// [Main]   mv a4, s4
// [Main]   mv a5, s6
// [Main]   call go_loop.605
// [Main] 
// [Main] .fannkuch.600_31:
// [Main]   lw a0, 0(s8)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s8)
// [Main]   j .fannkuch.600_18
// [Main] 
// [Main] .fannkuch.600_3:
// [Main]   slliw a0, a1, 2
// [Main]   add a0, s4, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, a1, 1
// [Main]   mv a1, a0
// [Main]   j .fannkuch.600_2
// [Main] 
// [Main] .fannkuch.600_20:
// [Main]   mv a0, zero
// [Main] 
// [Main] .fannkuch.600_29:
// [Main] 
// [Main] .fannkuch.600_6:
// [Main]   lw a0, 0(s5)
// [Main]   lw a1, 0(s1)
// [Main]   addi a2, s11, -8
// [Main]   andi s11, a2, -8
// [Main]   sw a0, 0(a2)
// [Main]   sw a1, 4(a2)
// [Main]   mv a0, a2
// [Main] 
// [Main] .fannkuch.600_5:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   ld s8, 72(sp)
// [Main]   addi sp, sp, 80
// [Main]   ret
// [Main] 
// [Main] .fannkuch.600_23:
// [Main]   slliw a1, a0, 2
// [Main]   add a1, s4, a1
// [Main]   lw a1, 0(a1)
// [Main]   slliw a2, a0, 2
// [Main]   add a2, s3, a2
// [Main]   sw a1, 0(a2)
// [Main]   addi a0, a0, 1
// [Main]   j .fannkuch.600_22
// [Main] 
// [Main] .fannkuch.600_26:
// [Main]   lw a0, 0(s1)
// [Main]   lw a1, 0(s2)
// [Main]   lw a2, 0(s8)
// [Main]   li a3, 2
// [Main]   div a3, a2, a3
// [Main]   li a4, 2
// [Main]   mul a3, a3, a4
// [Main]   sub a2, a2, a3
// [Main]   li a3, 2
// [Main]   mul a2, a2, a3
// [Main]   li a3, 1
// [Main]   sub a2, a3, a2
// [Main]   mul a1, a1, a2
// [Main]   add a0, a0, a1
// [Main]   sw a0, 0(s1)
// [Main]   addi a3, s11, -4
// [Main]   andi s11, a3, -8
// [Main]   li a0, 1
// [Main]   sw a0, 0(a3)
// [Main]   addi a2, s11, -4
// [Main]   andi s11, a2, -8
// [Main]   sw zero, 0(a2)
// [Main]   mv a0, s0
// [Main]   mv a1, s7
// [Main]   mv a4, s4
// [Main]   mv a5, s6
// [Main]   call go_loop.607
// [Main] 
// [Main] .fannkuch.600_32:
// [Main]   lw a0, 0(s8)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s8)
// [Main]   j .fannkuch.600_18
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl do_flip.603
// [Main]   .type do_flip.603, @function
// [Main] # leaf true
// [Main] do_flip.603:
// [Main] .do_flip.603_0:
// [Main]   mv a3, a1
// [Main]   mv a1, a2
// [Main]   mv a2, a0
// [Main] 
// [Main] .do_flip.603_2:
// [Main]   lw a0, 0(a2)
// [Main]   beq a0, zero, .do_flip.603_3
// [Main] 
// [Main] .do_flip.603_4:
// [Main]   addi a4, s11, -4
// [Main]   andi s11, a4, -8
// [Main]   sw zero, 0(a4)
// [Main] 
// [Main] .do_flip.603_9:
// [Main]   mv a0, zero
// [Main] 
// [Main] .do_flip.603_11:
// [Main]   lw a5, 0(a2)
// [Main]   li a6, 2
// [Main]   div a5, a5, a6
// [Main]   blt a5, a0, .do_flip.603_13
// [Main] 
// [Main] .do_flip.603_12:
// [Main]   slliw a5, a0, 2
// [Main]   add a5, a3, a5
// [Main]   lw a5, 0(a5)
// [Main]   sw a5, 0(a4)
// [Main]   lw a5, 0(a2)
// [Main]   sub a5, a5, a0
// [Main]   slliw a5, a5, 2
// [Main]   add a5, a3, a5
// [Main]   lw a5, 0(a5)
// [Main]   slliw a6, a0, 2
// [Main]   add a6, a3, a6
// [Main]   sw a5, 0(a6)
// [Main]   lw a5, 0(a2)
// [Main]   sub a5, a5, a0
// [Main]   lw a6, 0(a4)
// [Main]   slliw a5, a5, 2
// [Main]   add a5, a3, a5
// [Main]   sw a6, 0(a5)
// [Main]   addi a0, a0, 1
// [Main]   j .do_flip.603_11
// [Main] 
// [Main] .do_flip.603_3:
// [Main]   mv a0, zero
// [Main] 
// [Main] .do_flip.603_5:
// [Main]   ret
// [Main] 
// [Main] .do_flip.603_13:
// [Main]   mv a0, zero
// [Main] 
// [Main] .do_flip.603_14:
// [Main] 
// [Main] .do_flip.603_6:
// [Main]   lw a0, 0(a3)
// [Main]   sw a0, 0(a2)
// [Main]   lw a0, 0(a1)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(a1)
// [Main]   j .do_flip.603_2
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.609
// [Main]   .type main.609, @function
// [Main] # leaf false
// [Main] main.609:
// [Main] .main.609_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   li a0, 9
// [Main]   call fannkuch.600
// [Main]   lw s0, 0(a0)
// [Main]   lw a0, 4(a0)
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl go_loop.605
// [Main]   .type go_loop.605, @function
// [Main] # leaf false
// [Main] go_loop.605:
// [Main] .go_loop.605_0:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv s0, a0
// [Main]   mv s5, a1
// [Main]   mv s3, a2
// [Main]   mv s1, a3
// [Main]   mv s4, a4
// [Main]   mv s2, a5
// [Main] 
// [Main] .go_loop.605_2:
// [Main]   lw a0, 0(s1)
// [Main]   li a1, 1
// [Main]   bne a0, a1, .go_loop.605_4
// [Main] 
// [Main] .go_loop.605_3:
// [Main]   lw a0, 0(s5)
// [Main]   beq a0, s0, .go_loop.605_5
// [Main] 
// [Main] .go_loop.605_6:
// [Main]   lw a0, 0(s4)
// [Main]   sw a0, 0(s3)
// [Main]   mv a0, zero
// [Main]   mv a1, s5
// [Main]   mv a2, s4
// [Main]   call move_perm1_forward.606
// [Main]   lw a0, 0(s5)
// [Main]   lw a1, 0(s3)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s5)
// [Main]   slliw a1, a0, 2
// [Main]   add a1, s2, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s2, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s5)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s2, a0
// [Main]   lw a0, 0(a0)
// [Main]   li a1, 1
// [Main]   bge a0, a1, .go_loop.605_7
// [Main] 
// [Main] .go_loop.605_8:
// [Main]   lw a0, 0(s5)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s5)
// [Main]   j .go_loop.605_2
// [Main] 
// [Main] .go_loop.605_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .go_loop.605_11:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .go_loop.605_5:
// [Main]   sw zero, 0(s1)
// [Main]   sw zero, 0(s5)
// [Main]   j .go_loop.605_2
// [Main] 
// [Main] .go_loop.605_7:
// [Main]   sw zero, 0(s1)
// [Main]   j .go_loop.605_2
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl move_perm1_forward.608
// [Main]   .type move_perm1_forward.608, @function
// [Main] # leaf false
// [Main] move_perm1_forward.608:
// [Main] .move_perm1_forward.608_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a3, 0(a1)
// [Main]   addi a3, a3, -1
// [Main]   blt a3, a0, .move_perm1_forward.608_2
// [Main] 
// [Main] .move_perm1_forward.608_1:
// [Main]   addi a3, a0, 1
// [Main]   slliw a4, a3, 2
// [Main]   add a4, a2, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a2, a0
// [Main]   sw a4, 0(a0)
// [Main]   mv a0, a3
// [Main]   call move_perm1_forward.608
// [Main]   mv a0, zero
// [Main] 
// [Main] .move_perm1_forward.608_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .move_perm1_forward.608_2:
// [Main]   mv a0, zero
// [Main]   j .move_perm1_forward.608_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.609
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_count.602
// [Main]   .type init_count.602, @function
// [Main] # leaf false
// [Main] init_count.602:
// [Main] .init_count.602_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a2, 0(a0)
// [Main]   li a3, 1
// [Main]   beq a2, a3, .init_count.602_1
// [Main] 
// [Main] .init_count.602_2:
// [Main]   lw a2, 0(a0)
// [Main]   addi a3, a2, -1
// [Main]   slliw a3, a3, 2
// [Main]   add a3, a1, a3
// [Main]   sw a2, 0(a3)
// [Main]   lw a2, 0(a0)
// [Main]   addi a2, a2, -1
// [Main]   sw a2, 0(a0)
// [Main]   call init_count.602
// [Main]   mv a0, zero
// [Main] 
// [Main] .init_count.602_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .init_count.602_1:
// [Main]   mv a0, zero
// [Main]   j .init_count.602_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function go_loop.607
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=FnParam(fref=f6, fpref=$f.3), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.3) -> $$f.3
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Jump(target=b2, args=[])
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=FnParam(fref=f6, fpref=$f.3), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.3) -> $$f.3
// [Wasm] Lowering control Jump(target=b2, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%21), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32), val=Insn(iref=%22))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Jump(target=b2, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.4), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.2), index=0, width=@32), val=Insn(iref=%6))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[Int32(val=0), FnParam(fref=f6, fpref=$f.1), FnParam(fref=f6, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.4) -> $$f.4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f6, fpref=$f.4), offset=Insn(iref=%9), width=@32), val=Insn(iref=%10))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f6, fpref=$f.5), offset=Insn(iref=%12), width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%14), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f6, fpref=$f.5), offset=Insn(iref=%12), width=@32), val=Insn(iref=%15))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f6, fpref=$f.5), offset=Insn(iref=%17), width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Branch(cond=Insn(iref=%19), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%2), FnParam(fref=f6, fpref=$f.0)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b11, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Lowering control Jump(target=b11, args=[Unit])
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=FnParam(fref=f6, fpref=$f.3), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Bool(val=true)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b1, args=[])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Lowered function go_loop.607 to wasm
// [Wasm] Lowering function go_loop.605
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=FnParam(fref=f4, fpref=$f.3), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.3) -> $$f.3
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f4, fpref=$f.1), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Jump(target=b2, args=[])
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=FnParam(fref=f4, fpref=$f.3), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.3) -> $$f.3
// [Wasm] Lowering control Jump(target=b2, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f4, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%21), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f4, fpref=$f.1), index=0, width=@32), val=Insn(iref=%22))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Jump(target=b2, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f4, fpref=$f.4), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f4, fpref=$f.2), index=0, width=@32), val=Insn(iref=%6))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Int32(val=0), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.4) -> $$f.4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f4, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f4, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f4, fpref=$f.4), offset=Insn(iref=%9), width=@32), val=Insn(iref=%10))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f4, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f4, fpref=$f.5), offset=Insn(iref=%12), width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%14), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f4, fpref=$f.5), offset=Insn(iref=%12), width=@32), val=Insn(iref=%15))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f4, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f4, fpref=$f.5), offset=Insn(iref=%17), width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Branch(cond=Insn(iref=%19), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f4, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%2), FnParam(fref=f4, fpref=$f.0)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b11, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Lowering control Jump(target=b11, args=[Unit])
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=FnParam(fref=f4, fpref=$f.3), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Bool(val=true)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b1, args=[])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Lowered function go_loop.605 to wasm
// [Wasm] Lowering function fannkuch.600
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=Mem(fref=f8, mref=m0), offset=BlockParam(bref=b2, bpref=$b.0), width=@32), val=BlockParam(bref=b2, bpref=$b.0))
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=Mem(fref=f8, mref=m0), offset=BlockParam(bref=b22, bpref=$b.0), width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=Mem(fref=f8, mref=m1), offset=BlockParam(bref=b22, bpref=$b.0), width=@32), val=Insn(iref=%20))
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b22, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Jump(target=b22, args=[Insn(iref=%22)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m6), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m6) -> $f8.m6
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%48), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m6), index=0, width=@32), val=Insn(iref=%49))
// [Wasm] Get Local name Mem(fref=f8, mref=m6) -> $f8.m6
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering control Jump(target=b18, args=[BlockParam(bref=b18, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m3), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m4), index=0, width=@32), val=Insn(iref=%31))
// [Wasm] Get Local name Mem(fref=f8, mref=m4) -> $f8.m4
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m5), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m5) -> $f8.m5
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m3), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m6), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m6) -> $f8.m6
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%35), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%37), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%35), Insn(iref=%38)])
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%39), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=1), Insn(iref=%40)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%34), Insn(iref=%41)])
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%33), Insn(iref=%42)])
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m5), index=0, width=@32), val=Insn(iref=%43))
// [Wasm] Get Local name Mem(fref=f8, mref=m5) -> $f8.m5
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m17, fills=[Init(val=Bool(val=true))])
// [Wasm] Get Local name Mem(fref=f8, mref=m17) -> $f8.m17
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m18, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m18) -> $f8.m18
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[FnParam(fref=f8, fpref=$f.0), BlockParam(bref=b18, bpref=$b.0), Mem(fref=f8, mref=m18), Mem(fref=f8, mref=m17), Mem(fref=f8, mref=m0), Mem(fref=f8, mref=m2)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Get Local name Mem(fref=f8, mref=m18) -> $f8.m18
// [Wasm] Get Local name Mem(fref=f8, mref=m17) -> $f8.m17
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Get Local name Mem(fref=f8, mref=m2) -> $f8.m2
// [Wasm] Lowering control Jump(target=b31, args=[Insn(iref=%47)])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m6), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m6) -> $f8.m6
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%66), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m6), index=0, width=@32), val=Insn(iref=%67))
// [Wasm] Get Local name Mem(fref=f8, mref=m6) -> $f8.m6
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Lowering control Jump(target=b18, args=[BlockParam(bref=b18, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m5), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m5) -> $f8.m5
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m3), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m6), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m6) -> $f8.m6
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%53), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%55), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%53), Insn(iref=%56)])
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%57), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=1), Insn(iref=%58)])
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%52), Insn(iref=%59)])
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%51), Insn(iref=%60)])
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m5), index=0, width=@32), val=Insn(iref=%61))
// [Wasm] Get Local name Mem(fref=f8, mref=m5) -> $f8.m5
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m19, fills=[Init(val=Bool(val=true))])
// [Wasm] Get Local name Mem(fref=f8, mref=m19) -> $f8.m19
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m20, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m20) -> $f8.m20
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[FnParam(fref=f8, fpref=$f.0), BlockParam(bref=b18, bpref=$b.0), Mem(fref=f8, mref=m20), Mem(fref=f8, mref=m19), Mem(fref=f8, mref=m0), Mem(fref=f8, mref=m2)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Get Local name Mem(fref=f8, mref=m20) -> $f8.m20
// [Wasm] Get Local name Mem(fref=f8, mref=m19) -> $f8.m19
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Get Local name Mem(fref=f8, mref=m2) -> $f8.m2
// [Wasm] Lowering control Jump(target=b32, args=[Insn(iref=%65)])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m4), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m4) -> $f8.m4
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m3), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%28), Insn(iref=%29)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering control Branch(cond=Insn(iref=%30), t=b25, t_args=[], f=b26, f_args=[])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b18, bpref=$b.0), Mem(fref=f8, mref=m2)])
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Get Local name Mem(fref=f8, mref=m2) -> $f8.m2
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m3), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m1), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m16, fills=[Init(val=Insn(iref=%25))])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Mem(fref=f8, mref=m16) -> $f8.m16
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[Mem(fref=f8, mref=m16), Mem(fref=f8, mref=m1), Mem(fref=f8, mref=m3)])
// [Wasm] Get Local name Mem(fref=f8, mref=m16) -> $f8.m16
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Lowering control Jump(target=b30, args=[Insn(iref=%27)])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f8, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b22, bpref=$b.0), Insn(iref=%18)])
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Branch(cond=Insn(iref=%19), t=b23, t_args=[], f=b24, f_args=[])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Jump(target=b21, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m4), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m4) -> $f8.m4
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m5), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m5) -> $f8.m5
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m8, fills=[Field(index=0, val=Insn(iref=%13)), Field(index=1, val=Insn(iref=%14))])
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Jump(target=b5, args=[Mem(fref=f8, mref=m8)])
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b29, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b29, bpref=$b.0) -> $b29.$b.0
// [Wasm] Lowering control Jump(target=b29, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b18, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering control Branch(cond=Insn(iref=%17), t=b19, t_args=[], f=b20, f_args=[])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering control Jump(target=b17, args=[Mem(fref=f8, mref=m7)])
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Zero])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Zero])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f8, mref=m2) -> $f8.m2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m3, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m4, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m4) -> $f8.m4
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m5, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m5) -> $f8.m5
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m6, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m6) -> $f8.m6
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m7, fills=[Init(val=FnParam(fref=f8, fpref=$f.0))])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Lowering control Jump(target=b16, args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f8, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b2, bpref=$b.0), Insn(iref=%1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Lowering control Jump(target=b1, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%33) -> $%33
// [Wasm] Local Mem(fref=f8, mref=m5) -> $f8.m5
// [Wasm] Local Mem(fref=f8, mref=m17) -> $f8.m17
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local Insn(iref=%39) -> $%39
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Local Mem(fref=f8, mref=m16) -> $f8.m16
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%56) -> $%56
// [Wasm] Local Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Local Insn(iref=%52) -> $%52
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Mem(fref=f8, mref=m20) -> $f8.m20
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Local Insn(iref=%58) -> $%58
// [Wasm] Local Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%57) -> $%57
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local BlockParam(bref=b29, bpref=$b.0) -> $b29.$b.0
// [Wasm] Local BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Mem(fref=f8, mref=m6) -> $f8.m6
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local Insn(iref=%53) -> $%53
// [Wasm] Local Mem(fref=f8, mref=m4) -> $f8.m4
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%67) -> $%67
// [Wasm] Local Insn(iref=%60) -> $%60
// [Wasm] Local Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%61) -> $%61
// [Wasm] Local Mem(fref=f8, mref=m19) -> $f8.m19
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%55) -> $%55
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%66) -> $%66
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Mem(fref=f8, mref=m2) -> $f8.m2
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Mem(fref=f8, mref=m18) -> $f8.m18
// [Wasm] Lowered function fannkuch.600 to wasm
// [Wasm] Lowering function main.609
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Int32, Int32]), f=f8, args=[Int32(val=9)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%4)])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main.609 to wasm
// [Wasm] Lowering function init_count.602
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%2), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.1), offset=Insn(iref=%3), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%6), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), index=0, width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function init_count.602 to wasm
// [Wasm] Lowering function move_perm1_forward.608
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f5, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f5, fpref=$f.2), offset=Insn(iref=%3), width=@32))
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f5, fpref=$f.2), offset=FnParam(fref=f5, fpref=$f.0), width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[Insn(iref=%3), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f5, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f5, fpref=$f.0), Insn(iref=%1)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function move_perm1_forward.608 to wasm
// [Wasm] Lowering function do_flip.603
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.1), offset=BlockParam(bref=b11, bpref=$b.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f2, mref=m0), index=0, width=@32), val=Insn(iref=%12))
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%14), BlockParam(bref=b11, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.1), offset=Insn(iref=%15), width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.1), offset=BlockParam(bref=b11, bpref=$b.0), width=@32), val=Insn(iref=%16))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%18), BlockParam(bref=b11, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f2, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.1), offset=Insn(iref=%19), width=@32), val=Insn(iref=%20))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b11, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Jump(target=b11, args=[Insn(iref=%22)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), index=0, width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.2), index=0, width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b14, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Lowering control Jump(target=b14, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%9), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b11, bpref=$b.0), Insn(iref=%10)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Branch(cond=Insn(iref=%11), t=b12, t_args=[], f=b13, f_args=[])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b10, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowering control Jump(target=b9, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b1, args=[FnParam(fref=f2, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Local BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function do_flip.603 to wasm
// [Wasm] Lowering function move_perm1_forward.606
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f3, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.2), offset=Insn(iref=%3), width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.2), offset=FnParam(fref=f3, fpref=$f.0), width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Insn(iref=%3), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f3, fpref=$f.0), Insn(iref=%1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function move_perm1_forward.606 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f9, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] func_tre: fannkuch.1 false
// [KnfOpt] func_tre: gen_perm1.3 false
// [KnfOpt] func_tre: init_arr.7 true
// [KnfOpt] func_tre: compute.35 true
// [KnfOpt] func_tre: copy_perm.40 true
// [KnfOpt] func_tre: init_count.50 false
// [KnfOpt] func_tre: do_flip.76 true
// [KnfOpt] func_tre: flip_loop.84 true
// [KnfOpt] func_tre: go_loop.154 true
// [KnfOpt] func_tre: move_perm1_forward.169 false
// [KnfOpt] func_tre: main.223 false
// [KnfOpt] freq: {fannkuch.1: Once, gen_perm1.3: Once, init_arr.7: Once, init_arr.229: Many(2), compute.35: Once, compute.367: Many(2), copy_perm.372: Once, copy_perm.374: Many(2), init_count.384: Many(2), do_flip.410: Once, do_flip.412: Many(2), flip_loop.420: Once, flip_loop.422: Many(2), go_loop.492: Once, go_loop.493: Many(2), move_perm1_forward.510: Many(2), main.223: Once}
// [KnfOpt] Inline threshold 15
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision init_arr.7 accepted
// [KnfOpt] Knf inline Some(init_arr) let _15: Unit = Unit
// [KnfOpt] Var(arr.6)
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision gen_perm1.3 accepted
// [KnfOpt] Inline threshold 17
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision copy_perm.372 accepted
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 45
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision flip_loop.420 rejected
// [KnfOpt] Inline threshold 87
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision do_flip.410 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 121
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision go_loop.492 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 121
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision go_loop.492 rejected
// [KnfOpt] Knf inline Some(copy_perm) let _383: Unit = Unit
// [KnfOpt] let rec init_count.384: Unit = () {
// [KnfOpt]   let _385: Int = Int(0)
// [KnfOpt]   let _386: Int = Get r.368[_385]
// [KnfOpt]   let _387: Int = Int(1)
// [KnfOpt]   if (_386 == _387) then {
// [KnfOpt]     let _388: Unit = Unit
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _389: Int = Int(0)
// [KnfOpt]     let _390: Int = Get r.368[_389]
// [KnfOpt]     let _391: Int = Int(1)
// [KnfOpt]     let _392: Int = Sub(_390, _391)
// [KnfOpt]     let _393: Int = Int(0)
// [KnfOpt]     let _394: Int = Get r.368[_393]
// [KnfOpt]     let _395: Unit = Put count.20[_392] = _394
// [KnfOpt]     let _396: Int = Int(0)
// [KnfOpt]     let _397: Int = Int(0)
// [KnfOpt]     let _398: Int = Get r.368[_397]
// [KnfOpt]     let _399: Int = Int(1)
// [KnfOpt]     let _400: Int = Sub(_398, _399)
// [KnfOpt]     let _401: Unit = Put r.368[_396] = _400
// [KnfOpt]     let _388: Unit = Apply(init_count.384, [])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _402: Unit = Apply(init_count.384, [])
// [KnfOpt] let _403: Int = Int(0)
// [KnfOpt] let _404: Int = Int(0)
// [KnfOpt] let _405: Unit = Put flips.23[_403] = _404
// [KnfOpt] let _406: Int = Int(1)
// [KnfOpt] let _407: Int = Int(0)
// [KnfOpt] let _408: Int = Get perm.18[_407]
// [KnfOpt] let k.409: Array(Int) = ExtApply(minimbt_create_array, [_406, _408, ])
// [KnfOpt] let rec do_flip.410: Unit = (k.411: Array(Int)) {
// [KnfOpt]   let join do_flip.412: Unit = (k.413: Array(Int)) {
// [KnfOpt]     let _414: Int = Int(0)
// [KnfOpt]     let _415: Int = Get k.413[_414]
// [KnfOpt]     let _416: Int = Int(0)
// [KnfOpt]     if (_415 == _416) then {
// [KnfOpt]       Unit
// [KnfOpt]     } else {
// [KnfOpt]       let _417: Int = Int(1)
// [KnfOpt]       let _418: Int = Int(0)
// [KnfOpt]       let t.419: Array(Int) = ExtApply(minimbt_create_array, [_417, _418, ])
// [KnfOpt]       let rec flip_loop.420: Unit = (i.421: Int) {
// [KnfOpt]         let join flip_loop.422: Unit = (i.423: Int) {
// [KnfOpt]           let _424: Int = Int(0)
// [KnfOpt]           let _425: Int = Get k.413[_424]
// [KnfOpt]           let _426: Int = Int(2)
// [KnfOpt]           let _427: Int = Div(_425, _426)
// [KnfOpt]           if (i.423 <= _427) then {
// [KnfOpt]             let _428: Int = Int(0)
// [KnfOpt]             let _429: Int = Get perm.18[i.423]
// [KnfOpt]             let _430: Unit = Put t.419[_428] = _429
// [KnfOpt]             let _431: Int = Int(0)
// [KnfOpt]             let _432: Int = Get k.413[_431]
// [KnfOpt]             let _433: Int = Sub(_432, i.423)
// [KnfOpt]             let _434: Int = Get perm.18[_433]
// [KnfOpt]             let _435: Unit = Put perm.18[i.423] = _434
// [KnfOpt]             let _436: Int = Int(0)
// [KnfOpt]             let _437: Int = Get k.413[_436]
// [KnfOpt]             let _438: Int = Sub(_437, i.423)
// [KnfOpt]             let _439: Int = Int(0)
// [KnfOpt]             let _440: Int = Get t.419[_439]
// [KnfOpt]             let _441: Unit = Put perm.18[_438] = _440
// [KnfOpt]             let _442: Int = Int(1)
// [KnfOpt]             let _443: Int = Add(i.423, _442)
// [KnfOpt]             Jump(flip_loop.422, [_443, ])
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(flip_loop.422, [i.421, ])
// [KnfOpt]       }
// [KnfOpt]       let _444: Int = Int(0)
// [KnfOpt]       let _445: Unit = Apply(flip_loop.420, [_444, ])
// [KnfOpt]       let _446: Int = Int(0)
// [KnfOpt]       let _447: Int = Int(0)
// [KnfOpt]       let _448: Int = Get perm.18[_447]
// [KnfOpt]       let _449: Unit = Put k.413[_446] = _448
// [KnfOpt]       let _450: Int = Int(0)
// [KnfOpt]       let _451: Int = Int(0)
// [KnfOpt]       let _452: Int = Get flips.23[_451]
// [KnfOpt]       let _453: Int = Int(1)
// [KnfOpt]       let _454: Int = Add(_452, _453)
// [KnfOpt]       let _455: Unit = Put flips.23[_450] = _454
// [KnfOpt]       Jump(do_flip.412, [k.413, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(do_flip.412, [k.411, ])
// [KnfOpt] }
// [KnfOpt] let _456: Unit = Apply(do_flip.410, [k.409, ])
// [KnfOpt] let _457: Int = Int(0)
// [KnfOpt] let _458: Int = Get max_flips.26[_457]
// [KnfOpt] let _459: Int = Int(0)
// [KnfOpt] let _460: Int = Get flips.23[_459]
// [KnfOpt] if (_458 <= _460) then {
// [KnfOpt]   let _462: Int = Int(0)
// [KnfOpt]   let _463: Int = Int(0)
// [KnfOpt]   let _464: Int = Get flips.23[_463]
// [KnfOpt]   let _461: Unit = Put max_flips.26[_462] = _464
// [KnfOpt]   let _465: Int = Int(0)
// [KnfOpt]   let _466: Int = Int(0)
// [KnfOpt]   let _467: Int = Get check_sum.29[_466]
// [KnfOpt]   let _468: Int = Int(0)
// [KnfOpt]   let _469: Int = Get flips.23[_468]
// [KnfOpt]   let _470: Int = Int(1)
// [KnfOpt]   let _471: Int = Int(0)
// [KnfOpt]   let _472: Int = Get nperm.32[_471]
// [KnfOpt]   let _473: Int = Int(0)
// [KnfOpt]   let _474: Int = Get nperm.32[_473]
// [KnfOpt]   let _475: Int = Int(2)
// [KnfOpt]   let _476: Int = Div(_474, _475)
// [KnfOpt]   let _477: Int = Int(2)
// [KnfOpt]   let _478: Int = Mul(_476, _477)
// [KnfOpt]   let _479: Int = Sub(_472, _478)
// [KnfOpt]   let _480: Int = Int(2)
// [KnfOpt]   let _481: Int = Mul(_479, _480)
// [KnfOpt]   let _482: Int = Sub(_470, _481)
// [KnfOpt]   let _483: Int = Mul(_469, _482)
// [KnfOpt]   let _484: Int = Add(_467, _483)
// [KnfOpt]   let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]   let _486: Int = Int(1)
// [KnfOpt]   let _487: Bool = Bool(true)
// [KnfOpt]   let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]   let _489: Int = Int(1)
// [KnfOpt]   let _490: Int = Int(0)
// [KnfOpt]   let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]   let rec go_loop.492: Unit = () {
// [KnfOpt]     let join go_loop.493: Unit = () {
// [KnfOpt]       let _494: Int = Int(0)
// [KnfOpt]       let _495: Bool = Get go.488[_494]
// [KnfOpt]       let _496: Bool = Bool(true)
// [KnfOpt]       if (_495 == _496) then {
// [KnfOpt]         let _497: Int = Int(0)
// [KnfOpt]         let _498: Int = Get r.368[_497]
// [KnfOpt]         if (_498 == n.2) then {
// [KnfOpt]           let _500: Int = Int(0)
// [KnfOpt]           let _501: Bool = Bool(false)
// [KnfOpt]           let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]           let _503: Int = Int(0)
// [KnfOpt]           let _504: Int = Int(0)
// [KnfOpt]           let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]           let _499: Unit = Unit
// [KnfOpt]           Jump(go_loop.493, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _506: Int = Int(0)
// [KnfOpt]           let _507: Int = Int(0)
// [KnfOpt]           let _508: Int = Get perm1.16[_507]
// [KnfOpt]           let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]           let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]             let _512: Int = Int(0)
// [KnfOpt]             let _513: Int = Get r.368[_512]
// [KnfOpt]             let _514: Int = Int(1)
// [KnfOpt]             let _515: Int = Sub(_513, _514)
// [KnfOpt]             if (i.511 <= _515) then {
// [KnfOpt]               let _516: Int = Int(1)
// [KnfOpt]               let _517: Int = Add(i.511, _516)
// [KnfOpt]               let _518: Int = Get perm1.16[_517]
// [KnfOpt]               let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]               let _520: Int = Int(1)
// [KnfOpt]               let _521: Int = Add(i.511, _520)
// [KnfOpt]               let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _523: Int = Int(0)
// [KnfOpt]           let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]           let _525: Int = Int(0)
// [KnfOpt]           let _526: Int = Get r.368[_525]
// [KnfOpt]           let _527: Int = Int(0)
// [KnfOpt]           let _528: Int = Get t.491[_527]
// [KnfOpt]           let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]           let _530: Int = Int(0)
// [KnfOpt]           let _531: Int = Get r.368[_530]
// [KnfOpt]           let _532: Int = Int(0)
// [KnfOpt]           let _533: Int = Get r.368[_532]
// [KnfOpt]           let _534: Int = Get count.20[_533]
// [KnfOpt]           let _535: Int = Int(1)
// [KnfOpt]           let _536: Int = Sub(_534, _535)
// [KnfOpt]           let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]           let _538: Int = Int(1)
// [KnfOpt]           let _539: Int = Int(0)
// [KnfOpt]           let _540: Int = Get r.368[_539]
// [KnfOpt]           let _541: Int = Get count.20[_540]
// [KnfOpt]           if (_538 <= _541) then {
// [KnfOpt]             let _543: Int = Int(0)
// [KnfOpt]             let _544: Bool = Bool(false)
// [KnfOpt]             let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _545: Int = Int(0)
// [KnfOpt]             let _546: Int = Int(0)
// [KnfOpt]             let _547: Int = Get r.368[_546]
// [KnfOpt]             let _548: Int = Int(1)
// [KnfOpt]             let _549: Int = Add(_547, _548)
// [KnfOpt]             let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.493, [])
// [KnfOpt]   }
// [KnfOpt]   let _550: Unit = Apply(go_loop.492, [])
// [KnfOpt]   let _551: Int = Int(0)
// [KnfOpt]   let _552: Int = Int(0)
// [KnfOpt]   let _553: Int = Get nperm.32[_552]
// [KnfOpt]   let _554: Int = Int(1)
// [KnfOpt]   let _555: Int = Add(_553, _554)
// [KnfOpt]   let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]   Jump(compute.367, [r.368, ])
// [KnfOpt] } else {
// [KnfOpt]   let _461: Unit = Unit
// [KnfOpt]   let _465: Int = Int(0)
// [KnfOpt]   let _466: Int = Int(0)
// [KnfOpt]   let _467: Int = Get check_sum.29[_466]
// [KnfOpt]   let _468: Int = Int(0)
// [KnfOpt]   let _469: Int = Get flips.23[_468]
// [KnfOpt]   let _470: Int = Int(1)
// [KnfOpt]   let _471: Int = Int(0)
// [KnfOpt]   let _472: Int = Get nperm.32[_471]
// [KnfOpt]   let _473: Int = Int(0)
// [KnfOpt]   let _474: Int = Get nperm.32[_473]
// [KnfOpt]   let _475: Int = Int(2)
// [KnfOpt]   let _476: Int = Div(_474, _475)
// [KnfOpt]   let _477: Int = Int(2)
// [KnfOpt]   let _478: Int = Mul(_476, _477)
// [KnfOpt]   let _479: Int = Sub(_472, _478)
// [KnfOpt]   let _480: Int = Int(2)
// [KnfOpt]   let _481: Int = Mul(_479, _480)
// [KnfOpt]   let _482: Int = Sub(_470, _481)
// [KnfOpt]   let _483: Int = Mul(_469, _482)
// [KnfOpt]   let _484: Int = Add(_467, _483)
// [KnfOpt]   let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]   let _486: Int = Int(1)
// [KnfOpt]   let _487: Bool = Bool(true)
// [KnfOpt]   let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]   let _489: Int = Int(1)
// [KnfOpt]   let _490: Int = Int(0)
// [KnfOpt]   let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]   let rec go_loop.492: Unit = () {
// [KnfOpt]     let join go_loop.493: Unit = () {
// [KnfOpt]       let _494: Int = Int(0)
// [KnfOpt]       let _495: Bool = Get go.488[_494]
// [KnfOpt]       let _496: Bool = Bool(true)
// [KnfOpt]       if (_495 == _496) then {
// [KnfOpt]         let _497: Int = Int(0)
// [KnfOpt]         let _498: Int = Get r.368[_497]
// [KnfOpt]         if (_498 == n.2) then {
// [KnfOpt]           let _500: Int = Int(0)
// [KnfOpt]           let _501: Bool = Bool(false)
// [KnfOpt]           let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]           let _503: Int = Int(0)
// [KnfOpt]           let _504: Int = Int(0)
// [KnfOpt]           let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]           let _499: Unit = Unit
// [KnfOpt]           Jump(go_loop.493, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _506: Int = Int(0)
// [KnfOpt]           let _507: Int = Int(0)
// [KnfOpt]           let _508: Int = Get perm1.16[_507]
// [KnfOpt]           let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]           let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]             let _512: Int = Int(0)
// [KnfOpt]             let _513: Int = Get r.368[_512]
// [KnfOpt]             let _514: Int = Int(1)
// [KnfOpt]             let _515: Int = Sub(_513, _514)
// [KnfOpt]             if (i.511 <= _515) then {
// [KnfOpt]               let _516: Int = Int(1)
// [KnfOpt]               let _517: Int = Add(i.511, _516)
// [KnfOpt]               let _518: Int = Get perm1.16[_517]
// [KnfOpt]               let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]               let _520: Int = Int(1)
// [KnfOpt]               let _521: Int = Add(i.511, _520)
// [KnfOpt]               let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _523: Int = Int(0)
// [KnfOpt]           let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]           let _525: Int = Int(0)
// [KnfOpt]           let _526: Int = Get r.368[_525]
// [KnfOpt]           let _527: Int = Int(0)
// [KnfOpt]           let _528: Int = Get t.491[_527]
// [KnfOpt]           let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]           let _530: Int = Int(0)
// [KnfOpt]           let _531: Int = Get r.368[_530]
// [KnfOpt]           let _532: Int = Int(0)
// [KnfOpt]           let _533: Int = Get r.368[_532]
// [KnfOpt]           let _534: Int = Get count.20[_533]
// [KnfOpt]           let _535: Int = Int(1)
// [KnfOpt]           let _536: Int = Sub(_534, _535)
// [KnfOpt]           let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]           let _538: Int = Int(1)
// [KnfOpt]           let _539: Int = Int(0)
// [KnfOpt]           let _540: Int = Get r.368[_539]
// [KnfOpt]           let _541: Int = Get count.20[_540]
// [KnfOpt]           if (_538 <= _541) then {
// [KnfOpt]             let _543: Int = Int(0)
// [KnfOpt]             let _544: Bool = Bool(false)
// [KnfOpt]             let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _545: Int = Int(0)
// [KnfOpt]             let _546: Int = Int(0)
// [KnfOpt]             let _547: Int = Get r.368[_546]
// [KnfOpt]             let _548: Int = Int(1)
// [KnfOpt]             let _549: Int = Add(_547, _548)
// [KnfOpt]             let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.493, [])
// [KnfOpt]   }
// [KnfOpt]   let _550: Unit = Apply(go_loop.492, [])
// [KnfOpt]   let _551: Int = Int(0)
// [KnfOpt]   let _552: Int = Int(0)
// [KnfOpt]   let _553: Int = Get nperm.32[_552]
// [KnfOpt]   let _554: Int = Int(1)
// [KnfOpt]   let _555: Int = Add(_553, _554)
// [KnfOpt]   let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]   Jump(compute.367, [r.368, ])
// [KnfOpt] }
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 45
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision flip_loop.420 rejected
// [KnfOpt] Inline threshold 87
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision do_flip.410 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 121
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision go_loop.492 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 121
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision go_loop.492 rejected
// [KnfOpt] Inline threshold 385
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 5
// [KnfOpt] Inline decision compute.35 rejected
// [KnfOpt] Knf inline Some(gen_perm1) let perm1.16: Array(Int) = Unit
// [KnfOpt] let _17: Int = Int(0)
// [KnfOpt] let perm.18: Array(Int) = ExtApply(minimbt_create_array, [n.2, _17, ])
// [KnfOpt] let _19: Int = Int(0)
// [KnfOpt] let count.20: Array(Int) = ExtApply(minimbt_create_array, [n.2, _19, ])
// [KnfOpt] let _21: Int = Int(1)
// [KnfOpt] let _22: Int = Int(0)
// [KnfOpt] let flips.23: Array(Int) = ExtApply(minimbt_create_array, [_21, _22, ])
// [KnfOpt] let _24: Int = Int(1)
// [KnfOpt] let _25: Int = Int(0)
// [KnfOpt] let max_flips.26: Array(Int) = ExtApply(minimbt_create_array, [_24, _25, ])
// [KnfOpt] let _27: Int = Int(1)
// [KnfOpt] let _28: Int = Int(0)
// [KnfOpt] let check_sum.29: Array(Int) = ExtApply(minimbt_create_array, [_27, _28, ])
// [KnfOpt] let _30: Int = Int(1)
// [KnfOpt] let _31: Int = Int(0)
// [KnfOpt] let nperm.32: Array(Int) = ExtApply(minimbt_create_array, [_30, _31, ])
// [KnfOpt] let _33: Int = Int(1)
// [KnfOpt] let r.34: Array(Int) = ExtApply(minimbt_create_array, [_33, n.2, ])
// [KnfOpt] let rec compute.35: Unit = (r.36: Array(Int)) {
// [KnfOpt]   let join compute.367: Unit = (r.368: Array(Int)) {
// [KnfOpt]     let _369: Int = Int(1)
// [KnfOpt]     let _370: Int = Int(0)
// [KnfOpt]     let _371: Int = Get r.368[_370]
// [KnfOpt]     if (_369 <= _371) then {
// [KnfOpt]       let rec copy_perm.372: Unit = (i.373: Int) {
// [KnfOpt]         let join copy_perm.374: Unit = (i.375: Int) {
// [KnfOpt]           let _376: Int = Int(1)
// [KnfOpt]           let _377: Int = Sub(n.2, _376)
// [KnfOpt]           if (i.375 <= _377) then {
// [KnfOpt]             let _378: Int = Get perm1.16[i.375]
// [KnfOpt]             let _379: Unit = Put perm.18[i.375] = _378
// [KnfOpt]             let _380: Int = Int(1)
// [KnfOpt]             let _381: Int = Add(i.375, _380)
// [KnfOpt]             Jump(copy_perm.374, [_381, ])
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(copy_perm.374, [i.373, ])
// [KnfOpt]       }
// [KnfOpt]       let _382: Int = Int(0)
// [KnfOpt]       let join copy_perm.564: Unit = (i.565: Int) {
// [KnfOpt]         let _566: Int = Int(1)
// [KnfOpt]         let _567: Int = Sub(n.2, _566)
// [KnfOpt]         if (i.565 <= _567) then {
// [KnfOpt]           let _568: Int = Get perm1.16[i.565]
// [KnfOpt]           let _569: Unit = Put perm.18[i.565] = _568
// [KnfOpt]           let _570: Int = Int(1)
// [KnfOpt]           let _571: Int = Add(i.565, _570)
// [KnfOpt]           Jump(copy_perm.564, [_571, ])
// [KnfOpt]         } else {
// [KnfOpt]           let _383: Unit = Unit
// [KnfOpt]           let rec init_count.384: Unit = () {
// [KnfOpt]             let _385: Int = Int(0)
// [KnfOpt]             let _386: Int = Get r.368[_385]
// [KnfOpt]             let _387: Int = Int(1)
// [KnfOpt]             if (_386 == _387) then {
// [KnfOpt]               let _388: Unit = Unit
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               let _389: Int = Int(0)
// [KnfOpt]               let _390: Int = Get r.368[_389]
// [KnfOpt]               let _391: Int = Int(1)
// [KnfOpt]               let _392: Int = Sub(_390, _391)
// [KnfOpt]               let _393: Int = Int(0)
// [KnfOpt]               let _394: Int = Get r.368[_393]
// [KnfOpt]               let _395: Unit = Put count.20[_392] = _394
// [KnfOpt]               let _396: Int = Int(0)
// [KnfOpt]               let _397: Int = Int(0)
// [KnfOpt]               let _398: Int = Get r.368[_397]
// [KnfOpt]               let _399: Int = Int(1)
// [KnfOpt]               let _400: Int = Sub(_398, _399)
// [KnfOpt]               let _401: Unit = Put r.368[_396] = _400
// [KnfOpt]               let _388: Unit = Apply(init_count.384, [])
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _402: Unit = Apply(init_count.384, [])
// [KnfOpt]           let _403: Int = Int(0)
// [KnfOpt]           let _404: Int = Int(0)
// [KnfOpt]           let _405: Unit = Put flips.23[_403] = _404
// [KnfOpt]           let _406: Int = Int(1)
// [KnfOpt]           let _407: Int = Int(0)
// [KnfOpt]           let _408: Int = Get perm.18[_407]
// [KnfOpt]           let k.409: Array(Int) = ExtApply(minimbt_create_array, [_406, _408, ])
// [KnfOpt]           let rec do_flip.410: Unit = (k.411: Array(Int)) {
// [KnfOpt]             let join do_flip.412: Unit = (k.413: Array(Int)) {
// [KnfOpt]               let _414: Int = Int(0)
// [KnfOpt]               let _415: Int = Get k.413[_414]
// [KnfOpt]               let _416: Int = Int(0)
// [KnfOpt]               if (_415 == _416) then {
// [KnfOpt]                 Unit
// [KnfOpt]               } else {
// [KnfOpt]                 let _417: Int = Int(1)
// [KnfOpt]                 let _418: Int = Int(0)
// [KnfOpt]                 let t.419: Array(Int) = ExtApply(minimbt_create_array, [_417, _418, ])
// [KnfOpt]                 let rec flip_loop.420: Unit = (i.421: Int) {
// [KnfOpt]                   let join flip_loop.422: Unit = (i.423: Int) {
// [KnfOpt]                     let _424: Int = Int(0)
// [KnfOpt]                     let _425: Int = Get k.413[_424]
// [KnfOpt]                     let _426: Int = Int(2)
// [KnfOpt]                     let _427: Int = Div(_425, _426)
// [KnfOpt]                     if (i.423 <= _427) then {
// [KnfOpt]                       let _428: Int = Int(0)
// [KnfOpt]                       let _429: Int = Get perm.18[i.423]
// [KnfOpt]                       let _430: Unit = Put t.419[_428] = _429
// [KnfOpt]                       let _431: Int = Int(0)
// [KnfOpt]                       let _432: Int = Get k.413[_431]
// [KnfOpt]                       let _433: Int = Sub(_432, i.423)
// [KnfOpt]                       let _434: Int = Get perm.18[_433]
// [KnfOpt]                       let _435: Unit = Put perm.18[i.423] = _434
// [KnfOpt]                       let _436: Int = Int(0)
// [KnfOpt]                       let _437: Int = Get k.413[_436]
// [KnfOpt]                       let _438: Int = Sub(_437, i.423)
// [KnfOpt]                       let _439: Int = Int(0)
// [KnfOpt]                       let _440: Int = Get t.419[_439]
// [KnfOpt]                       let _441: Unit = Put perm.18[_438] = _440
// [KnfOpt]                       let _442: Int = Int(1)
// [KnfOpt]                       let _443: Int = Add(i.423, _442)
// [KnfOpt]                       Jump(flip_loop.422, [_443, ])
// [KnfOpt]                     } else {
// [KnfOpt]                       Unit
// [KnfOpt]                     }
// [KnfOpt]                   }
// [KnfOpt]                   Jump(flip_loop.422, [i.421, ])
// [KnfOpt]                 }
// [KnfOpt]                 let _444: Int = Int(0)
// [KnfOpt]                 let _445: Unit = Apply(flip_loop.420, [_444, ])
// [KnfOpt]                 let _446: Int = Int(0)
// [KnfOpt]                 let _447: Int = Int(0)
// [KnfOpt]                 let _448: Int = Get perm.18[_447]
// [KnfOpt]                 let _449: Unit = Put k.413[_446] = _448
// [KnfOpt]                 let _450: Int = Int(0)
// [KnfOpt]                 let _451: Int = Int(0)
// [KnfOpt]                 let _452: Int = Get flips.23[_451]
// [KnfOpt]                 let _453: Int = Int(1)
// [KnfOpt]                 let _454: Int = Add(_452, _453)
// [KnfOpt]                 let _455: Unit = Put flips.23[_450] = _454
// [KnfOpt]                 Jump(do_flip.412, [k.413, ])
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]             Jump(do_flip.412, [k.411, ])
// [KnfOpt]           }
// [KnfOpt]           let _456: Unit = Apply(do_flip.410, [k.409, ])
// [KnfOpt]           let _457: Int = Int(0)
// [KnfOpt]           let _458: Int = Get max_flips.26[_457]
// [KnfOpt]           let _459: Int = Int(0)
// [KnfOpt]           let _460: Int = Get flips.23[_459]
// [KnfOpt]           if (_458 <= _460) then {
// [KnfOpt]             let _462: Int = Int(0)
// [KnfOpt]             let _463: Int = Int(0)
// [KnfOpt]             let _464: Int = Get flips.23[_463]
// [KnfOpt]             let _461: Unit = Put max_flips.26[_462] = _464
// [KnfOpt]             let _465: Int = Int(0)
// [KnfOpt]             let _466: Int = Int(0)
// [KnfOpt]             let _467: Int = Get check_sum.29[_466]
// [KnfOpt]             let _468: Int = Int(0)
// [KnfOpt]             let _469: Int = Get flips.23[_468]
// [KnfOpt]             let _470: Int = Int(1)
// [KnfOpt]             let _471: Int = Int(0)
// [KnfOpt]             let _472: Int = Get nperm.32[_471]
// [KnfOpt]             let _473: Int = Int(0)
// [KnfOpt]             let _474: Int = Get nperm.32[_473]
// [KnfOpt]             let _475: Int = Int(2)
// [KnfOpt]             let _476: Int = Div(_474, _475)
// [KnfOpt]             let _477: Int = Int(2)
// [KnfOpt]             let _478: Int = Mul(_476, _477)
// [KnfOpt]             let _479: Int = Sub(_472, _478)
// [KnfOpt]             let _480: Int = Int(2)
// [KnfOpt]             let _481: Int = Mul(_479, _480)
// [KnfOpt]             let _482: Int = Sub(_470, _481)
// [KnfOpt]             let _483: Int = Mul(_469, _482)
// [KnfOpt]             let _484: Int = Add(_467, _483)
// [KnfOpt]             let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]             let _486: Int = Int(1)
// [KnfOpt]             let _487: Bool = Bool(true)
// [KnfOpt]             let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]             let _489: Int = Int(1)
// [KnfOpt]             let _490: Int = Int(0)
// [KnfOpt]             let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]             let rec go_loop.492: Unit = () {
// [KnfOpt]               let join go_loop.493: Unit = () {
// [KnfOpt]                 let _494: Int = Int(0)
// [KnfOpt]                 let _495: Bool = Get go.488[_494]
// [KnfOpt]                 let _496: Bool = Bool(true)
// [KnfOpt]                 if (_495 == _496) then {
// [KnfOpt]                   let _497: Int = Int(0)
// [KnfOpt]                   let _498: Int = Get r.368[_497]
// [KnfOpt]                   if (_498 == n.2) then {
// [KnfOpt]                     let _500: Int = Int(0)
// [KnfOpt]                     let _501: Bool = Bool(false)
// [KnfOpt]                     let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]                     let _503: Int = Int(0)
// [KnfOpt]                     let _504: Int = Int(0)
// [KnfOpt]                     let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]                     let _499: Unit = Unit
// [KnfOpt]                     Jump(go_loop.493, [])
// [KnfOpt]                   } else {
// [KnfOpt]                     let _506: Int = Int(0)
// [KnfOpt]                     let _507: Int = Int(0)
// [KnfOpt]                     let _508: Int = Get perm1.16[_507]
// [KnfOpt]                     let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]                     let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]                       let _512: Int = Int(0)
// [KnfOpt]                       let _513: Int = Get r.368[_512]
// [KnfOpt]                       let _514: Int = Int(1)
// [KnfOpt]                       let _515: Int = Sub(_513, _514)
// [KnfOpt]                       if (i.511 <= _515) then {
// [KnfOpt]                         let _516: Int = Int(1)
// [KnfOpt]                         let _517: Int = Add(i.511, _516)
// [KnfOpt]                         let _518: Int = Get perm1.16[_517]
// [KnfOpt]                         let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]                         let _520: Int = Int(1)
// [KnfOpt]                         let _521: Int = Add(i.511, _520)
// [KnfOpt]                         let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]                         Unit
// [KnfOpt]                       } else {
// [KnfOpt]                         Unit
// [KnfOpt]                       }
// [KnfOpt]                     }
// [KnfOpt]                     let _523: Int = Int(0)
// [KnfOpt]                     let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]                     let _525: Int = Int(0)
// [KnfOpt]                     let _526: Int = Get r.368[_525]
// [KnfOpt]                     let _527: Int = Int(0)
// [KnfOpt]                     let _528: Int = Get t.491[_527]
// [KnfOpt]                     let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]                     let _530: Int = Int(0)
// [KnfOpt]                     let _531: Int = Get r.368[_530]
// [KnfOpt]                     let _532: Int = Int(0)
// [KnfOpt]                     let _533: Int = Get r.368[_532]
// [KnfOpt]                     let _534: Int = Get count.20[_533]
// [KnfOpt]                     let _535: Int = Int(1)
// [KnfOpt]                     let _536: Int = Sub(_534, _535)
// [KnfOpt]                     let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]                     let _538: Int = Int(1)
// [KnfOpt]                     let _539: Int = Int(0)
// [KnfOpt]                     let _540: Int = Get r.368[_539]
// [KnfOpt]                     let _541: Int = Get count.20[_540]
// [KnfOpt]                     if (_538 <= _541) then {
// [KnfOpt]                       let _543: Int = Int(0)
// [KnfOpt]                       let _544: Bool = Bool(false)
// [KnfOpt]                       let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]                       let _499: Unit = Unit
// [KnfOpt]                       Jump(go_loop.493, [])
// [KnfOpt]                     } else {
// [KnfOpt]                       let _545: Int = Int(0)
// [KnfOpt]                       let _546: Int = Int(0)
// [KnfOpt]                       let _547: Int = Get r.368[_546]
// [KnfOpt]                       let _548: Int = Int(1)
// [KnfOpt]                       let _549: Int = Add(_547, _548)
// [KnfOpt]                       let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]                       let _499: Unit = Unit
// [KnfOpt]                       Jump(go_loop.493, [])
// [KnfOpt]                     }
// [KnfOpt]                   }
// [KnfOpt]                 } else {
// [KnfOpt]                   Unit
// [KnfOpt]                 }
// [KnfOpt]               }
// [KnfOpt]               Jump(go_loop.493, [])
// [KnfOpt]             }
// [KnfOpt]             let _550: Unit = Apply(go_loop.492, [])
// [KnfOpt]             let _551: Int = Int(0)
// [KnfOpt]             let _552: Int = Int(0)
// [KnfOpt]             let _553: Int = Get nperm.32[_552]
// [KnfOpt]             let _554: Int = Int(1)
// [KnfOpt]             let _555: Int = Add(_553, _554)
// [KnfOpt]             let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]             Jump(compute.367, [r.368, ])
// [KnfOpt]           } else {
// [KnfOpt]             let _461: Unit = Unit
// [KnfOpt]             let _465: Int = Int(0)
// [KnfOpt]             let _466: Int = Int(0)
// [KnfOpt]             let _467: Int = Get check_sum.29[_466]
// [KnfOpt]             let _468: Int = Int(0)
// [KnfOpt]             let _469: Int = Get flips.23[_468]
// [KnfOpt]             let _470: Int = Int(1)
// [KnfOpt]             let _471: Int = Int(0)
// [KnfOpt]             let _472: Int = Get nperm.32[_471]
// [KnfOpt]             let _473: Int = Int(0)
// [KnfOpt]             let _474: Int = Get nperm.32[_473]
// [KnfOpt]             let _475: Int = Int(2)
// [KnfOpt]             let _476: Int = Div(_474, _475)
// [KnfOpt]             let _477: Int = Int(2)
// [KnfOpt]             let _478: Int = Mul(_476, _477)
// [KnfOpt]             let _479: Int = Sub(_472, _478)
// [KnfOpt]             let _480: Int = Int(2)
// [KnfOpt]             let _481: Int = Mul(_479, _480)
// [KnfOpt]             let _482: Int = Sub(_470, _481)
// [KnfOpt]             let _483: Int = Mul(_469, _482)
// [KnfOpt]             let _484: Int = Add(_467, _483)
// [KnfOpt]             let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]             let _486: Int = Int(1)
// [KnfOpt]             let _487: Bool = Bool(true)
// [KnfOpt]             let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]             let _489: Int = Int(1)
// [KnfOpt]             let _490: Int = Int(0)
// [KnfOpt]             let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]             let rec go_loop.492: Unit = () {
// [KnfOpt]               let join go_loop.493: Unit = () {
// [KnfOpt]                 let _494: Int = Int(0)
// [KnfOpt]                 let _495: Bool = Get go.488[_494]
// [KnfOpt]                 let _496: Bool = Bool(true)
// [KnfOpt]                 if (_495 == _496) then {
// [KnfOpt]                   let _497: Int = Int(0)
// [KnfOpt]                   let _498: Int = Get r.368[_497]
// [KnfOpt]                   if (_498 == n.2) then {
// [KnfOpt]                     let _500: Int = Int(0)
// [KnfOpt]                     let _501: Bool = Bool(false)
// [KnfOpt]                     let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]                     let _503: Int = Int(0)
// [KnfOpt]                     let _504: Int = Int(0)
// [KnfOpt]                     let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]                     let _499: Unit = Unit
// [KnfOpt]                     Jump(go_loop.493, [])
// [KnfOpt]                   } else {
// [KnfOpt]                     let _506: Int = Int(0)
// [KnfOpt]                     let _507: Int = Int(0)
// [KnfOpt]                     let _508: Int = Get perm1.16[_507]
// [KnfOpt]                     let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]                     let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]                       let _512: Int = Int(0)
// [KnfOpt]                       let _513: Int = Get r.368[_512]
// [KnfOpt]                       let _514: Int = Int(1)
// [KnfOpt]                       let _515: Int = Sub(_513, _514)
// [KnfOpt]                       if (i.511 <= _515) then {
// [KnfOpt]                         let _516: Int = Int(1)
// [KnfOpt]                         let _517: Int = Add(i.511, _516)
// [KnfOpt]                         let _518: Int = Get perm1.16[_517]
// [KnfOpt]                         let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]                         let _520: Int = Int(1)
// [KnfOpt]                         let _521: Int = Add(i.511, _520)
// [KnfOpt]                         let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]                         Unit
// [KnfOpt]                       } else {
// [KnfOpt]                         Unit
// [KnfOpt]                       }
// [KnfOpt]                     }
// [KnfOpt]                     let _523: Int = Int(0)
// [KnfOpt]                     let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]                     let _525: Int = Int(0)
// [KnfOpt]                     let _526: Int = Get r.368[_525]
// [KnfOpt]                     let _527: Int = Int(0)
// [KnfOpt]                     let _528: Int = Get t.491[_527]
// [KnfOpt]                     let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]                     let _530: Int = Int(0)
// [KnfOpt]                     let _531: Int = Get r.368[_530]
// [KnfOpt]                     let _532: Int = Int(0)
// [KnfOpt]                     let _533: Int = Get r.368[_532]
// [KnfOpt]                     let _534: Int = Get count.20[_533]
// [KnfOpt]                     let _535: Int = Int(1)
// [KnfOpt]                     let _536: Int = Sub(_534, _535)
// [KnfOpt]                     let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]                     let _538: Int = Int(1)
// [KnfOpt]                     let _539: Int = Int(0)
// [KnfOpt]                     let _540: Int = Get r.368[_539]
// [KnfOpt]                     let _541: Int = Get count.20[_540]
// [KnfOpt]                     if (_538 <= _541) then {
// [KnfOpt]                       let _543: Int = Int(0)
// [KnfOpt]                       let _544: Bool = Bool(false)
// [KnfOpt]                       let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]                       let _499: Unit = Unit
// [KnfOpt]                       Jump(go_loop.493, [])
// [KnfOpt]                     } else {
// [KnfOpt]                       let _545: Int = Int(0)
// [KnfOpt]                       let _546: Int = Int(0)
// [KnfOpt]                       let _547: Int = Get r.368[_546]
// [KnfOpt]                       let _548: Int = Int(1)
// [KnfOpt]                       let _549: Int = Add(_547, _548)
// [KnfOpt]                       let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]                       let _499: Unit = Unit
// [KnfOpt]                       Jump(go_loop.493, [])
// [KnfOpt]                     }
// [KnfOpt]                   }
// [KnfOpt]                 } else {
// [KnfOpt]                   Unit
// [KnfOpt]                 }
// [KnfOpt]               }
// [KnfOpt]               Jump(go_loop.493, [])
// [KnfOpt]             }
// [KnfOpt]             let _550: Unit = Apply(go_loop.492, [])
// [KnfOpt]             let _551: Int = Int(0)
// [KnfOpt]             let _552: Int = Int(0)
// [KnfOpt]             let _553: Int = Get nperm.32[_552]
// [KnfOpt]             let _554: Int = Int(1)
// [KnfOpt]             let _555: Int = Add(_553, _554)
// [KnfOpt]             let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]             Jump(compute.367, [r.368, ])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(copy_perm.564, [_382, ])
// [KnfOpt]     } else {
// [KnfOpt]       Unit
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(compute.367, [r.36, ])
// [KnfOpt] }
// [KnfOpt] let _218: Unit = Apply(compute.35, [r.34, ])
// [KnfOpt] let _219: Int = Int(0)
// [KnfOpt] let _220: Int = Get max_flips.26[_219]
// [KnfOpt] let _221: Int = Int(0)
// [KnfOpt] let _222: Int = Get check_sum.29[_221]
// [KnfOpt] Tuple([_220, _222, ])
// [KnfOpt] Inline threshold 17
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision copy_perm.372 accepted
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 45
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision flip_loop.420 rejected
// [KnfOpt] Inline threshold 87
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision do_flip.410 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 121
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision go_loop.492 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 121
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision go_loop.492 rejected
// [KnfOpt] Knf inline Some(copy_perm) let _383: Unit = Unit
// [KnfOpt] let rec init_count.384: Unit = () {
// [KnfOpt]   let _385: Int = Int(0)
// [KnfOpt]   let _386: Int = Get r.368[_385]
// [KnfOpt]   let _387: Int = Int(1)
// [KnfOpt]   if (_386 == _387) then {
// [KnfOpt]     let _388: Unit = Unit
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _389: Int = Int(0)
// [KnfOpt]     let _390: Int = Get r.368[_389]
// [KnfOpt]     let _391: Int = Int(1)
// [KnfOpt]     let _392: Int = Sub(_390, _391)
// [KnfOpt]     let _393: Int = Int(0)
// [KnfOpt]     let _394: Int = Get r.368[_393]
// [KnfOpt]     let _395: Unit = Put count.20[_392] = _394
// [KnfOpt]     let _396: Int = Int(0)
// [KnfOpt]     let _397: Int = Int(0)
// [KnfOpt]     let _398: Int = Get r.368[_397]
// [KnfOpt]     let _399: Int = Int(1)
// [KnfOpt]     let _400: Int = Sub(_398, _399)
// [KnfOpt]     let _401: Unit = Put r.368[_396] = _400
// [KnfOpt]     let _388: Unit = Apply(init_count.384, [])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _402: Unit = Apply(init_count.384, [])
// [KnfOpt] let _403: Int = Int(0)
// [KnfOpt] let _404: Int = Int(0)
// [KnfOpt] let _405: Unit = Put flips.23[_403] = _404
// [KnfOpt] let _406: Int = Int(1)
// [KnfOpt] let _407: Int = Int(0)
// [KnfOpt] let _408: Int = Get perm.18[_407]
// [KnfOpt] let k.409: Array(Int) = ExtApply(minimbt_create_array, [_406, _408, ])
// [KnfOpt] let rec do_flip.410: Unit = (k.411: Array(Int)) {
// [KnfOpt]   let join do_flip.412: Unit = (k.413: Array(Int)) {
// [KnfOpt]     let _414: Int = Int(0)
// [KnfOpt]     let _415: Int = Get k.413[_414]
// [KnfOpt]     let _416: Int = Int(0)
// [KnfOpt]     if (_415 == _416) then {
// [KnfOpt]       Unit
// [KnfOpt]     } else {
// [KnfOpt]       let _417: Int = Int(1)
// [KnfOpt]       let _418: Int = Int(0)
// [KnfOpt]       let t.419: Array(Int) = ExtApply(minimbt_create_array, [_417, _418, ])
// [KnfOpt]       let rec flip_loop.420: Unit = (i.421: Int) {
// [KnfOpt]         let join flip_loop.422: Unit = (i.423: Int) {
// [KnfOpt]           let _424: Int = Int(0)
// [KnfOpt]           let _425: Int = Get k.413[_424]
// [KnfOpt]           let _426: Int = Int(2)
// [KnfOpt]           let _427: Int = Div(_425, _426)
// [KnfOpt]           if (i.423 <= _427) then {
// [KnfOpt]             let _428: Int = Int(0)
// [KnfOpt]             let _429: Int = Get perm.18[i.423]
// [KnfOpt]             let _430: Unit = Put t.419[_428] = _429
// [KnfOpt]             let _431: Int = Int(0)
// [KnfOpt]             let _432: Int = Get k.413[_431]
// [KnfOpt]             let _433: Int = Sub(_432, i.423)
// [KnfOpt]             let _434: Int = Get perm.18[_433]
// [KnfOpt]             let _435: Unit = Put perm.18[i.423] = _434
// [KnfOpt]             let _436: Int = Int(0)
// [KnfOpt]             let _437: Int = Get k.413[_436]
// [KnfOpt]             let _438: Int = Sub(_437, i.423)
// [KnfOpt]             let _439: Int = Int(0)
// [KnfOpt]             let _440: Int = Get t.419[_439]
// [KnfOpt]             let _441: Unit = Put perm.18[_438] = _440
// [KnfOpt]             let _442: Int = Int(1)
// [KnfOpt]             let _443: Int = Add(i.423, _442)
// [KnfOpt]             Jump(flip_loop.422, [_443, ])
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(flip_loop.422, [i.421, ])
// [KnfOpt]       }
// [KnfOpt]       let _444: Int = Int(0)
// [KnfOpt]       let _445: Unit = Apply(flip_loop.420, [_444, ])
// [KnfOpt]       let _446: Int = Int(0)
// [KnfOpt]       let _447: Int = Int(0)
// [KnfOpt]       let _448: Int = Get perm.18[_447]
// [KnfOpt]       let _449: Unit = Put k.413[_446] = _448
// [KnfOpt]       let _450: Int = Int(0)
// [KnfOpt]       let _451: Int = Int(0)
// [KnfOpt]       let _452: Int = Get flips.23[_451]
// [KnfOpt]       let _453: Int = Int(1)
// [KnfOpt]       let _454: Int = Add(_452, _453)
// [KnfOpt]       let _455: Unit = Put flips.23[_450] = _454
// [KnfOpt]       Jump(do_flip.412, [k.413, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(do_flip.412, [k.411, ])
// [KnfOpt] }
// [KnfOpt] let _456: Unit = Apply(do_flip.410, [k.409, ])
// [KnfOpt] let _457: Int = Int(0)
// [KnfOpt] let _458: Int = Get max_flips.26[_457]
// [KnfOpt] let _459: Int = Int(0)
// [KnfOpt] let _460: Int = Get flips.23[_459]
// [KnfOpt] if (_458 <= _460) then {
// [KnfOpt]   let _462: Int = Int(0)
// [KnfOpt]   let _463: Int = Int(0)
// [KnfOpt]   let _464: Int = Get flips.23[_463]
// [KnfOpt]   let _461: Unit = Put max_flips.26[_462] = _464
// [KnfOpt]   let _465: Int = Int(0)
// [KnfOpt]   let _466: Int = Int(0)
// [KnfOpt]   let _467: Int = Get check_sum.29[_466]
// [KnfOpt]   let _468: Int = Int(0)
// [KnfOpt]   let _469: Int = Get flips.23[_468]
// [KnfOpt]   let _470: Int = Int(1)
// [KnfOpt]   let _471: Int = Int(0)
// [KnfOpt]   let _472: Int = Get nperm.32[_471]
// [KnfOpt]   let _473: Int = Int(0)
// [KnfOpt]   let _474: Int = Get nperm.32[_473]
// [KnfOpt]   let _475: Int = Int(2)
// [KnfOpt]   let _476: Int = Div(_474, _475)
// [KnfOpt]   let _477: Int = Int(2)
// [KnfOpt]   let _478: Int = Mul(_476, _477)
// [KnfOpt]   let _479: Int = Sub(_472, _478)
// [KnfOpt]   let _480: Int = Int(2)
// [KnfOpt]   let _481: Int = Mul(_479, _480)
// [KnfOpt]   let _482: Int = Sub(_470, _481)
// [KnfOpt]   let _483: Int = Mul(_469, _482)
// [KnfOpt]   let _484: Int = Add(_467, _483)
// [KnfOpt]   let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]   let _486: Int = Int(1)
// [KnfOpt]   let _487: Bool = Bool(true)
// [KnfOpt]   let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]   let _489: Int = Int(1)
// [KnfOpt]   let _490: Int = Int(0)
// [KnfOpt]   let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]   let rec go_loop.492: Unit = () {
// [KnfOpt]     let join go_loop.493: Unit = () {
// [KnfOpt]       let _494: Int = Int(0)
// [KnfOpt]       let _495: Bool = Get go.488[_494]
// [KnfOpt]       let _496: Bool = Bool(true)
// [KnfOpt]       if (_495 == _496) then {
// [KnfOpt]         let _497: Int = Int(0)
// [KnfOpt]         let _498: Int = Get r.368[_497]
// [KnfOpt]         if (_498 == n.2) then {
// [KnfOpt]           let _500: Int = Int(0)
// [KnfOpt]           let _501: Bool = Bool(false)
// [KnfOpt]           let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]           let _503: Int = Int(0)
// [KnfOpt]           let _504: Int = Int(0)
// [KnfOpt]           let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]           let _499: Unit = Unit
// [KnfOpt]           Jump(go_loop.493, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _506: Int = Int(0)
// [KnfOpt]           let _507: Int = Int(0)
// [KnfOpt]           let _508: Int = Get perm1.16[_507]
// [KnfOpt]           let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]           let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]             let _512: Int = Int(0)
// [KnfOpt]             let _513: Int = Get r.368[_512]
// [KnfOpt]             let _514: Int = Int(1)
// [KnfOpt]             let _515: Int = Sub(_513, _514)
// [KnfOpt]             if (i.511 <= _515) then {
// [KnfOpt]               let _516: Int = Int(1)
// [KnfOpt]               let _517: Int = Add(i.511, _516)
// [KnfOpt]               let _518: Int = Get perm1.16[_517]
// [KnfOpt]               let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]               let _520: Int = Int(1)
// [KnfOpt]               let _521: Int = Add(i.511, _520)
// [KnfOpt]               let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _523: Int = Int(0)
// [KnfOpt]           let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]           let _525: Int = Int(0)
// [KnfOpt]           let _526: Int = Get r.368[_525]
// [KnfOpt]           let _527: Int = Int(0)
// [KnfOpt]           let _528: Int = Get t.491[_527]
// [KnfOpt]           let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]           let _530: Int = Int(0)
// [KnfOpt]           let _531: Int = Get r.368[_530]
// [KnfOpt]           let _532: Int = Int(0)
// [KnfOpt]           let _533: Int = Get r.368[_532]
// [KnfOpt]           let _534: Int = Get count.20[_533]
// [KnfOpt]           let _535: Int = Int(1)
// [KnfOpt]           let _536: Int = Sub(_534, _535)
// [KnfOpt]           let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]           let _538: Int = Int(1)
// [KnfOpt]           let _539: Int = Int(0)
// [KnfOpt]           let _540: Int = Get r.368[_539]
// [KnfOpt]           let _541: Int = Get count.20[_540]
// [KnfOpt]           if (_538 <= _541) then {
// [KnfOpt]             let _543: Int = Int(0)
// [KnfOpt]             let _544: Bool = Bool(false)
// [KnfOpt]             let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _545: Int = Int(0)
// [KnfOpt]             let _546: Int = Int(0)
// [KnfOpt]             let _547: Int = Get r.368[_546]
// [KnfOpt]             let _548: Int = Int(1)
// [KnfOpt]             let _549: Int = Add(_547, _548)
// [KnfOpt]             let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.493, [])
// [KnfOpt]   }
// [KnfOpt]   let _550: Unit = Apply(go_loop.492, [])
// [KnfOpt]   let _551: Int = Int(0)
// [KnfOpt]   let _552: Int = Int(0)
// [KnfOpt]   let _553: Int = Get nperm.32[_552]
// [KnfOpt]   let _554: Int = Int(1)
// [KnfOpt]   let _555: Int = Add(_553, _554)
// [KnfOpt]   let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]   Jump(compute.367, [r.368, ])
// [KnfOpt] } else {
// [KnfOpt]   let _461: Unit = Unit
// [KnfOpt]   let _465: Int = Int(0)
// [KnfOpt]   let _466: Int = Int(0)
// [KnfOpt]   let _467: Int = Get check_sum.29[_466]
// [KnfOpt]   let _468: Int = Int(0)
// [KnfOpt]   let _469: Int = Get flips.23[_468]
// [KnfOpt]   let _470: Int = Int(1)
// [KnfOpt]   let _471: Int = Int(0)
// [KnfOpt]   let _472: Int = Get nperm.32[_471]
// [KnfOpt]   let _473: Int = Int(0)
// [KnfOpt]   let _474: Int = Get nperm.32[_473]
// [KnfOpt]   let _475: Int = Int(2)
// [KnfOpt]   let _476: Int = Div(_474, _475)
// [KnfOpt]   let _477: Int = Int(2)
// [KnfOpt]   let _478: Int = Mul(_476, _477)
// [KnfOpt]   let _479: Int = Sub(_472, _478)
// [KnfOpt]   let _480: Int = Int(2)
// [KnfOpt]   let _481: Int = Mul(_479, _480)
// [KnfOpt]   let _482: Int = Sub(_470, _481)
// [KnfOpt]   let _483: Int = Mul(_469, _482)
// [KnfOpt]   let _484: Int = Add(_467, _483)
// [KnfOpt]   let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]   let _486: Int = Int(1)
// [KnfOpt]   let _487: Bool = Bool(true)
// [KnfOpt]   let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]   let _489: Int = Int(1)
// [KnfOpt]   let _490: Int = Int(0)
// [KnfOpt]   let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]   let rec go_loop.492: Unit = () {
// [KnfOpt]     let join go_loop.493: Unit = () {
// [KnfOpt]       let _494: Int = Int(0)
// [KnfOpt]       let _495: Bool = Get go.488[_494]
// [KnfOpt]       let _496: Bool = Bool(true)
// [KnfOpt]       if (_495 == _496) then {
// [KnfOpt]         let _497: Int = Int(0)
// [KnfOpt]         let _498: Int = Get r.368[_497]
// [KnfOpt]         if (_498 == n.2) then {
// [KnfOpt]           let _500: Int = Int(0)
// [KnfOpt]           let _501: Bool = Bool(false)
// [KnfOpt]           let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]           let _503: Int = Int(0)
// [KnfOpt]           let _504: Int = Int(0)
// [KnfOpt]           let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]           let _499: Unit = Unit
// [KnfOpt]           Jump(go_loop.493, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _506: Int = Int(0)
// [KnfOpt]           let _507: Int = Int(0)
// [KnfOpt]           let _508: Int = Get perm1.16[_507]
// [KnfOpt]           let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]           let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]             let _512: Int = Int(0)
// [KnfOpt]             let _513: Int = Get r.368[_512]
// [KnfOpt]             let _514: Int = Int(1)
// [KnfOpt]             let _515: Int = Sub(_513, _514)
// [KnfOpt]             if (i.511 <= _515) then {
// [KnfOpt]               let _516: Int = Int(1)
// [KnfOpt]               let _517: Int = Add(i.511, _516)
// [KnfOpt]               let _518: Int = Get perm1.16[_517]
// [KnfOpt]               let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]               let _520: Int = Int(1)
// [KnfOpt]               let _521: Int = Add(i.511, _520)
// [KnfOpt]               let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _523: Int = Int(0)
// [KnfOpt]           let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]           let _525: Int = Int(0)
// [KnfOpt]           let _526: Int = Get r.368[_525]
// [KnfOpt]           let _527: Int = Int(0)
// [KnfOpt]           let _528: Int = Get t.491[_527]
// [KnfOpt]           let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]           let _530: Int = Int(0)
// [KnfOpt]           let _531: Int = Get r.368[_530]
// [KnfOpt]           let _532: Int = Int(0)
// [KnfOpt]           let _533: Int = Get r.368[_532]
// [KnfOpt]           let _534: Int = Get count.20[_533]
// [KnfOpt]           let _535: Int = Int(1)
// [KnfOpt]           let _536: Int = Sub(_534, _535)
// [KnfOpt]           let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]           let _538: Int = Int(1)
// [KnfOpt]           let _539: Int = Int(0)
// [KnfOpt]           let _540: Int = Get r.368[_539]
// [KnfOpt]           let _541: Int = Get count.20[_540]
// [KnfOpt]           if (_538 <= _541) then {
// [KnfOpt]             let _543: Int = Int(0)
// [KnfOpt]             let _544: Bool = Bool(false)
// [KnfOpt]             let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _545: Int = Int(0)
// [KnfOpt]             let _546: Int = Int(0)
// [KnfOpt]             let _547: Int = Get r.368[_546]
// [KnfOpt]             let _548: Int = Int(1)
// [KnfOpt]             let _549: Int = Add(_547, _548)
// [KnfOpt]             let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.493, [])
// [KnfOpt]   }
// [KnfOpt]   let _550: Unit = Apply(go_loop.492, [])
// [KnfOpt]   let _551: Int = Int(0)
// [KnfOpt]   let _552: Int = Int(0)
// [KnfOpt]   let _553: Int = Get nperm.32[_552]
// [KnfOpt]   let _554: Int = Int(1)
// [KnfOpt]   let _555: Int = Add(_553, _554)
// [KnfOpt]   let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]   Jump(compute.367, [r.368, ])
// [KnfOpt] }
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 45
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision flip_loop.420 rejected
// [KnfOpt] Inline threshold 87
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision do_flip.410 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 121
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision go_loop.492 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 121
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision go_loop.492 rejected
// [KnfOpt] Inline threshold 385
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 5
// [KnfOpt] Inline decision compute.35 rejected
// [KnfOpt] Inline threshold 461
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 6
// [KnfOpt] Inline decision fannkuch.1 rejected
// [KnfOpt] freq: {fannkuch.1: Once, init_arr.574: Once, init_arr.576: Many(2), compute.35: Once, compute.367: Many(3), copy_perm.585: Many(2), init_count.384: Many(2), do_flip.410: Once, do_flip.412: Many(2), flip_loop.420: Once, flip_loop.422: Many(2), go_loop.492: Once, go_loop.493: Many(4), move_perm1_forward.510: Many(2), main.223: Once}
// [KnfOpt] Inline threshold 15
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision init_arr.574 accepted
// [KnfOpt] Inline threshold 39
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 39
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 45
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision flip_loop.420 rejected
// [KnfOpt] Inline threshold 87
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision do_flip.410 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 127
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision go_loop.492 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 127
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision go_loop.492 rejected
// [KnfOpt] Inline threshold 589
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 6
// [KnfOpt] Inline decision compute.35 rejected
// [KnfOpt] Knf inline Some(init_arr) let _584: Unit = Unit
// [KnfOpt] let _17: Int = Int(0)
// [KnfOpt] let perm.18: Array(Int) = ExtApply(minimbt_create_array, [n.2, _17, ])
// [KnfOpt] let _19: Int = Int(0)
// [KnfOpt] let count.20: Array(Int) = ExtApply(minimbt_create_array, [n.2, _19, ])
// [KnfOpt] let _21: Int = Int(1)
// [KnfOpt] let _22: Int = Int(0)
// [KnfOpt] let flips.23: Array(Int) = ExtApply(minimbt_create_array, [_21, _22, ])
// [KnfOpt] let _24: Int = Int(1)
// [KnfOpt] let _25: Int = Int(0)
// [KnfOpt] let max_flips.26: Array(Int) = ExtApply(minimbt_create_array, [_24, _25, ])
// [KnfOpt] let _27: Int = Int(1)
// [KnfOpt] let _28: Int = Int(0)
// [KnfOpt] let check_sum.29: Array(Int) = ExtApply(minimbt_create_array, [_27, _28, ])
// [KnfOpt] let _30: Int = Int(1)
// [KnfOpt] let _31: Int = Int(0)
// [KnfOpt] let nperm.32: Array(Int) = ExtApply(minimbt_create_array, [_30, _31, ])
// [KnfOpt] let _33: Int = Int(1)
// [KnfOpt] let r.34: Array(Int) = ExtApply(minimbt_create_array, [_33, n.2, ])
// [KnfOpt] let rec compute.35: Unit = (r.36: Array(Int)) {
// [KnfOpt]   let join compute.367: Unit = (r.368: Array(Int)) {
// [KnfOpt]     let _369: Int = Int(1)
// [KnfOpt]     let _370: Int = Int(0)
// [KnfOpt]     let _371: Int = Get r.368[_370]
// [KnfOpt]     if (_369 <= _371) then {
// [KnfOpt]       let _382: Int = Int(0)
// [KnfOpt]       let join copy_perm.585: Unit = (i.586: Int) {
// [KnfOpt]         let _587: Int = Int(1)
// [KnfOpt]         let _588: Int = Sub(n.2, _587)
// [KnfOpt]         if (i.586 <= _588) then {
// [KnfOpt]           let _589: Int = Get arr.573[i.586]
// [KnfOpt]           let _590: Unit = Put perm.18[i.586] = _589
// [KnfOpt]           let _591: Int = Int(1)
// [KnfOpt]           let _592: Int = Add(i.586, _591)
// [KnfOpt]           Jump(copy_perm.585, [_592, ])
// [KnfOpt]         } else {
// [KnfOpt]           let _383: Unit = Unit
// [KnfOpt]           let rec init_count.384: Unit = () {
// [KnfOpt]             let _385: Int = Int(0)
// [KnfOpt]             let _386: Int = Get r.368[_385]
// [KnfOpt]             let _387: Int = Int(1)
// [KnfOpt]             if (_386 == _387) then {
// [KnfOpt]               let _388: Unit = Unit
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               let _389: Int = Int(0)
// [KnfOpt]               let _390: Int = Get r.368[_389]
// [KnfOpt]               let _391: Int = Int(1)
// [KnfOpt]               let _392: Int = Sub(_390, _391)
// [KnfOpt]               let _393: Int = Int(0)
// [KnfOpt]               let _394: Int = Get r.368[_393]
// [KnfOpt]               let _395: Unit = Put count.20[_392] = _394
// [KnfOpt]               let _396: Int = Int(0)
// [KnfOpt]               let _397: Int = Int(0)
// [KnfOpt]               let _398: Int = Get r.368[_397]
// [KnfOpt]               let _399: Int = Int(1)
// [KnfOpt]               let _400: Int = Sub(_398, _399)
// [KnfOpt]               let _401: Unit = Put r.368[_396] = _400
// [KnfOpt]               let _388: Unit = Apply(init_count.384, [])
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _402: Unit = Apply(init_count.384, [])
// [KnfOpt]           let _403: Int = Int(0)
// [KnfOpt]           let _404: Int = Int(0)
// [KnfOpt]           let _405: Unit = Put flips.23[_403] = _404
// [KnfOpt]           let _406: Int = Int(1)
// [KnfOpt]           let _407: Int = Int(0)
// [KnfOpt]           let _408: Int = Get perm.18[_407]
// [KnfOpt]           let k.409: Array(Int) = ExtApply(minimbt_create_array, [_406, _408, ])
// [KnfOpt]           let rec do_flip.410: Unit = (k.411: Array(Int)) {
// [KnfOpt]             let join do_flip.412: Unit = (k.413: Array(Int)) {
// [KnfOpt]               let _414: Int = Int(0)
// [KnfOpt]               let _415: Int = Get k.413[_414]
// [KnfOpt]               let _416: Int = Int(0)
// [KnfOpt]               if (_415 == _416) then {
// [KnfOpt]                 Unit
// [KnfOpt]               } else {
// [KnfOpt]                 let _417: Int = Int(1)
// [KnfOpt]                 let _418: Int = Int(0)
// [KnfOpt]                 let t.419: Array(Int) = ExtApply(minimbt_create_array, [_417, _418, ])
// [KnfOpt]                 let rec flip_loop.420: Unit = (i.421: Int) {
// [KnfOpt]                   let join flip_loop.422: Unit = (i.423: Int) {
// [KnfOpt]                     let _424: Int = Int(0)
// [KnfOpt]                     let _425: Int = Get k.413[_424]
// [KnfOpt]                     let _426: Int = Int(2)
// [KnfOpt]                     let _427: Int = Div(_425, _426)
// [KnfOpt]                     if (i.423 <= _427) then {
// [KnfOpt]                       let _428: Int = Int(0)
// [KnfOpt]                       let _429: Int = Get perm.18[i.423]
// [KnfOpt]                       let _430: Unit = Put t.419[_428] = _429
// [KnfOpt]                       let _431: Int = Int(0)
// [KnfOpt]                       let _432: Int = Get k.413[_431]
// [KnfOpt]                       let _433: Int = Sub(_432, i.423)
// [KnfOpt]                       let _434: Int = Get perm.18[_433]
// [KnfOpt]                       let _435: Unit = Put perm.18[i.423] = _434
// [KnfOpt]                       let _436: Int = Int(0)
// [KnfOpt]                       let _437: Int = Get k.413[_436]
// [KnfOpt]                       let _438: Int = Sub(_437, i.423)
// [KnfOpt]                       let _439: Int = Int(0)
// [KnfOpt]                       let _440: Int = Get t.419[_439]
// [KnfOpt]                       let _441: Unit = Put perm.18[_438] = _440
// [KnfOpt]                       let _442: Int = Int(1)
// [KnfOpt]                       let _443: Int = Add(i.423, _442)
// [KnfOpt]                       Jump(flip_loop.422, [_443, ])
// [KnfOpt]                     } else {
// [KnfOpt]                       Unit
// [KnfOpt]                     }
// [KnfOpt]                   }
// [KnfOpt]                   Jump(flip_loop.422, [i.421, ])
// [KnfOpt]                 }
// [KnfOpt]                 let _444: Int = Int(0)
// [KnfOpt]                 let _445: Unit = Apply(flip_loop.420, [_444, ])
// [KnfOpt]                 let _446: Int = Int(0)
// [KnfOpt]                 let _447: Int = Int(0)
// [KnfOpt]                 let _448: Int = Get perm.18[_447]
// [KnfOpt]                 let _449: Unit = Put k.413[_446] = _448
// [KnfOpt]                 let _450: Int = Int(0)
// [KnfOpt]                 let _451: Int = Int(0)
// [KnfOpt]                 let _452: Int = Get flips.23[_451]
// [KnfOpt]                 let _453: Int = Int(1)
// [KnfOpt]                 let _454: Int = Add(_452, _453)
// [KnfOpt]                 let _455: Unit = Put flips.23[_450] = _454
// [KnfOpt]                 Jump(do_flip.412, [k.413, ])
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]             Jump(do_flip.412, [k.411, ])
// [KnfOpt]           }
// [KnfOpt]           let _456: Unit = Apply(do_flip.410, [k.409, ])
// [KnfOpt]           let _457: Int = Int(0)
// [KnfOpt]           let _458: Int = Get max_flips.26[_457]
// [KnfOpt]           let _459: Int = Int(0)
// [KnfOpt]           let _460: Int = Get flips.23[_459]
// [KnfOpt]           if (_458 <= _460) then {
// [KnfOpt]             let _462: Int = Int(0)
// [KnfOpt]             let _463: Int = Int(0)
// [KnfOpt]             let _464: Int = Get flips.23[_463]
// [KnfOpt]             let _461: Unit = Put max_flips.26[_462] = _464
// [KnfOpt]             let _465: Int = Int(0)
// [KnfOpt]             let _466: Int = Int(0)
// [KnfOpt]             let _467: Int = Get check_sum.29[_466]
// [KnfOpt]             let _468: Int = Int(0)
// [KnfOpt]             let _469: Int = Get flips.23[_468]
// [KnfOpt]             let _470: Int = Int(1)
// [KnfOpt]             let _471: Int = Int(0)
// [KnfOpt]             let _472: Int = Get nperm.32[_471]
// [KnfOpt]             let _473: Int = Int(0)
// [KnfOpt]             let _474: Int = Get nperm.32[_473]
// [KnfOpt]             let _475: Int = Int(2)
// [KnfOpt]             let _476: Int = Div(_474, _475)
// [KnfOpt]             let _477: Int = Int(2)
// [KnfOpt]             let _478: Int = Mul(_476, _477)
// [KnfOpt]             let _479: Int = Sub(_472, _478)
// [KnfOpt]             let _480: Int = Int(2)
// [KnfOpt]             let _481: Int = Mul(_479, _480)
// [KnfOpt]             let _482: Int = Sub(_470, _481)
// [KnfOpt]             let _483: Int = Mul(_469, _482)
// [KnfOpt]             let _484: Int = Add(_467, _483)
// [KnfOpt]             let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]             let _486: Int = Int(1)
// [KnfOpt]             let _487: Bool = Bool(true)
// [KnfOpt]             let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]             let _489: Int = Int(1)
// [KnfOpt]             let _490: Int = Int(0)
// [KnfOpt]             let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]             let rec go_loop.492: Unit = () {
// [KnfOpt]               let join go_loop.493: Unit = () {
// [KnfOpt]                 let _494: Int = Int(0)
// [KnfOpt]                 let _495: Bool = Get go.488[_494]
// [KnfOpt]                 let _496: Bool = Bool(true)
// [KnfOpt]                 if (_495 == _496) then {
// [KnfOpt]                   let _497: Int = Int(0)
// [KnfOpt]                   let _498: Int = Get r.368[_497]
// [KnfOpt]                   if (_498 == n.2) then {
// [KnfOpt]                     let _500: Int = Int(0)
// [KnfOpt]                     let _501: Bool = Bool(false)
// [KnfOpt]                     let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]                     let _503: Int = Int(0)
// [KnfOpt]                     let _504: Int = Int(0)
// [KnfOpt]                     let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]                     let _499: Unit = Unit
// [KnfOpt]                     Jump(go_loop.493, [])
// [KnfOpt]                   } else {
// [KnfOpt]                     let _506: Int = Int(0)
// [KnfOpt]                     let _507: Int = Int(0)
// [KnfOpt]                     let _508: Int = Get arr.573[_507]
// [KnfOpt]                     let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]                     let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]                       let _512: Int = Int(0)
// [KnfOpt]                       let _513: Int = Get r.368[_512]
// [KnfOpt]                       let _514: Int = Int(1)
// [KnfOpt]                       let _515: Int = Sub(_513, _514)
// [KnfOpt]                       if (i.511 <= _515) then {
// [KnfOpt]                         let _516: Int = Int(1)
// [KnfOpt]                         let _517: Int = Add(i.511, _516)
// [KnfOpt]                         let _518: Int = Get arr.573[_517]
// [KnfOpt]                         let _519: Unit = Put arr.573[i.511] = _518
// [KnfOpt]                         let _520: Int = Int(1)
// [KnfOpt]                         let _521: Int = Add(i.511, _520)
// [KnfOpt]                         let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]                         Unit
// [KnfOpt]                       } else {
// [KnfOpt]                         Unit
// [KnfOpt]                       }
// [KnfOpt]                     }
// [KnfOpt]                     let _523: Int = Int(0)
// [KnfOpt]                     let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]                     let _525: Int = Int(0)
// [KnfOpt]                     let _526: Int = Get r.368[_525]
// [KnfOpt]                     let _527: Int = Int(0)
// [KnfOpt]                     let _528: Int = Get t.491[_527]
// [KnfOpt]                     let _529: Unit = Put arr.573[_526] = _528
// [KnfOpt]                     let _530: Int = Int(0)
// [KnfOpt]                     let _531: Int = Get r.368[_530]
// [KnfOpt]                     let _532: Int = Int(0)
// [KnfOpt]                     let _533: Int = Get r.368[_532]
// [KnfOpt]                     let _534: Int = Get count.20[_533]
// [KnfOpt]                     let _535: Int = Int(1)
// [KnfOpt]                     let _536: Int = Sub(_534, _535)
// [KnfOpt]                     let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]                     let _538: Int = Int(1)
// [KnfOpt]                     let _539: Int = Int(0)
// [KnfOpt]                     let _540: Int = Get r.368[_539]
// [KnfOpt]                     let _541: Int = Get count.20[_540]
// [KnfOpt]                     if (_538 <= _541) then {
// [KnfOpt]                       let _543: Int = Int(0)
// [KnfOpt]                       let _544: Bool = Bool(false)
// [KnfOpt]                       let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]                       let _499: Unit = Unit
// [KnfOpt]                       Jump(go_loop.493, [])
// [KnfOpt]                     } else {
// [KnfOpt]                       let _545: Int = Int(0)
// [KnfOpt]                       let _546: Int = Int(0)
// [KnfOpt]                       let _547: Int = Get r.368[_546]
// [KnfOpt]                       let _548: Int = Int(1)
// [KnfOpt]                       let _549: Int = Add(_547, _548)
// [KnfOpt]                       let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]                       let _499: Unit = Unit
// [KnfOpt]                       Jump(go_loop.493, [])
// [KnfOpt]                     }
// [KnfOpt]                   }
// [KnfOpt]                 } else {
// [KnfOpt]                   Unit
// [KnfOpt]                 }
// [KnfOpt]               }
// [KnfOpt]               Jump(go_loop.493, [])
// [KnfOpt]             }
// [KnfOpt]             let _550: Unit = Apply(go_loop.492, [])
// [KnfOpt]             let _551: Int = Int(0)
// [KnfOpt]             let _552: Int = Int(0)
// [KnfOpt]             let _553: Int = Get nperm.32[_552]
// [KnfOpt]             let _554: Int = Int(1)
// [KnfOpt]             let _555: Int = Add(_553, _554)
// [KnfOpt]             let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]             Jump(compute.367, [r.368, ])
// [KnfOpt]           } else {
// [KnfOpt]             let _461: Unit = Unit
// [KnfOpt]             let _465: Int = Int(0)
// [KnfOpt]             let _466: Int = Int(0)
// [KnfOpt]             let _467: Int = Get check_sum.29[_466]
// [KnfOpt]             let _468: Int = Int(0)
// [KnfOpt]             let _469: Int = Get flips.23[_468]
// [KnfOpt]             let _470: Int = Int(1)
// [KnfOpt]             let _471: Int = Int(0)
// [KnfOpt]             let _472: Int = Get nperm.32[_471]
// [KnfOpt]             let _473: Int = Int(0)
// [KnfOpt]             let _474: Int = Get nperm.32[_473]
// [KnfOpt]             let _475: Int = Int(2)
// [KnfOpt]             let _476: Int = Div(_474, _475)
// [KnfOpt]             let _477: Int = Int(2)
// [KnfOpt]             let _478: Int = Mul(_476, _477)
// [KnfOpt]             let _479: Int = Sub(_472, _478)
// [KnfOpt]             let _480: Int = Int(2)
// [KnfOpt]             let _481: Int = Mul(_479, _480)
// [KnfOpt]             let _482: Int = Sub(_470, _481)
// [KnfOpt]             let _483: Int = Mul(_469, _482)
// [KnfOpt]             let _484: Int = Add(_467, _483)
// [KnfOpt]             let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]             let _486: Int = Int(1)
// [KnfOpt]             let _487: Bool = Bool(true)
// [KnfOpt]             let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]             let _489: Int = Int(1)
// [KnfOpt]             let _490: Int = Int(0)
// [KnfOpt]             let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]             let rec go_loop.492: Unit = () {
// [KnfOpt]               let join go_loop.493: Unit = () {
// [KnfOpt]                 let _494: Int = Int(0)
// [KnfOpt]                 let _495: Bool = Get go.488[_494]
// [KnfOpt]                 let _496: Bool = Bool(true)
// [KnfOpt]                 if (_495 == _496) then {
// [KnfOpt]                   let _497: Int = Int(0)
// [KnfOpt]                   let _498: Int = Get r.368[_497]
// [KnfOpt]                   if (_498 == n.2) then {
// [KnfOpt]                     let _500: Int = Int(0)
// [KnfOpt]                     let _501: Bool = Bool(false)
// [KnfOpt]                     let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]                     let _503: Int = Int(0)
// [KnfOpt]                     let _504: Int = Int(0)
// [KnfOpt]                     let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]                     let _499: Unit = Unit
// [KnfOpt]                     Jump(go_loop.493, [])
// [KnfOpt]                   } else {
// [KnfOpt]                     let _506: Int = Int(0)
// [KnfOpt]                     let _507: Int = Int(0)
// [KnfOpt]                     let _508: Int = Get arr.573[_507]
// [KnfOpt]                     let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]                     let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]                       let _512: Int = Int(0)
// [KnfOpt]                       let _513: Int = Get r.368[_512]
// [KnfOpt]                       let _514: Int = Int(1)
// [KnfOpt]                       let _515: Int = Sub(_513, _514)
// [KnfOpt]                       if (i.511 <= _515) then {
// [KnfOpt]                         let _516: Int = Int(1)
// [KnfOpt]                         let _517: Int = Add(i.511, _516)
// [KnfOpt]                         let _518: Int = Get arr.573[_517]
// [KnfOpt]                         let _519: Unit = Put arr.573[i.511] = _518
// [KnfOpt]                         let _520: Int = Int(1)
// [KnfOpt]                         let _521: Int = Add(i.511, _520)
// [KnfOpt]                         let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]                         Unit
// [KnfOpt]                       } else {
// [KnfOpt]                         Unit
// [KnfOpt]                       }
// [KnfOpt]                     }
// [KnfOpt]                     let _523: Int = Int(0)
// [KnfOpt]                     let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]                     let _525: Int = Int(0)
// [KnfOpt]                     let _526: Int = Get r.368[_525]
// [KnfOpt]                     let _527: Int = Int(0)
// [KnfOpt]                     let _528: Int = Get t.491[_527]
// [KnfOpt]                     let _529: Unit = Put arr.573[_526] = _528
// [KnfOpt]                     let _530: Int = Int(0)
// [KnfOpt]                     let _531: Int = Get r.368[_530]
// [KnfOpt]                     let _532: Int = Int(0)
// [KnfOpt]                     let _533: Int = Get r.368[_532]
// [KnfOpt]                     let _534: Int = Get count.20[_533]
// [KnfOpt]                     let _535: Int = Int(1)
// [KnfOpt]                     let _536: Int = Sub(_534, _535)
// [KnfOpt]                     let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]                     let _538: Int = Int(1)
// [KnfOpt]                     let _539: Int = Int(0)
// [KnfOpt]                     let _540: Int = Get r.368[_539]
// [KnfOpt]                     let _541: Int = Get count.20[_540]
// [KnfOpt]                     if (_538 <= _541) then {
// [KnfOpt]                       let _543: Int = Int(0)
// [KnfOpt]                       let _544: Bool = Bool(false)
// [KnfOpt]                       let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]                       let _499: Unit = Unit
// [KnfOpt]                       Jump(go_loop.493, [])
// [KnfOpt]                     } else {
// [KnfOpt]                       let _545: Int = Int(0)
// [KnfOpt]                       let _546: Int = Int(0)
// [KnfOpt]                       let _547: Int = Get r.368[_546]
// [KnfOpt]                       let _548: Int = Int(1)
// [KnfOpt]                       let _549: Int = Add(_547, _548)
// [KnfOpt]                       let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]                       let _499: Unit = Unit
// [KnfOpt]                       Jump(go_loop.493, [])
// [KnfOpt]                     }
// [KnfOpt]                   }
// [KnfOpt]                 } else {
// [KnfOpt]                   Unit
// [KnfOpt]                 }
// [KnfOpt]               }
// [KnfOpt]               Jump(go_loop.493, [])
// [KnfOpt]             }
// [KnfOpt]             let _550: Unit = Apply(go_loop.492, [])
// [KnfOpt]             let _551: Int = Int(0)
// [KnfOpt]             let _552: Int = Int(0)
// [KnfOpt]             let _553: Int = Get nperm.32[_552]
// [KnfOpt]             let _554: Int = Int(1)
// [KnfOpt]             let _555: Int = Add(_553, _554)
// [KnfOpt]             let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]             Jump(compute.367, [r.368, ])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(copy_perm.585, [_382, ])
// [KnfOpt]     } else {
// [KnfOpt]       Unit
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(compute.367, [r.36, ])
// [KnfOpt] }
// [KnfOpt] let _218: Unit = Apply(compute.35, [r.34, ])
// [KnfOpt] let _219: Int = Int(0)
// [KnfOpt] let _220: Int = Get max_flips.26[_219]
// [KnfOpt] let _221: Int = Int(0)
// [KnfOpt] let _222: Int = Get check_sum.29[_221]
// [KnfOpt] Tuple([_220, _222, ])
// [KnfOpt] Inline threshold 39
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 39
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 45
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision flip_loop.420 rejected
// [KnfOpt] Inline threshold 87
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision do_flip.410 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 127
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision go_loop.492 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 127
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision go_loop.492 rejected
// [KnfOpt] Inline threshold 589
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 6
// [KnfOpt] Inline decision compute.35 rejected
// [KnfOpt] Inline threshold 661
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 7
// [KnfOpt] Inline decision fannkuch.1 rejected
// [KnfOpt] Numbers of let rec: 10 10 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f4: Once, f8: Once, f9: Once, f0: Multiple, f1: Once, f5: Multiple, f2: Once, f3: Multiple, f7: Once, f20: Once})
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] fannkuch.600 is inlining Call(ty=Unit, f=f7, args=[Mem(fref=f8, mref=m7), FnParam(fref=f8, fpref=$f.0), Mem(fref=f8, mref=m0), Mem(fref=f8, mref=m1), Mem(fref=f8, mref=m2), Mem(fref=f8, mref=m3), Mem(fref=f8, mref=m6), Mem(fref=f8, mref=m5), Mem(fref=f8, mref=m4)])
// [CoreOpt] shifted callee .fn compute.601 #f7 : fn(array[int32], int32, array[int32], array[int32], array[int32], array[int32], array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b16 {
// [CoreOpt]   .bb #b16 () {
// [CoreOpt]     jump b17($f0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b17 pre #Some(b16) header #b18 {
// [CoreOpt]     .block #b19
// [CoreOpt]     .block #b20
// [CoreOpt]     .block #b29
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 (array[int32]) {
// [CoreOpt]     let %16: int32 = load int32 field($b18.0, 0 * @32)
// [CoreOpt]     let %17: bool = le(1, %16)
// [CoreOpt]     br %17 b19() b20()
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 () {
// [CoreOpt]     jump b21(0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 () {
// [CoreOpt]     jump b29(())
// [CoreOpt]   }
// [CoreOpt]   .loop #b21 pre #Some(b19) header #b22 {
// [CoreOpt]     .block #b23
// [CoreOpt]     .block #b24
// [CoreOpt]     .block #b25
// [CoreOpt]     .block #b26
// [CoreOpt]     .block #b27
// [CoreOpt]     .block #b28
// [CoreOpt]   }
// [CoreOpt]   .bb #b22 (int32) {
// [CoreOpt]     let %18: int32 = sub($f1, 1)
// [CoreOpt]     let %19: bool = le($b22.0, %18)
// [CoreOpt]     br %19 b23() b24()
// [CoreOpt]   }
// [CoreOpt]   .bb #b23 () {
// [CoreOpt]     let %20: int32 = load int32 offset($f2, $b22.0 * @32)
// [CoreOpt]     let _ = store int32 offset($f3, $b22.0 * @32) <- %20
// [CoreOpt]     let %22: int32 = add($b22.0, 1)
// [CoreOpt]     jump b22(%22)
// [CoreOpt]   }
// [CoreOpt]   .bb #b24 () {
// [CoreOpt]     let %23: unit = call f0($b18.0, $f4)
// [CoreOpt]     let _ = store int32 field($f5, 0 * @32) <- 0
// [CoreOpt]     let %25: int32 = load int32 field($f3, 0 * @32)
// [CoreOpt]     let _ = alloc <m16: array[int32] heap(1)> <- [..] = %25
// [CoreOpt]     let %27: unit = call f2(f7.m16, $f3, $f5)
// [CoreOpt]     jump b30(%27)
// [CoreOpt]   }
// [CoreOpt]   .bb #b25 () {
// [CoreOpt]     let %31: int32 = load int32 field($f5, 0 * @32)
// [CoreOpt]     let _ = store int32 field($f8, 0 * @32) <- %31
// [CoreOpt]     let %33: int32 = load int32 field($f7, 0 * @32)
// [CoreOpt]     let %34: int32 = load int32 field($f5, 0 * @32)
// [CoreOpt]     let %35: int32 = load int32 field($f6, 0 * @32)
// [CoreOpt]     let %36: int32 = load int32 field($f6, 0 * @32)
// [CoreOpt]     let %37: int32 = div(%36, 2)
// [CoreOpt]     let %38: int32 = mul(%37, 2)
// [CoreOpt]     let %39: int32 = sub(%35, %38)
// [CoreOpt]     let %40: int32 = mul(%39, 2)
// [CoreOpt]     let %41: int32 = sub(1, %40)
// [CoreOpt]     let %42: int32 = mul(%34, %41)
// [CoreOpt]     let %43: int32 = add(%33, %42)
// [CoreOpt]     let _ = store int32 field($f7, 0 * @32) <- %43
// [CoreOpt]     let _ = alloc <m17: array[int32] heap(1)> <- [..] = true
// [CoreOpt]     let _ = alloc <m18: array[int32] heap(1)> <- [..] = 0
// [CoreOpt]     let %47: unit = call f4($f1, $b18.0, f7.m18, f7.m17, $f2, $f4)
// [CoreOpt]     jump b31(%47)
// [CoreOpt]   }
// [CoreOpt]   .bb #b26 () {
// [CoreOpt]     let %51: int32 = load int32 field($f7, 0 * @32)
// [CoreOpt]     let %52: int32 = load int32 field($f5, 0 * @32)
// [CoreOpt]     let %53: int32 = load int32 field($f6, 0 * @32)
// [CoreOpt]     let %54: int32 = load int32 field($f6, 0 * @32)
// [CoreOpt]     let %55: int32 = div(%54, 2)
// [CoreOpt]     let %56: int32 = mul(%55, 2)
// [CoreOpt]     let %57: int32 = sub(%53, %56)
// [CoreOpt]     let %58: int32 = mul(%57, 2)
// [CoreOpt]     let %59: int32 = sub(1, %58)
// [CoreOpt]     let %60: int32 = mul(%52, %59)
// [CoreOpt]     let %61: int32 = add(%51, %60)
// [CoreOpt]     let _ = store int32 field($f7, 0 * @32) <- %61
// [CoreOpt]     let _ = alloc <m19: array[int32] heap(1)> <- [..] = true
// [CoreOpt]     let _ = alloc <m20: array[int32] heap(1)> <- [..] = 0
// [CoreOpt]     let %65: unit = call f6($f1, $b18.0, f7.m20, f7.m19, $f2, $f4)
// [CoreOpt]     jump b32(%65)
// [CoreOpt]   }
// [CoreOpt]   .bb #b27 (any) {
// [CoreOpt]     jump b28($b27.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b28 (any) {
// [CoreOpt]     return $b28.0
// [CoreOpt]   }
// [CoreOpt]   .bb #b29 (any) {
// [CoreOpt]     return $b29.0
// [CoreOpt]   }
// [CoreOpt]   .bb #b30 (unit) {
// [CoreOpt]     let %28: int32 = load int32 field($f8, 0 * @32)
// [CoreOpt]     let %29: int32 = load int32 field($f5, 0 * @32)
// [CoreOpt]     let %30: bool = le(%28, %29)
// [CoreOpt]     br %30 b25() b26()
// [CoreOpt]   }
// [CoreOpt]   .bb #b31 (unit) {
// [CoreOpt]     let %48: int32 = load int32 field($f6, 0 * @32)
// [CoreOpt]     let %49: int32 = add(%48, 1)
// [CoreOpt]     let _ = store int32 field($f6, 0 * @32) <- %49
// [CoreOpt]     jump b18($b18.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b32 (unit) {
// [CoreOpt]     let %66: int32 = load int32 field($f6, 0 * @32)
// [CoreOpt]     let %67: int32 = add(%66, 1)
// [CoreOpt]     let _ = store int32 field($f6, 0 * @32) <- %67
// [CoreOpt]     jump b18($b18.0)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] do_flip.603 is inlining Call(ty=Unit, f=f1, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0), Mem(fref=f2, mref=m0), FnParam(fref=f2, fpref=$f.1)])
// [CoreOpt] shifted callee .fn flip_loop.604 #f1 : fn(int32, array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b9 {
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     jump b10($f0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b10 pre #Some(b9) header #b11 {
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b13
// [CoreOpt]     .block #b14
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 (int32) {
// [CoreOpt]     let %9: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %10: int32 = div(%9, 2)
// [CoreOpt]     let %11: bool = le($b11.0, %10)
// [CoreOpt]     br %11 b12() b13()
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     let %12: int32 = load int32 offset($f3, $b11.0 * @32)
// [CoreOpt]     let _ = store int32 field($f2, 0 * @32) <- %12
// [CoreOpt]     let %14: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %15: int32 = sub(%14, $b11.0)
// [CoreOpt]     let %16: int32 = load int32 offset($f3, %15 * @32)
// [CoreOpt]     let _ = store int32 offset($f3, $b11.0 * @32) <- %16
// [CoreOpt]     let %18: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %19: int32 = sub(%18, $b11.0)
// [CoreOpt]     let %20: int32 = load int32 field($f2, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($f3, %19 * @32) <- %20
// [CoreOpt]     let %22: int32 = add($b11.0, 1)
// [CoreOpt]     jump b11(%22)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 () {
// [CoreOpt]     jump b14(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 (any) {
// [CoreOpt]     return $b14.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] compute.601 is inlining Call(ty=Unit, f=f2, args=[Mem(fref=f7, mref=m0), FnParam(fref=f7, fpref=$f.3), FnParam(fref=f7, fpref=$f.5)])
// [CoreOpt] shifted callee .fn do_flip.603 #f2 : fn(array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b53 {
// [CoreOpt]   .bb #b53 () {
// [CoreOpt]     jump b54($f0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b54 pre #Some(b53) header #b55 {
// [CoreOpt]     .block #b56
// [CoreOpt]     .block #b57
// [CoreOpt]     .block #b58
// [CoreOpt]   }
// [CoreOpt]   .bb #b55 (array[int32]) {
// [CoreOpt]     let %53: int32 = load int32 field($b55.0, 0 * @32)
// [CoreOpt]     let %54: bool = eq(%53, 0)
// [CoreOpt]     br %54 b56() b57()
// [CoreOpt]   }
// [CoreOpt]   .bb #b56 () {
// [CoreOpt]     jump b58(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b57 () {
// [CoreOpt]     let _ = alloc <m53: array[int32] heap(1)> <- [..] = 0
// [CoreOpt]     jump b62()
// [CoreOpt]   }
// [CoreOpt]   .bb #b58 (unit) {
// [CoreOpt]     return $b58.0
// [CoreOpt]   }
// [CoreOpt]   .bb #b59 (unit) {
// [CoreOpt]     let %57: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let _ = store int32 field($b55.0, 0 * @32) <- %57
// [CoreOpt]     let %59: int32 = load int32 field($f2, 0 * @32)
// [CoreOpt]     let %60: int32 = add(%59, 1)
// [CoreOpt]     let _ = store int32 field($f2, 0 * @32) <- %60
// [CoreOpt]     jump b55($b55.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b62 () {
// [CoreOpt]     jump b63(0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b63 pre #Some(b62) header #b64 {
// [CoreOpt]     .block #b65
// [CoreOpt]     .block #b66
// [CoreOpt]     .block #b67
// [CoreOpt]   }
// [CoreOpt]   .bb #b64 (int32) {
// [CoreOpt]     let %62: int32 = load int32 field($b55.0, 0 * @32)
// [CoreOpt]     let %63: int32 = div(%62, 2)
// [CoreOpt]     let %64: bool = le($b64.0, %63)
// [CoreOpt]     br %64 b65() b66()
// [CoreOpt]   }
// [CoreOpt]   .bb #b65 () {
// [CoreOpt]     let %65: int32 = load int32 offset($f1, $b64.0 * @32)
// [CoreOpt]     let _ = store int32 field(f2.m53, 0 * @32) <- %65
// [CoreOpt]     let %67: int32 = load int32 field($b55.0, 0 * @32)
// [CoreOpt]     let %68: int32 = sub(%67, $b64.0)
// [CoreOpt]     let %69: int32 = load int32 offset($f1, %68 * @32)
// [CoreOpt]     let _ = store int32 offset($f1, $b64.0 * @32) <- %69
// [CoreOpt]     let %71: int32 = load int32 field($b55.0, 0 * @32)
// [CoreOpt]     let %72: int32 = sub(%71, $b64.0)
// [CoreOpt]     let %73: int32 = load int32 field(f2.m53, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($f1, %72 * @32) <- %73
// [CoreOpt]     let %75: int32 = add($b64.0, 1)
// [CoreOpt]     jump b64(%75)
// [CoreOpt]   }
// [CoreOpt]   .bb #b66 () {
// [CoreOpt]     jump b67(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b67 (any) {
// [CoreOpt]     jump b59($b67.0)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] compute.601 is inlining Call(ty=Unit, f=f4, args=[FnParam(fref=f7, fpref=$f.1), BlockParam(bref=b2, bpref=$b.0), Mem(fref=f7, mref=m2), Mem(fref=f7, mref=m1), FnParam(fref=f7, fpref=$f.2), FnParam(fref=f7, fpref=$f.4)])
// [CoreOpt] shifted callee .fn go_loop.605 #f4 : fn(int32, array[int32], array[int32], array[bool], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b76 {
// [CoreOpt]   .bb #b76 () {
// [CoreOpt]     jump b77()
// [CoreOpt]   }
// [CoreOpt]   .loop #b77 pre #Some(b76) header #b78 {
// [CoreOpt]     .block #b79
// [CoreOpt]     .block #b80
// [CoreOpt]     .block #b81
// [CoreOpt]     .block #b82
// [CoreOpt]     .block #b83
// [CoreOpt]     .block #b84
// [CoreOpt]     .block #b85
// [CoreOpt]     .block #b86
// [CoreOpt]     .block #b87
// [CoreOpt]   }
// [CoreOpt]   .bb #b78 () {
// [CoreOpt]     let %76: bool = load bool field($f3, 0 * @32)
// [CoreOpt]     let %77: bool = eq(%76, true)
// [CoreOpt]     br %77 b79() b80()
// [CoreOpt]   }
// [CoreOpt]   .bb #b79 () {
// [CoreOpt]     let %78: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %79: bool = eq(%78, $f0)
// [CoreOpt]     br %79 b81() b82()
// [CoreOpt]   }
// [CoreOpt]   .bb #b80 () {
// [CoreOpt]     jump b87(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b81 () {
// [CoreOpt]     let _ = store bool field($f3, 0 * @32) <- false
// [CoreOpt]     let _ = store int32 field($f1, 0 * @32) <- 0
// [CoreOpt]     jump b78()
// [CoreOpt]   }
// [CoreOpt]   .bb #b82 () {
// [CoreOpt]     let %82: int32 = load int32 field($f4, 0 * @32)
// [CoreOpt]     let _ = store int32 field($f2, 0 * @32) <- %82
// [CoreOpt]     let %84: unit = call f3(0, $f1, $f4)
// [CoreOpt]     let %85: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %86: int32 = load int32 field($f2, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($f4, %85 * @32) <- %86
// [CoreOpt]     let %88: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %89: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %90: int32 = load int32 offset($f5, %89 * @32)
// [CoreOpt]     let %91: int32 = sub(%90, 1)
// [CoreOpt]     let _ = store int32 offset($f5, %88 * @32) <- %91
// [CoreOpt]     let %93: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %94: int32 = load int32 offset($f5, %93 * @32)
// [CoreOpt]     let %95: bool = le(1, %94)
// [CoreOpt]     br %95 b83() b84()
// [CoreOpt]   }
// [CoreOpt]   .bb #b83 () {
// [CoreOpt]     let _ = store bool field($f3, 0 * @32) <- false
// [CoreOpt]     jump b78()
// [CoreOpt]   }
// [CoreOpt]   .bb #b84 () {
// [CoreOpt]     let %97: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %98: int32 = add(%97, 1)
// [CoreOpt]     let _ = store int32 field($f1, 0 * @32) <- %98
// [CoreOpt]     jump b78()
// [CoreOpt]   }
// [CoreOpt]   .bb #b85 (any) {
// [CoreOpt]     jump b86($b85.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b86 (any) {
// [CoreOpt]     jump b87($b86.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b87 (any) {
// [CoreOpt]     return $b87.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] compute.601 is inlining Call(ty=Unit, f=f6, args=[FnParam(fref=f7, fpref=$f.1), BlockParam(bref=b2, bpref=$b.0), Mem(fref=f7, mref=m4), Mem(fref=f7, mref=m3), FnParam(fref=f7, fpref=$f.2), FnParam(fref=f7, fpref=$f.4)])
// [CoreOpt] shifted callee .fn go_loop.607 #f6 : fn(int32, array[int32], array[int32], array[bool], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b100 {
// [CoreOpt]   .bb #b100 () {
// [CoreOpt]     jump b101()
// [CoreOpt]   }
// [CoreOpt]   .loop #b101 pre #Some(b100) header #b102 {
// [CoreOpt]     .block #b103
// [CoreOpt]     .block #b104
// [CoreOpt]     .block #b105
// [CoreOpt]     .block #b106
// [CoreOpt]     .block #b107
// [CoreOpt]     .block #b108
// [CoreOpt]     .block #b109
// [CoreOpt]     .block #b110
// [CoreOpt]     .block #b111
// [CoreOpt]   }
// [CoreOpt]   .bb #b102 () {
// [CoreOpt]     let %100: bool = load bool field($f3, 0 * @32)
// [CoreOpt]     let %101: bool = eq(%100, true)
// [CoreOpt]     br %101 b103() b104()
// [CoreOpt]   }
// [CoreOpt]   .bb #b103 () {
// [CoreOpt]     let %102: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %103: bool = eq(%102, $f0)
// [CoreOpt]     br %103 b105() b106()
// [CoreOpt]   }
// [CoreOpt]   .bb #b104 () {
// [CoreOpt]     jump b111(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b105 () {
// [CoreOpt]     let _ = store bool field($f3, 0 * @32) <- false
// [CoreOpt]     let _ = store int32 field($f1, 0 * @32) <- 0
// [CoreOpt]     jump b102()
// [CoreOpt]   }
// [CoreOpt]   .bb #b106 () {
// [CoreOpt]     let %106: int32 = load int32 field($f4, 0 * @32)
// [CoreOpt]     let _ = store int32 field($f2, 0 * @32) <- %106
// [CoreOpt]     let %108: unit = call f5(0, $f1, $f4)
// [CoreOpt]     let %109: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %110: int32 = load int32 field($f2, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($f4, %109 * @32) <- %110
// [CoreOpt]     let %112: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %113: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %114: int32 = load int32 offset($f5, %113 * @32)
// [CoreOpt]     let %115: int32 = sub(%114, 1)
// [CoreOpt]     let _ = store int32 offset($f5, %112 * @32) <- %115
// [CoreOpt]     let %117: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %118: int32 = load int32 offset($f5, %117 * @32)
// [CoreOpt]     let %119: bool = le(1, %118)
// [CoreOpt]     br %119 b107() b108()
// [CoreOpt]   }
// [CoreOpt]   .bb #b107 () {
// [CoreOpt]     let _ = store bool field($f3, 0 * @32) <- false
// [CoreOpt]     jump b102()
// [CoreOpt]   }
// [CoreOpt]   .bb #b108 () {
// [CoreOpt]     let %121: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %122: int32 = add(%121, 1)
// [CoreOpt]     let _ = store int32 field($f1, 0 * @32) <- %122
// [CoreOpt]     jump b102()
// [CoreOpt]   }
// [CoreOpt]   .bb #b109 (any) {
// [CoreOpt]     jump b110($b109.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b110 (any) {
// [CoreOpt]     jump b111($b110.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b111 (any) {
// [CoreOpt]     return $b111.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f7
// [CoreOpt] LVN subst Insn(iref=%13) with Insn(iref=%12)
// [CoreOpt] LVN subst Insn(iref=%13) with Insn(iref=%12)
// [CoreOpt] LVN subst Insn(iref=%54) with Insn(iref=%53)
// [CoreOpt] LVN subst Insn(iref=%36) with Insn(iref=%35)
// [CoreOpt] LVN subst Insn(iref=%4) with Insn(iref=%2)
// [CoreOpt] LVN subst Insn(iref=%6) with Insn(iref=%3)
// [CoreOpt] LVN subst Insn(iref=%6) with Insn(iref=%3)
