// [Asm] pre_assigned_registers: FnParam(fref=f6, fpref=$f.1) -> v3, Insn(iref=%3) -> v8, Insn(iref=%7) -> v11, BlockParam(bref=b3, bpref=$b.0) -> v12, Insn(iref=%2) -> v7, FnParam(fref=f6, fpref=$f.0) -> v2, FnParam(fref=f6, fpref=$f.2) -> v4, Insn(iref=%1) -> v6, Self(fref=f6) -> v0, Insn(iref=%5) -> v10, Insn(iref=%0) -> v5, Insn(iref=%4) -> v9
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f6, fpref=$f.0), Insn(iref=%1)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v8, v2, v4, v16, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v8, v2, v4, v17, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v8, v2, v4, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v8, v4, v14, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v8, v4, v15, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v12 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of move_perm1_forward197.568l6_6"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="t0", color=blue];
// [Asm]   r23 [label="t3", color=blue];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="v8 ← a3", color=green];
// [Asm]   r26 [label="v12 ← a0", color=green];
// [Asm]   r6 [label="v4 ← a2", color=green];
// [Asm]   r13 [label="v14 ← a0", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r11 [label="v17 ← a4", color=green];
// [Asm]   r7 [label="v5 ← a3", color=green];
// [Asm]   r10 [label="v16 ← a4", color=green];
// [Asm]   r22 [label="t2", color=blue];
// [Asm]   r14 [label="v15 ← a0", color=green];
// [Asm]   r8 [label="v6 ← a3", color=green];
// [Asm]   r5 [label="v3 ← a1", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r24 [label="t4", color=blue];
// [Asm]   r25 [label="v11 ← a0", color=green];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r21 [label="t1", color=blue];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r12 [label="v9 ← a4", color=green];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r0 -- r24;
// [Asm]   r1 -- r4;
// [Asm]   r6 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r21;
// [Asm]   r4 -- r20;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r4 -- r18;
// [Asm]   r4 -- r22;
// [Asm]   r5 -- r11;
// [Asm]   r6 -- r12;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r6 -- r8;
// [Asm]   r9 -- r14;
// [Asm]   r0 -- r6;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r6 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r12 -- r14;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r9 -- r13;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r20;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r19;
// [Asm]   r0 -- r18;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:a0-> 2:a2-> 3:a1-> 4:zero-> 1:v2-> 5:v3-> 6:v4-> 7:v5-> 8:v6-> 9:v8-> 10:v16-> 11:v17-> 12:v9-> 13:v14-> 14:v15-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 20:t0-> 21:t1-> 22:t2-> 23:t3-> 24:t4-> 25:v11-> 26:v12"
// [Asm]   comment = "v8<-a3;v12<-a0;v4<-a2;v14<-a0;v2<-a0;v17<-a4;v5<-a3;v16<-a4;v15<-a0;v6<-a3;v3<-a1;v11<-a0;v9<-a4;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of move_perm1_forward197.568l6_6"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v5, 0(v3) ->   lw a3, 0(a1)
// [Asm] subst   addi v6, v5, -1 ->   addi a3, a3, -1
// [Asm] subst   blt v6, v2, .move_perm1_forward197.568l6_6_2 ->   blt a3, a0, .move_perm1_forward197.568l6_6_2
// [Asm] subst   addi v8, v2, 1 ->   addi a3, a0, 1
// [Asm] subst   slliw v16, v8, 2 ->   slliw a4, a3, 2
// [Asm] subst   add v17, v4, v16 ->   add a4, a2, a4
// [Asm] subst   lw v9, 0(v17) ->   lw a4, 0(a4)
// [Asm] subst   slliw v14, v2, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v15, v4, v14 ->   add a0, a2, a0
// [Asm] subst   sw v9, 0(v15) ->   sw a4, 0(a0)
// [Asm] subst   mv a0, v8 ->   mv a0, a3
// [Asm] subst   call move_perm1_forward197.568l6_6 ->   call move_perm1_forward197.568l6_6
// [Asm] subst   mv v12, zero ->   mv a0, zero
// [Asm] subst   mv v12, zero ->   mv a0, zero
// [Asm] subst   j .move_perm1_forward197.568l6_6_3 ->   j .move_perm1_forward197.568l6_6_3
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v26, Insn(iref=%9) -> v20, Insn(iref=%16) -> v27, Insn(iref=%8) -> v19, Mem(fref=f8, mref=m6) -> v2, Insn(iref=%10) -> v21, Mem(fref=f8, mref=m5) -> v7, Insn(iref=%14) -> v25, Mem(fref=f8, mref=m4) -> v3, Insn(iref=%5) -> v16, Mem(fref=f8, mref=m1) -> v6, Insn(iref=%0) -> v11, Insn(iref=%4) -> v15, Mem(fref=f8, mref=m8) -> v4, Insn(iref=%3) -> v14, Insn(iref=%13) -> v24, Insn(iref=%7) -> v18, Mem(fref=f8, mref=m0) -> v5, Mem(fref=f8, mref=m7) -> v10, Insn(iref=%2) -> v13, Insn(iref=%1) -> v12, Insn(iref=%11) -> v22, Mem(fref=f8, mref=m3) -> v9, Mem(fref=f8, mref=m2) -> v8, Self(fref=f8) -> v0, Insn(iref=%6) -> v17, Insn(iref=%12) -> v23
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [v48]
// [Asm] live_set: [v48, zero, s11]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: [v48]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, zero, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v11, v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v11, v5, zero, v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v5, zero, v8, v6]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, zero, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v11, v5, zero, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, zero, v8, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, v8, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v11, v5, zero, v8, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, zero, v8, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, v8, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v11, v5, zero, v7, v8, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, zero, v7, v8, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v7, v8, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v3, v11, v5, v7, v8, v6, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v11, v5, v7, v8, v6, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v3, v11, v5, v7, v8, v41, v6, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v5, v7, v8, v6, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v3, v11, v5, v10, v7, v8, v6, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v11, v5, v10, v7, v8, v6, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v3, v11, v5, v10, v7, v8, v38, v6, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v5, v10, v7, v8, v6, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v3, v11, v5, v10, v7, v8, v6, s11, v9, v39, v2]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v5, v10, v7, v8, v6, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v10, v7, v8, v6, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v10, v7, v8, v6, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v10, v7, v8, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v10, v7, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v10, v7, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v10, v7, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, s11, v10, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v2, s11, v10, v9, v3]
// [Asm] move_origin: [v10]
// [Asm] defined: s10 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v35, v2, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v35, v2, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v35, s11, v9, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, v9, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v20]
// [Asm] live_set: [s11, v9, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v21, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v21, s11, v22]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v21, v22]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v21, v22]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v22]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v4, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v24]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v24]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v24, a0]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v24, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v26]
// [Asm] live_set: [v24]
// [Asm] move_origin: [a0]
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v24]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v24]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v24]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [v27]
// [Asm] move_origin: [a0]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v27]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v27]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main262l0_8"];
// [Asm]   r0 [label="v48 ← a0", color=green];
// [Asm]   r33 [label="v4 ← a1", color=green];
// [Asm]   r9 [label="a6", color=blue];
// [Asm]   r26 [label="v38 ← a7", color=green];
// [Asm]   r6 [label="a3", color=blue];
// [Asm]   r13 [label="t2", color=blue];
// [Asm]   r4 [label="a1", color=blue];
// [Asm]   r29 [label="v35 ← a1", color=green];
// [Asm]   r35 [label="v25 ← a0", color=green];
// [Asm]   r7 [label="a4", color=blue];
// [Asm]   r10 [label="a7", color=blue];
// [Asm]   r8 [label="a5", color=blue];
// [Asm]   r5 [label="a2", color=blue];
// [Asm]   r36 [label="v26 ← a0", color=green];
// [Asm]   r32 [label="v22 ← a2", color=green];
// [Asm]   r24 [label="v41 ← a6", color=green];
// [Asm]   r15 [label="t4", color=blue];
// [Asm]   r31 [label="v21 ← a0", color=green];
// [Asm]   r17 [label="v5 ← a1", color=green];
// [Asm]   r12 [label="t1", color=blue];
// [Asm]   r37 [label="v27 ← a0", color=green];
// [Asm]   r20 [label="v9 ← s0", color=green];
// [Asm]   r23 [label="v2 ← a5", color=green];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   r27 [label="v39 ← a7", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="s10", color=blue];
// [Asm]   r11 [label="t0", color=blue];
// [Asm]   r34 [label="v24 ← s0", color=green];
// [Asm]   r22 [label="v7 ← a4", color=green];
// [Asm]   r14 [label="t3", color=blue];
// [Asm]   r30 [label="v20 ← a0", color=green];
// [Asm]   r25 [label="v10 ← a6", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="v11 ← a0", color=green];
// [Asm]   r18 [label="v6 ← a2", color=green];
// [Asm]   r19 [label="v8 ← a3", color=green];
// [Asm]   r21 [label="v3 ← s1", color=green];
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r21 -- r24;
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r5 -- r21;
// [Asm]   r16 -- r20;
// [Asm]   r17 -- r21;
// [Asm]   r16 -- r25;
// [Asm]   r14 -- r20;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r18 -- r25;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r18 -- r27;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r18 -- r21;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r19 -- r21;
// [Asm]   r3 -- r34;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r19;
// [Asm]   r16 -- r17;
// [Asm]   r20 -- r30;
// [Asm]   r14 -- r34;
// [Asm]   r3 -- r8;
// [Asm]   r20 -- r23;
// [Asm]   r4 -- r21;
// [Asm]   r8 -- r34;
// [Asm]   r1 -- r9;
// [Asm]   r7 -- r34;
// [Asm]   r2 -- r25;
// [Asm]   r22 -- r25;
// [Asm]   r2 -- r33;
// [Asm]   r20 -- r22;
// [Asm]   r10 -- r20;
// [Asm]   r2 -- r6;
// [Asm]   r18 -- r26;
// [Asm]   r3 -- r4;
// [Asm]   r19 -- r27;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r21 -- r27;
// [Asm]   r19 -- r22;
// [Asm]   r17 -- r22;
// [Asm]   r2 -- r12;
// [Asm]   r22 -- r27;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r20 -- r27;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r9 -- r20;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r8 -- r21;
// [Asm]   r18 -- r20;
// [Asm]   r16 -- r21;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r2 -- r24;
// [Asm]   r21 -- r22;
// [Asm]   r13 -- r21;
// [Asm]   r16 -- r24;
// [Asm]   r17 -- r27;
// [Asm]   r16 -- r23;
// [Asm]   r2 -- r23;
// [Asm]   r16 -- r22;
// [Asm]   r16 -- r27;
// [Asm]   r5 -- r34;
// [Asm]   r17 -- r20;
// [Asm]   r18 -- r24;
// [Asm]   r23 -- r29;
// [Asm]   r17 -- r18;
// [Asm]   r20 -- r24;
// [Asm]   r2 -- r26;
// [Asm]   r11 -- r20;
// [Asm]   r34 -- r35;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r20;
// [Asm]   r20 -- r26;
// [Asm]   r2 -- r18;
// [Asm]   r21 -- r28;
// [Asm]   r12 -- r34;
// [Asm]   r21 -- r29;
// [Asm]   r25 -- r27;
// [Asm]   r3 -- r12;
// [Asm]   r17 -- r26;
// [Asm]   r1 -- r22;
// [Asm]   r16 -- r19;
// [Asm]   r20 -- r29;
// [Asm]   r7 -- r20;
// [Asm]   r1 -- r15;
// [Asm]   r22 -- r26;
// [Asm]   r17 -- r24;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r19 -- r24;
// [Asm]   r25 -- r26;
// [Asm]   r2 -- r11;
// [Asm]   r18 -- r22;
// [Asm]   r16 -- r26;
// [Asm]   r17 -- r25;
// [Asm]   r19 -- r26;
// [Asm]   r23 -- r27;
// [Asm]   r8 -- r20;
// [Asm]   r10 -- r34;
// [Asm]   r16 -- r18;
// [Asm]   r22 -- r24;
// [Asm]   r20 -- r25;
// [Asm]   r13 -- r20;
// [Asm]   r6 -- r20;
// [Asm]   r21 -- r23;
// [Asm]   r33 -- r34;
// [Asm]   r6 -- r34;
// [Asm]   r23 -- r26;
// [Asm]   r2 -- r28;
// [Asm]   r12 -- r20;
// [Asm]   r2 -- r29;
// [Asm]   r17 -- r23;
// [Asm]   r23 -- r25;
// [Asm]   r18 -- r19;
// [Asm]   r9 -- r34;
// [Asm]   r13 -- r34;
// [Asm]   r19 -- r23;
// [Asm]   r21 -- r31;
// [Asm]   r32 -- r33;
// [Asm]   r2 -- r14;
// [Asm]   r21 -- r30;
// [Asm]   r3 -- r21;
// [Asm]   r15 -- r21;
// [Asm]   r14 -- r21;
// [Asm]   r21 -- r25;
// [Asm]   r23 -- r28;
// [Asm]   r34 -- r36;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r2 -- r21;
// [Asm]   r15 -- r34;
// [Asm]   r3 -- r14;
// [Asm]   r21 -- r26;
// [Asm]   r2 -- r17;
// [Asm]   r11 -- r34;
// [Asm]   r2 -- r30;
// [Asm]   r20 -- r28;
// [Asm]   r31 -- r32;
// [Asm]   r31 -- r33;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r15 -- r20;
// [Asm]   r2 -- r3;
// [Asm]   r19 -- r25;
// [Asm]   r20 -- r21;
// [Asm]   r2 -- r27;
// [Asm]   r10 -- r21;
// [Asm]   r11 -- r21;
// [Asm]   r19 -- r20;
// [Asm]   r9 -- r21;
// [Asm]   r18 -- r23;
// [Asm]   comment = "0:v48-> 1:zero-> 2:s11-> 3:a0-> 4:a1-> 20:v9-> 21:v3-> 5:a2-> 6:a3-> 7:a4-> 8:a5-> 34:v24-> 9:a6-> 10:a7-> 11:t0-> 12:t1-> 13:t2-> 14:t3-> 15:t4-> 16:v11-> 17:v5-> 18:v6-> 19:v8-> 22:v7-> 23:v2-> 24:v41-> 25:v10-> 26:v38-> 27:v39-> 29:v35-> 28:s10-> 30:v20-> 31:v21-> 33:v4-> 32:v22-> 35:v25-> 36:v26-> 37:v27"
// [Asm]   comment = "v48<-a0;v4<-a1;v38<-a7;v35<-a1;v25<-a0;v26<-a0;v22<-a2;v41<-a6;v21<-a0;v5<-a1;v27<-a0;v9<-s0;v2<-a5;v39<-a7;v24<-s0;v7<-a4;v20<-a0;v10<-a6;v11<-a0;v6<-a2;v8<-a3;v3<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main262l0_8"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v48, 9 ->   li a0, 9
// [Asm] subst   call gen_perm14.400l1_1 ->   call gen_perm14.400l1_1
// [Asm] subst   addi v5, s11, -36 ->   addi a1, s11, -36
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a1, -8
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a1)
// [Asm] subst   sw zero, 4(v5) ->   sw zero, 4(a1)
// [Asm] subst   sw zero, 8(v5) ->   sw zero, 8(a1)
// [Asm] subst   sw zero, 12(v5) ->   sw zero, 12(a1)
// [Asm] subst   sw zero, 16(v5) ->   sw zero, 16(a1)
// [Asm] subst   sw zero, 20(v5) ->   sw zero, 20(a1)
// [Asm] subst   sw zero, 24(v5) ->   sw zero, 24(a1)
// [Asm] subst   sw zero, 28(v5) ->   sw zero, 28(a1)
// [Asm] subst   sw zero, 32(v5) ->   sw zero, 32(a1)
// [Asm] subst   addi v6, s11, -36 ->   addi a2, s11, -36
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a2, -8
// [Asm] subst   sw zero, 0(v6) ->   sw zero, 0(a2)
// [Asm] subst   sw zero, 4(v6) ->   sw zero, 4(a2)
// [Asm] subst   sw zero, 8(v6) ->   sw zero, 8(a2)
// [Asm] subst   sw zero, 12(v6) ->   sw zero, 12(a2)
// [Asm] subst   sw zero, 16(v6) ->   sw zero, 16(a2)
// [Asm] subst   sw zero, 20(v6) ->   sw zero, 20(a2)
// [Asm] subst   sw zero, 24(v6) ->   sw zero, 24(a2)
// [Asm] subst   sw zero, 28(v6) ->   sw zero, 28(a2)
// [Asm] subst   sw zero, 32(v6) ->   sw zero, 32(a2)
// [Asm] subst   addi v8, s11, -4 ->   addi a3, s11, -4
// [Asm] subst   andi s11, v8, -8 ->   andi s11, a3, -8
// [Asm] subst   sw zero, 0(v8) ->   sw zero, 0(a3)
// [Asm] subst   addi v9, s11, -4 ->   addi s0, s11, -4
// [Asm] subst   andi s11, v9, -8 ->   andi s11, s0, -8
// [Asm] subst   sw zero, 0(v9) ->   sw zero, 0(s0)
// [Asm] subst   addi v3, s11, -4 ->   addi s1, s11, -4
// [Asm] subst   andi s11, v3, -8 ->   andi s11, s1, -8
// [Asm] subst   sw zero, 0(v3) ->   sw zero, 0(s1)
// [Asm] subst   addi v7, s11, -4 ->   addi a4, s11, -4
// [Asm] subst   andi s11, v7, -8 ->   andi s11, a4, -8
// [Asm] subst   sw zero, 0(v7) ->   sw zero, 0(a4)
// [Asm] subst   addi v2, s11, -4 ->   addi a5, s11, -4
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a5, -8
// [Asm] subst   li v41, 9 ->   li a6, 9
// [Asm] subst   sw v41, 0(v2) ->   sw a6, 0(a5)
// [Asm] subst   addi v10, s11, -72 ->   addi a6, s11, -72
// [Asm] subst   andi s11, v10, -8 ->   andi s11, a6, -8
// [Asm] subst   la v38, compute40.432_18 ->   la a7, compute40.432_18
// [Asm] subst   sd v38, 0(v10) ->   sd a7, 0(a6)
// [Asm] subst   li v39, 9 ->   li a7, 9
// [Asm] subst   sd v39, 8(v10) ->   sd a7, 8(a6)
// [Asm] subst   sd v5, 16(v10) ->   sd a1, 16(a6)
// [Asm] subst   sd v11, 24(v10) ->   sd a0, 24(a6)
// [Asm] subst   sd v6, 32(v10) ->   sd a2, 32(a6)
// [Asm] subst   sd v8, 40(v10) ->   sd a3, 40(a6)
// [Asm] subst   sd v9, 48(v10) ->   sd s0, 48(a6)
// [Asm] subst   sd v3, 56(v10) ->   sd s1, 56(a6)
// [Asm] subst   sd v7, 64(v10) ->   sd a4, 64(a6)
// [Asm] subst   mv s10, v10 ->   mv s10, a6
// [Asm] subst   ld v35, 0(v10) ->   ld a1, 0(a6)
// [Asm] subst   mv a0, v2 ->   mv a0, a5
// [Asm] subst   jalr v35 ->   jalr a1
// [Asm] subst   lw v21, 0(v9) ->   lw a0, 0(s0)
// [Asm] subst   lw v22, 0(v3) ->   lw a2, 0(s1)
// [Asm] subst   addi v4, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a1, -8
// [Asm] subst   sw v21, 0(v4) ->   sw a0, 0(a1)
// [Asm] subst   sw v22, 4(v4) ->   sw a2, 4(a1)
// [Asm] subst   lw v24, 0(v4) ->   lw s0, 0(a1)
// [Asm] subst   lw v25, 4(v4) ->   lw a0, 4(a1)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v24 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v12, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v11, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v8
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [v14]
// [Asm] live_set: [v6, v5, v14, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v6, v5, v15, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v6, v12, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v12]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init_arr9.404l2_0"];
// [Asm]   r8 [label="v10 ← a0", color=green];
// [Asm]   r0 [label="v14 ← a0", color=green];
// [Asm]   r5 [label="v15 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r2 [label="v5 ← a2", color=green];
// [Asm]   r9 [label="v8 ← a0", color=green];
// [Asm]   r6 [label="v12 ← a0", color=green];
// [Asm]   r13 [label="v3 ← a1", color=green];
// [Asm]   r4 [label="v7 ← a3", color=green];
// [Asm]   r1 [label="v6 ← a1", color=green];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="v2 ← a3", color=green];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r14 [label="v4 ← a0", color=green];
// [Asm]   r1 -- r9;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r11 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r10 -- r12;
// [Asm]   r3 -- r13;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r13 -- r14;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r10 -- r13;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r9;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v14-> 1:v6-> 2:v5-> 3:zero-> 4:v7-> 5:v15-> 9:v8-> 6:v12-> 14:v4-> 13:v3-> 10:v2-> 11:a2-> 12:a1-> 7:a0-> 8:v10"
// [Asm]   comment = "v10<-a0;v14<-a0;v15<-a0;v5<-a2;v8<-a0;v12<-a0;v3<-a1;v7<-a3;v6<-a1;v2<-a3;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init_arr9.404l2_0"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v14, v5, 2 ->   slliw a0, a2, 2
// [Asm] subst   add v15, v6, v14 ->   add a0, a1, a0
// [Asm] subst   sw v5, 0(v15) ->   sw a2, 0(a0)
// [Asm] subst   addi v12, v5, 1 ->   addi a0, a2, 1
// [Asm] subst   mv v5, v12 ->   mv a2, a0
// [Asm] subst   j .init_arr9.404l2_0_0 ->   j .init_arr9.404l2_0_0
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   addi v8, v7, -1 ->   addi a0, a3, -1
// [Asm] subst   blt v8, v5, .init_arr9.404l2_0_2 ->   blt a0, a2, .init_arr9.404l2_0_2
// [Asm] subst   mv v2, a0 ->   mv a3, a0
// [Asm] subst   mv v4, a2 ->   mv a0, a2
// [Asm] subst   mv v5, v2 ->   mv a2, a3
// [Asm] subst   mv v7, v4 ->   mv a3, a0
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v5, Mem(fref=f1, mref=m0) -> v3, Self(fref=f1) -> v0, FnParam(fref=f1, fpref=$f.0) -> v2, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, a0, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of gen_perm14.400l1_1"];
// [Asm]   r0 [label="v2 ← a2", color=green];
// [Asm]   r3 [label="v7 ← a0", color=green];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r4 [label="v3 ← s0", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r18 [label="v5 ← a0", color=green];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r11;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r6 -- r14;
// [Asm]   r6 -- r10;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r7;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r18;
// [Asm]   r4 -- r17;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r6 -- r12;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r6 -- r13;
// [Asm]   comment = "0:v2-> 1:s11-> 2:zero-> 3:v7-> 4:v3-> 5:a1-> 6:a0-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:t0-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 18:v5"
// [Asm]   comment = "v2<-a2;v7<-a0;v3<-s0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of gen_perm14.400l1_1"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv a2, a0
// [Asm] subst   slliw v7, v2, 2 ->   slliw a0, a2, 2
// [Asm] subst   sub v3, s11, v7 ->   sub s0, s11, a0
// [Asm] subst   andi s11, v3, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a1, v2 ->   mv a1, a2
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   call init_arr9.404l2_0 ->   call init_arr9.404l2_0
// [Asm] subst   mv a0, v3 ->   mv a0, s0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b69, bpref=$b.0) -> v91, Insn(iref=%15) -> v72, Insn(iref=%41) -> v42, Insn(iref=%82) -> v113, Insn(iref=%33) -> v36, BlockParam(bref=b54, bpref=$b.2) -> v21, Insn(iref=%76) -> v108, Insn(iref=%63) -> v116, Mem(fref=f18, mref=m31) -> v14, BlockParam(bref=b10, bpref=$b.0) -> v63, Insn(iref=%8) -> v64, Insn(iref=%10) -> v66, BlockParam(bref=b34, bpref=$b.0) -> v62, Insn(iref=%25) -> v81, Insn(iref=%39) -> v50, Insn(iref=%59) -> v89, BlockParam(bref=b40, bpref=$b.2) -> v39, BlockParam(bref=b67, bpref=$b.0) -> v115, Insn(iref=%4) -> v28, Insn(iref=%81) -> v112, Insn(iref=%56) -> v119, Insn(iref=%49) -> v57, Insn(iref=%42) -> v43, Insn(iref=%65) -> v98, Insn(iref=%68) -> v101, BlockParam(bref=b60, bpref=$b.3) -> v86, Insn(iref=%73) -> v105, Insn(iref=%26) -> v82, BlockParam(bref=b9, bpref=$b.0) -> v26, Insn(iref=%31) -> v34, Insn(iref=%74) -> v106, Insn(iref=%64) -> v117, Insn(iref=%38) -> v49, BlockParam(bref=b54, bpref=$b.1) -> v20, Insn(iref=%75) -> v107, Insn(iref=%53) -> v61, Insn(iref=%78) -> v110, Insn(iref=%54) -> v23, Insn(iref=%60) -> v90, Insn(iref=%67) -> v100, Insn(iref=%5) -> v29, Insn(iref=%19) -> v75, FreeVar(fvref=^6) -> v8, Insn(iref=%13) -> v70, BlockParam(bref=b11, bpref=$b.0) -> v92, Insn(iref=%79) -> v114, Insn(iref=%55) -> v24, Insn(iref=%66) -> v99, Insn(iref=%48) -> v56, Insn(iref=%23) -> v79, Insn(iref=%71) -> v104, Insn(iref=%20) -> v76, BlockParam(bref=b40, bpref=$b.0) -> v37, FreeVar(fvref=^3) -> v5, Insn(iref=%36) -> v47, BlockParam(bref=b31, bpref=$b.0) -> v31, BlockParam(bref=b31, bpref=$b.1) -> v32, FreeVar(fvref=^5) -> v7, BlockParam(bref=b43, bpref=$b.0) -> v44, Mem(fref=f18, mref=m2) -> v12, BlockParam(bref=b57, bpref=$b.0) -> v25, FreeVar(fvref=^2) -> v4, FreeVar(fvref=^1) -> v3, Insn(iref=%50) -> v58, Insn(iref=%14) -> v71, FreeVar(fvref=^4) -> v6, Insn(iref=%51) -> v59, Insn(iref=%77) -> v109, BlockParam(bref=b37, bpref=$b.0) -> v45, Insn(iref=%80) -> v111, Insn(iref=%52) -> v60, BlockParam(bref=b60, bpref=$b.1) -> v84, BlockParam(bref=b68, bpref=$b.0) -> v118, Insn(iref=%44) -> v52, Insn(iref=%32) -> v35, Insn(iref=%58) -> v121, FnParam(fref=f18, fpref=$f.0) -> v2, BlockParam(bref=b6, bpref=$b.0) -> v18, Insn(iref=%1) -> v17, Insn(iref=%11) -> v67, BlockParam(bref=b54, bpref=$b.3) -> v22, BlockParam(bref=b60, bpref=$b.2) -> v85, BlockParam(bref=b31, bpref=$b.2) -> v33, Insn(iref=%57) -> v120, Insn(iref=%6) -> v30, Insn(iref=%35) -> v46, Insn(iref=%62) -> v97, BlockParam(bref=b60, bpref=$b.0) -> v83, BlockParam(bref=b60, bpref=$b.4) -> v87, Mem(fref=f18, mref=m1) -> v11, Insn(iref=%46) -> v54, Insn(iref=%28) -> v93, Insn(iref=%9) -> v65, Insn(iref=%24) -> v80, Insn(iref=%37) -> v48, BlockParam(bref=b54, bpref=$b.0) -> v19, BlockParam(bref=b0, bpref=$b.0) -> v15, Insn(iref=%45) -> v53, FreeVar(fvref=^7) -> v9, Insn(iref=%29) -> v94, Insn(iref=%70) -> v103, Insn(iref=%47) -> v55, Insn(iref=%0) -> v16, Insn(iref=%61) -> v96, Insn(iref=%3) -> v27, BlockParam(bref=b40, bpref=$b.1) -> v38, Insn(iref=%18) -> v74, FreeVar(fvref=^8) -> v10, BlockParam(bref=b5, bpref=$b.0) -> v69, Insn(iref=%22) -> v78, Insn(iref=%17) -> v73, BlockParam(bref=b40, bpref=$b.3) -> v40, Insn(iref=%43) -> v51, Mem(fref=f18, mref=m0) -> v13, BlockParam(bref=b60, bpref=$b.5) -> v88, Insn(iref=%30) -> v95, Insn(iref=%21) -> v77, Self(fref=f18) -> v0, Insn(iref=%40) -> v41, Insn(iref=%69) -> v102, Insn(iref=%12) -> v68
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%77)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%61), BlockParam(bref=b60, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%59), Bool(val=true)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%8), Insn(iref=%9)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b40, bpref=$b.0), Insn(iref=%41)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%31), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b54, bpref=$b.0), Insn(iref=%54)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%0)])
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [zero]
// [Asm] defined: v18 is X
// [Asm] defs: [v67]
// [Asm] live_set: [v5, v10, zero, v67, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v69]
// [Asm] live_set: [v69, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v69 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v40, v5, v10, v7, v37, v32, v41, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v192]
// [Asm] live_set: [v40, v5, v10, v7, v37, v32, v41, s11, v192, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v192 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v40, v5, v10, v42, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v40, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v69]
// [Asm] live_set: [v69, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v69 is X
// [Asm] defs: []
// [Asm] live_set: [v69, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v70]
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v70 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v5, v71, v10, v7, s11, v9, zero, v8, v4, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v5, v71, v10, v7, s11, v9, v72, zero, v8, v4, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: [v165]
// [Asm] live_set: [v165, v5, v71, v10, v7, s11, v9, v72, zero, v8, v4, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v165 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v5, v71, v10, v7, s11, v9, v73, v72, zero, v8, v4, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v73 is X
// [Asm] defs: [v163]
// [Asm] live_set: [v5, v71, v10, v7, s11, v9, v73, v72, zero, v8, v4, v6, v70, v15, v163, v3]
// [Asm] move_origin: []
// [Asm] defined: v163 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v5, v71, v10, v7, s11, v9, v72, zero, v8, v4, v6, v70, v74, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v74 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v5, v71, v10, v7, s11, v9, v75, zero, v8, v4, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: [v160]
// [Asm] live_set: [v5, v71, v10, v7, s11, v160, v9, v75, zero, v8, v4, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v160 is X
// [Asm] defs: [v76]
// [Asm] live_set: [v76, v5, v71, v10, v7, s11, v9, zero, v8, v4, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: [v158]
// [Asm] live_set: [v76, v5, v71, v10, v158, v7, s11, v9, zero, v8, v4, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v158 is X
// [Asm] defs: [v77]
// [Asm] live_set: [v5, v71, v10, v7, s11, v9, zero, v77, v8, v4, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v77 is X
// [Asm] defs: [v78]
// [Asm] live_set: [v5, v10, v78, v7, s11, v9, zero, v8, v4, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v78 is X
// [Asm] defs: [v79]
// [Asm] live_set: [v5, v10, v79, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v10, v7, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v155]
// [Asm] live_set: [v11, v155, v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v155 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v5, v10, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, v10, v7, v12, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v7, v8, v4, v6, v12, s11, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v5, v14, v10, v7, v37, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v5, v10, v7, v37, v32, s11, v31, v33, v9, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: [v14]
// [Asm] defined: v38 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: [v31]
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v40, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: [v32]
// [Asm] defined: v40 is X
// [Asm] defs: [v92]
// [Asm] live_set: [v5, v10, zero, v8, v7, v92, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: [v91]
// [Asm] defined: v92 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v5, v10, v7, v32, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v14, v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v91]
// [Asm] live_set: [v91, v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v91 is X
// [Asm] defs: [v111]
// [Asm] live_set: [v87, v5, v10, v7, v88, v111, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defined: v111 is X
// [Asm] defs: [v112]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v112, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defined: v112 is X
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defs: [v115]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v115, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v115 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s11, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [zero, a0, v0, s11]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v0, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v0, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, v0, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v0, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, zero, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v5, zero, v8, v7, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v5, zero, v8, v7, v0, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v5, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v15 is X
// [Asm] defs: [v64]
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v64, v3]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v3, v5, v10, zero, v7, v8, v4, v65, v6, v15, s11, v9, v64]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v21, v10, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: v22 is X
// [Asm] defs: [v98]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v98, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defined: v98 is X
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v87, v5, v10, a0, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v87, v5, v10, a0, v7, v88, a1, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: [v86]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v87, v5, v10, a0, v7, v88, a2, a1, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: [v88]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v87, v5, v10, a0, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v100]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v100 is X
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defs: [v101]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v101, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defined: v101 is X
// [Asm] defs: [v102]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v101, zero, v85, v8, v84, v4, v6, v15, v83, v102, v3]
// [Asm] move_origin: []
// [Asm] defined: v102 is X
// [Asm] defs: [v142]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v142, zero, v85, v8, v84, v4, v6, v15, v83, v102, v3]
// [Asm] move_origin: []
// [Asm] defined: v142 is X
// [Asm] defs: [v143]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v143, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v102, v3]
// [Asm] move_origin: []
// [Asm] defined: v143 is X
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defs: [v104]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v104, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defined: v104 is X
// [Asm] defs: [v138]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v138, zero, v85, v8, v84, v104, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defined: v138 is X
// [Asm] defs: [v139]
// [Asm] live_set: [v3, v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v104, v4, v6, v15, v83, v139]
// [Asm] move_origin: []
// [Asm] defined: v139 is X
// [Asm] defs: [v105]
// [Asm] live_set: [v3, v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v104, v105, v4, v6, v15, v83]
// [Asm] move_origin: []
// [Asm] defined: v105 is X
// [Asm] defs: [v106]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v106, zero, v85, v8, v84, v104, v4, v6, v83, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v106 is X
// [Asm] defs: [v135]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v106, zero, v85, v8, v84, v4, v6, v15, v83, v135, v3]
// [Asm] move_origin: []
// [Asm] defined: v135 is X
// [Asm] defs: [v136]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v106, zero, v85, v8, v84, v136, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defined: v136 is X
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v108]
// [Asm] live_set: [v87, v5, v10, v7, v88, v108, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v108 is X
// [Asm] defs: [v131]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v131, v3]
// [Asm] move_origin: []
// [Asm] defined: v131 is X
// [Asm] defs: [v132]
// [Asm] live_set: [v132, v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v132 is X
// [Asm] defs: [v109]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v109, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v109 is X
// [Asm] defs: [v130]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v109, v130, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v130 is X
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: [v83]
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: [v84]
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: [v85]
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: [v86]
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: [v87]
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: [v88]
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [v5, v46, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v48]
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, v48, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v5, v10, v49, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v31]
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v32]
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v33]
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v201]
// [Asm] live_set: [v5, v16, v10, zero, v8, v7, v4, v6, s11, v15, v9, v201, v3]
// [Asm] move_origin: []
// [Asm] defined: v201 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v45]
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v45, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v44]
// [Asm] defined: v45 is X
// [Asm] defs: [v125]
// [Asm] live_set: [v5, v21, v10, v125, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v125 is X
// [Asm] defs: [v126]
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v126, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v126 is X
// [Asm] defs: [v119]
// [Asm] live_set: [v5, v21, v10, v22, v119, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v119 is X
// [Asm] defs: [v123]
// [Asm] live_set: [v5, v21, v10, v22, v119, v123, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v123 is X
// [Asm] defs: [v124]
// [Asm] live_set: [v5, v21, v10, v22, v119, v7, s11, v9, v124, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v124 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v121]
// [Asm] live_set: [v5, v21, v10, v121, v22, v7, s11, v9, zero, v20, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v121 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: [v121]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: [v20]
// [Asm] defs: []
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: [v21]
// [Asm] defs: []
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: [v22]
// [Asm] defs: []
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v96]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v96, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v96 is X
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v83]
// [Asm] live_set: [v11, v5, v10, v7, s11, v12, v9, zero, v8, v4, v6, v83, v15, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: v83 is X
// [Asm] defs: [v84]
// [Asm] live_set: [v11, v5, v10, v7, s11, v9, zero, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: [v12]
// [Asm] defined: v84 is X
// [Asm] defs: [v85]
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: [v11]
// [Asm] defined: v85 is X
// [Asm] defs: [v86]
// [Asm] live_set: [v5, v10, v7, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: [v15]
// [Asm] defined: v86 is X
// [Asm] defs: [v87]
// [Asm] live_set: [v87, v5, v10, v7, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: v87 is X
// [Asm] defs: [v88]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: v88 is X
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defs: [v115]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v115, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v115 is X
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v115, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v5, v10, v7, s11, v31, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v13]
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v7]
// [Asm] defined: v33 is X
// [Asm] defs: [v118]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v118, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v118 is X
// [Asm] defs: [v93]
// [Asm] live_set: [v93, v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v93 is X
// [Asm] defs: [v94]
// [Asm] live_set: [v94, v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v94 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v89]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v89, v3]
// [Asm] move_origin: []
// [Asm] defined: v89 is X
// [Asm] defs: [v151]
// [Asm] live_set: [v3, v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v151, v4, v6, v15, v83, v89]
// [Asm] move_origin: []
// [Asm] defined: v151 is X
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v62]
// [Asm] live_set: [v62, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v62 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v5, v10, v26, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: [v25]
// [Asm] defined: v26 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v5, v10, v7, v32, s11, v44, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v10, a0, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, v10, a0, v7, a1, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v10, a0, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v29, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v5, v10, v13, v7, v9, zero, v29, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v10, v13, v7, s11, v9, zero, v29, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v13, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v186]
// [Asm] live_set: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, v186, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v186 is X
// [Asm] defs: [v187]
// [Asm] live_set: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, v187, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v187 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, v51, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: []
// [Asm] live_set: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v53]
// [Asm] live_set: [v40, v5, v10, v53, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v54, v3]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [v181]
// [Asm] live_set: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v181, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v181 is X
// [Asm] defs: [v182]
// [Asm] live_set: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, v182, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v182 is X
// [Asm] defs: [v55]
// [Asm] live_set: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v55, v3]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: [v179]
// [Asm] live_set: [v40, v5, v10, v179, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v55, v3]
// [Asm] move_origin: []
// [Asm] defined: v179 is X
// [Asm] defs: [v180]
// [Asm] live_set: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v180, v15, v55, v3]
// [Asm] move_origin: []
// [Asm] defined: v180 is X
// [Asm] defs: []
// [Asm] live_set: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v57]
// [Asm] live_set: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v57, v3]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v40, v5, v58, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v58 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v40, v5, v58, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v59, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: [v174]
// [Asm] live_set: [v40, v174, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v59, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v174 is X
// [Asm] defs: [v175]
// [Asm] live_set: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, v175, zero, v8, v38, v4, v59, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v175 is X
// [Asm] defs: []
// [Asm] live_set: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v61]
// [Asm] live_set: [v40, v5, v10, v7, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v61, v3]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v40, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: [v61]
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v40, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: [v38]
// [Asm] defs: []
// [Asm] live_set: [v40, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: [v39]
// [Asm] defs: []
// [Asm] live_set: [v40, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: [v40]
// [Asm] defs: []
// [Asm] live_set: [v40, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v63]
// [Asm] live_set: [v63, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: [v62]
// [Asm] defined: v63 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v23, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defs: [v118]
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v118, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v118 is X
// [Asm] defs: []
// [Asm] live_set: [v87, v5, v10, v7, v88, s11, v86, v9, v118, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v18]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of compute40.432_18"];
// [Asm]   r0 [label="v18 ← a0", color=green];
// [Asm]   r9 [label="s11", color=blue];
// [Asm]   r26 [label="v72 ← a2", color=green];
// [Asm]   r118 [label="v186 ← a0", color=green];
// [Asm]   r44 [label="v111 ← a0", color=green];
// [Asm]   r56 [label="v64 ← a0", color=green];
// [Asm]   r10 [label="v15 ← s6", color=green];
// [Asm]   r111 [label="v151 ← a1", color=green];
// [Asm]   r54 [label="a0", color=blue];
// [Asm]   r24 [label="v70 ← a0", color=green];
// [Asm]   r126 [label="v179 ← a5", color=green];
// [Asm]   r119 [label="v187 ← a0", color=green];
// [Asm]   r88 [label="v131 ← a0", color=green];
// [Asm]   r80 [label="v104 ← a0", color=green];
// [Asm]   r39 [label="v155 ← a1", color=green];
// [Asm]   r65 [label="a3", color=blue];
// [Asm]   r79 [label="v143 ← a0", color=green];
// [Asm]   r128 [label="v57 ← a0", color=green];
// [Asm]   r113 [label="v26 ← a0", color=green];
// [Asm]   r67 [label="a5", color=blue];
// [Asm]   r77 [label="v102 ← a1", color=green];
// [Asm]   r11 [label="v9 ← s7", color=green];
// [Asm]   r58 [label="v19 ← a0", color=green];
// [Asm]   r105 [label="v96 ← a0", color=green];
// [Asm]   r14 [label="v41 ← a0", color=green];
// [Asm]   r78 [label="v142 ← a0", color=green];
// [Asm]   r16 [label="v37 ← a2", color=green];
// [Asm]   r21 [label="v38 ← a4", color=green];
// [Asm]   r60 [label="v21 ← a3", color=green];
// [Asm]   r93 [label="v46 ← a0", color=green];
// [Asm]   r73 [label="t3", color=blue];
// [Asm]   r38 [label="v11 ← a0", color=green];
// [Asm]   r122 [label="v54 ← a0", color=green];
// [Asm]   r87 [label="v108 ← a0", color=green];
// [Asm]   r95 [label="v49 ← a0", color=green];
// [Asm]   r7 [label="v4 ← s4", color=green];
// [Asm]   r64 [label="a2", color=blue];
// [Asm]   r66 [label="a4", color=blue];
// [Asm]   r115 [label="v27 ← a0", color=green];
// [Asm]   r130 [label="v59 ← a5", color=green];
// [Asm]   r70 [label="t0", color=blue];
// [Asm]   r48 [label="v85 ← s10", color=green];
// [Asm]   r37 [label="v79 ← a0", color=green];
// [Asm]   r102 [label="v123 ← a5", color=green];
// [Asm]   r123 [label="v181 ← a0", color=green];
// [Asm]   r125 [label="v55 ← a0", color=green];
// [Asm]   r71 [label="t1", color=blue];
// [Asm]   r22 [label="v192 ← a5", color=green];
// [Asm]   r84 [label="v106 ← a1", color=green];
// [Asm]   r92 [label="v25 ← a0", color=green];
// [Asm]   r45 [label="v87 ← s5", color=green];
// [Asm]   r107 [label="v93 ← a0", color=green];
// [Asm]   r63 [label="a1", color=blue];
// [Asm]   r2 [label="v5 ← s0", color=green];
// [Asm]   r18 [label="v31 ← a3", color=green];
// [Asm]   r19 [label="v33 ← a6", color=green];
// [Asm]   r121 [label="v53 ← a0", color=green];
// [Asm]   r90 [label="v109 ← a0", color=green];
// [Asm]   r97 [label="v201 ← a1", color=green];
// [Asm]   r81 [label="v138 ← a1", color=green];
// [Asm]   r94 [label="v48 ← a0", color=green];
// [Asm]   r101 [label="v119 ← a1", color=green];
// [Asm]   r46 [label="v88 ← s0", color=green];
// [Asm]   r120 [label="v51 ← a0", color=green];
// [Asm]   r33 [label="v76 ← a2", color=green];
// [Asm]   r76 [label="v101 ← a0", color=green];
// [Asm]   r59 [label="v20 ← a2", color=green];
// [Asm]   r86 [label="v136 ← a0", color=green];
// [Asm]   r53 [label="v0 ← a1", color=green];
// [Asm]   r5 [label="v8 ← s2", color=green];
// [Asm]   r43 [label="v91 ← a0", color=green];
// [Asm]   r31 [label="v75 ← a2", color=green];
// [Asm]   r99 [label="v125 ← a1", color=green];
// [Asm]   r133 [label="v61 ← a0", color=green];
// [Asm]   r17 [label="v32 ← a1", color=green];
// [Asm]   r52 [label="v115 ← a0", color=green];
// [Asm]   r129 [label="v58 ← a0", color=green];
// [Asm]   r20 [label="v39 ← a3", color=green];
// [Asm]   r61 [label="v22 ← a4", color=green];
// [Asm]   r23 [label="v42 ← a0", color=green];
// [Asm]   r3 [label="v10 ← s1", color=green];
// [Asm]   r108 [label="v94 ← a0", color=green];
// [Asm]   r132 [label="v175 ← a0", color=green];
// [Asm]   r82 [label="v139 ← a1", color=green];
// [Asm]   r27 [label="v165 ← a3", color=green];
// [Asm]   r75 [label="v100 ← a0", color=green];
// [Asm]   r62 [label="v98 ← a0", color=green];
// [Asm]   r40 [label="v12 ← a1", color=green];
// [Asm]   r110 [label="v89 ← a0", color=green];
// [Asm]   r34 [label="v158 ← a3", color=green];
// [Asm]   r83 [label="v105 ← a1", color=green];
// [Asm]   r103 [label="v124 ← a5", color=green];
// [Asm]   r134 [label="v63 ← a0", color=green];
// [Asm]   r51 [label="v112 ← a0", color=green];
// [Asm]   r96 [label="v16 ← a0", color=green];
// [Asm]   r135 [label="v23 ← a1", color=green];
// [Asm]   r55 [label="v2 ← a0", color=green];
// [Asm]   r72 [label="t2", color=blue];
// [Asm]   r104 [label="v121 ← a0", color=green];
// [Asm]   r116 [label="v29 ← a0", color=green];
// [Asm]   r100 [label="v126 ← a1", color=green];
// [Asm]   r85 [label="v135 ← a0", color=green];
// [Asm]   r47 [label="v86 ← s6", color=green];
// [Asm]   r6 [label="v7 ← s3", color=green];
// [Asm]   r13 [label="v69 ← a0", color=green];
// [Asm]   r42 [label="v92 ← a0", color=green];
// [Asm]   r117 [label="v13 ← a1", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="v163 ← a4", color=green];
// [Asm]   r35 [label="v77 ← a2", color=green];
// [Asm]   r131 [label="v174 ← a0", color=green];
// [Asm]   r114 [label="v44 ← a0", color=green];
// [Asm]   r8 [label="v6 ← s5", color=green];
// [Asm]   r112 [label="v62 ← a0", color=green];
// [Asm]   r36 [label="v78 ← a1", color=green];
// [Asm]   r32 [label="v160 ← a3", color=green];
// [Asm]   r15 [label="v40 ← a1", color=green];
// [Asm]   r49 [label="v84 ← s9", color=green];
// [Asm]   r57 [label="v65 ← a1", color=green];
// [Asm]   r74 [label="t4", color=blue];
// [Asm]   r68 [label="a6", color=blue];
// [Asm]   r98 [label="v45 ← a0", color=green];
// [Asm]   r124 [label="v182 ← a0", color=green];
// [Asm]   r91 [label="v130 ← a1", color=green];
// [Asm]   r12 [label="v3 ← s8", color=green];
// [Asm]   r106 [label="v118 ← a0", color=green];
// [Asm]   r109 [label="v34 ← a0", color=green];
// [Asm]   r127 [label="v180 ← a5", color=green];
// [Asm]   r1 [label="v67 ← a0", color=green];
// [Asm]   r41 [label="v14 ← a0", color=green];
// [Asm]   r28 [label="v73 ← a3", color=green];
// [Asm]   r69 [label="a7", color=blue];
// [Asm]   r50 [label="v83 ← s8", color=green];
// [Asm]   r89 [label="v132 ← a0", color=green];
// [Asm]   r30 [label="v74 ← a3", color=green];
// [Asm]   r25 [label="v71 ← a1", color=green];
// [Asm]   r15 -- r120;
// [Asm]   r12 -- r91;
// [Asm]   r6 -- r48;
// [Asm]   r16 -- r20;
// [Asm]   r11 -- r78;
// [Asm]   r11 -- r35;
// [Asm]   r38 -- r50;
// [Asm]   r46 -- r110;
// [Asm]   r6 -- r68;
// [Asm]   r5 -- r135;
// [Asm]   r4 -- r101;
// [Asm]   r4 -- r44;
// [Asm]   r8 -- r101;
// [Asm]   r19 -- r119;
// [Asm]   r3 -- r107;
// [Asm]   r45 -- r79;
// [Asm]   r10 -- r103;
// [Asm]   r4 -- r48;
// [Asm]   r3 -- r86;
// [Asm]   r19 -- r125;
// [Asm]   r45 -- r85;
// [Asm]   r2 -- r51;
// [Asm]   r11 -- r55;
// [Asm]   r11 -- r100;
// [Asm]   r12 -- r120;
// [Asm]   r3 -- r70;
// [Asm]   r3 -- r31;
// [Asm]   r4 -- r113;
// [Asm]   r2 -- r41;
// [Asm]   r2 -- r123;
// [Asm]   r46 -- r79;
// [Asm]   r9 -- r73;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r48;
// [Asm]   r9 -- r62;
// [Asm]   r26 -- r27;
// [Asm]   r11 -- r80;
// [Asm]   r5 -- r107;
// [Asm]   r18 -- r132;
// [Asm]   r5 -- r121;
// [Asm]   r10 -- r18;
// [Asm]   r12 -- r54;
// [Asm]   r8 -- r97;
// [Asm]   r50 -- r70;
// [Asm]   r4 -- r29;
// [Asm]   r1 -- r11;
// [Asm]   r12 -- r43;
// [Asm]   r5 -- r51;
// [Asm]   r50 -- r88;
// [Asm]   r10 -- r135;
// [Asm]   r6 -- r56;
// [Asm]   r9 -- r39;
// [Asm]   r12 -- r62;
// [Asm]   r2 -- r69;
// [Asm]   r8 -- r125;
// [Asm]   r6 -- r114;
// [Asm]   r47 -- r106;
// [Asm]   r5 -- r120;
// [Asm]   r11 -- r62;
// [Asm]   r2 -- r73;
// [Asm]   r19 -- r93;
// [Asm]   r10 -- r94;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r103;
// [Asm]   r20 -- r118;
// [Asm]   r12 -- r34;
// [Asm]   r7 -- r103;
// [Asm]   r6 -- r46;
// [Asm]   r9 -- r76;
// [Asm]   r9 -- r30;
// [Asm]   r3 -- r83;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r3 -- r113;
// [Asm]   r24 -- r29;
// [Asm]   r9 -- r84;
// [Asm]   r10 -- r127;
// [Asm]   r16 -- r132;
// [Asm]   r3 -- r65;
// [Asm]   r2 -- r14;
// [Asm]   r9 -- r63;
// [Asm]   r58 -- r99;
// [Asm]   r48 -- r49;
// [Asm]   r8 -- r126;
// [Asm]   r9 -- r24;
// [Asm]   r6 -- r113;
// [Asm]   r8 -- r18;
// [Asm]   r8 -- r35;
// [Asm]   r54 -- r64;
// [Asm]   r9 -- r36;
// [Asm]   r21 -- r133;
// [Asm]   r2 -- r60;
// [Asm]   r4 -- r63;
// [Asm]   r10 -- r128;
// [Asm]   r12 -- r16;
// [Asm]   r6 -- r38;
// [Asm]   r8 -- r100;
// [Asm]   r9 -- r46;
// [Asm]   r20 -- r125;
// [Asm]   r11 -- r87;
// [Asm]   r15 -- r19;
// [Asm]   r49 -- r80;
// [Asm]   r45 -- r64;
// [Asm]   r7 -- r46;
// [Asm]   r10 -- r129;
// [Asm]   r9 -- r21;
// [Asm]   r5 -- r132;
// [Asm]   r8 -- r135;
// [Asm]   r5 -- r12;
// [Asm]   r11 -- r44;
// [Asm]   r46 -- r85;
// [Asm]   r6 -- r95;
// [Asm]   r10 -- r79;
// [Asm]   r2 -- r45;
// [Asm]   r6 -- r135;
// [Asm]   r11 -- r68;
// [Asm]   r12 -- r81;
// [Asm]   r4 -- r130;
// [Asm]   r8 -- r68;
// [Asm]   r7 -- r77;
// [Asm]   r48 -- r66;
// [Asm]   r4 -- r54;
// [Asm]   r3 -- r32;
// [Asm]   r6 -- r54;
// [Asm]   r46 -- r106;
// [Asm]   r9 -- r31;
// [Asm]   r6 -- r129;
// [Asm]   r4 -- r78;
// [Asm]   r3 -- r89;
// [Asm]   r11 -- r24;
// [Asm]   r76 -- r77;
// [Asm]   r48 -- r77;
// [Asm]   r61 -- r104;
// [Asm]   r4 -- r69;
// [Asm]   r10 -- r113;
// [Asm]   r47 -- r79;
// [Asm]   r19 -- r133;
// [Asm]   r10 -- r56;
// [Asm]   r24 -- r31;
// [Asm]   r47 -- r85;
// [Asm]   r5 -- r104;
// [Asm]   r50 -- r51;
// [Asm]   r4 -- r86;
// [Asm]   r6 -- r96;
// [Asm]   r7 -- r93;
// [Asm]   r58 -- r59;
// [Asm]   r7 -- r63;
// [Asm]   r6 -- r18;
// [Asm]   r48 -- r106;
// [Asm]   r9 -- r59;
// [Asm]   r9 -- r87;
// [Asm]   r3 -- r123;
// [Asm]   r7 -- r121;
// [Asm]   r3 -- r27;
// [Asm]   r5 -- r80;
// [Asm]   r2 -- r97;
// [Asm]   r47 -- r90;
// [Asm]   r20 -- r122;
// [Asm]   r12 -- r86;
// [Asm]   r2 -- r129;
// [Asm]   r12 -- r90;
// [Asm]   r10 -- r25;
// [Asm]   r47 -- r77;
// [Asm]   r6 -- r32;
// [Asm]   r17 -- r20;
// [Asm]   r10 -- r17;
// [Asm]   r11 -- r117;
// [Asm]   r12 -- r135;
// [Asm]   r50 -- r83;
// [Asm]   r9 -- r98;
// [Asm]   r49 -- r66;
// [Asm]   r58 -- r102;
// [Asm]   r2 -- r122;
// [Asm]   r18 -- r130;
// [Asm]   r45 -- r77;
// [Asm]   r46 -- r89;
// [Asm]   r12 -- r38;
// [Asm]   r7 -- r111;
// [Asm]   r45 -- r83;
// [Asm]   r9 -- r103;
// [Asm]   r9 -- r29;
// [Asm]   r15 -- r22;
// [Asm]   r46 -- r47;
// [Asm]   r3 -- r134;
// [Asm]   r7 -- r99;
// [Asm]   r5 -- r87;
// [Asm]   r47 -- r105;
// [Asm]   r12 -- r107;
// [Asm]   r9 -- r67;
// [Asm]   r8 -- r110;
// [Asm]   r7 -- r115;
// [Asm]   r46 -- r90;
// [Asm]   r9 -- r112;
// [Asm]   r45 -- r71;
// [Asm]   r2 -- r57;
// [Asm]   r48 -- r78;
// [Asm]   r4 -- r11;
// [Asm]   r9 -- r38;
// [Asm]   r6 -- r112;
// [Asm]   r3 -- r84;
// [Asm]   r11 -- r116;
// [Asm]   r47 -- r84;
// [Asm]   r8 -- r67;
// [Asm]   r17 -- r126;
// [Asm]   r7 -- r114;
// [Asm]   r12 -- r49;
// [Asm]   r10 -- r23;
// [Asm]   r24 -- r35;
// [Asm]   r11 -- r101;
// [Asm]   r60 -- r61;
// [Asm]   r16 -- r124;
// [Asm]   r12 -- r39;
// [Asm]   r6 -- r82;
// [Asm]   r9 -- r113;
// [Asm]   r48 -- r74;
// [Asm]   r9 -- r65;
// [Asm]   r9 -- r16;
// [Asm]   r2 -- r71;
// [Asm]   r9 -- r19;
// [Asm]   r7 -- r68;
// [Asm]   r5 -- r43;
// [Asm]   r7 -- r69;
// [Asm]   r3 -- r116;
// [Asm]   r7 -- r106;
// [Asm]   r8 -- r31;
// [Asm]   r7 -- r51;
// [Asm]   r6 -- r81;
// [Asm]   r61 -- r102;
// [Asm]   r12 -- r29;
// [Asm]   r3 -- r91;
// [Asm]   r5 -- r82;
// [Asm]   r12 -- r32;
// [Asm]   r12 -- r84;
// [Asm]   r5 -- r21;
// [Asm]   r50 -- r78;
// [Asm]   r8 -- r51;
// [Asm]   r10 -- r61;
// [Asm]   r7 -- r97;
// [Asm]   r21 -- r126;
// [Asm]   r4 -- r97;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r85;
// [Asm]   r6 -- r100;
// [Asm]   r9 -- r125;
// [Asm]   r7 -- r84;
// [Asm]   r46 -- r65;
// [Asm]   r12 -- r69;
// [Asm]   r15 -- r133;
// [Asm]   r10 -- r89;
// [Asm]   r5 -- r29;
// [Asm]   r5 -- r129;
// [Asm]   r9 -- r68;
// [Asm]   r45 -- r110;
// [Asm]   r50 -- r110;
// [Asm]   r6 -- r89;
// [Asm]   r3 -- r5;
// [Asm]   r7 -- r132;
// [Asm]   r4 -- r31;
// [Asm]   r12 -- r103;
// [Asm]   r45 -- r62;
// [Asm]   r20 -- r23;
// [Asm]   r5 -- r116;
// [Asm]   r49 -- r76;
// [Asm]   r5 -- r117;
// [Asm]   r10 -- r38;
// [Asm]   r10 -- r12;
// [Asm]   r2 -- r67;
// [Asm]   r10 -- r31;
// [Asm]   r84 -- r86;
// [Asm]   r9 -- r100;
// [Asm]   r46 -- r74;
// [Asm]   r4 -- r56;
// [Asm]   r9 -- r20;
// [Asm]   r5 -- r101;
// [Asm]   r4 -- r25;
// [Asm]   r9 -- r74;
// [Asm]   r8 -- r70;
// [Asm]   r8 -- r108;
// [Asm]   r8 -- r111;
// [Asm]   r12 -- r21;
// [Asm]   r7 -- r42;
// [Asm]   r11 -- r36;
// [Asm]   r3 -- r127;
// [Asm]   r3 -- r46;
// [Asm]   r4 -- r14;
// [Asm]   r7 -- r67;
// [Asm]   r7 -- r65;
// [Asm]   r12 -- r119;
// [Asm]   r49 -- r67;
// [Asm]   r46 -- r67;
// [Asm]   r4 -- r23;
// [Asm]   r8 -- r27;
// [Asm]   r9 -- r91;
// [Asm]   r8 -- r9;
// [Asm]   r80 -- r82;
// [Asm]   r11 -- r126;
// [Asm]   r46 -- r51;
// [Asm]   r2 -- r88;
// [Asm]   r2 -- r80;
// [Asm]   r10 -- r29;
// [Asm]   r50 -- r62;
// [Asm]   r6 -- r22;
// [Asm]   r3 -- r135;
// [Asm]   r6 -- r120;
// [Asm]   r5 -- r113;
// [Asm]   r16 -- r127;
// [Asm]   r3 -- r114;
// [Asm]   r2 -- r44;
// [Asm]   r3 -- r57;
// [Asm]   r45 -- r106;
// [Asm]   r4 -- r80;
// [Asm]   r48 -- r91;
// [Asm]   r12 -- r20;
// [Asm]   r4 -- r15;
// [Asm]   r12 -- r41;
// [Asm]   r18 -- r129;
// [Asm]   r10 -- r101;
// [Asm]   r9 -- r70;
// [Asm]   r12 -- r33;
// [Asm]   r10 -- r43;
// [Asm]   r8 -- r15;
// [Asm]   r11 -- r59;
// [Asm]   r47 -- r111;
// [Asm]   r7 -- r85;
// [Asm]   r6 -- r87;
// [Asm]   r6 -- r57;
// [Asm]   r3 -- r131;
// [Asm]   r10 -- r46;
// [Asm]   r11 -- r34;
// [Asm]   r12 -- r98;
// [Asm]   r5 -- r98;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r8 -- r115;
// [Asm]   r54 -- r63;
// [Asm]   r15 -- r20;
// [Asm]   r46 -- r72;
// [Asm]   r7 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   r3 -- r119;
// [Asm]   r48 -- r88;
// [Asm]   r2 -- r39;
// [Asm]   r4 -- r87;
// [Asm]   r2 -- r94;
// [Asm]   r49 -- r64;
// [Asm]   r3 -- r115;
// [Asm]   r8 -- r84;
// [Asm]   r45 -- r74;
// [Asm]   r50 -- r69;
// [Asm]   r14 -- r16;
// [Asm]   r10 -- r26;
// [Asm]   r3 -- r100;
// [Asm]   r12 -- r128;
// [Asm]   r45 -- r91;
// [Asm]   r2 -- r10;
// [Asm]   r11 -- r32;
// [Asm]   r3 -- r24;
// [Asm]   r5 -- r73;
// [Asm]   r4 -- r40;
// [Asm]   r40 -- r50;
// [Asm]   r10 -- r58;
// [Asm]   r17 -- r131;
// [Asm]   r3 -- r51;
// [Asm]   r2 -- r74;
// [Asm]   r7 -- r34;
// [Asm]   r8 -- r102;
// [Asm]   r7 -- r55;
// [Asm]   r9 -- r117;
// [Asm]   r45 -- r70;
// [Asm]   r11 -- r82;
// [Asm]   r8 -- r37;
// [Asm]   r5 -- r53;
// [Asm]   r45 -- r66;
// [Asm]   r3 -- r80;
// [Asm]   r2 -- r47;
// [Asm]   r12 -- r74;
// [Asm]   r24 -- r27;
// [Asm]   r9 -- r131;
// [Asm]   r2 -- r128;
// [Asm]   r28 -- r29;
// [Asm]   r11 -- r63;
// [Asm]   r7 -- r98;
// [Asm]   r3 -- r102;
// [Asm]   r7 -- r61;
// [Asm]   r8 -- r22;
// [Asm]   r4 -- r50;
// [Asm]   r12 -- r99;
// [Asm]   r8 -- r96;
// [Asm]   r2 -- r24;
// [Asm]   r11 -- r30;
// [Asm]   r17 -- r133;
// [Asm]   r7 -- r64;
// [Asm]   r2 -- r87;
// [Asm]   r17 -- r18;
// [Asm]   r17 -- r128;
// [Asm]   r4 -- r24;
// [Asm]   r2 -- r126;
// [Asm]   r14 -- r17;
// [Asm]   r11 -- r71;
// [Asm]   r5 -- r103;
// [Asm]   r12 -- r80;
// [Asm]   r10 -- r106;
// [Asm]   r6 -- r44;
// [Asm]   r5 -- r77;
// [Asm]   r16 -- r121;
// [Asm]   r12 -- r15;
// [Asm]   r80 -- r84;
// [Asm]   r4 -- r59;
// [Asm]   r7 -- r26;
// [Asm]   r6 -- r79;
// [Asm]   r6 -- r51;
// [Asm]   r19 -- r122;
// [Asm]   r5 -- r52;
// [Asm]   r5 -- r84;
// [Asm]   r9 -- r42;
// [Asm]   r45 -- r46;
// [Asm]   r3 -- r122;
// [Asm]   r8 -- r38;
// [Asm]   r3 -- r28;
// [Asm]   r20 -- r131;
// [Asm]   r3 -- r106;
// [Asm]   r8 -- r65;
// [Asm]   r10 -- r34;
// [Asm]   r4 -- r60;
// [Asm]   r9 -- r106;
// [Asm]   r2 -- r121;
// [Asm]   r6 -- r34;
// [Asm]   r3 -- r111;
// [Asm]   r5 -- r64;
// [Asm]   r5 -- r127;
// [Asm]   r10 -- r50;
// [Asm]   r46 -- r54;
// [Asm]   r4 -- r73;
// [Asm]   r6 -- r131;
// [Asm]   r10 -- r120;
// [Asm]   r19 -- r23;
// [Asm]   r16 -- r131;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r56;
// [Asm]   r8 -- r85;
// [Asm]   r3 -- r64;
// [Asm]   r10 -- r52;
// [Asm]   r8 -- r116;
// [Asm]   r6 -- r42;
// [Asm]   r10 -- r39;
// [Asm]   r47 -- r49;
// [Asm]   r45 -- r51;
// [Asm]   r58 -- r100;
// [Asm]   r3 -- r81;
// [Asm]   r12 -- r100;
// [Asm]   r19 -- r109;
// [Asm]   r2 -- r130;
// [Asm]   r3 -- r75;
// [Asm]   r61 -- r135;
// [Asm]   r11 -- r69;
// [Asm]   r47 -- r78;
// [Asm]   r7 -- r31;
// [Asm]   r4 -- r96;
// [Asm]   r46 -- r84;
// [Asm]   r6 -- r132;
// [Asm]   r4 -- r77;
// [Asm]   r4 -- r17;
// [Asm]   r54 -- r73;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r24;
// [Asm]   r3 -- r63;
// [Asm]   r8 -- r46;
// [Asm]   r24 -- r33;
// [Asm]   r59 -- r100;
// [Asm]   r12 -- r26;
// [Asm]   r10 -- r14;
// [Asm]   r17 -- r127;
// [Asm]   r17 -- r109;
// [Asm]   r2 -- r31;
// [Asm]   r58 -- r101;
// [Asm]   r60 -- r103;
// [Asm]   r3 -- r16;
// [Asm]   r4 -- r51;
// [Asm]   r8 -- r104;
// [Asm]   r19 -- r127;
// [Asm]   r4 -- r133;
// [Asm]   r2 -- r49;
// [Asm]   r16 -- r119;
// [Asm]   r12 -- r65;
// [Asm]   r3 -- r62;
// [Asm]   r4 -- r64;
// [Asm]   r3 -- r11;
// [Asm]   r45 -- r89;
// [Asm]   r9 -- r26;
// [Asm]   r49 -- r105;
// [Asm]   r17 -- r19;
// [Asm]   r10 -- r93;
// [Asm]   r6 -- r86;
// [Asm]   r10 -- r67;
// [Asm]   r8 -- r114;
// [Asm]   r3 -- r85;
// [Asm]   r3 -- r8;
// [Asm]   r9 -- r56;
// [Asm]   r8 -- r34;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r28;
// [Asm]   r2 -- r112;
// [Asm]   r50 -- r64;
// [Asm]   r5 -- r6;
// [Asm]   r11 -- r97;
// [Asm]   r4 -- r122;
// [Asm]   r10 -- r33;
// [Asm]   r5 -- r106;
// [Asm]   r6 -- r104;
// [Asm]   r5 -- r128;
// [Asm]   r8 -- r23;
// [Asm]   r12 -- r58;
// [Asm]   r4 -- r115;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r121;
// [Asm]   r8 -- r103;
// [Asm]   r3 -- r17;
// [Asm]   r11 -- r15;
// [Asm]   r6 -- r50;
// [Asm]   r44 -- r47;
// [Asm]   r2 -- r96;
// [Asm]   r8 -- r32;
// [Asm]   r5 -- r111;
// [Asm]   r10 -- r130;
// [Asm]   r11 -- r107;
// [Asm]   r90 -- r91;
// [Asm]   r3 -- r94;
// [Asm]   r4 -- r131;
// [Asm]   r60 -- r104;
// [Asm]   r12 -- r112;
// [Asm]   r9 -- r129;
// [Asm]   r4 -- r121;
// [Asm]   r8 -- r122;
// [Asm]   r2 -- r134;
// [Asm]   r4 -- r62;
// [Asm]   r50 -- r76;
// [Asm]   r50 -- r75;
// [Asm]   r6 -- r106;
// [Asm]   r19 -- r132;
// [Asm]   r11 -- r135;
// [Asm]   r9 -- r128;
// [Asm]   r5 -- r125;
// [Asm]   r12 -- r118;
// [Asm]   r9 -- r40;
// [Asm]   r4 -- r88;
// [Asm]   r6 -- r98;
// [Asm]   r49 -- r81;
// [Asm]   r9 -- r93;
// [Asm]   r8 -- r131;
// [Asm]   r19 -- r114;
// [Asm]   r7 -- r20;
// [Asm]   r8 -- r76;
// [Asm]   r45 -- r84;
// [Asm]   r6 -- r53;
// [Asm]   r4 -- r134;
// [Asm]   r50 -- r63;
// [Asm]   r54 -- r71;
// [Asm]   r12 -- r89;
// [Asm]   r11 -- r46;
// [Asm]   r50 -- r65;
// [Asm]   r11 -- r85;
// [Asm]   r11 -- r94;
// [Asm]   r5 -- r38;
// [Asm]   r11 -- r37;
// [Asm]   r58 -- r60;
// [Asm]   r3 -- r22;
// [Asm]   r19 -- r126;
// [Asm]   r6 -- r108;
// [Asm]   r7 -- r22;
// [Asm]   r4 -- r55;
// [Asm]   r12 -- r63;
// [Asm]   r12 -- r55;
// [Asm]   r45 -- r65;
// [Asm]   r4 -- r99;
// [Asm]   r10 -- r122;
// [Asm]   r12 -- r22;
// [Asm]   r5 -- r68;
// [Asm]   r49 -- r72;
// [Asm]   r3 -- r29;
// [Asm]   r45 -- r88;
// [Asm]   r3 -- r66;
// [Asm]   r19 -- r120;
// [Asm]   r4 -- r36;
// [Asm]   r6 -- r39;
// [Asm]   r2 -- r75;
// [Asm]   r5 -- r25;
// [Asm]   r10 -- r36;
// [Asm]   r2 -- r93;
// [Asm]   r6 -- r74;
// [Asm]   r12 -- r87;
// [Asm]   r4 -- r10;
// [Asm]   r11 -- r129;
// [Asm]   r9 -- r109;
// [Asm]   r20 -- r129;
// [Asm]   r47 -- r69;
// [Asm]   r2 -- r27;
// [Asm]   r11 -- r90;
// [Asm]   r6 -- r52;
// [Asm]   r10 -- r86;
// [Asm]   r18 -- r120;
// [Asm]   r4 -- r108;
// [Asm]   r10 -- r123;
// [Asm]   r6 -- r119;
// [Asm]   r10 -- r60;
// [Asm]   r5 -- r95;
// [Asm]   r4 -- r58;
// [Asm]   r10 -- r88;
// [Asm]   r10 -- r13;
// [Asm]   r24 -- r32;
// [Asm]   r54 -- r74;
// [Asm]   r12 -- r129;
// [Asm]   r5 -- r42;
// [Asm]   r2 -- r16;
// [Asm]   r47 -- r52;
// [Asm]   r50 -- r87;
// [Asm]   r5 -- r92;
// [Asm]   r11 -- r99;
// [Asm]   r12 -- r130;
// [Asm]   r8 -- r98;
// [Asm]   r7 -- r108;
// [Asm]   r12 -- r114;
// [Asm]   r2 -- r59;
// [Asm]   r2 -- r54;
// [Asm]   r2 -- r92;
// [Asm]   r14 -- r19;
// [Asm]   r12 -- r110;
// [Asm]   r4 -- r33;
// [Asm]   r3 -- r30;
// [Asm]   r5 -- r83;
// [Asm]   r49 -- r86;
// [Asm]   r9 -- r28;
// [Asm]   r8 -- r77;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r10;
// [Asm]   r21 -- r119;
// [Asm]   r15 -- r126;
// [Asm]   r2 -- r115;
// [Asm]   r12 -- r40;
// [Asm]   r77 -- r79;
// [Asm]   r18 -- r93;
// [Asm]   r11 -- r54;
// [Asm]   r3 -- r10;
// [Asm]   r7 -- r95;
// [Asm]   r5 -- r91;
// [Asm]   r4 -- r12;
// [Asm]   r11 -- r113;
// [Asm]   r10 -- r75;
// [Asm]   r3 -- r120;
// [Asm]   r7 -- r102;
// [Asm]   r16 -- r23;
// [Asm]   r7 -- r54;
// [Asm]   r20 -- r120;
// [Asm]   r47 -- r68;
// [Asm]   r6 -- r92;
// [Asm]   r5 -- r109;
// [Asm]   r5 -- r89;
// [Asm]   r8 -- r117;
// [Asm]   r10 -- r95;
// [Asm]   r6 -- r11;
// [Asm]   r6 -- r110;
// [Asm]   r4 -- r5;
// [Asm]   r8 -- r66;
// [Asm]   r4 -- r95;
// [Asm]   r9 -- r57;
// [Asm]   r7 -- r127;
// [Asm]   r8 -- r56;
// [Asm]   r50 -- r81;
// [Asm]   r11 -- r49;
// [Asm]   r8 -- r19;
// [Asm]   r10 -- r108;
// [Asm]   r8 -- r43;
// [Asm]   r3 -- r47;
// [Asm]   r80 -- r83;
// [Asm]   r4 -- r89;
// [Asm]   r7 -- r81;
// [Asm]   r9 -- r132;
// [Asm]   r9 -- r51;
// [Asm]   r47 -- r65;
// [Asm]   r9 -- r121;
// [Asm]   r60 -- r101;
// [Asm]   r47 -- r89;
// [Asm]   r11 -- r98;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r24;
// [Asm]   r10 -- r73;
// [Asm]   r9 -- r33;
// [Asm]   r9 -- r69;
// [Asm]   r48 -- r105;
// [Asm]   r26 -- r30;
// [Asm]   r11 -- r50;
// [Asm]   r12 -- r123;
// [Asm]   r7 -- r47;
// [Asm]   r6 -- r67;
// [Asm]   r4 -- r127;
// [Asm]   r11 -- r89;
// [Asm]   r8 -- r88;
// [Asm]   r9 -- r37;
// [Asm]   r4 -- r47;
// [Asm]   r8 -- r73;
// [Asm]   r7 -- r39;
// [Asm]   r7 -- r43;
// [Asm]   r5 -- r115;
// [Asm]   r12 -- r37;
// [Asm]   r9 -- r114;
// [Asm]   r8 -- r58;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r27;
// [Asm]   r31 -- r32;
// [Asm]   r3 -- r54;
// [Asm]   r3 -- r93;
// [Asm]   r5 -- r30;
// [Asm]   r10 -- r96;
// [Asm]   r10 -- r66;
// [Asm]   r4 -- r19;
// [Asm]   r4 -- r53;
// [Asm]   r4 -- r75;
// [Asm]   r2 -- r32;
// [Asm]   r12 -- r79;
// [Asm]   r12 -- r77;
// [Asm]   r9 -- r86;
// [Asm]   r5 -- r72;
// [Asm]   r11 -- r14;
// [Asm]   r10 -- r111;
// [Asm]   r7 -- r125;
// [Asm]   r5 -- r17;
// [Asm]   r2 -- r43;
// [Asm]   r17 -- r94;
// [Asm]   r5 -- r18;
// [Asm]   r4 -- r103;
// [Asm]   r50 -- r72;
// [Asm]   r6 -- r115;
// [Asm]   r49 -- r84;
// [Asm]   r18 -- r21;
// [Asm]   r84 -- r85;
// [Asm]   r9 -- r130;
// [Asm]   r9 -- r49;
// [Asm]   r7 -- r27;
// [Asm]   r19 -- r118;
// [Asm]   r6 -- r85;
// [Asm]   r7 -- r91;
// [Asm]   r8 -- r105;
// [Asm]   r49 -- r111;
// [Asm]   r11 -- r102;
// [Asm]   r2 -- r34;
// [Asm]   r110 -- r111;
// [Asm]   r18 -- r95;
// [Asm]   r2 -- r6;
// [Asm]   r6 -- r80;
// [Asm]   r6 -- r91;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r45;
// [Asm]   r4 -- r67;
// [Asm]   r9 -- r23;
// [Asm]   r4 -- r65;
// [Asm]   r2 -- r12;
// [Asm]   r5 -- r67;
// [Asm]   r8 -- r48;
// [Asm]   r6 -- r83;
// [Asm]   r11 -- r93;
// [Asm]   r10 -- r42;
// [Asm]   r21 -- r132;
// [Asm]   r16 -- r125;
// [Asm]   r5 -- r66;
// [Asm]   r15 -- r129;
// [Asm]   r9 -- r135;
// [Asm]   r8 -- r86;
// [Asm]   r8 -- r30;
// [Asm]   r6 -- r133;
// [Asm]   r49 -- r85;
// [Asm]   r7 -- r129;
// [Asm]   r46 -- r69;
// [Asm]   r7 -- r29;
// [Asm]   r53 -- r54;
// [Asm]   r49 -- r79;
// [Asm]   r11 -- r104;
// [Asm]   r6 -- r125;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r101;
// [Asm]   r3 -- r38;
// [Asm]   r116 -- r117;
// [Asm]   r11 -- r64;
// [Asm]   r47 -- r70;
// [Asm]   r12 -- r88;
// [Asm]   r2 -- r90;
// [Asm]   r47 -- r48;
// [Asm]   r8 -- r128;
// [Asm]   r5 -- r124;
// [Asm]   r2 -- r52;
// [Asm]   r19 -- r123;
// [Asm]   r8 -- r113;
// [Asm]   r2 -- r135;
// [Asm]   r46 -- r75;
// [Asm]   r11 -- r22;
// [Asm]   r10 -- r48;
// [Asm]   r48 -- r86;
// [Asm]   r10 -- r70;
// [Asm]   r7 -- r48;
// [Asm]   r12 -- r82;
// [Asm]   r45 -- r63;
// [Asm]   r7 -- r49;
// [Asm]   r8 -- r20;
// [Asm]   r6 -- r20;
// [Asm]   r21 -- r23;
// [Asm]   r9 -- r52;
// [Asm]   r9 -- r85;
// [Asm]   r9 -- r97;
// [Asm]   r46 -- r71;
// [Asm]   r11 -- r110;
// [Asm]   r2 -- r102;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r12 -- r73;
// [Asm]   r12 -- r76;
// [Asm]   r4 -- r32;
// [Asm]   r3 -- r117;
// [Asm]   r5 -- r45;
// [Asm]   r8 -- r92;
// [Asm]   r10 -- r85;
// [Asm]   r2 -- r77;
// [Asm]   r5 -- r94;
// [Asm]   r18 -- r122;
// [Asm]   r12 -- r66;
// [Asm]   r5 -- r61;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r3 -- r73;
// [Asm]   r4 -- r82;
// [Asm]   r46 -- r73;
// [Asm]   r12 -- r122;
// [Asm]   r18 -- r114;
// [Asm]   r10 -- r119;
// [Asm]   r20 -- r133;
// [Asm]   r10 -- r65;
// [Asm]   r2 -- r35;
// [Asm]   r2 -- r9;
// [Asm]   r9 -- r13;
// [Asm]   r47 -- r71;
// [Asm]   r50 -- r105;
// [Asm]   r8 -- r50;
// [Asm]   r11 -- r123;
// [Asm]   r18 -- r23;
// [Asm]   r8 -- r57;
// [Asm]   r5 -- r41;
// [Asm]   r17 -- r21;
// [Asm]   r8 -- r89;
// [Asm]   r7 -- r21;
// [Asm]   r9 -- r77;
// [Asm]   r48 -- r64;
// [Asm]   r3 -- r60;
// [Asm]   r3 -- r108;
// [Asm]   r48 -- r84;
// [Asm]   r7 -- r53;
// [Asm]   r9 -- r124;
// [Asm]   r44 -- r45;
// [Asm]   r12 -- r109;
// [Asm]   r4 -- r27;
// [Asm]   r7 -- r135;
// [Asm]   r4 -- r42;
// [Asm]   r46 -- r111;
// [Asm]   r5 -- r134;
// [Asm]   r12 -- r19;
// [Asm]   r46 -- r48;
// [Asm]   r2 -- r76;
// [Asm]   r49 -- r63;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r3 -- r76;
// [Asm]   r7 -- r90;
// [Asm]   r60 -- r100;
// [Asm]   r2 -- r33;
// [Asm]   r3 -- r96;
// [Asm]   r8 -- r69;
// [Asm]   r12 -- r67;
// [Asm]   r5 -- r75;
// [Asm]   r12 -- r46;
// [Asm]   r8 -- r121;
// [Asm]   r10 -- r74;
// [Asm]   r10 -- r117;
// [Asm]   r47 -- r81;
// [Asm]   r17 -- r129;
// [Asm]   r19 -- r95;
// [Asm]   r6 -- r103;
// [Asm]   r47 -- r86;
// [Asm]   r3 -- r133;
// [Asm]   r6 -- r78;
// [Asm]   r8 -- r80;
// [Asm]   r2 -- r117;
// [Asm]   r10 -- r30;
// [Asm]   r12 -- r95;
// [Asm]   r6 -- r45;
// [Asm]   r5 -- r14;
// [Asm]   r46 -- r76;
// [Asm]   r12 -- r47;
// [Asm]   r18 -- r118;
// [Asm]   r3 -- r61;
// [Asm]   r20 -- r127;
// [Asm]   r61 -- r103;
// [Asm]   r8 -- r87;
// [Asm]   r4 -- r94;
// [Asm]   r59 -- r104;
// [Asm]   r6 -- r97;
// [Asm]   r2 -- r106;
// [Asm]   r3 -- r88;
// [Asm]   r2 -- r53;
// [Asm]   r12 -- r92;
// [Asm]   r47 -- r110;
// [Asm]   r59 -- r103;
// [Asm]   r10 -- r87;
// [Asm]   r4 -- r129;
// [Asm]   r2 -- r125;
// [Asm]   r2 -- r18;
// [Asm]   r2 -- r105;
// [Asm]   r11 -- r120;
// [Asm]   r10 -- r78;
// [Asm]   r101 -- r102;
// [Asm]   r7 -- r89;
// [Asm]   r10 -- r131;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r9 -- r115;
// [Asm]   r7 -- r134;
// [Asm]   r10 -- r76;
// [Asm]   r47 -- r62;
// [Asm]   r59 -- r99;
// [Asm]   r45 -- r68;
// [Asm]   r2 -- r82;
// [Asm]   r7 -- r86;
// [Asm]   r7 -- r30;
// [Asm]   r47 -- r54;
// [Asm]   r8 -- r33;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r8 -- r49;
// [Asm]   r3 -- r77;
// [Asm]   r61 -- r100;
// [Asm]   r5 -- r126;
// [Asm]   r9 -- r22;
// [Asm]   r5 -- r130;
// [Asm]   r17 -- r23;
// [Asm]   r12 -- r75;
// [Asm]   r4 -- r46;
// [Asm]   r4 -- r119;
// [Asm]   r4 -- r45;
// [Asm]   r18 -- r124;
// [Asm]   r5 -- r37;
// [Asm]   r8 -- r74;
// [Asm]   r18 -- r126;
// [Asm]   r2 -- r113;
// [Asm]   r11 -- r95;
// [Asm]   r10 -- r44;
// [Asm]   r10 -- r97;
// [Asm]   r19 -- r124;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r11 -- r88;
// [Asm]   r9 -- r55;
// [Asm]   r19 -- r128;
// [Asm]   r9 -- r127;
// [Asm]   r5 -- r27;
// [Asm]   r10 -- r116;
// [Asm]   r7 -- r23;
// [Asm]   r4 -- r26;
// [Asm]   r11 -- r133;
// [Asm]   r49 -- r74;
// [Asm]   r4 -- r61;
// [Asm]   r5 -- r15;
// [Asm]   r9 -- r101;
// [Asm]   r7 -- r117;
// [Asm]   r12 -- r25;
// [Asm]   r5 -- r105;
// [Asm]   r10 -- r64;
// [Asm]   r6 -- r102;
// [Asm]   r5 -- r69;
// [Asm]   r7 -- r112;
// [Asm]   r6 -- r70;
// [Asm]   r2 -- r38;
// [Asm]   r17 -- r132;
// [Asm]   r2 -- r78;
// [Asm]   r9 -- r107;
// [Asm]   r8 -- r130;
// [Asm]   r8 -- r36;
// [Asm]   r45 -- r111;
// [Asm]   r11 -- r130;
// [Asm]   r49 -- r78;
// [Asm]   r6 -- r88;
// [Asm]   r4 -- r90;
// [Asm]   r15 -- r121;
// [Asm]   r2 -- r91;
// [Asm]   r3 -- r9;
// [Asm]   r9 -- r78;
// [Asm]   r7 -- r78;
// [Asm]   r5 -- r65;
// [Asm]   r48 -- r79;
// [Asm]   r4 -- r132;
// [Asm]   r3 -- r26;
// [Asm]   r7 -- r62;
// [Asm]   r7 -- r32;
// [Asm]   r6 -- r121;
// [Asm]   r50 -- r77;
// [Asm]   r8 -- r106;
// [Asm]   r6 -- r69;
// [Asm]   r8 -- r95;
// [Asm]   r5 -- r35;
// [Asm]   r20 -- r22;
// [Asm]   r10 -- r98;
// [Asm]   r25 -- r29;
// [Asm]   r19 -- r41;
// [Asm]   r8 -- r16;
// [Asm]   r60 -- r99;
// [Asm]   r2 -- r48;
// [Asm]   r10 -- r121;
// [Asm]   r5 -- r119;
// [Asm]   r18 -- r119;
// [Asm]   r56 -- r57;
// [Asm]   r44 -- r49;
// [Asm]   r4 -- r83;
// [Asm]   r46 -- r78;
// [Asm]   r5 -- r32;
// [Asm]   r11 -- r73;
// [Asm]   r15 -- r127;
// [Asm]   r48 -- r85;
// [Asm]   r1 -- r2;
// [Asm]   r45 -- r82;
// [Asm]   r46 -- r64;
// [Asm]   r11 -- r43;
// [Asm]   r12 -- r23;
// [Asm]   r21 -- r125;
// [Asm]   r2 -- r98;
// [Asm]   r9 -- r122;
// [Asm]   r125 -- r127;
// [Asm]   r11 -- r131;
// [Asm]   r49 -- r54;
// [Asm]   r6 -- r25;
// [Asm]   r59 -- r61;
// [Asm]   r54 -- r66;
// [Asm]   r49 -- r89;
// [Asm]   r7 -- r44;
// [Asm]   r45 -- r75;
// [Asm]   r6 -- r62;
// [Asm]   r59 -- r135;
// [Asm]   r7 -- r116;
// [Asm]   r45 -- r69;
// [Asm]   r11 -- r70;
// [Asm]   r6 -- r116;
// [Asm]   r59 -- r102;
// [Asm]   r12 -- r97;
// [Asm]   r9 -- r123;
// [Asm]   r3 -- r104;
// [Asm]   r2 -- r50;
// [Asm]   r9 -- r116;
// [Asm]   r5 -- r19;
// [Asm]   r61 -- r101;
// [Asm]   r80 -- r81;
// [Asm]   r11 -- r86;
// [Asm]   r8 -- r42;
// [Asm]   r5 -- r11;
// [Asm]   r16 -- r18;
// [Asm]   r7 -- r75;
// [Asm]   r8 -- r109;
// [Asm]   r5 -- r74;
// [Asm]   r10 -- r81;
// [Asm]   r9 -- r99;
// [Asm]   r9 -- r102;
// [Asm]   r9 -- r11;
// [Asm]   r9 -- r83;
// [Asm]   r5 -- r93;
// [Asm]   r6 -- r105;
// [Asm]   r5 -- r97;
// [Asm]   r47 -- r51;
// [Asm]   r4 -- r100;
// [Asm]   r3 -- r99;
// [Asm]   r11 -- r52;
// [Asm]   r38 -- r40;
// [Asm]   r24 -- r34;
// [Asm]   r46 -- r70;
// [Asm]   r10 -- r15;
// [Asm]   r15 -- r124;
// [Asm]   r12 -- r121;
// [Asm]   r9 -- r119;
// [Asm]   r7 -- r36;
// [Asm]   r4 -- r7;
// [Asm]   r50 -- r74;
// [Asm]   r21 -- r120;
// [Asm]   r12 -- r17;
// [Asm]   r49 -- r87;
// [Asm]   r10 -- r32;
// [Asm]   r3 -- r23;
// [Asm]   r8 -- r133;
// [Asm]   r8 -- r123;
// [Asm]   r2 -- r58;
// [Asm]   r10 -- r62;
// [Asm]   r12 -- r35;
// [Asm]   r45 -- r90;
// [Asm]   r45 -- r72;
// [Asm]   r44 -- r46;
// [Asm]   r9 -- r25;
// [Asm]   r8 -- r93;
// [Asm]   r4 -- r41;
// [Asm]   r5 -- r63;
// [Asm]   r2 -- r15;
// [Asm]   r10 -- r115;
// [Asm]   r5 -- r8;
// [Asm]   r61 -- r99;
// [Asm]   r3 -- r112;
// [Asm]   r3 -- r56;
// [Asm]   r7 -- r56;
// [Asm]   r6 -- r66;
// [Asm]   r47 -- r83;
// [Asm]   r4 -- r117;
// [Asm]   r4 -- r110;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r19;
// [Asm]   r10 -- r99;
// [Asm]   r48 -- r87;
// [Asm]   r9 -- r45;
// [Asm]   r4 -- r91;
// [Asm]   r11 -- r60;
// [Asm]   r12 -- r111;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r6 -- r77;
// [Asm]   r11 -- r111;
// [Asm]   r9 -- r41;
// [Asm]   r47 -- r80;
// [Asm]   r16 -- r126;
// [Asm]   r8 -- r91;
// [Asm]   r4 -- r35;
// [Asm]   r11 -- r103;
// [Asm]   r11 -- r122;
// [Asm]   r3 -- r97;
// [Asm]   r15 -- r128;
// [Asm]   r5 -- r86;
// [Asm]   r11 -- r48;
// [Asm]   r8 -- r78;
// [Asm]   r8 -- r94;
// [Asm]   r4 -- r28;
// [Asm]   r3 -- r40;
// [Asm]   r20 -- r124;
// [Asm]   r9 -- r120;
// [Asm]   r12 -- r115;
// [Asm]   r3 -- r69;
// [Asm]   r12 -- r113;
// [Asm]   r3 -- r95;
// [Asm]   r8 -- r29;
// [Asm]   r5 -- r7;
// [Asm]   r2 -- r103;
// [Asm]   r11 -- r96;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r45 -- r47;
// [Asm]   r12 -- r68;
// [Asm]   r4 -- r49;
// [Asm]   r12 -- r53;
// [Asm]   r11 -- r25;
// [Asm]   r2 -- r72;
// [Asm]   r53 -- r55;
// [Asm]   r45 -- r67;
// [Asm]   r9 -- r60;
// [Asm]   r6 -- r126;
// [Asm]   r11 -- r57;
// [Asm]   r7 -- r88;
// [Asm]   r11 -- r91;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r48 -- r71;
// [Asm]   r46 -- r88;
// [Asm]   r6 -- r130;
// [Asm]   r19 -- r129;
// [Asm]   r21 -- r121;
// [Asm]   r4 -- r79;
// [Asm]   r16 -- r19;
// [Asm]   r19 -- r130;
// [Asm]   r49 -- r83;
// [Asm]   r7 -- r71;
// [Asm]   r54 -- r72;
// [Asm]   r6 -- r127;
// [Asm]   r49 -- r88;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r12 -- r94;
// [Asm]   r25 -- r26;
// [Asm]   r4 -- r30;
// [Asm]   r11 -- r119;
// [Asm]   r10 -- r27;
// [Asm]   r6 -- r134;
// [Asm]   r46 -- r105;
// [Asm]   r6 -- r123;
// [Asm]   r9 -- r44;
// [Asm]   r2 -- r63;
// [Asm]   r18 -- r131;
// [Asm]   r7 -- r123;
// [Asm]   r8 -- r54;
// [Asm]   r12 -- r42;
// [Asm]   r7 -- r37;
// [Asm]   r48 -- r65;
// [Asm]   r3 -- r129;
// [Asm]   r50 -- r86;
// [Asm]   r8 -- r52;
// [Asm]   r49 -- r73;
// [Asm]   r46 -- r86;
// [Asm]   r7 -- r33;
// [Asm]   r2 -- r104;
// [Asm]   r16 -- r120;
// [Asm]   r4 -- r72;
// [Asm]   r5 -- r133;
// [Asm]   r12 -- r102;
// [Asm]   r3 -- r55;
// [Asm]   r11 -- r79;
// [Asm]   r12 -- r30;
// [Asm]   r4 -- r39;
// [Asm]   r11 -- r27;
// [Asm]   r7 -- r50;
// [Asm]   r3 -- r109;
// [Asm]   r2 -- r110;
// [Asm]   r9 -- r54;
// [Asm]   r5 -- r76;
// [Asm]   r10 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r45 -- r86;
// [Asm]   r3 -- r44;
// [Asm]   r4 -- r111;
// [Asm]   r17 -- r98;
// [Asm]   r2 -- r133;
// [Asm]   r21 -- r131;
// [Asm]   r48 -- r54;
// [Asm]   r5 -- r33;
// [Asm]   r4 -- r34;
// [Asm]   r50 -- r66;
// [Asm]   r11 -- r74;
// [Asm]   r47 -- r50;
// [Asm]   r2 -- r81;
// [Asm]   r5 -- r22;
// [Asm]   r11 -- r67;
// [Asm]   r11 -- r121;
// [Asm]   r12 -- r132;
// [Asm]   r11 -- r18;
// [Asm]   r10 -- r40;
// [Asm]   r6 -- r101;
// [Asm]   r8 -- r120;
// [Asm]   r45 -- r87;
// [Asm]   r5 -- r122;
// [Asm]   r8 -- r12;
// [Asm]   r8 -- r61;
// [Asm]   r8 -- r24;
// [Asm]   r3 -- r92;
// [Asm]   r10 -- r104;
// [Asm]   r46 -- r82;
// [Asm]   r8 -- r75;
// [Asm]   r2 -- r25;
// [Asm]   r6 -- r60;
// [Asm]   r2 -- r83;
// [Asm]   r15 -- r125;
// [Asm]   r8 -- r132;
// [Asm]   r8 -- r134;
// [Asm]   r12 -- r104;
// [Asm]   r45 -- r48;
// [Asm]   r12 -- r116;
// [Asm]   r3 -- r124;
// [Asm]   r5 -- r55;
// [Asm]   r3 -- r49;
// [Asm]   r2 -- r36;
// [Asm]   r18 -- r121;
// [Asm]   r6 -- r55;
// [Asm]   r6 -- r23;
// [Asm]   r14 -- r15;
// [Asm]   r9 -- r89;
// [Asm]   r47 -- r73;
// [Asm]   r2 -- r116;
// [Asm]   r46 -- r50;
// [Asm]   r5 -- r131;
// [Asm]   r3 -- r45;
// [Asm]   r2 -- r26;
// [Asm]   r7 -- r133;
// [Asm]   r47 -- r91;
// [Asm]   r47 -- r74;
// [Asm]   r46 -- r87;
// [Asm]   r12 -- r72;
// [Asm]   r7 -- r24;
// [Asm]   r47 -- r88;
// [Asm]   r6 -- r33;
// [Asm]   r9 -- r94;
// [Asm]   r10 -- r107;
// [Asm]   r9 -- r110;
// [Asm]   r2 -- r65;
// [Asm]   r50 -- r54;
// [Asm]   r20 -- r130;
// [Asm]   r11 -- r108;
// [Asm]   r10 -- r51;
// [Asm]   r11 -- r114;
// [Asm]   r48 -- r82;
// [Asm]   r8 -- r64;
// [Asm]   r4 -- r71;
// [Asm]   r6 -- r27;
// [Asm]   r2 -- r40;
// [Asm]   r11 -- r65;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r25 -- r35;
// [Asm]   r48 -- r90;
// [Asm]   r14 -- r21;
// [Asm]   r7 -- r15;
// [Asm]   r4 -- r109;
// [Asm]   r25 -- r34;
// [Asm]   r25 -- r31;
// [Asm]   r5 -- r70;
// [Asm]   r50 -- r91;
// [Asm]   r7 -- r41;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r7 -- r57;
// [Asm]   r15 -- r131;
// [Asm]   r9 -- r48;
// [Asm]   r10 -- r126;
// [Asm]   r7 -- r12;
// [Asm]   r3 -- r128;
// [Asm]   r17 -- r114;
// [Asm]   r49 -- r75;
// [Asm]   r9 -- r81;
// [Asm]   r48 -- r81;
// [Asm]   r8 -- r60;
// [Asm]   r6 -- r71;
// [Asm]   r46 -- r49;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r38;
// [Asm]   r8 -- r99;
// [Asm]   r6 -- r128;
// [Asm]   r4 -- r66;
// [Asm]   r1 -- r12;
// [Asm]   r44 -- r48;
// [Asm]   r50 -- r89;
// [Asm]   r6 -- r47;
// [Asm]   r7 -- r40;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r88;
// [Asm]   r2 -- r95;
// [Asm]   r8 -- r90;
// [Asm]   r4 -- r105;
// [Asm]   r7 -- r100;
// [Asm]   r11 -- r92;
// [Asm]   r7 -- r109;
// [Asm]   r11 -- r112;
// [Asm]   r9 -- r111;
// [Asm]   r10 -- r100;
// [Asm]   r6 -- r109;
// [Asm]   r2 -- r111;
// [Asm]   r3 -- r34;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r10 -- r49;
// [Asm]   r15 -- r18;
// [Asm]   r10 -- r37;
// [Asm]   r10 -- r92;
// [Asm]   r18 -- r94;
// [Asm]   r4 -- r98;
// [Asm]   r21 -- r130;
// [Asm]   r24 -- r36;
// [Asm]   r7 -- r10;
// [Asm]   r17 -- r22;
// [Asm]   r6 -- r94;
// [Asm]   r3 -- r82;
// [Asm]   r7 -- r70;
// [Asm]   r2 -- r79;
// [Asm]   r8 -- r39;
// [Asm]   r9 -- r118;
// [Asm]   r45 -- r76;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r54 -- r65;
// [Asm]   r12 -- r61;
// [Asm]   r3 -- r118;
// [Asm]   r5 -- r50;
// [Asm]   r125 -- r126;
// [Asm]   r7 -- r96;
// [Asm]   r8 -- r14;
// [Asm]   r19 -- r94;
// [Asm]   r7 -- r113;
// [Asm]   r3 -- r58;
// [Asm]   r2 -- r70;
// [Asm]   r6 -- r58;
// [Asm]   r9 -- r72;
// [Asm]   r2 -- r127;
// [Asm]   r12 -- r45;
// [Asm]   r10 -- r72;
// [Asm]   r11 -- r40;
// [Asm]   r6 -- r15;
// [Asm]   r3 -- r132;
// [Asm]   r4 -- r125;
// [Asm]   r9 -- r35;
// [Asm]   r50 -- r71;
// [Asm]   r9 -- r15;
// [Asm]   r25 -- r27;
// [Asm]   r48 -- r69;
// [Asm]   r21 -- r124;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r44;
// [Asm]   r2 -- r131;
// [Asm]   r7 -- r9;
// [Asm]   r50 -- r84;
// [Asm]   r6 -- r40;
// [Asm]   r48 -- r75;
// [Asm]   r7 -- r66;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r8 -- r28;
// [Asm]   r10 -- r91;
// [Asm]   r12 -- r71;
// [Asm]   r9 -- r80;
// [Asm]   r7 -- r92;
// [Asm]   r9 -- r134;
// [Asm]   r11 -- r42;
// [Asm]   r77 -- r78;
// [Asm]   r11 -- r33;
// [Asm]   r18 -- r19;
// [Asm]   r46 -- r63;
// [Asm]   r5 -- r46;
// [Asm]   r10 -- r84;
// [Asm]   r47 -- r63;
// [Asm]   r12 -- r31;
// [Asm]   r10 -- r90;
// [Asm]   r2 -- r109;
// [Asm]   r18 -- r41;
// [Asm]   r54 -- r69;
// [Asm]   r4 -- r126;
// [Asm]   r7 -- r58;
// [Asm]   r45 -- r80;
// [Asm]   r7 -- r124;
// [Asm]   r16 -- r122;
// [Asm]   r18 -- r125;
// [Asm]   r10 -- r80;
// [Asm]   r6 -- r111;
// [Asm]   r15 -- r16;
// [Asm]   r5 -- r40;
// [Asm]   r19 -- r20;
// [Asm]   r45 -- r78;
// [Asm]   r5 -- r112;
// [Asm]   r58 -- r61;
// [Asm]   r96 -- r97;
// [Asm]   r12 -- r70;
// [Asm]   r3 -- r52;
// [Asm]   r11 -- r61;
// [Asm]   r17 -- r125;
// [Asm]   r49 -- r71;
// [Asm]   r9 -- r53;
// [Asm]   r5 -- r114;
// [Asm]   r6 -- r75;
// [Asm]   r3 -- r15;
// [Asm]   r12 -- r57;
// [Asm]   r12 -- r127;
// [Asm]   r48 -- r63;
// [Asm]   r7 -- r25;
// [Asm]   r7 -- r72;
// [Asm]   r21 -- r128;
// [Asm]   r12 -- r85;
// [Asm]   r48 -- r72;
// [Asm]   r6 -- r84;
// [Asm]   r50 -- r90;
// [Asm]   r10 -- r125;
// [Asm]   r2 -- r7;
// [Asm]   r10 -- r69;
// [Asm]   r7 -- r128;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r4 -- r57;
// [Asm]   r11 -- r109;
// [Asm]   r11 -- r19;
// [Asm]   r9 -- r82;
// [Asm]   r9 -- r88;
// [Asm]   r58 -- r135;
// [Asm]   r9 -- r75;
// [Asm]   r9 -- r66;
// [Asm]   r59 -- r60;
// [Asm]   r3 -- r74;
// [Asm]   r7 -- r79;
// [Asm]   r3 -- r39;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r59;
// [Asm]   r48 -- r50;
// [Asm]   r5 -- r58;
// [Asm]   r5 -- r54;
// [Asm]   r5 -- r60;
// [Asm]   r10 -- r22;
// [Asm]   r8 -- r72;
// [Asm]   r8 -- r59;
// [Asm]   r3 -- r33;
// [Asm]   r3 -- r71;
// [Asm]   r2 -- r13;
// [Asm]   r6 -- r72;
// [Asm]   r3 -- r35;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r4 -- r135;
// [Asm]   r24 -- r25;
// [Asm]   r5 -- r36;
// [Asm]   r2 -- r86;
// [Asm]   r8 -- r112;
// [Asm]   r3 -- r25;
// [Asm]   r3 -- r110;
// [Asm]   r4 -- r76;
// [Asm]   r49 -- r62;
// [Asm]   r6 -- r41;
// [Asm]   r18 -- r109;
// [Asm]   r48 -- r68;
// [Asm]   r3 -- r105;
// [Asm]   r2 -- r84;
// [Asm]   r4 -- r81;
// [Asm]   r9 -- r61;
// [Asm]   r49 -- r68;
// [Asm]   r16 -- r129;
// [Asm]   r11 -- r23;
// [Asm]   r17 -- r130;
// [Asm]   r11 -- r124;
// [Asm]   r48 -- r111;
// [Asm]   r8 -- r25;
// [Asm]   r11 -- r51;
// [Asm]   r45 -- r105;
// [Asm]   r8 -- r119;
// [Asm]   r8 -- r118;
// [Asm]   r6 -- r59;
// [Asm]   r24 -- r26;
// [Asm]   r38 -- r49;
// [Asm]   r10 -- r16;
// [Asm]   r17 -- r93;
// [Asm]   r50 -- r68;
// [Asm]   r59 -- r101;
// [Asm]   r8 -- r81;
// [Asm]   r2 -- r132;
// [Asm]   r48 -- r83;
// [Asm]   r2 -- r118;
// [Asm]   r8 -- r62;
// [Asm]   r7 -- r19;
// [Asm]   r2 -- r89;
// [Asm]   r3 -- r125;
// [Asm]   r11 -- r41;
// [Asm]   r48 -- r51;
// [Asm]   r10 -- r57;
// [Asm]   r47 -- r75;
// [Asm]   r5 -- r81;
// [Asm]   r7 -- r104;
// [Asm]   r48 -- r52;
// [Asm]   r5 -- r118;
// [Asm]   r2 -- r124;
// [Asm]   r12 -- r124;
// [Asm]   r9 -- r58;
// [Asm]   r4 -- r74;
// [Asm]   r11 -- r28;
// [Asm]   r12 -- r106;
// [Asm]   r11 -- r56;
// [Asm]   r11 -- r29;
// [Asm]   r25 -- r28;
// [Asm]   r2 -- r62;
// [Asm]   r3 -- r67;
// [Asm]   r14 -- r20;
// [Asm]   r4 -- r102;
// [Asm]   r6 -- r36;
// [Asm]   r15 -- r119;
// [Asm]   r7 -- r126;
// [Asm]   r10 -- r118;
// [Asm]   r48 -- r67;
// [Asm]   r15 -- r123;
// [Asm]   r49 -- r90;
// [Asm]   r10 -- r124;
// [Asm]   r17 -- r41;
// [Asm]   r6 -- r63;
// [Asm]   r20 -- r126;
// [Asm]   r50 -- r106;
// [Asm]   r50 -- r82;
// [Asm]   r11 -- r53;
// [Asm]   r7 -- r118;
// [Asm]   r50 -- r79;
// [Asm]   r8 -- r79;
// [Asm]   r2 -- r101;
// [Asm]   r4 -- r107;
// [Asm]   r12 -- r52;
// [Asm]   r46 -- r81;
// [Asm]   r8 -- r71;
// [Asm]   r2 -- r68;
// [Asm]   r11 -- r128;
// [Asm]   r10 -- r20;
// [Asm]   r12 -- r133;
// [Asm]   r60 -- r102;
// [Asm]   r12 -- r93;
// [Asm]   r21 -- r122;
// [Asm]   r10 -- r134;
// [Asm]   r48 -- r73;
// [Asm]   r8 -- r129;
// [Asm]   r12 -- r28;
// [Asm]   r12 -- r108;
// [Asm]   r6 -- r43;
// [Asm]   r47 -- r67;
// [Asm]   r6 -- r124;
// [Asm]   r4 -- r104;
// [Asm]   r7 -- r105;
// [Asm]   r49 -- r106;
// [Asm]   r12 -- r117;
// [Asm]   r8 -- r63;
// [Asm]   r4 -- r84;
// [Asm]   r49 -- r77;
// [Asm]   r5 -- r90;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r130;
// [Asm]   r11 -- r47;
// [Asm]   r21 -- r22;
// [Asm]   r10 -- r35;
// [Asm]   r17 -- r122;
// [Asm]   r12 -- r78;
// [Asm]   r9 -- r95;
// [Asm]   r14 -- r22;
// [Asm]   r2 -- r23;
// [Asm]   r9 -- r47;
// [Asm]   r9 -- r104;
// [Asm]   r8 -- r107;
// [Asm]   r7 -- r82;
// [Asm]   r2 -- r120;
// [Asm]   r25 -- r33;
// [Asm]   r18 -- r98;
// [Asm]   r8 -- r82;
// [Asm]   r47 -- r82;
// [Asm]   r7 -- r52;
// [Asm]   r4 -- r16;
// [Asm]   r12 -- r126;
// [Asm]   r6 -- r49;
// [Asm]   r12 -- r51;
// [Asm]   r5 -- r48;
// [Asm]   r12 -- r36;
// [Asm]   r5 -- r79;
// [Asm]   r2 -- r119;
// [Asm]   r17 -- r121;
// [Asm]   r3 -- r87;
// [Asm]   r16 -- r118;
// [Asm]   r25 -- r30;
// [Asm]   r10 -- r102;
// [Asm]   r17 -- r123;
// [Asm]   r10 -- r41;
// [Asm]   r2 -- r55;
// [Asm]   r20 -- r123;
// [Asm]   r6 -- r12;
// [Asm]   r4 -- r118;
// [Asm]   r9 -- r126;
// [Asm]   r6 -- r24;
// [Asm]   r24 -- r30;
// [Asm]   r10 -- r105;
// [Asm]   r7 -- r73;
// [Asm]   r11 -- r83;
// [Asm]   r49 -- r69;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r6 -- r37;
// [Asm]   r5 -- r110;
// [Asm]   r10 -- r28;
// [Asm]   r9 -- r34;
// [Asm]   r49 -- r65;
// [Asm]   r10 -- r63;
// [Asm]   r6 -- r28;
// [Asm]   r4 -- r85;
// [Asm]   r11 -- r39;
// [Asm]   r49 -- r51;
// [Asm]   r7 -- r11;
// [Asm]   r6 -- r90;
// [Asm]   r17 -- r124;
// [Asm]   r4 -- r123;
// [Asm]   r7 -- r130;
// [Asm]   r2 -- r100;
// [Asm]   r11 -- r26;
// [Asm]   r50 -- r111;
// [Asm]   r5 -- r123;
// [Asm]   r9 -- r32;
// [Asm]   r49 -- r110;
// [Asm]   r11 -- r58;
// [Asm]   r12 -- r14;
// [Asm]   r129 -- r130;
// [Asm]   r1 -- r3;
// [Asm]   r8 -- r124;
// [Asm]   r49 -- r50;
// [Asm]   r11 -- r127;
// [Asm]   r9 -- r50;
// [Asm]   r11 -- r21;
// [Asm]   r17 -- r120;
// [Asm]   r2 -- r64;
// [Asm]   r20 -- r132;
// [Asm]   r12 -- r60;
// [Asm]   r11 -- r76;
// [Asm]   r4 -- r68;
// [Asm]   r6 -- r73;
// [Asm]   r3 -- r98;
// [Asm]   r6 -- r35;
// [Asm]   r20 -- r128;
// [Asm]   r9 -- r79;
// [Asm]   r3 -- r42;
// [Asm]   r15 -- r118;
// [Asm]   r48 -- r110;
// [Asm]   r11 -- r66;
// [Asm]   r5 -- r59;
// [Asm]   r45 -- r54;
// [Asm]   r17 -- r118;
// [Asm]   r5 -- r47;
// [Asm]   r2 -- r99;
// [Asm]   r10 -- r110;
// [Asm]   r3 -- r37;
// [Asm]   r11 -- r45;
// [Asm]   r2 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r3 -- r126;
// [Asm]   r3 -- r68;
// [Asm]   r46 -- r68;
// [Asm]   r17 -- r95;
// [Asm]   r21 -- r118;
// [Asm]   r16 -- r123;
// [Asm]   r15 -- r130;
// [Asm]   r5 -- r31;
// [Asm]   r5 -- r62;
// [Asm]   r3 -- r78;
// [Asm]   r101 -- r103;
// [Asm]   r5 -- r57;
// [Asm]   r10 -- r133;
// [Asm]   r15 -- r132;
// [Asm]   r25 -- r32;
// [Asm]   r19 -- r22;
// [Asm]   r5 -- r78;
// [Asm]   r7 -- r94;
// [Asm]   r7 -- r38;
// [Asm]   r46 -- r52;
// [Asm]   r6 -- r117;
// [Asm]   r50 -- r67;
// [Asm]   r45 -- r52;
// [Asm]   r7 -- r119;
// [Asm]   r16 -- r41;
// [Asm]   r6 -- r64;
// [Asm]   r7 -- r80;
// [Asm]   r2 -- r108;
// [Asm]   r15 -- r23;
// [Asm]   r16 -- r21;
// [Asm]   r6 -- r65;
// [Asm]   r4 -- r120;
// [Asm]   r45 -- r73;
// [Asm]   r48 -- r70;
// [Asm]   r49 -- r91;
// [Asm]   r54 -- r68;
// [Asm]   r11 -- r84;
// [Asm]   r10 -- r59;
// [Asm]   r6 -- r76;
// [Asm]   r7 -- r131;
// [Asm]   r7 -- r76;
// [Asm]   r11 -- r132;
// [Asm]   r11 -- r125;
// [Asm]   r3 -- r19;
// [Asm]   r46 -- r80;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r77;
// [Asm]   r5 -- r71;
// [Asm]   r11 -- r118;
// [Asm]   r54 -- r67;
// [Asm]   r12 -- r101;
// [Asm]   r11 -- r16;
// [Asm]   r6 -- r30;
// [Asm]   r19 -- r131;
// [Asm]   r11 -- r12;
// [Asm]   r18 -- r128;
// [Asm]   r12 -- r64;
// [Asm]   r7 -- r107;
// [Asm]   r9 -- r64;
// [Asm]   r7 -- r74;
// [Asm]   r2 -- r114;
// [Asm]   r8 -- r47;
// [Asm]   r24 -- r28;
// [Asm]   r6 -- r99;
// [Asm]   r58 -- r103;
// [Asm]   r45 -- r50;
// [Asm]   r3 -- r50;
// [Asm]   r8 -- r41;
// [Asm]   r2 -- r107;
// [Asm]   r18 -- r133;
// [Asm]   r15 -- r122;
// [Asm]   r8 -- r53;
// [Asm]   r49 -- r70;
// [Asm]   r49 -- r52;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r5 -- r56;
// [Asm]   r6 -- r122;
// [Asm]   r4 -- r124;
// [Asm]   r8 -- r26;
// [Asm]   r8 -- r83;
// [Asm]   r10 -- r54;
// [Asm]   r11 -- r72;
// [Asm]   r10 -- r109;
// [Asm]   r7 -- r87;
// [Asm]   r63 -- r64;
// [Asm]   r45 -- r81;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r93;
// [Asm]   r18 -- r123;
// [Asm]   r44 -- r50;
// [Asm]   r54 -- r70;
// [Asm]   r11 -- r115;
// [Asm]   r48 -- r62;
// [Asm]   r2 -- r20;
// [Asm]   r7 -- r120;
// [Asm]   r130 -- r131;
// [Asm]   r12 -- r125;
// [Asm]   r47 -- r66;
// [Asm]   r48 -- r89;
// [Asm]   r12 -- r105;
// [Asm]   r60 -- r135;
// [Asm]   r47 -- r72;
// [Asm]   r9 -- r27;
// [Asm]   r3 -- r43;
// [Asm]   r1 -- r7;
// [Asm]   r2 -- r85;
// [Asm]   r3 -- r79;
// [Asm]   r5 -- r96;
// [Asm]   r11 -- r31;
// [Asm]   r6 -- r29;
// [Asm]   r5 -- r49;
// [Asm]   r6 -- r107;
// [Asm]   r5 -- r99;
// [Asm]   r11 -- r106;
// [Asm]   r50 -- r80;
// [Asm]   r11 -- r105;
// [Asm]   r10 -- r132;
// [Asm]   r46 -- r83;
// [Asm]   r10 -- r77;
// [Asm]   r19 -- r21;
// [Asm]   r7 -- r83;
// [Asm]   r4 -- r128;
// [Asm]   r11 -- r134;
// [Asm]   r4 -- r21;
// [Asm]   r8 -- r127;
// [Asm]   r12 -- r44;
// [Asm]   r48 -- r80;
// [Asm]   r8 -- r17;
// [Asm]   r11 -- r81;
// [Asm]   r47 -- r76;
// [Asm]   r3 -- r4;
// [Asm]   r9 -- r108;
// [Asm]   r21 -- r129;
// [Asm]   r6 -- r93;
// [Asm]   r4 -- r116;
// [Asm]   r5 -- r108;
// [Asm]   r16 -- r130;
// [Asm]   r2 -- r8;
// [Asm]   r49 -- r82;
// [Asm]   r50 -- r52;
// [Asm]   r6 -- r31;
// [Asm]   r8 -- r44;
// [Asm]   r46 -- r62;
// [Asm]   r9 -- r133;
// [Asm]   r16 -- r128;
// [Asm]   r9 -- r10;
// [Asm]   r21 -- r123;
// [Asm]   r10 -- r112;
// [Asm]   r7 -- r110;
// [Asm]   r7 -- r8;
// [Asm]   r47 -- r87;
// [Asm]   r6 -- r61;
// [Asm]   r4 -- r9;
// [Asm]   r16 -- r22;
// [Asm]   r5 -- r34;
// [Asm]   r10 -- r114;
// [Asm]   r9 -- r90;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r17 -- r119;
// [Asm]   r10 -- r83;
// [Asm]   r47 -- r64;
// [Asm]   r18 -- r127;
// [Asm]   r12 -- r131;
// [Asm]   r14 -- r18;
// [Asm]   r5 -- r100;
// [Asm]   r11 -- r17;
// [Asm]   r12 -- r134;
// [Asm]   r5 -- r20;
// [Asm]   r4 -- r37;
// [Asm]   r45 -- r49;
// [Asm]   r7 -- r45;
// [Asm]   r9 -- r96;
// [Asm]   r10 -- r68;
// [Asm]   r130 -- r132;
// [Asm]   r10 -- r71;
// [Asm]   r8 -- r55;
// [Asm]   r12 -- r56;
// [Asm]   r20 -- r121;
// [Asm]   r12 -- r96;
// [Asm]   r50 -- r73;
// [Asm]   r19 -- r121;
// [Asm]   r18 -- r22;
// [Asm]   r21 -- r127;
// [Asm]   r3 -- r90;
// [Asm]   r50 -- r85;
// [Asm]   r46 -- r66;
// [Asm]   r4 -- r70;
// [Asm]   r33 -- r34;
// [Asm]   r9 -- r92;
// [Asm]   r11 -- r75;
// [Asm]   r48 -- r76;
// [Asm]   r15 -- r21;
// [Asm]   r8 -- r40;
// [Asm]   r2 -- r66;
// [Asm]   r9 -- r43;
// [Asm]   r3 -- r72;
// [Asm]   r3 -- r41;
// [Asm]   r5 -- r102;
// [Asm]   r6 -- r17;
// [Asm]   r6 -- r118;
// [Asm]   r10 -- r82;
// [Asm]   r3 -- r59;
// [Asm]   r11 -- r38;
// [Asm]   r26 -- r29;
// [Asm]   r46 -- r91;
// [Asm]   r12 -- r48;
// [Asm]   r38 -- r39;
// [Asm]   r9 -- r71;
// [Asm]   r2 -- r19;
// [Asm]   r46 -- r77;
// [Asm]   r20 -- r119;
// [Asm]   r12 -- r83;
// [Asm]   r7 -- r101;
// [Asm]   r7 -- r122;
// [Asm]   r9 -- r105;
// [Asm]   r19 -- r98;
// [Asm]   comment = "0:v18-> 1:v67-> 2:v5-> 3:v10-> 4:zero-> 5:v8-> 6:v7-> 7:v4-> 8:v6-> 9:s11-> 10:v15-> 11:v9-> 12:v3-> 14:v41-> 15:v40-> 16:v37-> 18:v31-> 21:v38-> 22:v192-> 19:v33-> 20:v39-> 17:v32-> 23:v42-> 118:v186-> 119:v187-> 120:v51-> 121:v53-> 122:v54-> 123:v181-> 124:v182-> 125:v55-> 126:v179-> 127:v180-> 128:v57-> 129:v58-> 130:v59-> 131:v174-> 132:v175-> 133:v61-> 41:v14-> 93:v46-> 94:v48-> 95:v49-> 98:v45-> 109:v34-> 114:v44-> 24:v70-> 25:v71-> 26:v72-> 27:v165-> 28:v73-> 29:v163-> 30:v74-> 31:v75-> 32:v160-> 33:v76-> 34:v158-> 35:v77-> 36:v78-> 37:v79-> 38:v11-> 39:v155-> 40:v12-> 49:v84-> 50:v83-> 44:v111-> 48:v85-> 45:v87-> 46:v88-> 47:v86-> 51:v112-> 54:a0-> 63:a1-> 64:a2-> 65:a3-> 66:a4-> 67:a5-> 68:a6-> 69:a7-> 70:t0-> 71:t1-> 72:t2-> 73:t3-> 74:t4-> 62:v98-> 75:v100-> 76:v101-> 77:v102-> 78:v142-> 79:v143-> 80:v104-> 81:v138-> 82:v139-> 83:v105-> 84:v106-> 85:v135-> 86:v136-> 87:v108-> 88:v131-> 89:v132-> 90:v109-> 91:v130-> 105:v96-> 110:v89-> 111:v151-> 52:v115-> 106:v118-> 42:v92-> 56:v64-> 57:v65-> 58:v19-> 99:v125-> 59:v20-> 60:v21-> 61:v22-> 100:v126-> 101:v119-> 102:v123-> 103:v124-> 135:v23-> 104:v121-> 96:v16-> 97:v201-> 107:v93-> 108:v94-> 113:v26-> 115:v27-> 116:v29-> 117:v13-> 134:v63-> 13:v69-> 43:v91-> 53:v0-> 55:v2-> 92:v25-> 112:v62"
// [Asm]   comment = "v18<-a0;v72<-a2;v186<-a0;v111<-a0;v64<-a0;v15<-s6;v151<-a1;v70<-a0;v179<-a5;v187<-a0;v131<-a0;v104<-a0;v155<-a1;v143<-a0;v57<-a0;v26<-a0;v102<-a1;v9<-s7;v19<-a0;v96<-a0;v41<-a0;v142<-a0;v37<-a2;v38<-a4;v21<-a3;v46<-a0;v11<-a0;v54<-a0;v108<-a0;v49<-a0;v4<-s4;v27<-a0;v59<-a5;v85<-s10;v79<-a0;v123<-a5;v181<-a0;v55<-a0;v192<-a5;v106<-a1;v25<-a0;v87<-s5;v93<-a0;v5<-s0;v31<-a3;v33<-a6;v53<-a0;v109<-a0;v201<-a1;v138<-a1;v48<-a0;v119<-a1;v88<-s0;v51<-a0;v76<-a2;v101<-a0;v20<-a2;v136<-a0;v0<-a1;v8<-s2;v91<-a0;v75<-a2;v125<-a1;v61<-a0;v32<-a1;v115<-a0;v58<-a0;v39<-a3;v22<-a4;v42<-a0;v10<-s1;v94<-a0;v175<-a0;v139<-a1;v165<-a3;v100<-a0;v98<-a0;v12<-a1;v89<-a0;v158<-a3;v105<-a1;v124<-a5;v63<-a0;v112<-a0;v16<-a0;v23<-a1;v2<-a0;v121<-a0;v29<-a0;v126<-a1;v135<-a0;v86<-s6;v7<-s3;v69<-a0;v92<-a0;v13<-a1;v163<-a4;v77<-a2;v174<-a0;v44<-a0;v6<-s5;v62<-a0;v78<-a1;v160<-a3;v40<-a1;v84<-s9;v65<-a1;v45<-a0;v182<-a0;v130<-a1;v3<-s8;v118<-a0;v34<-a0;v180<-a5;v67<-a0;v14<-a0;v73<-a3;v83<-s8;v132<-a0;v74<-a3;v71<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of compute40.432_18"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v18, zero ->   mv a0, zero
// [Asm] subst   lw v67, 0(v7) ->   lw a0, 0(s3)
// [Asm] subst   sw v67, 0(v8) ->   sw a0, 0(s2)
// [Asm] subst   mv v69, zero ->   mv a0, zero
// [Asm] subst   lw v41, 0(v39) ->   lw a0, 0(a3)
// [Asm] subst   li v192, 2 ->   li a5, 2
// [Asm] subst   div v42, v41, v192 ->   div a0, a0, a5
// [Asm] subst   blt v42, v37, .compute40.432_18_42 ->   blt a0, a2, .compute40.432_18_42
// [Asm] subst   mv v69, zero ->   mv a0, zero
// [Asm] subst   j .compute40.432_18_5 ->   j .compute40.432_18_5
// [Asm] subst   lw v70, 0(v9) ->   lw a0, 0(s7)
// [Asm] subst   lw v71, 0(v7) ->   lw a1, 0(s3)
// [Asm] subst   lw v72, 0(v10) ->   lw a2, 0(s1)
// [Asm] subst   li v165, 2 ->   li a3, 2
// [Asm] subst   div v73, v72, v165 ->   div a3, a2, a3
// [Asm] subst   li v163, 2 ->   li a4, 2
// [Asm] subst   mul v74, v73, v163 ->   mul a3, a3, a4
// [Asm] subst   sub v75, v72, v74 ->   sub a2, a2, a3
// [Asm] subst   li v160, 2 ->   li a3, 2
// [Asm] subst   mul v76, v75, v160 ->   mul a2, a2, a3
// [Asm] subst   li v158, 1 ->   li a3, 1
// [Asm] subst   sub v77, v158, v76 ->   sub a2, a3, a2
// [Asm] subst   mul v78, v71, v77 ->   mul a1, a1, a2
// [Asm] subst   add v79, v70, v78 ->   add a0, a0, a1
// [Asm] subst   sw v79, 0(v9) ->   sw a0, 0(s7)
// [Asm] subst   addi v11, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi s11, v11, -8 ->   andi s11, a0, -8
// [Asm] subst   li v155, 1 ->   li a1, 1
// [Asm] subst   sw v155, 0(v11) ->   sw a1, 0(a0)
// [Asm] subst   addi v12, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v12, -8 ->   andi s11, a1, -8
// [Asm] subst   sw zero, 0(v12) ->   sw zero, 0(a1)
// [Asm] subst   mv v37, zero ->   mv a2, zero
// [Asm] subst   mv v38, v14 ->   mv a4, a0
// [Asm] subst   addi v14, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi s11, v14, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v14) ->   sw zero, 0(a0)
// [Asm] subst   mv v91, zero ->   mv a0, zero
// [Asm] subst   lw v111, 0(v86) ->   lw a0, 0(s6)
// [Asm] subst   addi v112, v111, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v112, 0(v86) ->   sw a0, 0(s6)
// [Asm] subst   mv v115, zero ->   mv a0, zero
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw s8, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s4, 16(a1)
// [Asm] subst   ld v5, 24(v0) ->   ld s0, 24(a1)
// [Asm] subst   ld v6, 32(v0) ->   ld s5, 32(a1)
// [Asm] subst   ld v7, 40(v0) ->   ld s3, 40(a1)
// [Asm] subst   ld v8, 48(v0) ->   ld s2, 48(a1)
// [Asm] subst   ld v9, 56(v0) ->   ld s7, 56(a1)
// [Asm] subst   ld v10, 64(v0) ->   ld s1, 64(a1)
// [Asm] subst   mv v15, v2 ->   mv s6, a0
// [Asm] subst   lw v64, 0(v8) ->   lw a0, 0(s2)
// [Asm] subst   lw v65, 0(v7) ->   lw a1, 0(s3)
// [Asm] subst   blt v65, v64, .compute40.432_18_4 ->   blt a1, a0, .compute40.432_18_4
// [Asm] subst   mv v19, zero ->   mv a0, zero
// [Asm] subst   mv v20, v3 ->   mv a2, s8
// [Asm] subst   mv v21, v4 ->   mv a3, s4
// [Asm] subst   mv v22, v5 ->   mv a4, s0
// [Asm] subst   lw v98, 0(v88) ->   lw a0, 0(s0)
// [Asm] subst   sw v98, 0(v84) ->   sw a0, 0(s9)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v86 ->   mv a1, s6
// [Asm] subst   mv a2, v88 ->   mv a2, s0
// [Asm] subst   call move_perm1_forward197.568l6_6 ->   call move_perm1_forward197.568l6_6
// [Asm] subst   lw v101, 0(v86) ->   lw a0, 0(s6)
// [Asm] subst   lw v102, 0(v84) ->   lw a1, 0(s9)
// [Asm] subst   slliw v142, v101, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v143, v88, v142 ->   add a0, s0, a0
// [Asm] subst   sw v102, 0(v143) ->   sw a1, 0(a0)
// [Asm] subst   lw v104, 0(v86) ->   lw a0, 0(s6)
// [Asm] subst   slliw v138, v104, 2 ->   slliw a1, a0, 2
// [Asm] subst   add v139, v87, v138 ->   add a1, s5, a1
// [Asm] subst   lw v105, 0(v139) ->   lw a1, 0(a1)
// [Asm] subst   addi v106, v105, -1 ->   addi a1, a1, -1
// [Asm] subst   slliw v135, v104, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v136, v87, v135 ->   add a0, s5, a0
// [Asm] subst   sw v106, 0(v136) ->   sw a1, 0(a0)
// [Asm] subst   lw v108, 0(v86) ->   lw a0, 0(s6)
// [Asm] subst   slliw v131, v108, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v132, v87, v131 ->   add a0, s5, a0
// [Asm] subst   lw v109, 0(v132) ->   lw a0, 0(a0)
// [Asm] subst   li v130, 1 ->   li a1, 1
// [Asm] subst   bge v109, v130, .compute40.432_18_65 ->   bge a0, a1, .compute40.432_18_65
// [Asm] subst   mv v25, zero ->   mv a0, zero
// [Asm] subst   j .compute40.432_18_60 ->   j .compute40.432_18_60
// [Asm] subst   lw v46, 0(v32) ->   lw a0, 0(a1)
// [Asm] subst   sw v46, 0(v31) ->   sw a0, 0(a3)
// [Asm] subst   lw v48, 0(v33) ->   lw a0, 0(a6)
// [Asm] subst   addi v49, v48, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v49, 0(v33) ->   sw a0, 0(a6)
// [Asm] subst   j .compute40.432_18_31 ->   j .compute40.432_18_31
// [Asm] subst   lw v16, 0(v15) ->   lw a0, 0(s6)
// [Asm] subst   li v201, 1 ->   li a1, 1
// [Asm] subst   blt v16, v201, .compute40.432_18_2 ->   blt a0, a1, .compute40.432_18_2
// [Asm] subst   slliw v125, v19, 2 ->   slliw a1, a0, 2
// [Asm] subst   add v126, v22, v125 ->   add a1, a4, a1
// [Asm] subst   lw v119, 0(v126) ->   lw a1, 0(a1)
// [Asm] subst   slliw v123, v19, 2 ->   slliw a5, a0, 2
// [Asm] subst   add v124, v21, v123 ->   add a5, a3, a5
// [Asm] subst   sw v119, 0(v124) ->   sw a1, 0(a5)
// [Asm] subst   addi v121, v19, 1 ->   addi a0, a0, 1
// [Asm] subst   j .compute40.432_18_54 ->   j .compute40.432_18_54
// [Asm] subst   lw v96, 0(v86) ->   lw a0, 0(s6)
// [Asm] subst   beq v96, v83, .compute40.432_18_63 ->   beq a0, s8, .compute40.432_18_63
// [Asm] subst   mv v84, v12 ->   mv s9, a1
// [Asm] subst   mv v85, v11 ->   mv s10, a0
// [Asm] subst   sw zero, 0(v85) ->   sw zero, 0(s10)
// [Asm] subst   mv v115, zero ->   mv a0, zero
// [Asm] subst   j .compute40.432_18_67 ->   j .compute40.432_18_67
// [Asm] subst   mv v31, v13 ->   mv a3, a1
// [Asm] subst   mv v32, v4 ->   mv a1, s4
// [Asm] subst   mv v33, v7 ->   mv a6, s3
// [Asm] subst   mv v118, zero ->   mv a0, zero
// [Asm] subst   lw v93, 0(v10) ->   lw a0, 0(s1)
// [Asm] subst   addi v94, v93, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v94, 0(v10) ->   sw a0, 0(s1)
// [Asm] subst   j .compute40.432_18_0 ->   j .compute40.432_18_0
// [Asm] subst   lw v34, 0(v31) ->   lw a0, 0(a3)
// [Asm] subst   beq v34, zero, .compute40.432_18_32 ->   beq a0, zero, .compute40.432_18_32
// [Asm] subst   lw v89, 0(v85) ->   lw a0, 0(s10)
// [Asm] subst   li v151, 1 ->   li a1, 1
// [Asm] subst   bne v89, v151, .compute40.432_18_62 ->   bne a0, a1, .compute40.432_18_62
// [Asm] subst   mv v62, zero ->   mv a0, zero
// [Asm] subst   mv v44, zero ->   mv a0, zero
// [Asm] subst   mv a0, v15 ->   mv a0, s6
// [Asm] subst   mv a1, v6 ->   mv a1, s5
// [Asm] subst   call init_count59.447l3_3 ->   call init_count59.447l3_3
// [Asm] subst   sw zero, 0(v7) ->   sw zero, 0(s3)
// [Asm] subst   lw v29, 0(v4) ->   lw a0, 0(s4)
// [Asm] subst   addi v13, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v13, -8 ->   andi s11, a1, -8
// [Asm] subst   sw v29, 0(v13) ->   sw a0, 0(a1)
// [Asm] subst   slliw v186, v37, 2 ->   slliw a0, a2, 2
// [Asm] subst   add v187, v40, v186 ->   add a0, a1, a0
// [Asm] subst   lw v51, 0(v187) ->   lw a0, 0(a0)
// [Asm] subst   sw v51, 0(v38) ->   sw a0, 0(a4)
// [Asm] subst   lw v53, 0(v39) ->   lw a0, 0(a3)
// [Asm] subst   sub v54, v53, v37 ->   sub a0, a0, a2
// [Asm] subst   slliw v181, v54, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v182, v40, v181 ->   add a0, a1, a0
// [Asm] subst   lw v55, 0(v182) ->   lw a0, 0(a0)
// [Asm] subst   slliw v179, v37, 2 ->   slliw a5, a2, 2
// [Asm] subst   add v180, v40, v179 ->   add a5, a1, a5
// [Asm] subst   sw v55, 0(v180) ->   sw a0, 0(a5)
// [Asm] subst   lw v57, 0(v39) ->   lw a0, 0(a3)
// [Asm] subst   sub v58, v57, v37 ->   sub a0, a0, a2
// [Asm] subst   lw v59, 0(v38) ->   lw a5, 0(a4)
// [Asm] subst   slliw v174, v58, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v175, v40, v174 ->   add a0, a1, a0
// [Asm] subst   sw v59, 0(v175) ->   sw a5, 0(a0)
// [Asm] subst   addi v61, v37, 1 ->   addi a0, a2, 1
// [Asm] subst   mv v37, v61 ->   mv a2, a0
// [Asm] subst   j .compute40.432_18_40 ->   j .compute40.432_18_40
// [Asm] subst   addi v23, v20, -1 ->   addi a1, a2, -1
// [Asm] subst   blt v23, v19, .compute40.432_18_56 ->   blt a1, a0, .compute40.432_18_56
// [Asm] subst   sw zero, 0(v85) ->   sw zero, 0(s10)
// [Asm] subst   sw zero, 0(v86) ->   sw zero, 0(s6)
// [Asm] subst   mv v118, zero ->   mv a0, zero
// [Asm] subst   j .compute40.432_18_68 ->   j .compute40.432_18_68
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v7, Insn(iref=%7) -> v10, FnParam(fref=f3, fpref=$f.1) -> v3, BlockParam(bref=b3, bpref=$b.0) -> v13, Insn(iref=%2) -> v6, Insn(iref=%9) -> v12, Insn(iref=%8) -> v11, Insn(iref=%1) -> v5, FnParam(fref=f3, fpref=$f.0) -> v2, Insn(iref=%6) -> v9, Insn(iref=%5) -> v8, Self(fref=f3) -> v0, Insn(iref=%0) -> v4
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=1)])
// [Asm] defs: [v13]
// [Asm] live_set: [v13, zero]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v2, v4, v21, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v7, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v6, v17, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v2, v6, v18, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v2, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v12, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12, zero]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13, zero]
// [Asm] move_origin: [v12]
// [Asm] defined: v13 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init_count59.447l3_3"];
// [Asm]   r0 [label="v13 ← a0", color=green];
// [Asm]   r20 [label="t0", color=blue];
// [Asm]   r23 [label="t3", color=blue];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="v17 ← a3", color=green];
// [Asm]   r6 [label="v21 ← a3", color=green];
// [Asm]   r13 [label="a0", color=blue];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="v9 ← a2", color=green];
// [Asm]   r7 [label="v6 ← a2", color=green];
// [Asm]   r10 [label="v18 ← a3", color=green];
// [Asm]   r22 [label="t2", color=blue];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r8 [label="v7 ← a3", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r24 [label="t4", color=blue];
// [Asm]   r25 [label="v12 ← a0", color=green];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r21 [label="t1", color=blue];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r12 [label="v10 ← a2", color=green];
// [Asm]   r4 -- r13;
// [Asm]   r13 -- r24;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r13 -- r16;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r16;
// [Asm]   r7 -- r9;
// [Asm]   r13 -- r20;
// [Asm]   r13 -- r19;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r1 -- r21;
// [Asm]   r13 -- r23;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r10;
// [Asm]   r13 -- r14;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r25;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r13 -- r18;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r13 -- r22;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r13 -- r21;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:v13-> 1:zero-> 2:v2-> 3:a1-> 4:v3-> 5:v4-> 6:v21-> 7:v6-> 8:v7-> 9:v17-> 10:v18-> 11:v9-> 12:v10-> 13:a0-> 14:a2-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 20:t0-> 21:t1-> 22:t2-> 23:t3-> 24:t4-> 25:v12"
// [Asm]   comment = "v13<-a0;v17<-a3;v21<-a3;v3<-a1;v9<-a2;v6<-a2;v18<-a3;v7<-a3;v4<-a2;v12<-a0;v2<-a0;v10<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init_count59.447l3_3"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   j .init_count59.447l3_3_3 ->   j .init_count59.447l3_3_3
// [Asm] subst   lw v4, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   li v21, 1 ->   li a3, 1
// [Asm] subst   beq v4, v21, .init_count59.447l3_3_1 ->   beq a2, a3, .init_count59.447l3_3_1
// [Asm] subst   lw v6, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   addi v7, v6, -1 ->   addi a3, a2, -1
// [Asm] subst   slliw v17, v7, 2 ->   slliw a3, a3, 2
// [Asm] subst   add v18, v3, v17 ->   add a3, a1, a3
// [Asm] subst   sw v6, 0(v18) ->   sw a2, 0(a3)
// [Asm] subst   lw v9, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   addi v10, v9, -1 ->   addi a2, a2, -1
// [Asm] subst   sw v10, 0(v2) ->   sw a2, 0(a0)
// [Asm] subst   call init_count59.447l3_3 ->   call init_count59.447l3_3
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f20) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_20"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_20"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main262l0_8 ->   call main262l0_8
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] T$start_20:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_20_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main262l0_8  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main262l0_8:
// [Asm] # block info: defs: [v22, a1, s11, fa1, fa2, ft6, a4, fa6, v20, v27, a6, ft10, ft5, v6, ft4, v5, ft9, v10, fa4, ft2, a3, fa7, a7, v48, fa3, ft3, t2, v3, v25, t1, v26, v7, ft0, ft1, v41, v8, v4, ft7, v11, v21, a5, a0, a2, v24, v9, s10, v39, ft8, t3, t0, fa5, fa0, v35, t4, v38, v2], uses: [v3, v11, v25, v5, v21, v10, a0, v22, v7, v41, s11, v24, v9, v39, v48, zero, v27, v8, v35, v38, v4, v6, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main262l0_8_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   # save_ctx2  # live: [zero, s11]
// [Asm]   li v48, 9  # live: [v48, zero, s11]
// [Asm]   mv a0, v48  # live: [zero, a0, s11]
// [Asm]   call gen_perm14.400l1_1  # live: [zero, a0, s11]
// [Asm]   mv v11, a0  # live: [v11, zero, s11]
// [Asm]   # restore_ctx2  # live: [v11, zero, s11]
// [Asm]   addi v5, s11, -36  # live: [v11, v5, zero]
// [Asm]   andi s11, v5, -8  # live: [v11, v5, zero, s11]
// [Asm]   sw zero, 0(v5)  # live: [v11, v5, zero, s11]
// [Asm]   sw zero, 4(v5)  # live: [v11, v5, zero, s11]
// [Asm]   sw zero, 8(v5)  # live: [v11, v5, zero, s11]
// [Asm]   sw zero, 12(v5)  # live: [v11, v5, zero, s11]
// [Asm]   sw zero, 16(v5)  # live: [v11, v5, zero, s11]
// [Asm]   sw zero, 20(v5)  # live: [v11, v5, zero, s11]
// [Asm]   sw zero, 24(v5)  # live: [v11, v5, zero, s11]
// [Asm]   sw zero, 28(v5)  # live: [v11, v5, zero, s11]
// [Asm]   sw zero, 32(v5)  # live: [v11, v5, zero, s11]
// [Asm]   addi v6, s11, -36  # live: [v11, v5, zero, v6]
// [Asm]   andi s11, v6, -8  # live: [v11, v5, zero, v6, s11]
// [Asm]   sw zero, 0(v6)  # live: [v11, v5, zero, v6, s11]
// [Asm]   sw zero, 4(v6)  # live: [v11, v5, zero, v6, s11]
// [Asm]   sw zero, 8(v6)  # live: [v11, v5, zero, v6, s11]
// [Asm]   sw zero, 12(v6)  # live: [v11, v5, zero, v6, s11]
// [Asm]   sw zero, 16(v6)  # live: [v11, v5, zero, v6, s11]
// [Asm]   sw zero, 20(v6)  # live: [v11, v5, zero, v6, s11]
// [Asm]   sw zero, 24(v6)  # live: [v11, v5, zero, v6, s11]
// [Asm]   sw zero, 28(v6)  # live: [v11, v5, zero, v6, s11]
// [Asm]   sw zero, 32(v6)  # live: [v11, v5, zero, v6, s11]
// [Asm]   addi v8, s11, -4  # live: [v11, v5, zero, v8, v6]
// [Asm]   andi s11, v8, -8  # live: [v11, v5, zero, v8, v6, s11]
// [Asm]   sw zero, 0(v8)  # live: [v11, v5, zero, v8, v6, s11]
// [Asm]   addi v9, s11, -4  # live: [v11, v5, zero, v8, v6, v9]
// [Asm]   andi s11, v9, -8  # live: [v11, v5, zero, v8, v6, s11, v9]
// [Asm]   sw zero, 0(v9)  # live: [v11, v5, zero, v8, v6, s11, v9]
// [Asm]   addi v3, s11, -4  # live: [v11, v5, zero, v8, v6, v9, v3]
// [Asm]   andi s11, v3, -8  # live: [v11, v5, zero, v8, v6, s11, v9, v3]
// [Asm]   sw zero, 0(v3)  # live: [v11, v5, zero, v8, v6, s11, v9, v3]
// [Asm]   addi v7, s11, -4  # live: [v11, v5, zero, v7, v8, v6, v9, v3]
// [Asm]   andi s11, v7, -8  # live: [v11, v5, zero, v7, v8, v6, s11, v9, v3]
// [Asm]   sw zero, 0(v7)  # live: [v11, v5, v7, v8, v6, s11, v9, v3]
// [Asm]   addi v2, s11, -4  # live: [v3, v11, v5, v7, v8, v6, v9, v2]
// [Asm]   andi s11, v2, -8  # live: [v3, v11, v5, v7, v8, v6, s11, v9, v2]
// [Asm]   li v41, 9  # live: [v3, v11, v5, v7, v8, v41, v6, s11, v9, v2]
// [Asm]   sw v41, 0(v2)  # live: [v3, v11, v5, v7, v8, v6, s11, v9, v2]
// [Asm]   addi v10, s11, -72  # live: [v3, v11, v5, v10, v7, v8, v6, v9, v2]
// [Asm]   andi s11, v10, -8  # live: [v3, v11, v5, v10, v7, v8, v6, s11, v9, v2]
// [Asm]   la v38, compute40.432_18  # live: [v3, v11, v5, v10, v7, v8, v38, v6, s11, v9, v2]
// [Asm]   sd v38, 0(v10)  # live: [v3, v11, v5, v10, v7, v8, v6, s11, v9, v2]
// [Asm]   li v39, 9  # live: [v3, v11, v5, v10, v7, v8, v6, s11, v9, v39, v2]
// [Asm]   sd v39, 8(v10)  # live: [v3, v11, v5, v10, v7, v8, v6, s11, v9, v2]
// [Asm]   sd v5, 16(v10)  # live: [v3, v11, v10, v7, v8, v6, s11, v9, v2]
// [Asm]   sd v11, 24(v10)  # live: [v3, v10, v7, v8, v6, s11, v9, v2]
// [Asm]   sd v6, 32(v10)  # live: [v3, v10, v7, v8, s11, v9, v2]
// [Asm]   sd v8, 40(v10)  # live: [v3, v10, v7, s11, v9, v2]
// [Asm]   sd v9, 48(v10)  # live: [v3, v10, v7, s11, v9, v2]
// [Asm]   sd v3, 56(v10)  # live: [v3, v10, v7, s11, v9, v2]
// [Asm]   sd v7, 64(v10)  # live: [v2, s11, v10, v9, v3]
// [Asm]   mv s10, v10  # live: [v2, s11, v10, v9, v3]
// [Asm]   ld v35, 0(v10)  # live: [v35, v2, s11, v9, v3]
// [Asm]   # save_ctx2  # live: [v35, v2, s11, v9, v3]
// [Asm]   mv a0, v2  # live: [v35, s11, v9, a0, v3]
// [Asm]   jalr v35  # live: [s11, v9, a0, v3]
// [Asm]   mv v20, a0  # live: [s11, v9, v3]
// [Asm]   # restore_ctx2  # live: [s11, v9, v3]
// [Asm]   lw v21, 0(v9)  # live: [v21, s11, v3]
// [Asm]   lw v22, 0(v3)  # live: [v21, s11, v22]
// [Asm]   addi v4, s11, -8  # live: [v4, v21, v22]
// [Asm]   andi s11, v4, -8  # live: [v4, v21, v22]
// [Asm]   sw v21, 0(v4)  # live: [v4, v22]
// [Asm]   sw v22, 4(v4)  # live: [v4]
// [Asm]   lw v24, 0(v4)  # live: [v4, v24]
// [Asm]   lw v25, 4(v4)  # live: [v25, v24]
// [Asm]   # save_ctx2  # live: [v25, v24]
// [Asm]   mv a0, v25  # live: [v24, a0]
// [Asm]   call minimbt_print_int  # live: [v24, a0]
// [Asm]   mv v26, a0  # live: [v24]
// [Asm]   # restore_ctx2  # live: [v24]
// [Asm]   # save_ctx2  # live: [v24]
// [Asm]   mv a0, v24  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v27, a0  # live: [v27]
// [Asm]   # restore_ctx2  # live: [v27]
// [Asm] # control
// [Asm]   mv a0, v27  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] gen_perm14.400l1_1:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, zero, v7, a2, a1, s11, v3], upward_exposed: [s11, a0, zero], params_defs: []
// [Asm] # live_in: [s11, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .gen_perm14.400l1_1_0:
// [Asm]   # save_ctx1  # live: [s11, zero, a0]
// [Asm]   mv v2, a0  # live: [s11, zero, v2]
// [Asm]   slliw v7, v2, 2  # live: [v7, s11, zero, v2]
// [Asm]   sub v3, s11, v7  # live: [v2, zero, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, zero, v3]
// [Asm]   mv a1, v2  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, zero  # live: [v2, a0, v3]
// [Asm]   mv a1, v3  # live: [v2, a1, a0, v3]
// [Asm]   mv a2, v2  # live: [a2, a1, a0, v3]
// [Asm]   call init_arr9.404l2_0  # live: [a0, v3]
// [Asm]   mv v5, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] init_arr9.404l2_0:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .init_arr9.404l2_0_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v5, v7], upward_exposed: [v5, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .init_arr9.404l2_0_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v5, v6, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v5, .init_arr9.404l2_0_2  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v14, v5, v12, v15], uses: [v5, v6, v14, v15, v12, v7], upward_exposed: [v5, v6, v7], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .init_arr9.404l2_0_1:
// [Asm]   slliw v14, v5, 2  # live: [v6, v5, v14, zero, v7]
// [Asm]   add v15, v6, v14  # live: [v6, v5, v15, zero, v7]
// [Asm]   sw v5, 0(v15)  # live: [v6, v5, zero, v7]
// [Asm]   addi v12, v5, 1  # live: [v6, v12, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v12  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .init_arr9.404l2_0_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .init_arr9.404l2_0_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .init_arr9.404l2_0_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] init_count59.447l3_3:
// [Asm] # block info: defs: [v3, v4, v21, v2], uses: [v4, a1, v21, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v3, zero, v2]
// [Asm] # block parameters: []
// [Asm] .init_count59.447l3_3_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm]   lw v4, 0(v2)  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   li v21, 1  # live: [v2, v4, v21, zero, v3]
// [Asm]   beq v4, v21, .init_count59.447l3_3_1  # live: [v2, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, v7, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, v10, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v2, v18, v10, a0, v7, v6, v17, a1, v12, v9, v3], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, zero, v3], live_out: [v13, zero]
// [Asm] # block parameters: []
// [Asm] .init_count59.447l3_3_2:
// [Asm]   lw v6, 0(v2)  # live: [v2, v6, zero, v3]
// [Asm]   addi v7, v6, -1  # live: [v2, v7, v6, zero, v3]
// [Asm]   slliw v17, v7, 2  # live: [v2, v6, v17, zero, v3]
// [Asm]   add v18, v3, v17  # live: [v2, v6, v18, zero, v3]
// [Asm]   sw v6, 0(v18)  # live: [v2, zero, v3]
// [Asm]   lw v9, 0(v2)  # live: [v2, zero, v9, v3]
// [Asm]   addi v10, v9, -1  # live: [v2, v10, zero, v3]
// [Asm]   sw v10, 0(v2)  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [zero, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, zero, a0]
// [Asm]   call init_count59.447l3_3  # live: [zero, a0]
// [Asm]   mv v12, a0  # live: [v12, zero]
// [Asm]   # restore_ctx2  # live: [v12, zero]
// [Asm] # control
// [Asm]   mv v13, v12  # live: [v13, zero]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: [v13]
// [Asm] # live_in: [v13, zero], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .init_count59.447l3_3_3:
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v13, zero]
// [Asm] # block parameters: []
// [Asm] .init_count59.447l3_3_1:
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v13, zero]
// [Asm]   j .init_count59.447l3_3_3  # live: [v13, zero]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_20  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] move_perm1_forward197.568l6_6:
// [Asm] # block info: defs: [v3, v4, v5, v6, v2], uses: [v2, v5, a0, a2, a1, v6, v3], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v3, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward197.568l6_6_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm]   lw v5, 0(v3)  # live: [v2, v4, v5, zero, v3]
// [Asm]   addi v6, v5, -1  # live: [v2, v4, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v6, v2, .move_perm1_forward197.568l6_6_2  # live: [v2, v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v16, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v3, v16, v14, a0, zero, v8, v4, a2, a1, v17, v15, v9, v2], upward_exposed: [v3, v4, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v4, zero, v3], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward197.568l6_6_1:
// [Asm]   addi v8, v2, 1  # live: [v8, v2, v4, zero, v3]
// [Asm]   slliw v16, v8, 2  # live: [v8, v2, v4, v16, zero, v3]
// [Asm]   add v17, v4, v16  # live: [v8, v2, v4, v17, zero, v3]
// [Asm]   lw v9, 0(v17)  # live: [v8, v2, v4, zero, v9, v3]
// [Asm]   slliw v14, v2, 2  # live: [v8, v4, v14, zero, v9, v3]
// [Asm]   add v15, v4, v14  # live: [v8, v4, v15, zero, v9, v3]
// [Asm]   sw v9, 0(v15)  # live: [v8, v4, zero, v3]
// [Asm]   # save_ctx2  # live: [v8, v4, zero, v3]
// [Asm]   mv a0, v8  # live: [v4, zero, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, zero, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, zero, a0]
// [Asm]   call move_perm1_forward197.568l6_6  # live: [zero, a0]
// [Asm]   mv v11, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v12, zero  # live: [v12]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v12, a0], upward_exposed: [v12], params_defs: [v12]
// [Asm] # live_in: [v12], live_out: []
// [Asm] # block parameters: [v12]
// [Asm] .move_perm1_forward197.568l6_6_3:
// [Asm] # control
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward197.568l6_6_2:
// [Asm] # control
// [Asm]   mv v12, zero  # live: [v12]
// [Asm]   j .move_perm1_forward197.568l6_6_3  # live: [v12]
// [Asm] 
// [Asm] # leaf false
// [Asm] compute40.432_18:
// [Asm] # block info: defs: [v2, v5, v10, v7, v8, v0, v4, v6, v15, v9, v3], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: [v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_8:
// [Asm]   # save_ctx1  # live: [zero, a0, s11, s10]
// [Asm]   mv v0, s10  # live: [zero, a0, v0, s11]
// [Asm]   mv v2, a0  # live: [zero, v0, s11, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, zero, v0, s11, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, zero, v0, v4, s11, v3]
// [Asm]   ld v5, 24(v0)  # live: [v2, v5, zero, v0, v4, s11, v3]
// [Asm]   ld v6, 32(v0)  # live: [v2, v5, zero, v0, v4, v6, s11, v3]
// [Asm]   ld v7, 40(v0)  # live: [v2, v5, zero, v7, v0, v4, v6, s11, v3]
// [Asm]   ld v8, 48(v0)  # live: [v2, v5, zero, v8, v7, v0, v4, v6, s11, v3]
// [Asm]   ld v9, 56(v0)  # live: [v2, v5, zero, v8, v7, v0, v4, v6, s11, v9, v3]
// [Asm]   ld v10, 64(v0)  # live: [v2, v5, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] # control
// [Asm]   mv v15, v2  # live: [v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v16, v201], uses: [v16, v15, v201], upward_exposed: [v15], params_defs: [v15]
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3], live_out: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] # block parameters: [v15]
// [Asm] .compute40.432_18_0:
// [Asm]   lw v16, 0(v15)  # live: [v5, v16, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] # control
// [Asm]   li v201, 1  # live: [v5, v16, v10, zero, v8, v7, v4, v6, s11, v15, v9, v201, v3]
// [Asm]   blt v16, v201, .compute40.432_18_2  # live: [v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3], live_out: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_1:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v19, v21, v20, v22], uses: [v4, v5, zero, v3], upward_exposed: [v4, v5, zero, v3], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3], live_out: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_59:
// [Asm] # control
// [Asm]   mv v19, zero  # live: [v5, v10, v7, s11, v9, zero, v8, v19, v4, v6, v15, v3]
// [Asm]   mv v20, v3  # live: [v5, v10, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   mv v21, v4  # live: [v5, v21, v10, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   mv v22, v5  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [v19, v20, v23], upward_exposed: [v19, v20], params_defs: [v19, v21, v20, v22]
// [Asm] # live_in: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3], live_out: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] # block parameters: [v19, v20, v21, v22]
// [Asm] .compute40.432_18_54:
// [Asm]   addi v23, v20, -1  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v23, v8, v19, v4, v6, v15, v3]
// [Asm] # control
// [Asm]   blt v23, v19, .compute40.432_18_56  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v124, v121, v125, v126, v123, v119, v19], uses: [v21, v124, v121, v126, v125, v22, v119, v123, v20, v19], upward_exposed: [v19, v21, v22, v20], params_defs: []
// [Asm] # live_in: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3], live_out: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_55:
// [Asm]   slliw v125, v19, 2  # live: [v5, v21, v10, v125, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   add v126, v22, v125  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v126, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   lw v119, 0(v126)  # live: [v5, v21, v10, v22, v119, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   slliw v123, v19, 2  # live: [v5, v21, v10, v22, v119, v123, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   add v124, v21, v123  # live: [v5, v21, v10, v22, v119, v7, s11, v9, v124, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   sw v119, 0(v124)  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   addi v121, v19, 1  # live: [v5, v21, v10, v121, v22, v7, s11, v9, zero, v20, v8, v4, v6, v15, v3]
// [Asm] # control
// [Asm]   mv v19, v121  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   mv v20, v20  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   mv v21, v21  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   mv v22, v22  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   j .compute40.432_18_54  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v18], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v18]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_2:
// [Asm] # control
// [Asm]   mv v18, zero  # live: [v18]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v18, a0], upward_exposed: [v18], params_defs: [v18]
// [Asm] # live_in: [v18], live_out: []
// [Asm] # block parameters: [v18]
// [Asm] .compute40.432_18_6:
// [Asm] # control
// [Asm]   mv a0, v18  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3], live_out: [v25, v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_56:
// [Asm] # control
// [Asm]   mv v25, zero  # live: [v25, v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v26], uses: [v25], upward_exposed: [v25], params_defs: [v25]
// [Asm] # live_in: [v25, v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3], live_out: [v5, v10, v26, zero, v7, v8, v4, v6, v15, s11, v9, v3]
// [Asm] # block parameters: [v25]
// [Asm] .compute40.432_18_57:
// [Asm] # control
// [Asm]   mv v26, v25  # live: [v5, v10, v26, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, ft0, ft1, a1, s11, fa1, fa2, ft6, v29, fa6, v27, a4, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, zero, v13, v29, v7, v4, a1, v6, s11, v15], upward_exposed: [v4, v6, v15, s11, zero, v7], params_defs: [v26]
// [Asm] # live_in: [v5, v10, v26, zero, v7, v8, v4, v6, v15, s11, v9, v3], live_out: [v5, v10, v13, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] # block parameters: [v26]
// [Asm] .compute40.432_18_9:
// [Asm]   # save_ctx2  # live: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv a0, v15  # live: [v5, v10, a0, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv a1, v6  # live: [v5, v10, a0, v7, a1, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   call init_count59.447l3_3  # live: [v5, v10, a0, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv v27, a0  # live: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   # restore_ctx2  # live: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   sw zero, 0(v7)  # live: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   lw v29, 0(v4)  # live: [v5, v10, v7, s11, v9, zero, v29, v8, v4, v6, v15, v3]
// [Asm]   addi v13, s11, -4  # live: [v5, v10, v13, v7, v9, zero, v29, v8, v4, v6, v15, v3]
// [Asm]   andi s11, v13, -8  # live: [v5, v10, v13, v7, s11, v9, zero, v29, v8, v4, v6, v15, v3]
// [Asm]   sw v29, 0(v13)  # live: [v5, v10, v13, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v32, v31, v33], uses: [v4, v13, v7], upward_exposed: [v4, v13, v7], params_defs: []
// [Asm] # live_in: [v5, v10, v13, zero, v8, v7, v4, v6, s11, v15, v9, v3], live_out: [v5, v10, v7, v32, s11, v31, v9, v33, zero, v8, v4, v6, v15, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_36:
// [Asm] # control
// [Asm]   mv v31, v13  # live: [v5, v10, v7, s11, v31, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv v32, v4  # live: [v5, v10, v7, v32, s11, v31, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv v33, v7  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v34], uses: [v31, v34, zero], upward_exposed: [v31, zero], params_defs: [v32, v31, v33]
// [Asm] # live_in: [v5, v10, v7, v32, s11, v31, v9, v33, zero, v8, v4, v6, v15, v3], live_out: [v5, v10, v7, v32, s11, v31, v9, v33, zero, v8, v4, v6, v15, v3]
// [Asm] # block parameters: [v31, v32, v33]
// [Asm] .compute40.432_18_31:
// [Asm]   lw v34, 0(v31)  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v34, v3]
// [Asm] # control
// [Asm]   beq v34, zero, .compute40.432_18_32  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v14, s11], uses: [v14, s11, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [v5, v10, v7, v32, s11, v31, v9, v33, zero, v8, v4, v6, v15, v3], live_out: [v14, v5, v10, v7, v32, s11, v31, v9, v33, zero, v8, v4, v6, v15, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_33:
// [Asm]   addi v14, s11, -4  # live: [v14, v5, v10, v7, v32, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   andi s11, v14, -8  # live: [v14, v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   sw zero, 0(v14)  # live: [v14, v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v37, v38, v39, v40], uses: [v32, v14, v31, zero], upward_exposed: [v32, v14, v31, zero], params_defs: []
// [Asm] # live_in: [v14, v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3], live_out: [v3, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v40]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_45:
// [Asm] # control
// [Asm]   mv v37, zero  # live: [v5, v14, v10, v7, v37, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv v38, v14  # live: [v5, v10, v7, v37, v32, s11, v31, v33, v9, zero, v8, v38, v4, v6, v15, v3]
// [Asm]   mv v39, v31  # live: [v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm]   mv v40, v32  # live: [v40, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v41, v192, v42], uses: [v41, v37, v192, v42, v39], upward_exposed: [v37, v39], params_defs: [v37, v38, v39, v40]
// [Asm] # live_in: [v3, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v40], live_out: [v3, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v40]
// [Asm] # block parameters: [v37, v38, v39, v40]
// [Asm] .compute40.432_18_40:
// [Asm]   lw v41, 0(v39)  # live: [v40, v5, v10, v7, v37, v32, v41, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm]   li v192, 2  # live: [v40, v5, v10, v7, v37, v32, v41, s11, v192, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm]   div v42, v41, v192  # live: [v40, v5, v10, v42, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] # control
// [Asm]   blt v42, v37, .compute40.432_18_42  # live: [v40, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v174, v58, v179, v53, v37, v187, v186, v51, v175, v182, v59, v181, v180, v57, v61, v55, v54], uses: [v55, v40, v174, v58, v53, v179, v37, v187, v39, v51, v186, v175, v182, v38, v59, v180, v181, v57, v61, v54], upward_exposed: [v37, v38, v39, v40], params_defs: []
// [Asm] # live_in: [v3, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v40], live_out: [v3, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v40]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_41:
// [Asm]   slliw v186, v37, 2  # live: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, v186, zero, v8, v38, v4, v6, v15, v3]
// [Asm]   add v187, v40, v186  # live: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, v187, zero, v8, v38, v4, v6, v15, v3]
// [Asm]   lw v51, 0(v187)  # live: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, v51, zero, v8, v38, v4, v6, v15, v3]
// [Asm]   sw v51, 0(v38)  # live: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm]   lw v53, 0(v39)  # live: [v40, v5, v10, v53, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm]   sub v54, v53, v37  # live: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v54, v3]
// [Asm]   slliw v181, v54, 2  # live: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v181, v15, v3]
// [Asm]   add v182, v40, v181  # live: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, v182, zero, v8, v38, v4, v6, v15, v3]
// [Asm]   lw v55, 0(v182)  # live: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v55, v3]
// [Asm]   slliw v179, v37, 2  # live: [v40, v5, v10, v179, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v55, v3]
// [Asm]   add v180, v40, v179  # live: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v180, v15, v55, v3]
// [Asm]   sw v55, 0(v180)  # live: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm]   lw v57, 0(v39)  # live: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v57, v3]
// [Asm]   sub v58, v57, v37  # live: [v40, v5, v58, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm]   lw v59, 0(v38)  # live: [v40, v5, v58, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v59, v6, v15, v3]
// [Asm]   slliw v174, v58, 2  # live: [v40, v174, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v59, v6, v15, v3]
// [Asm]   add v175, v40, v174  # live: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, v175, zero, v8, v38, v4, v59, v6, v15, v3]
// [Asm]   sw v59, 0(v175)  # live: [v40, v5, v10, v7, v32, v37, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm]   addi v61, v37, 1  # live: [v40, v5, v10, v7, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v61, v3]
// [Asm] # control
// [Asm]   mv v37, v61  # live: [v40, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm]   mv v38, v38  # live: [v40, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm]   mv v39, v39  # live: [v40, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm]   mv v40, v40  # live: [v40, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm]   j .compute40.432_18_40  # live: [v40, v5, v10, v7, v37, v32, s11, v31, v33, v9, v39, zero, v8, v38, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v62], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3], live_out: [v62, v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_32:
// [Asm] # control
// [Asm]   mv v62, zero  # live: [v62, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v63], uses: [v62], upward_exposed: [v62], params_defs: [v62]
// [Asm] # live_in: [v62, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3], live_out: [v63, v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] # block parameters: [v62]
// [Asm] .compute40.432_18_34:
// [Asm] # control
// [Asm]   mv v63, v62  # live: [v63, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v65, v64], uses: [v7, v65, v64, v8], upward_exposed: [v7, v8], params_defs: [v63]
// [Asm] # live_in: [v63, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3], live_out: [v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] # block parameters: [v63]
// [Asm] .compute40.432_18_10:
// [Asm]   lw v64, 0(v8)  # live: [v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v64, v3]
// [Asm]   lw v65, 0(v7)  # live: [v3, v5, v10, zero, v7, v8, v4, v65, v6, v15, s11, v9, v64]
// [Asm] # control
// [Asm]   blt v65, v64, .compute40.432_18_4  # live: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v69, v67], uses: [v8, zero, v67, v7], upward_exposed: [v8, zero, v7], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3], live_out: [v69, v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_3:
// [Asm]   lw v67, 0(v7)  # live: [v5, v10, zero, v67, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm]   sw v67, 0(v8)  # live: [v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] # control
// [Asm]   mv v69, zero  # live: [v69, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v165, v11, v155, v71, v158, v79, v78, s11, v12, v160, v73, v72, v75, v77, v70, v74, v163, v76], uses: [v165, v11, v155, v71, v10, v158, v79, v78, v7, s11, v12, v160, v9, v73, v72, v75, zero, v77, v74, v70, v163, v76], upward_exposed: [v10, s11, v9, zero, v7], params_defs: [v69]
// [Asm] # live_in: [v69, v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3], live_out: [v11, v5, v10, v7, v12, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] # block parameters: [v69]
// [Asm] .compute40.432_18_5:
// [Asm]   lw v70, 0(v9)  # live: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v70, v15, v3]
// [Asm]   lw v71, 0(v7)  # live: [v5, v71, v10, v7, s11, v9, zero, v8, v4, v6, v70, v15, v3]
// [Asm]   lw v72, 0(v10)  # live: [v5, v71, v10, v7, s11, v9, v72, zero, v8, v4, v6, v70, v15, v3]
// [Asm]   li v165, 2  # live: [v165, v5, v71, v10, v7, s11, v9, v72, zero, v8, v4, v6, v70, v15, v3]
// [Asm]   div v73, v72, v165  # live: [v5, v71, v10, v7, s11, v9, v73, v72, zero, v8, v4, v6, v70, v15, v3]
// [Asm]   li v163, 2  # live: [v5, v71, v10, v7, s11, v9, v73, v72, zero, v8, v4, v6, v70, v15, v163, v3]
// [Asm]   mul v74, v73, v163  # live: [v5, v71, v10, v7, s11, v9, v72, zero, v8, v4, v6, v70, v74, v15, v3]
// [Asm]   sub v75, v72, v74  # live: [v5, v71, v10, v7, s11, v9, v75, zero, v8, v4, v6, v70, v15, v3]
// [Asm]   li v160, 2  # live: [v5, v71, v10, v7, s11, v160, v9, v75, zero, v8, v4, v6, v70, v15, v3]
// [Asm]   mul v76, v75, v160  # live: [v76, v5, v71, v10, v7, s11, v9, zero, v8, v4, v6, v70, v15, v3]
// [Asm]   li v158, 1  # live: [v76, v5, v71, v10, v158, v7, s11, v9, zero, v8, v4, v6, v70, v15, v3]
// [Asm]   sub v77, v158, v76  # live: [v5, v71, v10, v7, s11, v9, zero, v77, v8, v4, v6, v70, v15, v3]
// [Asm]   mul v78, v71, v77  # live: [v5, v10, v78, v7, s11, v9, zero, v8, v4, v6, v70, v15, v3]
// [Asm]   add v79, v70, v78  # live: [v5, v10, v79, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   sw v79, 0(v9)  # live: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   addi v11, s11, -4  # live: [v11, v5, v10, v7, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   andi s11, v11, -8  # live: [v11, v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   li v155, 1  # live: [v11, v155, v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   sw v155, 0(v11)  # live: [v11, v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   addi v12, s11, -4  # live: [v11, v5, v10, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   andi s11, v12, -8  # live: [v11, v5, v10, v7, v12, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   sw zero, 0(v12)  # live: [v11, v5, v10, zero, v7, v8, v4, v6, v12, s11, v15, v9, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v84, v88, v87, v83, v86, v85], uses: [v11, v6, v5, v15, v12, v3], upward_exposed: [v11, v6, v5, v15, v12, v3], params_defs: []
// [Asm] # live_in: [v11, v5, v10, v7, v12, s11, v9, zero, v8, v4, v6, v15, v3], live_out: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_71:
// [Asm] # control
// [Asm]   mv v83, v3  # live: [v11, v5, v10, v7, s11, v12, v9, zero, v8, v4, v6, v83, v15, v3]
// [Asm]   mv v84, v12  # live: [v11, v5, v10, v7, s11, v9, zero, v8, v84, v4, v6, v83, v15, v3]
// [Asm]   mv v85, v11  # live: [v5, v10, v7, s11, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm]   mv v86, v15  # live: [v5, v10, v7, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm]   mv v87, v6  # live: [v87, v5, v10, v7, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm]   mv v88, v5  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v151, v89], uses: [v151, v89, v85], upward_exposed: [v85], params_defs: [v84, v88, v87, v83, v86, v85]
// [Asm] # live_in: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3], live_out: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] # block parameters: [v83, v84, v85, v86, v87, v88]
// [Asm] .compute40.432_18_60:
// [Asm]   lw v89, 0(v85)  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v89, v3]
// [Asm] # control
// [Asm]   li v151, 1  # live: [v3, v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v151, v4, v6, v15, v83, v89]
// [Asm]   bne v89, v151, .compute40.432_18_62  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v96], uses: [v83, v86, v96], upward_exposed: [v83, v86], params_defs: []
// [Asm] # live_in: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3], live_out: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_61:
// [Asm]   lw v96, 0(v86)  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v96, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] # control
// [Asm]   beq v96, v83, .compute40.432_18_63  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v135, v132, t1, ft0, ft1, a1, v108, v143, fa1, v98, v106, v109, v142, fa2, v130, ft6, fa6, a4, v105, a6, ft5, ft10, v102, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v138, ft8, v101, a7, fa7, t3, t0, fa5, fa3, ft3, fa0, v104, v136, t4, t2, v139, v131, v100], uses: [v132, v87, a0, v88, a2, a1, v108, v143, v86, v138, v101, v98, v106, v109, v142, v130, zero, v84, v104, v105, v136, v102, v139, v131, v135], upward_exposed: [v88, v84, v87, v86, zero], params_defs: []
// [Asm] # live_in: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3], live_out: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_64:
// [Asm]   lw v98, 0(v88)  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v98, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm]   sw v98, 0(v84)  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm]   # save_ctx2  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm]   mv a0, zero  # live: [v87, v5, v10, a0, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm]   mv a1, v86  # live: [v87, v5, v10, a0, v7, v88, a1, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm]   mv a2, v88  # live: [v87, v5, v10, a0, v7, v88, a2, a1, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm]   call move_perm1_forward197.568l6_6  # live: [v87, v5, v10, a0, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm]   mv v100, a0  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm]   # restore_ctx2  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm]   lw v101, 0(v86)  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v101, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm]   lw v102, 0(v84)  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v101, zero, v85, v8, v84, v4, v6, v15, v83, v102, v3]
// [Asm]   slliw v142, v101, 2  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v142, zero, v85, v8, v84, v4, v6, v15, v83, v102, v3]
// [Asm]   add v143, v88, v142  # live: [v87, v5, v10, v7, v88, s11, v143, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v102, v3]
// [Asm]   sw v102, 0(v143)  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm]   lw v104, 0(v86)  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v104, v4, v6, v15, v83, v3]
// [Asm]   slliw v138, v104, 2  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v138, zero, v85, v8, v84, v104, v4, v6, v15, v83, v3]
// [Asm]   add v139, v87, v138  # live: [v3, v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v104, v4, v6, v15, v83, v139]
// [Asm]   lw v105, 0(v139)  # live: [v3, v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v104, v105, v4, v6, v15, v83]
// [Asm]   addi v106, v105, -1  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v106, zero, v85, v8, v84, v104, v4, v6, v83, v15, v3]
// [Asm]   slliw v135, v104, 2  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v106, zero, v85, v8, v84, v4, v6, v15, v83, v135, v3]
// [Asm]   add v136, v87, v135  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v106, zero, v85, v8, v84, v136, v4, v6, v15, v83, v3]
// [Asm]   sw v106, 0(v136)  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm]   lw v108, 0(v86)  # live: [v87, v5, v10, v7, v88, v108, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm]   slliw v131, v108, 2  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v131, v3]
// [Asm]   add v132, v87, v131  # live: [v132, v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm]   lw v109, 0(v132)  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v109, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] # control
// [Asm]   li v130, 1  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v109, v130, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm]   bge v109, v130, .compute40.432_18_65  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v115, v112, v111], uses: [v112, v111, v86, zero], upward_exposed: [v86, zero], params_defs: []
// [Asm] # live_in: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3], live_out: [v87, v5, v10, v7, v88, s11, v86, v9, v115, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_66:
// [Asm]   lw v111, 0(v86)  # live: [v87, v5, v10, v7, v88, v111, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm]   addi v112, v111, 1  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v112, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm]   sw v112, 0(v86)  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] # control
// [Asm]   mv v115, zero  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v115, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] 
// [Asm] # block info: defs: [v118], uses: [zero], upward_exposed: [zero], params_defs: [v115]
// [Asm] # live_in: [v87, v5, v10, v7, v88, s11, v86, v9, v115, zero, v85, v8, v84, v4, v6, v15, v83, v3], live_out: [v87, v5, v10, v7, v88, s11, v86, v9, v118, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] # block parameters: [v115]
// [Asm] .compute40.432_18_67:
// [Asm] # control
// [Asm]   mv v118, zero  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v118, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v84, v88, v87, v83, v86, v85], upward_exposed: [v84, v88, v87, v83, v86, v85], params_defs: [v118]
// [Asm] # live_in: [v87, v5, v10, v7, v88, s11, v86, v9, v118, zero, v85, v8, v84, v4, v6, v15, v83, v3], live_out: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] # block parameters: [v118]
// [Asm] .compute40.432_18_68:
// [Asm] # control
// [Asm]   mv v83, v83  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm]   mv v84, v84  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm]   mv v85, v85  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm]   mv v86, v86  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm]   mv v87, v87  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm]   mv v88, v88  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm]   j .compute40.432_18_60  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v69], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3], live_out: [v69, v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_4:
// [Asm] # control
// [Asm]   mv v69, zero  # live: [v69, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm]   j .compute40.432_18_5  # live: [v69, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v91], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3], live_out: [v91, v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_62:
// [Asm] # control
// [Asm]   mv v91, zero  # live: [v91, v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v92], uses: [v91], upward_exposed: [v91], params_defs: [v91]
// [Asm] # live_in: [v91, v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3], live_out: [v5, v10, zero, v7, v8, v92, v4, v6, s11, v15, v9, v3]
// [Asm] # block parameters: [v91]
// [Asm] .compute40.432_18_69:
// [Asm] # control
// [Asm]   mv v92, v91  # live: [v5, v10, zero, v8, v7, v92, v4, v6, s11, v15, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v94, v93], uses: [v94, v10, v15, v93], upward_exposed: [v10, v15], params_defs: [v92]
// [Asm] # live_in: [v5, v10, zero, v7, v8, v92, v4, v6, s11, v15, v9, v3], live_out: [v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3]
// [Asm] # block parameters: [v92]
// [Asm] .compute40.432_18_11:
// [Asm]   lw v93, 0(v10)  # live: [v93, v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm]   addi v94, v93, 1  # live: [v94, v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm]   sw v94, 0(v10)  # live: [v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] # control
// [Asm]   mv v15, v15  # live: [v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm]   j .compute40.432_18_0  # live: [v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v118], uses: [v86, zero, v85], upward_exposed: [v86, zero, v85], params_defs: []
// [Asm] # live_in: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3], live_out: [v87, v5, v10, v7, v88, s11, v86, v9, v118, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_63:
// [Asm]   sw zero, 0(v85)  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm]   sw zero, 0(v86)  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] # control
// [Asm]   mv v118, zero  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v118, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm]   j .compute40.432_18_68  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v118, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] 
// [Asm] # block info: defs: [v115], uses: [zero, v85], upward_exposed: [zero, v85], params_defs: []
// [Asm] # live_in: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v83, v15, v3], live_out: [v87, v5, v10, v7, v88, s11, v86, v9, v115, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_65:
// [Asm]   sw zero, 0(v85)  # live: [v87, v5, v10, v7, v88, s11, v86, v9, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] # control
// [Asm]   mv v115, zero  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v115, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm]   j .compute40.432_18_67  # live: [v87, v5, v10, v7, v88, s11, v86, v9, v115, zero, v85, v8, v84, v4, v6, v15, v83, v3]
// [Asm] 
// [Asm] # block info: defs: [v44], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, v10, v7, v32, s11, v31, v9, v33, zero, v8, v4, v6, v15, v3], live_out: [v5, v10, v7, v32, s11, v31, v44, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] # block parameters: []
// [Asm] .compute40.432_18_42:
// [Asm] # control
// [Asm]   mv v44, zero  # live: [v5, v10, v7, v32, s11, v44, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v45], uses: [v44], upward_exposed: [v44], params_defs: [v44]
// [Asm] # live_in: [v5, v10, v7, v32, s11, v31, v44, v33, v9, zero, v8, v4, v6, v15, v3], live_out: [v5, v10, v7, v32, s11, v31, v9, v33, zero, v45, v8, v4, v6, v15, v3]
// [Asm] # block parameters: [v44]
// [Asm] .compute40.432_18_43:
// [Asm] # control
// [Asm]   mv v45, v44  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v45, v8, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v46, v48, v49], uses: [v46, v48, v49, v32, v31, v33], upward_exposed: [v32, v31, v33], params_defs: [v45]
// [Asm] # live_in: [v5, v10, v7, v32, s11, v31, v9, v33, zero, v45, v8, v4, v6, v15, v3], live_out: [v5, v10, v7, v32, s11, v31, v9, v33, zero, v8, v4, v6, v15, v3]
// [Asm] # block parameters: [v45]
// [Asm] .compute40.432_18_37:
// [Asm]   lw v46, 0(v32)  # live: [v5, v46, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   sw v46, 0(v31)  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   lw v48, 0(v33)  # live: [v5, v10, v7, v32, s11, v31, v33, v9, v48, zero, v8, v4, v6, v15, v3]
// [Asm]   addi v49, v48, 1  # live: [v5, v10, v49, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   sw v49, 0(v33)  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] # control
// [Asm]   mv v31, v31  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv v32, v32  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv v33, v33  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   j .compute40.432_18_31  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("fannkuch", Tuple([Int, Int])), args: [("n", Int)], body: LetRec({name: ("gen_perm1", Array(Int)), args: [("len", Int)], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))}, Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("gen_perm1", Array(Int)), args: [("len", Int)], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))}, Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr")))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))
// [Knf] build_knf: App(Var("init_arr"), [Int(0)])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))))
// [Knf] build_knf: App(Var("gen_perm1"), [Var("n")])
// [Knf] build_knf: Var("gen_perm1")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))
// [Knf] build_knf: Array(Int(1), Var("n"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))
// [Knf] build_knf: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i")))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm1"), Var("i"))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("copy_perm")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))
// [Knf] build_knf: App(Var("copy_perm"), [Int(0)])
// [Knf] build_knf: Var("copy_perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)
// [Knf] build_knf: If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit)
// [Knf] build_knf: If(Eq(Get(Var("r"), Int(0)), Int(1)), Unit, Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), [])))
// [Knf] build_knf: Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))
// [Knf] build_knf: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("init_count"), [])
// [Knf] build_knf: Var("init_count")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))
// [Knf] build_knf: App(Var("init_count"), [])
// [Knf] build_knf: Var("init_count")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))
// [Knf] build_knf: Put(Var("flips"), Int(0), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))
// [Knf] build_knf: Array(Int(1), Get(Var("perm"), Int(0)))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("perm"), Int(0))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))
// [Knf] build_knf: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)
// [Knf] build_knf: If(Eq(Get(Var("k"), Int(0)), Int(0)), Unit, Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Put(Var("t"), Int(0), Get(Var("perm"), Var("i")))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm"), Var("i"))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0)))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("t"), Int(0))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("flip_loop")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))))
// [Knf] build_knf: App(Var("flip_loop"), [Int(0)])
// [Knf] build_knf: Var("flip_loop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))
// [Knf] build_knf: Put(Var("k"), Int(0), Get(Var("perm"), Int(0)))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm"), Int(0))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))
// [Knf] build_knf: Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("do_flip"), [Var("k")])
// [Knf] build_knf: Var("do_flip")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))
// [Knf] build_knf: App(Var("do_flip"), [Var("k")])
// [Knf] build_knf: Var("do_flip")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))
// [Knf] build_knf: If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit)
// [Knf] build_knf: Get(Var("max_flips"), Int(0))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0)))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))
// [Knf] build_knf: Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int)))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("check_sum"), Int(0))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int))
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))
// [Knf] build_knf: Array(Int(1), Bool(true))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))
// [Knf] build_knf: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)
// [Knf] build_knf: Get(Var("go"), Int(0))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), []))
// [Knf] build_knf: If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))))))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit))
// [Knf] build_knf: Put(Var("go"), Int(0), Bool(false))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)
// [Knf] build_knf: Put(Var("r"), Int(0), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))
// [Knf] build_knf: Put(Var("t"), Int(0), Get(Var("perm1"), Int(0)))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm1"), Int(0))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit))
// [Knf] build_knf: Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)
// [Knf] build_knf: App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("move_perm1_forward")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))
// [Knf] build_knf: App(Var("move_perm1_forward"), [Int(0)])
// [Knf] build_knf: Var("move_perm1_forward")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))
// [Knf] build_knf: Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0)))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("t"), Int(0))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))
// [Knf] build_knf: Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("count"), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)
// [Knf] build_knf: If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("count"), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Put(Var("go"), Int(0), Bool(false))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("go_loop"), [])
// [Knf] build_knf: Var("go_loop")
// [Knf] build_knf: Unit
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))
// [Knf] build_knf: App(Var("go_loop"), [])
// [Knf] build_knf: Var("go_loop")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))
// [Knf] build_knf: Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("compute"), [Var("r")])
// [Knf] build_knf: Var("compute")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))
// [Knf] build_knf: App(Var("compute"), [Var("r")])
// [Knf] build_knf: Var("compute")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])
// [Knf] build_knf: Get(Var("max_flips"), Int(0))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("check_sum"), Int(0))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))}, App(Var("main"), []))
// [Knf] build_knf: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))
// [Knf] build_knf: App(Var("fannkuch"), [Int(9)])
// [Knf] build_knf: Var("fannkuch")
// [Knf] build_knf: Int(9)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")]))
// [Knf] build_knf: App(Var("print_int"), [Var("check_sum")])
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: App(Var("print_int"), [Var("max_flips")])
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_20
// [Main]   .type T$start_20, @function
// [Main] # leaf false
// [Main] T$start_20:
// [Main] .T$start_20_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main262l0_8
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main262l0_8
// [Main]   .type main262l0_8, @function
// [Main] # leaf false
// [Main] main262l0_8:
// [Main] .main262l0_8_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   li a0, 9
// [Main]   call gen_perm14.400l1_1
// [Main]   addi a1, s11, -36
// [Main]   andi s11, a1, -8
// [Main]   sw zero, 0(a1)
// [Main]   sw zero, 4(a1)
// [Main]   sw zero, 8(a1)
// [Main]   sw zero, 12(a1)
// [Main]   sw zero, 16(a1)
// [Main]   sw zero, 20(a1)
// [Main]   sw zero, 24(a1)
// [Main]   sw zero, 28(a1)
// [Main]   sw zero, 32(a1)
// [Main]   addi a2, s11, -36
// [Main]   andi s11, a2, -8
// [Main]   sw zero, 0(a2)
// [Main]   sw zero, 4(a2)
// [Main]   sw zero, 8(a2)
// [Main]   sw zero, 12(a2)
// [Main]   sw zero, 16(a2)
// [Main]   sw zero, 20(a2)
// [Main]   sw zero, 24(a2)
// [Main]   sw zero, 28(a2)
// [Main]   sw zero, 32(a2)
// [Main]   addi a3, s11, -4
// [Main]   andi s11, a3, -8
// [Main]   sw zero, 0(a3)
// [Main]   addi s0, s11, -4
// [Main]   andi s11, s0, -8
// [Main]   sw zero, 0(s0)
// [Main]   addi s1, s11, -4
// [Main]   andi s11, s1, -8
// [Main]   sw zero, 0(s1)
// [Main]   addi a4, s11, -4
// [Main]   andi s11, a4, -8
// [Main]   sw zero, 0(a4)
// [Main]   addi a5, s11, -4
// [Main]   andi s11, a5, -8
// [Main]   li a6, 9
// [Main]   sw a6, 0(a5)
// [Main]   addi a6, s11, -72
// [Main]   andi s11, a6, -8
// [Main]   la a7, compute40.432_18
// [Main]   sd a7, 0(a6)
// [Main]   li a7, 9
// [Main]   sd a7, 8(a6)
// [Main]   sd a1, 16(a6)
// [Main]   sd a0, 24(a6)
// [Main]   sd a2, 32(a6)
// [Main]   sd a3, 40(a6)
// [Main]   sd s0, 48(a6)
// [Main]   sd s1, 56(a6)
// [Main]   sd a4, 64(a6)
// [Main]   mv s10, a6
// [Main]   ld a1, 0(a6)
// [Main]   mv a0, a5
// [Main]   jalr a1
// [Main]   lw a0, 0(s0)
// [Main]   lw a2, 0(s1)
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   sw a0, 0(a1)
// [Main]   sw a2, 4(a1)
// [Main]   lw s0, 0(a1)
// [Main]   lw a0, 4(a1)
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl gen_perm14.400l1_1
// [Main]   .type gen_perm14.400l1_1, @function
// [Main] # leaf false
// [Main] gen_perm14.400l1_1:
// [Main] .gen_perm14.400l1_1_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a2, a0
// [Main]   slliw a0, a2, 2
// [Main]   sub s0, s11, a0
// [Main]   andi s11, s0, -8
// [Main]   mv a1, a2
// [Main]   mv a0, zero
// [Main]   mv a1, s0
// [Main]   call init_arr9.404l2_0
// [Main]   mv a0, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_arr9.404l2_0
// [Main]   .type init_arr9.404l2_0, @function
// [Main] # leaf true
// [Main] init_arr9.404l2_0:
// [Main] .init_arr9.404l2_0_5:
// [Main]   mv a3, a0
// [Main]   mv a0, a2
// [Main]   mv a2, a3
// [Main]   mv a3, a0
// [Main] 
// [Main] .init_arr9.404l2_0_0:
// [Main]   addi a0, a3, -1
// [Main]   blt a0, a2, .init_arr9.404l2_0_2
// [Main] 
// [Main] .init_arr9.404l2_0_1:
// [Main]   slliw a0, a2, 2
// [Main]   add a0, a1, a0
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a2, 1
// [Main]   mv a2, a0
// [Main]   j .init_arr9.404l2_0_0
// [Main] 
// [Main] .init_arr9.404l2_0_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .init_arr9.404l2_0_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_count59.447l3_3
// [Main]   .type init_count59.447l3_3, @function
// [Main] # leaf false
// [Main] init_count59.447l3_3:
// [Main] .init_count59.447l3_3_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a2, 0(a0)
// [Main]   li a3, 1
// [Main]   beq a2, a3, .init_count59.447l3_3_1
// [Main] 
// [Main] .init_count59.447l3_3_2:
// [Main]   lw a2, 0(a0)
// [Main]   addi a3, a2, -1
// [Main]   slliw a3, a3, 2
// [Main]   add a3, a1, a3
// [Main]   sw a2, 0(a3)
// [Main]   lw a2, 0(a0)
// [Main]   addi a2, a2, -1
// [Main]   sw a2, 0(a0)
// [Main]   call init_count59.447l3_3
// [Main] 
// [Main] .init_count59.447l3_3_3:
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .init_count59.447l3_3_1:
// [Main]   mv a0, zero
// [Main]   j .init_count59.447l3_3_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_20
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl move_perm1_forward197.568l6_6
// [Main]   .type move_perm1_forward197.568l6_6, @function
// [Main] # leaf false
// [Main] move_perm1_forward197.568l6_6:
// [Main] .move_perm1_forward197.568l6_6_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a3, 0(a1)
// [Main]   addi a3, a3, -1
// [Main]   blt a3, a0, .move_perm1_forward197.568l6_6_2
// [Main] 
// [Main] .move_perm1_forward197.568l6_6_1:
// [Main]   addi a3, a0, 1
// [Main]   slliw a4, a3, 2
// [Main]   add a4, a2, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a2, a0
// [Main]   sw a4, 0(a0)
// [Main]   mv a0, a3
// [Main]   call move_perm1_forward197.568l6_6
// [Main]   mv a0, zero
// [Main] 
// [Main] .move_perm1_forward197.568l6_6_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .move_perm1_forward197.568l6_6_2:
// [Main]   mv a0, zero
// [Main]   j .move_perm1_forward197.568l6_6_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl compute40.432_18
// [Main]   .type compute40.432_18, @function
// [Main] # leaf false
// [Main] compute40.432_18:
// [Main] .compute40.432_18_8:
// [Main]   addi sp, sp, -96
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   sd s8, 72(sp)
// [Main]   sd s9, 80(sp)
// [Main]   sd s10, 88(sp)
// [Main]   mv a1, s10
// [Main]   lw s8, 8(a1)
// [Main]   ld s4, 16(a1)
// [Main]   ld s0, 24(a1)
// [Main]   ld s5, 32(a1)
// [Main]   ld s3, 40(a1)
// [Main]   ld s2, 48(a1)
// [Main]   ld s7, 56(a1)
// [Main]   ld s1, 64(a1)
// [Main]   mv s6, a0
// [Main] 
// [Main] .compute40.432_18_0:
// [Main]   lw a0, 0(s6)
// [Main]   li a1, 1
// [Main]   blt a0, a1, .compute40.432_18_2
// [Main] 
// [Main] .compute40.432_18_1:
// [Main] 
// [Main] .compute40.432_18_59:
// [Main]   mv a0, zero
// [Main]   mv a2, s8
// [Main]   mv a3, s4
// [Main]   mv a4, s0
// [Main] 
// [Main] .compute40.432_18_54:
// [Main]   addi a1, a2, -1
// [Main]   blt a1, a0, .compute40.432_18_56
// [Main] 
// [Main] .compute40.432_18_55:
// [Main]   slliw a1, a0, 2
// [Main]   add a1, a4, a1
// [Main]   lw a1, 0(a1)
// [Main]   slliw a5, a0, 2
// [Main]   add a5, a3, a5
// [Main]   sw a1, 0(a5)
// [Main]   addi a0, a0, 1
// [Main]   j .compute40.432_18_54
// [Main] 
// [Main] .compute40.432_18_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.432_18_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   ld s8, 72(sp)
// [Main]   ld s9, 80(sp)
// [Main]   ld s10, 88(sp)
// [Main]   addi sp, sp, 96
// [Main]   ret
// [Main] 
// [Main] .compute40.432_18_56:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.432_18_57:
// [Main] 
// [Main] .compute40.432_18_9:
// [Main]   mv a0, s6
// [Main]   mv a1, s5
// [Main]   call init_count59.447l3_3
// [Main]   sw zero, 0(s3)
// [Main]   lw a0, 0(s4)
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw a0, 0(a1)
// [Main] 
// [Main] .compute40.432_18_36:
// [Main]   mv a3, a1
// [Main]   mv a1, s4
// [Main]   mv a6, s3
// [Main] 
// [Main] .compute40.432_18_31:
// [Main]   lw a0, 0(a3)
// [Main]   beq a0, zero, .compute40.432_18_32
// [Main] 
// [Main] .compute40.432_18_33:
// [Main]   addi a0, s11, -4
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main] 
// [Main] .compute40.432_18_45:
// [Main]   mv a2, zero
// [Main]   mv a4, a0
// [Main] 
// [Main] .compute40.432_18_40:
// [Main]   lw a0, 0(a3)
// [Main]   li a5, 2
// [Main]   div a0, a0, a5
// [Main]   blt a0, a2, .compute40.432_18_42
// [Main] 
// [Main] .compute40.432_18_41:
// [Main]   slliw a0, a2, 2
// [Main]   add a0, a1, a0
// [Main]   lw a0, 0(a0)
// [Main]   sw a0, 0(a4)
// [Main]   lw a0, 0(a3)
// [Main]   sub a0, a0, a2
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a1, a0
// [Main]   lw a0, 0(a0)
// [Main]   slliw a5, a2, 2
// [Main]   add a5, a1, a5
// [Main]   sw a0, 0(a5)
// [Main]   lw a0, 0(a3)
// [Main]   sub a0, a0, a2
// [Main]   lw a5, 0(a4)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a1, a0
// [Main]   sw a5, 0(a0)
// [Main]   addi a0, a2, 1
// [Main]   mv a2, a0
// [Main]   j .compute40.432_18_40
// [Main] 
// [Main] .compute40.432_18_32:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.432_18_34:
// [Main] 
// [Main] .compute40.432_18_10:
// [Main]   lw a0, 0(s2)
// [Main]   lw a1, 0(s3)
// [Main]   blt a1, a0, .compute40.432_18_4
// [Main] 
// [Main] .compute40.432_18_3:
// [Main]   lw a0, 0(s3)
// [Main]   sw a0, 0(s2)
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.432_18_5:
// [Main]   lw a0, 0(s7)
// [Main]   lw a1, 0(s3)
// [Main]   lw a2, 0(s1)
// [Main]   li a3, 2
// [Main]   div a3, a2, a3
// [Main]   li a4, 2
// [Main]   mul a3, a3, a4
// [Main]   sub a2, a2, a3
// [Main]   li a3, 2
// [Main]   mul a2, a2, a3
// [Main]   li a3, 1
// [Main]   sub a2, a3, a2
// [Main]   mul a1, a1, a2
// [Main]   add a0, a0, a1
// [Main]   sw a0, 0(s7)
// [Main]   addi a0, s11, -4
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw zero, 0(a1)
// [Main] 
// [Main] .compute40.432_18_71:
// [Main]   mv s9, a1
// [Main]   mv s10, a0
// [Main] 
// [Main] .compute40.432_18_60:
// [Main]   lw a0, 0(s10)
// [Main]   li a1, 1
// [Main]   bne a0, a1, .compute40.432_18_62
// [Main] 
// [Main] .compute40.432_18_61:
// [Main]   lw a0, 0(s6)
// [Main]   beq a0, s8, .compute40.432_18_63
// [Main] 
// [Main] .compute40.432_18_64:
// [Main]   lw a0, 0(s0)
// [Main]   sw a0, 0(s9)
// [Main]   mv a0, zero
// [Main]   mv a1, s6
// [Main]   mv a2, s0
// [Main]   call move_perm1_forward197.568l6_6
// [Main]   lw a0, 0(s6)
// [Main]   lw a1, 0(s9)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s0, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s6)
// [Main]   slliw a1, a0, 2
// [Main]   add a1, s5, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s5, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s6)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s5, a0
// [Main]   lw a0, 0(a0)
// [Main]   li a1, 1
// [Main]   bge a0, a1, .compute40.432_18_65
// [Main] 
// [Main] .compute40.432_18_66:
// [Main]   lw a0, 0(s6)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s6)
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.432_18_67:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.432_18_68:
// [Main]   j .compute40.432_18_60
// [Main] 
// [Main] .compute40.432_18_4:
// [Main]   mv a0, zero
// [Main]   j .compute40.432_18_5
// [Main] 
// [Main] .compute40.432_18_62:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.432_18_69:
// [Main] 
// [Main] .compute40.432_18_11:
// [Main]   lw a0, 0(s1)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s1)
// [Main]   j .compute40.432_18_0
// [Main] 
// [Main] .compute40.432_18_63:
// [Main]   sw zero, 0(s10)
// [Main]   sw zero, 0(s6)
// [Main]   mv a0, zero
// [Main]   j .compute40.432_18_68
// [Main] 
// [Main] .compute40.432_18_65:
// [Main]   sw zero, 0(s10)
// [Main]   mv a0, zero
// [Main]   j .compute40.432_18_67
// [Main] 
// [Main] .compute40.432_18_42:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.432_18_43:
// [Main] 
// [Main] .compute40.432_18_37:
// [Main]   lw a0, 0(a1)
// [Main]   sw a0, 0(a3)
// [Main]   lw a0, 0(a6)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(a6)
// [Main]   j .compute40.432_18_31
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function move_perm1_forward197.568l6_6
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f6, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f6, fpref=$f.2), offset=Insn(iref=%3), width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f6, fpref=$f.2), offset=FnParam(fref=f6, fpref=$f.0), width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[Insn(iref=%3), FnParam(fref=f6, fpref=$f.1), FnParam(fref=f6, fpref=$f.2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f6, fpref=$f.0), Insn(iref=%1)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function move_perm1_forward197.568l6_6 to wasm
// [Wasm] Lowering function main262l0_8
// [Wasm] Lowering insn Call(ty=Array(elem=Int32), f=f1, args=[Int32(val=9)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m2) -> $f8.m2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m3, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m4, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m4) -> $f8.m4
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m5, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m5) -> $f8.m5
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m6, fills=[Init(val=Int32(val=9))])
// [Wasm] Get Local name Mem(fref=f8, mref=m6) -> $f8.m6
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Array(elem=Int32)], ty=Unit), mref=m7, fills=[Field(index=0, val=Fn(fref=f18)), Field(index=1, val=Int32(val=9)), Field(index=2, val=Mem(fref=f8, mref=m0)), Field(index=3, val=Insn(iref=%0)), Field(index=4, val=Mem(fref=f8, mref=m1)), Field(index=5, val=Mem(fref=f8, mref=m2)), Field(index=6, val=Mem(fref=f8, mref=m3)), Field(index=7, val=Mem(fref=f8, mref=m4)), Field(index=8, val=Mem(fref=f8, mref=m5))])
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m2) -> $f8.m2
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m4) -> $f8.m4
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m5) -> $f8.m5
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f8, mref=m7), args=[Mem(fref=f8, mref=m6)])
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m6) -> $f8.m6
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m3), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m4), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m4) -> $f8.m4
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m8, fills=[Field(index=0, val=Insn(iref=%10)), Field(index=1, val=Insn(iref=%11))])
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m8), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m8), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Return(args=[Insn(iref=%16)])
// [Wasm] Local Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Local Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Local Mem(fref=f8, mref=m6) -> $f8.m6
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Mem(fref=f8, mref=m5) -> $f8.m5
// [Wasm] Local Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Local Mem(fref=f8, mref=m2) -> $f8.m2
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Mem(fref=f8, mref=m4) -> $f8.m4
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Lowered function main262l0_8 to wasm
// [Wasm] Lowering function init_arr9.404l2_0
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=BlockParam(bref=b0, bpref=$b.0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function init_arr9.404l2_0 to wasm
// [Wasm] Lowering function gen_perm14.400l1_1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[Int32(val=0), Mem(fref=f1, mref=m0), FnParam(fref=f1, fpref=$f.0)])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Lowering control Return(args=[Mem(fref=f1, mref=m0)])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowered function gen_perm14.400l1_1 to wasm
// [Wasm] Lowering function compute40.432_18
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name FreeVar(fvref=^7) -> $^7
// [Wasm] Get Local name FreeVar(fvref=^8) -> $^8
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b54, bpref=$b.3), offset=BlockParam(bref=b54, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.3) -> $b54.$b.3
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b54, bpref=$b.2), offset=BlockParam(bref=b54, bpref=$b.0), width=@32), val=Insn(iref=%56))
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.2) -> $b54.$b.2
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b54, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering control Jump(target=b54, args=[Insn(iref=%58), BlockParam(bref=b54, bpref=$b.1), BlockParam(bref=b54, bpref=$b.2), BlockParam(bref=b54, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.1) -> $b54.$b.1
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.1) -> $b54.$b.1
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.2) -> $b54.$b.2
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.2) -> $b54.$b.2
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.3) -> $b54.$b.3
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.3) -> $b54.$b.3
// [Wasm] Lowering control Jump(target=b60, args=[BlockParam(bref=b60, bpref=$b.0), BlockParam(bref=b60, bpref=$b.1), BlockParam(bref=b60, bpref=$b.2), BlockParam(bref=b60, bpref=$b.3), BlockParam(bref=b60, bpref=$b.4), BlockParam(bref=b60, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.0) -> $b60.$b.0
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.0) -> $b60.$b.0
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.1) -> $b60.$b.1
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.1) -> $b60.$b.1
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.2) -> $b60.$b.2
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.2) -> $b60.$b.2
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.5) -> $b60.$b.5
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.5) -> $b60.$b.5
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b60, bpref=$b.2), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.2) -> $b60.$b.2
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.3), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Lowering control Jump(target=b68, args=[Unit])
// [Wasm] Lowering control Jump(target=b68, args=[Unit])
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b60, bpref=$b.2), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.2) -> $b60.$b.2
// [Wasm] Lowering control Jump(target=b67, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Get Local name Insn(iref=%80) -> $%80
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%80), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%80) -> $%80
// [Wasm] Get Local name Insn(iref=%81) -> $%81
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.3), index=0, width=@32), val=Insn(iref=%81))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Get Local name Insn(iref=%81) -> $%81
// [Wasm] Lowering control Jump(target=b67, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.5), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.5) -> $b60.$b.5
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.1), index=0, width=@32), val=Insn(iref=%65))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.1) -> $b60.$b.1
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[Int32(val=0), BlockParam(bref=b60, bpref=$b.3), BlockParam(bref=b60, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.5) -> $b60.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Get Local name Insn(iref=%68) -> $%68
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.1) -> $b60.$b.1
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b60, bpref=$b.5), offset=Insn(iref=%68), width=@32), val=Insn(iref=%69))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.5) -> $b60.$b.5
// [Wasm] Get Local name Insn(iref=%68) -> $%68
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Get Local name Insn(iref=%71) -> $%71
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b60, bpref=$b.4), offset=Insn(iref=%71), width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Get Local name Insn(iref=%71) -> $%71
// [Wasm] Get Local name Insn(iref=%73) -> $%73
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%73), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%73) -> $%73
// [Wasm] Get Local name Insn(iref=%74) -> $%74
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b60, bpref=$b.4), offset=Insn(iref=%71), width=@32), val=Insn(iref=%74))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Get Local name Insn(iref=%71) -> $%71
// [Wasm] Get Local name Insn(iref=%74) -> $%74
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Get Local name Insn(iref=%76) -> $%76
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b60, bpref=$b.4), offset=Insn(iref=%76), width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Get Local name Insn(iref=%76) -> $%76
// [Wasm] Get Local name Insn(iref=%77) -> $%77
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%77)])
// [Wasm] Get Local name Insn(iref=%77) -> $%77
// [Wasm] Get Local name Insn(iref=%78) -> $%78
// [Wasm] Lowering control Branch(cond=Insn(iref=%78), t=b65, t_args=[], f=b66, f_args=[])
// [Wasm] Get Local name Insn(iref=%78) -> $%78
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%61), BlockParam(bref=b60, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.0) -> $b60.$b.0
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Lowering control Branch(cond=Insn(iref=%62), t=b63, t_args=[], f=b64, f_args=[])
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^8), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^8) -> $^8
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%28), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^8), index=0, width=@32), val=Insn(iref=%29))
// [Wasm] Get Local name FreeVar(fvref=^8) -> $^8
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Jump(target=b11, args=[BlockParam(bref=b69, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b69, args=[Unit])
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b60, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.2) -> $b60.$b.2
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%59), Bool(val=true)])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering control Branch(cond=Insn(iref=%60), t=b61, t_args=[], f=b62, f_args=[])
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering control Jump(target=b70, args=[FreeVar(fvref=^1), Mem(fref=f18, mref=m2), Mem(fref=f18, mref=m1), BlockParam(bref=b0, bpref=$b.0), FreeVar(fvref=^4), FreeVar(fvref=^3)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.0) -> $b60.$b.0
// [Wasm] Get Local name Mem(fref=f18, mref=m2) -> $f18.m2
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.1) -> $b60.$b.1
// [Wasm] Get Local name Mem(fref=f18, mref=m1) -> $f18.m1
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.2) -> $b60.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.5) -> $b60.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^7), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^7) -> $^7
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^8), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^8) -> $^8
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%15), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%17), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%15), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%19), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=1), Insn(iref=%20)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%14), Insn(iref=%21)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%13), Insn(iref=%22)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^7), index=0, width=@32), val=Insn(iref=%23))
// [Wasm] Get Local name FreeVar(fvref=^7) -> $^7
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Init(val=Bool(val=true))])
// [Wasm] Get Local name Mem(fref=f18, mref=m1) -> $f18.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f18, mref=m2) -> $f18.m2
// [Wasm] Lowering control Jump(target=b71, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^6), index=0, width=@32), val=Insn(iref=%11))
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^6), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%8), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Branch(cond=Insn(iref=%10), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b10, args=[BlockParam(bref=b34, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b34, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b40, bpref=$b.3), offset=BlockParam(bref=b40, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b40, bpref=$b.1), index=0, width=@32), val=Insn(iref=%43))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b40, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%45), BlockParam(bref=b40, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b40, bpref=$b.3), offset=Insn(iref=%46), width=@32))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b40, bpref=$b.3), offset=BlockParam(bref=b40, bpref=$b.0), width=@32), val=Insn(iref=%47))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b40, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%49), BlockParam(bref=b40, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b40, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b40, bpref=$b.3), offset=Insn(iref=%50), width=@32), val=Insn(iref=%51))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b40, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering control Jump(target=b40, args=[Insn(iref=%53), BlockParam(bref=b40, bpref=$b.1), BlockParam(bref=b40, bpref=$b.2), BlockParam(bref=b40, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.0), index=0, width=@32), val=Insn(iref=%35))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%37), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.2), index=0, width=@32), val=Insn(iref=%38))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering control Jump(target=b31, args=[BlockParam(bref=b31, bpref=$b.0), BlockParam(bref=b31, bpref=$b.1), BlockParam(bref=b31, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Lowering control Jump(target=b37, args=[BlockParam(bref=b43, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b43, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b40, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%40), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b40, bpref=$b.0), Insn(iref=%41)])
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering control Branch(cond=Insn(iref=%42), t=b41, t_args=[], f=b42, f_args=[])
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering control Jump(target=b44, args=[Int32(val=0), Mem(fref=f18, mref=m31), BlockParam(bref=b31, bpref=$b.0), BlockParam(bref=b31, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Mem(fref=f18, mref=m31) -> $f18.m31
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m31, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f18, mref=m31) -> $f18.m31
// [Wasm] Lowering control Jump(target=b45, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%31), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering control Branch(cond=Insn(iref=%32), t=b32, t_args=[], f=b33, f_args=[])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering control Jump(target=b35, args=[Mem(fref=f18, mref=m0), FreeVar(fvref=^2), FreeVar(fvref=^5)])
// [Wasm] Get Local name Mem(fref=f18, mref=m0) -> $f18.m0
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[BlockParam(bref=b0, bpref=$b.0), FreeVar(fvref=^4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^2), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Insn(iref=%5))])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Mem(fref=f18, mref=m0) -> $f18.m0
// [Wasm] Lowering control Jump(target=b36, args=[])
// [Wasm] Lowering control Jump(target=b9, args=[BlockParam(bref=b57, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b57, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b54, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.1) -> $b54.$b.1
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b54, bpref=$b.0), Insn(iref=%54)])
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering control Branch(cond=Insn(iref=%55), t=b55, t_args=[], f=b56, f_args=[])
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering control Jump(target=b58, args=[Int32(val=0), FreeVar(fvref=^1), FreeVar(fvref=^2), FreeVar(fvref=^3)])
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.1) -> $b54.$b.1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.2) -> $b54.$b.2
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.3) -> $b54.$b.3
// [Wasm] Lowering control Jump(target=b59, args=[])
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f18, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f18, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f18, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local BlockParam(bref=b54, bpref=$b.2) -> $b54.$b.2
// [Wasm] Local Insn(iref=%76) -> $%76
// [Wasm] Local Mem(fref=f18, mref=m31) -> $f18.m31
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Local Insn(iref=%81) -> $%81
// [Wasm] Local Insn(iref=%56) -> $%56
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%65) -> $%65
// [Wasm] Local Insn(iref=%68) -> $%68
// [Wasm] Local BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Local Insn(iref=%73) -> $%73
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%74) -> $%74
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local BlockParam(bref=b54, bpref=$b.1) -> $b54.$b.1
// [Wasm] Local Insn(iref=%53) -> $%53
// [Wasm] Local Insn(iref=%78) -> $%78
// [Wasm] Local Insn(iref=%54) -> $%54
// [Wasm] Local Insn(iref=%60) -> $%60
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local FreeVar(fvref=^6) -> $^6
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%55) -> $%55
// [Wasm] Local Insn(iref=%71) -> $%71
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Local FreeVar(fvref=^3) -> $^3
// [Wasm] Local BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Local BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Local FreeVar(fvref=^5) -> $^5
// [Wasm] Local Mem(fref=f18, mref=m2) -> $f18.m2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%50) -> $%50
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local FreeVar(fvref=^4) -> $^4
// [Wasm] Local Insn(iref=%77) -> $%77
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local Insn(iref=%80) -> $%80
// [Wasm] Local BlockParam(bref=b60, bpref=$b.1) -> $b60.$b.1
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%58) -> $%58
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b54, bpref=$b.3) -> $b54.$b.3
// [Wasm] Local BlockParam(bref=b60, bpref=$b.2) -> $b60.$b.2
// [Wasm] Local BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Insn(iref=%62) -> $%62
// [Wasm] Local BlockParam(bref=b60, bpref=$b.0) -> $b60.$b.0
// [Wasm] Local BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Local Mem(fref=f18, mref=m1) -> $f18.m1
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local FreeVar(fvref=^7) -> $^7
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%61) -> $%61
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Local FreeVar(fvref=^8) -> $^8
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local BlockParam(bref=b60, bpref=$b.5) -> $b60.$b.5
// [Wasm] Local Mem(fref=f18, mref=m0) -> $f18.m0
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%69) -> $%69
// [Wasm] Lowered function compute40.432_18 to wasm
// [Wasm] Lowering function init_count59.447l3_3
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%2), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.1), offset=Insn(iref=%3), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%6), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.0), index=0, width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%9)])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function init_count59.447l3_3 to wasm
// [Wasm] Lowering function T$start_20
// [Wasm] Lowering insn Call(ty=Unit, f=f8, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_20 to wasm
// [KnfOpt] freq: {fannkuch1: Once, gen_perm14: Once, init_arr9: Many(2), compute40: Many(2), copy_perm46: Many(2), init_count59: Many(2), do_flip90: Many(2), flip_loop99: Many(2), go_loop179: Many(2), move_perm1_forward197: Many(2), main262: Once}
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(init_arr9)
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(init_arr9)
// [KnfOpt] Knf inline Some(gen_perm14)
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(copy_perm46)
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(copy_perm46)
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(init_count59)
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(init_count59)
// [KnfOpt] Inline threshold 2 43
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(flip_loop99)
// [KnfOpt] Inline threshold 2 43
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(flip_loop99)
// [KnfOpt] Inline threshold 2 83
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 83
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(move_perm1_forward197)
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(move_perm1_forward197)
// [KnfOpt] Inline threshold 2 119
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 119
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 375
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 375
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(fannkuch1)
// [KnfOpt] Numbers of let rec: 10 10 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %14: Call(ty=Unit, f=f4, args=[Insn(iref=%13), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2), FnParam(fref=f4, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f0, args=[Insn(iref=%3), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f5, args=[FnParam(fref=f5, fpref=$f.0), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f2, args=[Insn(iref=%4), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %31: Apply(ty=Unit, f=Self(fref=f18), args=[FnParam(fref=f18, fpref=$f.0)])
// [CoreOpt] eliminated tail rec call %24: Call(ty=Unit, f=f7, args=[FnParam(fref=f7, fpref=$f.0), FnParam(fref=f7, fpref=$f.1), FnParam(fref=f7, fpref=$f.2), FnParam(fref=f7, fpref=$f.3), FnParam(fref=f7, fpref=$f.4), FnParam(fref=f7, fpref=$f.5)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Multiple, f4: Once, f8: Once, f0: Once, f1: Once, f5: Once, f2: Once, f18: MaybeInClosure, f3: Multiple, f7: Once, f20: Once})
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] do_flip90.473l4_5 is inlining Call(ty=Unit, f=f4, args=[Int32(val=0), Mem(fref=f5, mref=m0), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [CoreOpt] shifted callee .fn flip_loop99.481l5_4 #f4 : fn(int32, array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b14 {
// [CoreOpt]   .bb #b9 (int32, array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %9: int32 = load int32 field($b9.2, 0 * @32)
// [CoreOpt]     let %10: int32 = div(%9, 2)
// [CoreOpt]     let %11: bool = le($b9.0, %10)
// [CoreOpt]     br %11 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     let %12: int32 = load int32 offset($b9.3, $b9.0 * @32)
// [CoreOpt]     let _ = store int32 field($b9.1, 0 * @32) <- %12
// [CoreOpt]     let %14: int32 = load int32 field($b9.2, 0 * @32)
// [CoreOpt]     let %15: int32 = sub(%14, $b9.0)
// [CoreOpt]     let %16: int32 = load int32 offset($b9.3, %15 * @32)
// [CoreOpt]     let _ = store int32 offset($b9.3, $b9.0 * @32) <- %16
// [CoreOpt]     let %18: int32 = load int32 field($b9.2, 0 * @32)
// [CoreOpt]     let %19: int32 = sub(%18, $b9.0)
// [CoreOpt]     let %20: int32 = load int32 field($b9.1, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($b9.3, %19 * @32) <- %20
// [CoreOpt]     let %22: int32 = add($b9.0, 1)
// [CoreOpt]     jump b9(%22, $b9.1, $b9.2, $b9.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     jump b12(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 (unit) {
// [CoreOpt]     return $b12.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b13 pre #Some(b14) header #b9 {
// [CoreOpt]     .block #b10
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b12
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     jump b13($f0, $f1, $f2, $f3)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] compute40.432_18 is inlining Call(ty=Unit, f=f5, args=[Mem(fref=f18, mref=m0), FreeVar(fvref=^2), FreeVar(fvref=^5)])
// [CoreOpt] shifted callee .fn do_flip90.473l4_5 #f5 : fn(array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b36 {
// [CoreOpt]   .bb #b31 (array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %31: int32 = load int32 field($b31.0, 0 * @32)
// [CoreOpt]     let %32: bool = eq(%31, 0)
// [CoreOpt]     br %32 b32() b33()
// [CoreOpt]   }
// [CoreOpt]   .bb #b32 () {
// [CoreOpt]     jump b34(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b33 () {
// [CoreOpt]     let _ = alloc <m31: array[int32] heap(1)> <- [..] = 0
// [CoreOpt]     jump b45()
// [CoreOpt]   }
// [CoreOpt]   .bb #b34 (unit) {
// [CoreOpt]     return $b34.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b35 pre #Some(b36) header #b31 {
// [CoreOpt]     .block #b32
// [CoreOpt]     .block #b33
// [CoreOpt]     .block #b34
// [CoreOpt]   }
// [CoreOpt]   .bb #b36 () {
// [CoreOpt]     jump b35($f0, $f1, $f2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b37 (unit) {
// [CoreOpt]     let %35: int32 = load int32 field($b31.1, 0 * @32)
// [CoreOpt]     let _ = store int32 field($b31.0, 0 * @32) <- %35
// [CoreOpt]     let %37: int32 = load int32 field($b31.2, 0 * @32)
// [CoreOpt]     let %38: int32 = add(%37, 1)
// [CoreOpt]     let _ = store int32 field($b31.2, 0 * @32) <- %38
// [CoreOpt]     jump b31($b31.0, $b31.1, $b31.2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b40 (int32, array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %40: int32 = load int32 field($b40.2, 0 * @32)
// [CoreOpt]     let %41: int32 = div(%40, 2)
// [CoreOpt]     let %42: bool = le($b40.0, %41)
// [CoreOpt]     br %42 b41() b42()
// [CoreOpt]   }
// [CoreOpt]   .bb #b41 () {
// [CoreOpt]     let %43: int32 = load int32 offset($b40.3, $b40.0 * @32)
// [CoreOpt]     let _ = store int32 field($b40.1, 0 * @32) <- %43
// [CoreOpt]     let %45: int32 = load int32 field($b40.2, 0 * @32)
// [CoreOpt]     let %46: int32 = sub(%45, $b40.0)
// [CoreOpt]     let %47: int32 = load int32 offset($b40.3, %46 * @32)
// [CoreOpt]     let _ = store int32 offset($b40.3, $b40.0 * @32) <- %47
// [CoreOpt]     let %49: int32 = load int32 field($b40.2, 0 * @32)
// [CoreOpt]     let %50: int32 = sub(%49, $b40.0)
// [CoreOpt]     let %51: int32 = load int32 field($b40.1, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($b40.3, %50 * @32) <- %51
// [CoreOpt]     let %53: int32 = add($b40.0, 1)
// [CoreOpt]     jump b40(%53, $b40.1, $b40.2, $b40.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b42 () {
// [CoreOpt]     jump b43(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b43 (unit) {
// [CoreOpt]     jump b37($b43.0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b44 pre #Some(b45) header #b40 {
// [CoreOpt]     .block #b41
// [CoreOpt]     .block #b42
// [CoreOpt]     .block #b43
// [CoreOpt]   }
// [CoreOpt]   .bb #b45 () {
// [CoreOpt]     jump b44(0, f5.m31, $b31.0, $b31.1)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] compute40.432_18 is inlining Call(ty=Unit, f=f2, args=[Int32(val=0), FreeVar(fvref=^1), FreeVar(fvref=^2), FreeVar(fvref=^3)])
// [CoreOpt] shifted callee .fn copy_perm46.437l2_2 #f2 : fn(int32, int32, array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b59 {
// [CoreOpt]   .bb #b54 (int32, int32, array[int32], array[int32]) {
// [CoreOpt]     let %54: int32 = sub($b54.1, 1)
// [CoreOpt]     let %55: bool = le($b54.0, %54)
// [CoreOpt]     br %55 b55() b56()
// [CoreOpt]   }
// [CoreOpt]   .bb #b55 () {
// [CoreOpt]     let %56: int32 = load int32 offset($b54.3, $b54.0 * @32)
// [CoreOpt]     let _ = store int32 offset($b54.2, $b54.0 * @32) <- %56
// [CoreOpt]     let %58: int32 = add($b54.0, 1)
// [CoreOpt]     jump b54(%58, $b54.1, $b54.2, $b54.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b56 () {
// [CoreOpt]     jump b57(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b57 (unit) {
// [CoreOpt]     return $b57.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b58 pre #Some(b59) header #b54 {
// [CoreOpt]     .block #b55
// [CoreOpt]     .block #b56
// [CoreOpt]     .block #b57
// [CoreOpt]   }
// [CoreOpt]   .bb #b59 () {
// [CoreOpt]     jump b58($f0, $f1, $f2, $f3)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] compute40.432_18 is inlining Call(ty=Unit, f=f7, args=[FreeVar(fvref=^1), Mem(fref=f18, mref=m2), Mem(fref=f18, mref=m1), BlockParam(bref=b0, bpref=$b.0), FreeVar(fvref=^4), FreeVar(fvref=^3)])
// [CoreOpt] shifted callee .fn go_loop179.551l5_7 #f7 : fn(int32, array[int32], array[bool], array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b71 {
// [CoreOpt]   .bb #b60 (int32, array[int32], array[bool], array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %59: bool = load bool field($b60.2, 0 * @32)
// [CoreOpt]     let %60: bool = eq(%59, true)
// [CoreOpt]     br %60 b61() b62()
// [CoreOpt]   }
// [CoreOpt]   .bb #b61 () {
// [CoreOpt]     let %61: int32 = load int32 field($b60.3, 0 * @32)
// [CoreOpt]     let %62: bool = eq(%61, $b60.0)
// [CoreOpt]     br %62 b63() b64()
// [CoreOpt]   }
// [CoreOpt]   .bb #b62 () {
// [CoreOpt]     jump b69(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b63 () {
// [CoreOpt]     let _ = store bool field($b60.2, 0 * @32) <- false
// [CoreOpt]     let _ = store int32 field($b60.3, 0 * @32) <- 0
// [CoreOpt]     jump b68(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b64 () {
// [CoreOpt]     let %65: int32 = load int32 field($b60.5, 0 * @32)
// [CoreOpt]     let _ = store int32 field($b60.1, 0 * @32) <- %65
// [CoreOpt]     let %67: unit = call f6(0, $b60.3, $b60.5)
// [CoreOpt]     let %68: int32 = load int32 field($b60.3, 0 * @32)
// [CoreOpt]     let %69: int32 = load int32 field($b60.1, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($b60.5, %68 * @32) <- %69
// [CoreOpt]     let %71: int32 = load int32 field($b60.3, 0 * @32)
// [CoreOpt]     let %72: int32 = load int32 field($b60.3, 0 * @32)
// [CoreOpt]     let %73: int32 = load int32 offset($b60.4, %72 * @32)
// [CoreOpt]     let %74: int32 = sub(%73, 1)
// [CoreOpt]     let _ = store int32 offset($b60.4, %71 * @32) <- %74
// [CoreOpt]     let %76: int32 = load int32 field($b60.3, 0 * @32)
// [CoreOpt]     let %77: int32 = load int32 offset($b60.4, %76 * @32)
// [CoreOpt]     let %78: bool = le(1, %77)
// [CoreOpt]     br %78 b65() b66()
// [CoreOpt]   }
// [CoreOpt]   .bb #b65 () {
// [CoreOpt]     let _ = store bool field($b60.2, 0 * @32) <- false
// [CoreOpt]     jump b67(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b66 () {
// [CoreOpt]     let %80: int32 = load int32 field($b60.3, 0 * @32)
// [CoreOpt]     let %81: int32 = add(%80, 1)
// [CoreOpt]     let _ = store int32 field($b60.3, 0 * @32) <- %81
// [CoreOpt]     jump b67(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b67 (unit) {
// [CoreOpt]     jump b68(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b68 (unit) {
// [CoreOpt]     jump b60($b60.0, $b60.1, $b60.2, $b60.3, $b60.4, $b60.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b69 (unit) {
// [CoreOpt]     return $b69.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b70 pre #Some(b71) header #b60 {
// [CoreOpt]     .block #b66
// [CoreOpt]     .block #b64
// [CoreOpt]     .block #b68
// [CoreOpt]     .block #b69
// [CoreOpt]     .block #b61
// [CoreOpt]     .block #b65
// [CoreOpt]     .block #b62
// [CoreOpt]     .block #b63
// [CoreOpt]     .block #b67
// [CoreOpt]   }
// [CoreOpt]   .bb #b71 () {
// [CoreOpt]     jump b70($f0, $f1, $f2, $f3, $f4, $f5)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f4
// [CoreOpt] Remove dead function: f5
// [CoreOpt] Remove dead function: f2
// [CoreOpt] Remove dead function: f7
// [CoreOpt] LVN subst Insn(iref=%6) with Insn(iref=%3)
// [CoreOpt] LVN subst Insn(iref=%72) with Insn(iref=%71)
// [CoreOpt] LVN subst Insn(iref=%16) with Insn(iref=%15)
// [CoreOpt] LVN subst Insn(iref=%4) with Insn(iref=%2)
