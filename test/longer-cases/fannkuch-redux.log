// [Asm] pre_assigned_registers: FnParam(fref=f6, fpref=$f.1) -> v3, Insn(iref=%3) -> v8, Insn(iref=%7) -> v13, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%2) -> v7, FnParam(fref=f6, fpref=$f.0) -> v2, Insn(iref=%9) -> v11, Insn(iref=%1) -> v6, FnParam(fref=f6, fpref=$f.2) -> v4, Insn(iref=%10) -> v9, Self(fref=f6) -> v0, Insn(iref=%5) -> v12, Insn(iref=%0) -> v5, Insn(iref=%4) -> v10
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f6, fpref=$f.0), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%3), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f6, fpref=$f.0), Insn(iref=%1)])
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v8, v2, v4, v18, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v8, v2, v19, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v8, v2, v4, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v8, v4, v16, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v8, v4, v17, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of move_perm1_forward.581"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="t2", color=blue];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="a0", color=blue];
// [Asm]   r26 [label="v13 ← a0", color=green];
// [Asm]   r6 [label="v5 ← a3", color=green];
// [Asm]   r13 [label="v10 ← a4", color=green];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="v18 ← a4", color=green];
// [Asm]   r7 [label="v6 ← a3", color=green];
// [Asm]   r10 [label="v8 ← a3", color=green];
// [Asm]   r22 [label="t1", color=blue];
// [Asm]   r14 [label="v16 ← a0", color=green];
// [Asm]   r8 [label="v14 ← a0", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r24 [label="t3", color=blue];
// [Asm]   r15 [label="v17 ← a0", color=green];
// [Asm]   r25 [label="t4", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a3", color=blue];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r17 [label="a4", color=blue];
// [Asm]   r21 [label="t0", color=blue];
// [Asm]   r12 [label="v19 ← a4", color=green];
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r13;
// [Asm]   r9 -- r25;
// [Asm]   r13 -- r15;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r10 -- r13;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r3 -- r24;
// [Asm]   r9 -- r17;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r5 -- r11;
// [Asm]   r3 -- r5;
// [Asm]   r9 -- r18;
// [Asm]   r3 -- r22;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r22;
// [Asm]   r1 -- r9;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r10 -- r12;
// [Asm]   r3 -- r13;
// [Asm]   r9 -- r23;
// [Asm]   r10 -- r15;
// [Asm]   r13 -- r14;
// [Asm]   r9 -- r24;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r14;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r9 -- r16;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r14;
// [Asm]   r0 -- r11;
// [Asm]   r9 -- r19;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r15;
// [Asm]   r9 -- r21;
// [Asm]   r5 -- r12;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v2-> 1:a2-> 2:a1-> 3:zero-> 4:v3-> 5:v4-> 9:a0-> 6:v5-> 7:v6-> 10:v8-> 11:v18-> 12:v19-> 13:v10-> 14:v16-> 15:v17-> 16:a3-> 17:a4-> 18:a5-> 19:a6-> 20:a7-> 21:t0-> 22:t1-> 23:t2-> 24:t3-> 25:t4-> 26:v13-> 8:v14"
// [Asm]   comment = "v2<-a0;v13<-a0;v5<-a3;v10<-a4;v3<-a1;v18<-a4;v6<-a3;v8<-a3;v16<-a0;v14<-a0;v4<-a2;v17<-a0;v19<-a4;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of move_perm1_forward.581"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v5, 0(v3) ->   lw a3, 0(a1)
// [Asm] subst   addi v6, v5, -1 ->   addi a3, a3, -1
// [Asm] subst   blt v6, v2, .move_perm1_forward.581_2 ->   blt a3, a0, .move_perm1_forward.581_2
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   j .move_perm1_forward.581_3 ->   j .move_perm1_forward.581_3
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v8, v2, 1 ->   addi a3, a0, 1
// [Asm] subst   slliw v18, v8, 2 ->   slliw a4, a3, 2
// [Asm] subst   add v19, v4, v18 ->   add a4, a2, a4
// [Asm] subst   lw v10, 0(v19) ->   lw a4, 0(a4)
// [Asm] subst   slliw v16, v2, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v17, v4, v16 ->   add a0, a2, a0
// [Asm] subst   sw v10, 0(v17) ->   sw a4, 0(a0)
// [Asm] subst   mv a0, v8 ->   mv a0, a3
// [Asm] subst   call move_perm1_forward.581 ->   call move_perm1_forward.581
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v10, Insn(iref=%3) -> v8, FnParam(fref=f4, fpref=$f.0) -> v2, Insn(iref=%7) -> v13, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%2) -> v7, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%9) -> v11, Insn(iref=%1) -> v6, Insn(iref=%10) -> v9, Self(fref=f4) -> v0, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%5) -> v12, Insn(iref=%0) -> v5
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f4, fpref=$f.0), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%3), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f4, fpref=$f.0), Insn(iref=%1)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v8, v2, v4, v18, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v8, v2, v19, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v8, v2, v4, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v8, v4, v16, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v8, v4, v17, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of move_perm1_forward.579"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="t2", color=blue];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r9 [label="v6 ← a3", color=green];
// [Asm]   r26 [label="v13 ← a0", color=green];
// [Asm]   r6 [label="v3 ← a1", color=green];
// [Asm]   r13 [label="v10 ← a4", color=green];
// [Asm]   r4 [label="a1", color=blue];
// [Asm]   r1 [label="v14 ← a0", color=green];
// [Asm]   r11 [label="v18 ← a4", color=green];
// [Asm]   r7 [label="v4 ← a2", color=green];
// [Asm]   r10 [label="v8 ← a3", color=green];
// [Asm]   r22 [label="t1", color=blue];
// [Asm]   r14 [label="v16 ← a0", color=green];
// [Asm]   r8 [label="v5 ← a3", color=green];
// [Asm]   r5 [label="zero", color=blue];
// [Asm]   r24 [label="t3", color=blue];
// [Asm]   r15 [label="v17 ← a0", color=green];
// [Asm]   r25 [label="t4", color=blue];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r16 [label="a3", color=blue];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r17 [label="a4", color=blue];
// [Asm]   r21 [label="t0", color=blue];
// [Asm]   r12 [label="v19 ← a4", color=green];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r5 -- r21;
// [Asm]   r6 -- r11;
// [Asm]   r13 -- r15;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r20;
// [Asm]   r5 -- r10;
// [Asm]   r0 -- r24;
// [Asm]   r3 -- r6;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r0 -- r17;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r18;
// [Asm]   r7 -- r13;
// [Asm]   r10 -- r13;
// [Asm]   r0 -- r25;
// [Asm]   r2 -- r10;
// [Asm]   r0 -- r21;
// [Asm]   r5 -- r19;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r3;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r13 -- r14;
// [Asm]   r10 -- r15;
// [Asm]   r2 -- r12;
// [Asm]   r10 -- r11;
// [Asm]   r2 -- r8;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r7;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r25;
// [Asm]   r2 -- r9;
// [Asm]   r0 -- r4;
// [Asm]   r7 -- r8;
// [Asm]   r0 -- r7;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r20;
// [Asm]   r7 -- r14;
// [Asm]   r5 -- r15;
// [Asm]   r0 -- r18;
// [Asm]   r5 -- r12;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:a0-> 3:a2-> 4:a1-> 5:zero-> 2:v2-> 6:v3-> 7:v4-> 8:v5-> 9:v6-> 10:v8-> 11:v18-> 12:v19-> 13:v10-> 14:v16-> 15:v17-> 16:a3-> 17:a4-> 18:a5-> 19:a6-> 20:a7-> 21:t0-> 22:t1-> 23:t2-> 24:t3-> 25:t4-> 26:v13-> 1:v14"
// [Asm]   comment = "v6<-a3;v13<-a0;v3<-a1;v10<-a4;v14<-a0;v18<-a4;v4<-a2;v8<-a3;v16<-a0;v5<-a3;v17<-a0;v2<-a0;v19<-a4;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of move_perm1_forward.579"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   j .move_perm1_forward.579_3 ->   j .move_perm1_forward.579_3
// [Asm] subst   lw v5, 0(v3) ->   lw a3, 0(a1)
// [Asm] subst   addi v6, v5, -1 ->   addi a3, a3, -1
// [Asm] subst   blt v6, v2, .move_perm1_forward.579_2 ->   blt a3, a0, .move_perm1_forward.579_2
// [Asm] subst   addi v8, v2, 1 ->   addi a3, a0, 1
// [Asm] subst   slliw v18, v8, 2 ->   slliw a4, a3, 2
// [Asm] subst   add v19, v4, v18 ->   add a4, a2, a4
// [Asm] subst   lw v10, 0(v19) ->   lw a4, 0(a4)
// [Asm] subst   slliw v16, v2, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v17, v4, v16 ->   add a0, a2, a0
// [Asm] subst   sw v10, 0(v17) ->   sw a4, 0(a0)
// [Asm] subst   mv a0, v8 ->   mv a0, a3
// [Asm] subst   call move_perm1_forward.579 ->   call move_perm1_forward.579
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: Insn(iref=%112) -> v87, BlockParam(bref=b1, bpref=$b.0) -> v23, Insn(iref=%15) -> v157, Insn(iref=%82) -> v129, Insn(iref=%33) -> v107, Insn(iref=%76) -> v54, Insn(iref=%10) -> v37, Insn(iref=%27) -> v45, Insn(iref=%123) -> v103, Insn(iref=%59) -> v68, Insn(iref=%4) -> v27, Insn(iref=%65) -> v74, Insn(iref=%26) -> v44, Insn(iref=%31) -> v61, Insn(iref=%130) -> v152, Mem(fref=f9, mref=m4) -> v5, Insn(iref=%64) -> v73, Mem(fref=f9, mref=m18) -> v12, Insn(iref=%126) -> v102, Insn(iref=%121) -> v98, Insn(iref=%16) -> v158, Insn(iref=%106) -> v83, Insn(iref=%78) -> v56, Insn(iref=%54) -> v64, Mem(fref=f9, mref=m71) -> v6, Insn(iref=%60) -> v69, Insn(iref=%67) -> v79, Insn(iref=%84) -> v151, Insn(iref=%13) -> v20, Insn(iref=%101) -> v147, BlockParam(bref=b33, bpref=$b.0) -> v124, Insn(iref=%79) -> v121, Mem(fref=f9, mref=m1) -> v9, Insn(iref=%23) -> v155, Insn(iref=%103) -> v75, Insn(iref=%20) -> v41, Insn(iref=%111) -> v86, Insn(iref=%144) -> v97, BlockParam(bref=b20, bpref=$b.0) -> v31, Insn(iref=%36) -> v110, BlockParam(bref=b76, bpref=$b.0) -> v57, Insn(iref=%89) -> v134, Insn(iref=%109) -> v84, Insn(iref=%150) -> v89, BlockParam(bref=b2, bpref=$b.0) -> v35, Insn(iref=%120) -> v96, Mem(fref=f9, mref=m21) -> v16, Insn(iref=%90) -> v136, Insn(iref=%50) -> v126, Insn(iref=%14) -> v21, Mem(fref=f9, mref=m2) -> v11, Insn(iref=%80) -> v122, Insn(iref=%11) -> v38, Mem(fref=f9, mref=m0) -> v7, Insn(iref=%86) -> v131, Mem(fref=f9, mref=m6) -> v3, Insn(iref=%104) -> v76, Insn(iref=%140) -> v135, Insn(iref=%134) -> v143, Insn(iref=%97) -> v144, Insn(iref=%9) -> v36, Insn(iref=%45) -> v118, Insn(iref=%70) -> v47, Insn(iref=%99) -> v149, Insn(iref=%61) -> v70, Insn(iref=%98) -> v145, Insn(iref=%2) -> v25, Mem(fref=f9, mref=m22) -> v15, BlockParam(bref=b77, bpref=$b.0) -> v51, Mem(fref=f9, mref=m3) -> v13, FnParam(fref=f9, fpref=$f.0) -> v2, Insn(iref=%12) -> v18, Insn(iref=%41) -> v114, Insn(iref=%63) -> v72, Insn(iref=%88) -> v133, BlockParam(bref=b34, bpref=$b.0) -> v78, Mem(fref=f9, mref=m12) -> v4, Insn(iref=%25) -> v43, Insn(iref=%118) -> v94, Insn(iref=%39) -> v112, Insn(iref=%95) -> v141, Insn(iref=%81) -> v128, Insn(iref=%96) -> v142, Insn(iref=%56) -> v65, Insn(iref=%94) -> v140, Insn(iref=%49) -> v125, Insn(iref=%42) -> v115, Insn(iref=%68) -> v80, Insn(iref=%73) -> v50, Insn(iref=%139) -> v138, BlockParam(bref=b24, bpref=$b.0) -> v39, Insn(iref=%93) -> v139, BlockParam(bref=b115, bpref=$b.0) -> v77, Insn(iref=%74) -> v52, Insn(iref=%113) -> v88, BlockParam(bref=b17, bpref=$b.0) -> v22, Insn(iref=%83) -> v150, Insn(iref=%38) -> v111, Insn(iref=%75) -> v53, Insn(iref=%53) -> v63, Mem(fref=f9, mref=m7) -> v14, Insn(iref=%108) -> v105, Insn(iref=%5) -> v28, Insn(iref=%91) -> v137, Insn(iref=%19) -> v40, Insn(iref=%124) -> v100, Insn(iref=%7) -> v30, Mem(fref=f9, mref=m5) -> v10, Insn(iref=%125) -> v101, Insn(iref=%71) -> v48, Mem(fref=f9, mref=m19) -> v8, Insn(iref=%34) -> v108, BlockParam(bref=b31, bpref=$b.0) -> v34, BlockParam(bref=b73, bpref=$b.0) -> v46, Self(fref=f9) -> v0, Insn(iref=%100) -> v146, Insn(iref=%77) -> v55, Insn(iref=%51) -> v127, BlockParam(bref=b14, bpref=$b.0) -> v19, Insn(iref=%52) -> v62, Insn(iref=%44) -> v117, Insn(iref=%32) -> v106, Insn(iref=%58) -> v67, Insn(iref=%87) -> v132, Mem(fref=f9, mref=m20) -> v17, Insn(iref=%1) -> v24, Insn(iref=%119) -> v95, BlockParam(bref=b91, bpref=$b.0) -> v123, Insn(iref=%117) -> v93, Insn(iref=%107) -> v104, Insn(iref=%57) -> v66, Insn(iref=%6) -> v29, Insn(iref=%35) -> v109, Insn(iref=%62) -> v71, BlockParam(bref=b32, bpref=$b.0) -> v58, Insn(iref=%127) -> v156, Insn(iref=%110) -> v85, Insn(iref=%122) -> v99, Insn(iref=%46) -> v119, Insn(iref=%24) -> v42, Insn(iref=%29) -> v59, Insn(iref=%47) -> v120, Insn(iref=%149) -> v92, Insn(iref=%102) -> v148, Insn(iref=%3) -> v26, Insn(iref=%18) -> v33, Insn(iref=%115) -> v91, Insn(iref=%22) -> v154, Insn(iref=%85) -> v130, Insn(iref=%17) -> v32, Insn(iref=%72) -> v49, Insn(iref=%43) -> v116, Insn(iref=%30) -> v60, Insn(iref=%114) -> v90, Insn(iref=%21) -> v153, Insn(iref=%40) -> v113, Insn(iref=%69) -> v81, Insn(iref=%105) -> v82
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b14, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%97)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%96), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%88), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%81), FnParam(fref=f9, fpref=$f.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%79), Bool(val=true)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%121)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%120), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%112), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%105), FnParam(fref=f9, fpref=$f.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%103), Bool(val=true)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%29), Insn(iref=%30)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%70), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b24, bpref=$b.0), Insn(iref=%19)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%17)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b14, bpref=$b.0), Insn(iref=%13)])
// [Asm] defs: [v22]
// [Asm] live_set: [s11, zero, v22, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v11, v46, v5, v10, v13, v7, v31, v9, zero, v23, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v46, v5, v10, v13, v7, s11, v31, v9, zero, v23, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v5, v10, v13, v7, s11, v31, v9, zero, v23, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v5, v10, v13, v7, s11, v31, v9, zero, v23, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v46, v5, v10, v13, a0, v7, s11, v31, v9, zero, v23, v6, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v46, v5, v10, v13, a0, v7, a1, s11, v31, v9, zero, v23, v6, v2]
// [Asm] move_origin: [v46]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v46, v5, v10, v13, a0, v7, a2, a1, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v46, v5, v10, v13, a0, v7, a2, a1, s11, a3, v31, v9, zero, v23, v2]
// [Asm] move_origin: [v7]
// [Asm] defined: a3 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v46, v5, v10, v13, zero, a0, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v50]
// [Asm] live_set: [v11, v46, v5, v10, v13, zero, v23, v50, v7, s11, v31, v9, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v5, v10, v13, zero, v23, v50, v7, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v51]
// [Asm] live_set: [v2, v11, v46, v5, v10, v13, zero, v23, v7, s11, v31, v9, v51]
// [Asm] move_origin: [v50]
// [Asm] defined: v51 is X
// [Asm] defs: [v160]
// [Asm] live_set: [v19, v4, s11, v160, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v160 is X
// [Asm] defs: [v161]
// [Asm] live_set: [v19, v4, s11, v161, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v161 is X
// [Asm] defs: []
// [Asm] live_set: [v19, v4, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v158]
// [Asm] live_set: [v4, s11, zero, v158, v2]
// [Asm] move_origin: []
// [Asm] defined: v158 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v4, s11, zero, v2]
// [Asm] move_origin: [v158]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19, v4, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v78]
// [Asm] live_set: [v11, v5, v10, zero, v13, v78, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: [v77]
// [Asm] defined: v78 is X
// [Asm] defs: [v20]
// [Asm] live_set: [zero, v20, v19, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v19, v4, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v58]
// [Asm] live_set: [v11, v58, v5, v10, v13, zero, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: [v57]
// [Asm] defined: v58 is X
// [Asm] defs: [v123]
// [Asm] live_set: [v11, v5, v10, zero, v13, v123, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v123 is X
// [Asm] defs: [v23]
// [Asm] live_set: [s11, zero, v23, v2]
// [Asm] move_origin: [v22]
// [Asm] defined: v23 is X
// [Asm] defs: [v128]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v128, v2]
// [Asm] move_origin: []
// [Asm] defined: v128 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v52]
// [Asm] live_set: [v11, v46, v5, v10, v13, v7, s11, v52, v31, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defs: [v54]
// [Asm] live_set: [v11, v46, v5, v10, v13, v7, s11, v31, v9, zero, v23, v54, v2]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [v55]
// [Asm] live_set: [v11, v46, v5, v10, v13, v7, s11, v31, v9, zero, v23, v55, v2]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: [v46]
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v77]
// [Asm] live_set: [v11, v5, v10, zero, v13, v77, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v77 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: v31 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v11, v5, v10, v13, zero, v23, v7, v57, s11, v31, v9, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v57 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v5, v10, v13, a0, v7, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: [v31]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v5, v10, v13, a0, v7, a1, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: [v9]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v5, v10, v13, a0, v7, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v42]
// [Asm] live_set: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defs: [v44]
// [Asm] live_set: [v11, v5, v10, v13, v7, s11, v31, v44, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v5, v10, v13, v7, v12, v31, v44, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, v10, v13, v7, v12, s11, v31, v44, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, v12, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v79]
// [Asm] live_set: [v11, v5, v10, zero, v13, v79, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: [v80]
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, v80, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v80 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: [v31]
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v82]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v82, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [v5, s11, v34, v13]
// [Asm] move_origin: [zero]
// [Asm] defined: v34 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v11, v46, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: [v12]
// [Asm] defined: v46 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v11, v5, v10, v13, zero, v23, v7, v59, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v11, v5, v10, v13, zero, v23, v7, v59, s11, v31, v9, v60, v2]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v62]
// [Asm] live_set: [v11, v62, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v11, v62, v5, v10, v13, v7, s11, v31, v9, v63, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v63 is X
// [Asm] defs: [v64]
// [Asm] live_set: [v11, v62, v5, v10, v13, v7, s11, v31, v9, v64, v63, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v11, v62, v5, v10, v13, v7, v65, s11, v31, v9, v64, v63, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: [v66]
// [Asm] live_set: [v11, v62, v66, v5, v10, v13, v7, s11, v31, v9, v64, v63, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v66 is X
// [Asm] defs: [v67]
// [Asm] live_set: [v11, v62, v5, v10, v13, v67, v7, s11, v31, v9, v63, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: [v68]
// [Asm] live_set: [v11, v62, v5, v10, v13, v7, s11, v31, v9, v63, zero, v68, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: [v235]
// [Asm] live_set: [v11, v62, v5, v10, v13, v7, s11, v31, v235, v9, v63, zero, v68, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v235 is X
// [Asm] defs: [v69]
// [Asm] live_set: [v11, v62, v5, v69, v10, v13, v7, s11, v31, v9, v63, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: [v70]
// [Asm] live_set: [v11, v62, v5, v10, v13, v7, s11, v31, v9, zero, v23, v70, v2]
// [Asm] move_origin: []
// [Asm] defined: v70 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v11, v5, v71, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, v31, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v232]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v232, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v232 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v152]
// [Asm] live_set: [v11, v5, v10, v13, v7, s11, v31, v9, v39, zero, v23, v152, v2]
// [Asm] move_origin: []
// [Asm] defined: v152 is X
// [Asm] defs: [v164]
// [Asm] live_set: [v11, v5, v10, v13, v7, s11, v31, v9, v39, v164, zero, v23, v152, v2]
// [Asm] move_origin: []
// [Asm] defined: v164 is X
// [Asm] defs: [v153]
// [Asm] live_set: [v11, v153, v5, v10, v13, v7, s11, v31, v9, v39, zero, v23, v152, v2]
// [Asm] move_origin: []
// [Asm] defined: v153 is X
// [Asm] defs: [v163]
// [Asm] live_set: [v11, v153, v5, v10, v13, v7, s11, v31, v9, v39, zero, v23, v163, v2]
// [Asm] move_origin: []
// [Asm] defined: v163 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v39, v2]
// [Asm] move_origin: []
// [Asm] defs: [v155]
// [Asm] live_set: [v11, v155, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v155 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v39, v2]
// [Asm] move_origin: [v155]
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v39, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [v2, v11, v5, v10, v13, v7, s11, v31, v9, v39, zero, v23, v40]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v39, v2]
// [Asm] move_origin: []
// [Asm] defs: [v130]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, v130, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v130 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v5, v10, v13, a0, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v5, v10, v13, a0, v7, v17, a1, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: [v31]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v5, v10, v13, a0, v7, a2, v17, a1, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: [v23]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v5, v10, v13, a0, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v132]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v132 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defs: [v133]
// [Asm] live_set: [v11, v5, v10, v13, v133, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v133 is X
// [Asm] defs: [v134]
// [Asm] live_set: [v11, v5, v10, v13, v133, v7, v134, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v134 is X
// [Asm] defs: [v180]
// [Asm] live_set: [v11, v5, v10, v13, v7, v134, v17, s11, v31, v9, zero, v23, v8, v180, v2]
// [Asm] move_origin: []
// [Asm] defined: v180 is X
// [Asm] defs: [v181]
// [Asm] live_set: [v11, v5, v10, v13, v7, v134, v17, s11, v31, v9, zero, v23, v8, v181, v2]
// [Asm] move_origin: []
// [Asm] defined: v181 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defs: [v137]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v137, v2]
// [Asm] move_origin: []
// [Asm] defined: v137 is X
// [Asm] defs: [v138]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, v138, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v138 is X
// [Asm] defs: [v176]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, v138, v176, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v176 is X
// [Asm] defs: [v139]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, v138, zero, v23, v8, v139, v2]
// [Asm] move_origin: []
// [Asm] defined: v139 is X
// [Asm] defs: [v140]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, v138, zero, v23, v8, v140, v2]
// [Asm] move_origin: []
// [Asm] defined: v140 is X
// [Asm] defs: [v174]
// [Asm] live_set: [v11, v174, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v140, v2]
// [Asm] move_origin: []
// [Asm] defined: v174 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defs: [v142]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, v142, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v142 is X
// [Asm] defs: [v170]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v170, v2]
// [Asm] move_origin: []
// [Asm] defined: v170 is X
// [Asm] defs: [v171]
// [Asm] live_set: [v11, v5, v10, v171, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v171 is X
// [Asm] defs: [v144]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v144, v2]
// [Asm] move_origin: []
// [Asm] defined: v144 is X
// [Asm] defs: [v169]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v169, v23, v8, v144, v2]
// [Asm] move_origin: []
// [Asm] defined: v169 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v125]
// [Asm] live_set: [v11, v5, v10, zero, v13, v125, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v125 is X
// [Asm] defs: [v126]
// [Asm] live_set: [v11, v5, v10, zero, v13, v126, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v126 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: [v31]
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v146]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, v146, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v146 is X
// [Asm] defs: [v147]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v147, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v147 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v39, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v39 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, v32, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v259]
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, v32, s11, v31, v9, v259, v2]
// [Asm] move_origin: []
// [Asm] defined: v259 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v36]
// [Asm] live_set: [v5, s11, v36]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v37, s11, v36]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v37, v14, v36]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v37, v14, v36]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v37, v14]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v121]
// [Asm] live_set: [v11, v5, v10, v121, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v121 is X
// [Asm] defs: [v189]
// [Asm] live_set: [v189, v11, v5, v10, v121, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v189 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v47]
// [Asm] live_set: [v11, v46, v5, v10, v13, v7, s11, v31, v9, zero, v23, v47, v2]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v268]
// [Asm] live_set: [v268, zero, v23, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v268 is X
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v23, v7, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v23, v7, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v23, v7, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [v266]
// [Asm] live_set: [zero, v23, v7, s11, v266, v2]
// [Asm] move_origin: []
// [Asm] defined: v266 is X
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v23, v7, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v23, v7, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v23, v7, s11, v9, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, zero, v23, v7, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, zero, v23, v7, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v23, v7, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v11, zero, v13, v23, v7, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, zero, v13, v23, v7, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v13, v23, v7, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v11, v5, zero, v13, v23, v7, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, zero, v13, v23, v7, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, v13, v23, v7, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v13, v23, v7, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v11, v5, v10, zero, v13, v23, v7, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v11, v5, v10, zero, v13, v23, v7, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v5, v10, zero, v13, v23, v7, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v75]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v75, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: [v228]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v75, zero, v23, v228, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v228 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v124]
// [Asm] live_set: [v11, v5, v124, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] move_origin: [v123]
// [Asm] defined: v124 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v5, s11, v13, v35]
// [Asm] move_origin: [v34]
// [Asm] defined: v35 is X
// [Asm] defs: [v106]
// [Asm] live_set: [v11, v5, v10, v13, v7, s11, v31, v9, v106, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v106 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defs: [v108]
// [Asm] live_set: [v11, v5, v10, v13, v7, v108, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v108 is X
// [Asm] defs: [v109]
// [Asm] live_set: [v11, v5, v10, v13, v7, v108, s11, v31, v9, v109, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v109 is X
// [Asm] defs: [v110]
// [Asm] live_set: [v11, v5, v10, v13, v110, v7, v108, s11, v31, v9, v109, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v110 is X
// [Asm] defs: [v111]
// [Asm] live_set: [v11, v5, v10, v13, v110, v7, v108, v111, s11, v31, v9, v109, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v111 is X
// [Asm] defs: [v112]
// [Asm] live_set: [v11, v5, v10, v13, v110, v7, v108, s11, v31, v9, v109, v112, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v112 is X
// [Asm] defs: [v113]
// [Asm] live_set: [v11, v5, v10, v13, v7, v108, s11, v31, v9, v113, v109, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v113 is X
// [Asm] defs: [v114]
// [Asm] live_set: [v11, v5, v10, v13, v7, v114, v108, s11, v31, v9, v109, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v114 is X
// [Asm] defs: [v196]
// [Asm] live_set: [v11, v5, v10, v13, v7, v114, v108, s11, v31, v196, v9, v109, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v196 is X
// [Asm] defs: [v115]
// [Asm] live_set: [v11, v5, v10, v13, v7, v108, s11, v31, v9, v109, v115, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v115 is X
// [Asm] defs: [v116]
// [Asm] live_set: [v11, v116, v5, v10, v13, v7, v108, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v116 is X
// [Asm] defs: [v117]
// [Asm] live_set: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v117, v2]
// [Asm] move_origin: []
// [Asm] defined: v117 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v5, v10, v13, v7, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v193]
// [Asm] live_set: [v11, v5, v10, v13, v7, s11, v31, v9, v193, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v193 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v271]
// [Asm] live_set: [v271, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v271 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, s11, zero, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v4, s11, zero, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v19 is X
// [Asm] defs: [v100]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v100, v2]
// [Asm] move_origin: []
// [Asm] defined: v100 is X
// [Asm] defs: [v101]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v101, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v101 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v84]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v84, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v84 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v16, v5, v10, v13, a0, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v16, v5, v10, v13, a0, v7, a1, s11, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: [v31]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v16, v5, v10, v13, a0, v7, a2, a1, s11, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: [v23]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v16, v5, v10, v13, a0, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v86]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v86 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defs: [v87]
// [Asm] live_set: [v11, v16, v5, v87, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v87 is X
// [Asm] defs: [v88]
// [Asm] live_set: [v11, v16, v5, v87, v10, v13, v7, v88, s11, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v88 is X
// [Asm] defs: [v219]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, v88, s11, v31, v9, v219, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v219 is X
// [Asm] defs: [v220]
// [Asm] live_set: [v11, v16, v5, v10, v13, v220, v7, v88, s11, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v220 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defs: [v91]
// [Asm] live_set: [v11, v16, v5, v91, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v91 is X
// [Asm] defs: [v92]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, v92, s11, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v92 is X
// [Asm] defs: [v215]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, v92, s11, v31, v9, v215, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v215 is X
// [Asm] defs: [v93]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, v92, s11, v31, v9, v93, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v93 is X
// [Asm] defs: [v94]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, v92, s11, v31, v9, v94, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v94 is X
// [Asm] defs: [v213]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v94, zero, v23, v213, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v213 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defs: [v96]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v96, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v96 is X
// [Asm] defs: [v209]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v209, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v209 is X
// [Asm] defs: [v210]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v210, v2]
// [Asm] move_origin: []
// [Asm] defined: v210 is X
// [Asm] defs: [v98]
// [Asm] live_set: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v98, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v98 is X
// [Asm] defs: [v208]
// [Asm] live_set: [v11, v16, v5, v10, v13, v208, v7, s11, v31, v9, v98, zero, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v208 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of fannkuch.572"];
// [Asm]   r0 [label="v22 ← a0", color=green];
// [Asm]   r9 [label="v13 ← s5", color=green];
// [Asm]   r26 [label="t4", color=blue];
// [Asm]   r118 [label="v113 ← a2", color=green];
// [Asm]   r44 [label="v77 ← a0", color=green];
// [Asm]   r56 [label="v60 ← a1", color=green];
// [Asm]   r10 [label="v7 ← s6", color=green];
// [Asm]   r111 [label="v35 ← a0", color=green];
// [Asm]   r54 [label="v34 ← a0", color=green];
// [Asm]   r24 [label="t2", color=blue];
// [Asm]   r126 [label="v100 ← a0", color=green];
// [Asm]   r119 [label="v114 ← a2", color=green];
// [Asm]   r88 [label="v142 ← a0", color=green];
// [Asm]   r80 [label="v180 ← a0", color=green];
// [Asm]   r142 [label="v210 ← a0", color=green];
// [Asm]   r39 [label="v17 ← s2", color=green];
// [Asm]   r65 [label="v69 ← a2", color=green];
// [Asm]   r79 [label="v134 ← a1", color=green];
// [Asm]   r113 [label="v108 ← a0", color=green];
// [Asm]   r128 [label="v84 ← a0", color=green];
// [Asm]   r67 [label="v71 ← a0", color=green];
// [Asm]   r77 [label="v132 ← a0", color=green];
// [Asm]   r11 [label="v31 ← s7", color=green];
// [Asm]   r58 [label="v63 ← a1", color=green];
// [Asm]   r105 [label="v268 ← a0", color=green];
// [Asm]   r14 [label="a0", color=blue];
// [Asm]   r78 [label="v133 ← a0", color=green];
// [Asm]   r140 [label="v96 ← a0", color=green];
// [Asm]   r16 [label="a2", color=blue];
// [Asm]   r21 [label="a7", color=blue];
// [Asm]   r60 [label="v65 ← a3", color=green];
// [Asm]   r73 [label="v163 ← a0", color=green];
// [Asm]   r93 [label="v125 ← a0", color=green];
// [Asm]   r38 [label="v128 ← a0", color=green];
// [Asm]   r122 [label="v116 ← a1", color=green];
// [Asm]   r87 [label="v174 ← a0", color=green];
// [Asm]   r95 [label="v146 ← a0", color=green];
// [Asm]   r7 [label="v5 ← s3", color=green];
// [Asm]   r144 [label="v208 ← a1", color=green];
// [Asm]   r64 [label="v235 ← a3", color=green];
// [Asm]   r66 [label="v70 ← a1", color=green];
// [Asm]   r115 [label="v110 ← a2", color=green];
// [Asm]   r130 [label="v87 ← a0", color=green];
// [Asm]   r138 [label="v94 ← a1", color=green];
// [Asm]   r70 [label="v39 ← a1", color=green];
// [Asm]   r48 [label="v12 ← a1", color=green];
// [Asm]   r37 [label="v123 ← a0", color=green];
// [Asm]   r102 [label="v121 ← a0", color=green];
// [Asm]   r123 [label="v117 ← a0", color=green];
// [Asm]   r125 [label="v271 ← a0", color=green];
// [Asm]   r71 [label="v164 ← a2", color=green];
// [Asm]   r22 [label="t0", color=blue];
// [Asm]   r84 [label="v176 ← a1", color=green];
// [Asm]   r45 [label="v57 ← a0", color=green];
// [Asm]   r92 [label="v169 ← a1", color=green];
// [Asm]   r107 [label="v3 ← a0", color=green];
// [Asm]   r63 [label="v68 ← a2", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r18 [label="a4", color=blue];
// [Asm]   r137 [label="v93 ← a1", color=green];
// [Asm]   r19 [label="a5", color=blue];
// [Asm]   r139 [label="v213 ← a0", color=green];
// [Asm]   r121 [label="v115 ← a2", color=green];
// [Asm]   r90 [label="v171 ← a0", color=green];
// [Asm]   r97 [label="v32 ← a0", color=green];
// [Asm]   r81 [label="v181 ← a0", color=green];
// [Asm]   r94 [label="v126 ← a0", color=green];
// [Asm]   r101 [label="v14 ← a2", color=green];
// [Asm]   r46 [label="v42 ← a0", color=green];
// [Asm]   r120 [label="v196 ← a3", color=green];
// [Asm]   r33 [label="v158 ← a1", color=green];
// [Asm]   r59 [label="v64 ← a2", color=green];
// [Asm]   r76 [label="v130 ← a0", color=green];
// [Asm]   r86 [label="v140 ← a1", color=green];
// [Asm]   r53 [label="v15 ← s10", color=green];
// [Asm]   r5 [label="v11 ← s1", color=green];
// [Asm]   r43 [label="v55 ← a0", color=green];
// [Asm]   r31 [label="v4 ← a0", color=green];
// [Asm]   r99 [label="v36 ← a0", color=green];
// [Asm]   r133 [label="v220 ← a0", color=green];
// [Asm]   r17 [label="a3", color=blue];
// [Asm]   r52 [label="v16 ← s2", color=green];
// [Asm]   r129 [label="v86 ← a0", color=green];
// [Asm]   r20 [label="a6", color=blue];
// [Asm]   r61 [label="v66 ← a3", color=green];
// [Asm]   r23 [label="t1", color=blue];
// [Asm]   r3 [label="v2 ← s0", color=green];
// [Asm]   r108 [label="v75 ← a0", color=green];
// [Asm]   r132 [label="v219 ← a0", color=green];
// [Asm]   r82 [label="v137 ← a0", color=green];
// [Asm]   r75 [label="v40 ← a0", color=green];
// [Asm]   r27 [label="v50 ← a0", color=green];
// [Asm]   r62 [label="v67 ← a2", color=green];
// [Asm]   r40 [label="v8 ← s10", color=green];
// [Asm]   r110 [label="v124 ← a0", color=green];
// [Asm]   r34 [label="v78 ← a0", color=green];
// [Asm]   r83 [label="v138 ← a0", color=green];
// [Asm]   r103 [label="v189 ← a1", color=green];
// [Asm]   r134 [label="v91 ← a0", color=green];
// [Asm]   r96 [label="v147 ← a0", color=green];
// [Asm]   r51 [label="v82 ← a0", color=green];
// [Asm]   r135 [label="v92 ← a0", color=green];
// [Asm]   r55 [label="v59 ← a0", color=green];
// [Asm]   r136 [label="v215 ← a1", color=green];
// [Asm]   r72 [label="v153 ← a2", color=green];
// [Asm]   r104 [label="v47 ← a0", color=green];
// [Asm]   r116 [label="v111 ← a3", color=green];
// [Asm]   r100 [label="v37 ← a1", color=green];
// [Asm]   r85 [label="v139 ← a1", color=green];
// [Asm]   r47 [label="v44 ← a0", color=green];
// [Asm]   r6 [label="v46 ← s2", color=green];
// [Asm]   r13 [label="v23 ← s9", color=green];
// [Asm]   r42 [label="v54 ← a0", color=green];
// [Asm]   r117 [label="v112 ← a3", color=green];
// [Asm]   r4 [label="v6 ← a2", color=green];
// [Asm]   r29 [label="v160 ← a1", color=green];
// [Asm]   r35 [label="v20 ← a1", color=green];
// [Asm]   r131 [label="v88 ← a1", color=green];
// [Asm]   r114 [label="v109 ← a1", color=green];
// [Asm]   r8 [label="v10 ← s4", color=green];
// [Asm]   r36 [label="v58 ← a0", color=green];
// [Asm]   r112 [label="v106 ← a0", color=green];
// [Asm]   r32 [label="v161 ← a1", color=green];
// [Asm]   r15 [label="a1", color=blue];
// [Asm]   r49 [label="v79 ← a0", color=green];
// [Asm]   r74 [label="v155 ← a0", color=green];
// [Asm]   r57 [label="v62 ← a0", color=green];
// [Asm]   r141 [label="v209 ← a0", color=green];
// [Asm]   r68 [label="v232 ← a0", color=green];
// [Asm]   r98 [label="v259 ← a1", color=green];
// [Asm]   r124 [label="v193 ← a0", color=green];
// [Asm]   r91 [label="v144 ← a0", color=green];
// [Asm]   r12 [label="v9 ← s8", color=green];
// [Asm]   r106 [label="v266 ← a0", color=green];
// [Asm]   r109 [label="v228 ← a1", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r127 [label="v101 ← a0", color=green];
// [Asm]   r28 [label="v51 ← a0", color=green];
// [Asm]   r41 [label="v52 ← a0", color=green];
// [Asm]   r69 [label="v152 ← a0", color=green];
// [Asm]   r89 [label="v170 ← a0", color=green];
// [Asm]   r50 [label="v80 ← a0", color=green];
// [Asm]   r30 [label="v19 ← a2", color=green];
// [Asm]   r25 [label="t3", color=blue];
// [Asm]   r143 [label="v98 ← a0", color=green];
// [Asm]   r7 -- r117;
// [Asm]   r12 -- r25;
// [Asm]   r5 -- r69;
// [Asm]   r10 -- r64;
// [Asm]   r7 -- r112;
// [Asm]   r12 -- r142;
// [Asm]   r2 -- r38;
// [Asm]   r12 -- r91;
// [Asm]   r2 -- r78;
// [Asm]   r10 -- r53;
// [Asm]   r11 -- r78;
// [Asm]   r9 -- r107;
// [Asm]   r113 -- r121;
// [Asm]   r8 -- r142;
// [Asm]   r2 -- r142;
// [Asm]   r8 -- r130;
// [Asm]   r8 -- r36;
// [Asm]   r15 -- r31;
// [Asm]   r52 -- r143;
// [Asm]   r11 -- r130;
// [Asm]   r5 -- r135;
// [Asm]   r69 -- r72;
// [Asm]   r13 -- r82;
// [Asm]   r3 -- r139;
// [Asm]   r2 -- r91;
// [Asm]   r3 -- r9;
// [Asm]   r53 -- r143;
// [Asm]   r9 -- r78;
// [Asm]   r7 -- r78;
// [Asm]   r3 -- r107;
// [Asm]   r13 -- r67;
// [Asm]   r10 -- r103;
// [Asm]   r3 -- r86;
// [Asm]   r5 -- r65;
// [Asm]   r39 -- r87;
// [Asm]   r2 -- r51;
// [Asm]   r11 -- r55;
// [Asm]   r53 -- r130;
// [Asm]   r57 -- r61;
// [Asm]   r3 -- r26;
// [Asm]   r12 -- r120;
// [Asm]   r3 -- r70;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r62;
// [Asm]   r2 -- r41;
// [Asm]   r13 -- r95;
// [Asm]   r2 -- r123;
// [Asm]   r1 -- r68;
// [Asm]   r9 -- r73;
// [Asm]   r2 -- r139;
// [Asm]   r7 -- r144;
// [Asm]   r3 -- r48;
// [Asm]   r9 -- r14;
// [Asm]   r11 -- r144;
// [Asm]   r1 -- r112;
// [Asm]   r9 -- r62;
// [Asm]   r8 -- r95;
// [Asm]   r10 -- r98;
// [Asm]   r11 -- r80;
// [Asm]   r5 -- r107;
// [Asm]   r8 -- r16;
// [Asm]   r2 -- r48;
// [Asm]   r5 -- r121;
// [Asm]   r10 -- r121;
// [Asm]   r13 -- r71;
// [Asm]   r5 -- r119;
// [Asm]   r10 -- r18;
// [Asm]   r53 -- r108;
// [Asm]   r9 -- r136;
// [Asm]   r8 -- r139;
// [Asm]   r11 -- r73;
// [Asm]   r8 -- r97;
// [Asm]   r1 -- r2;
// [Asm]   r97 -- r98;
// [Asm]   r1 -- r137;
// [Asm]   r1 -- r11;
// [Asm]   r11 -- r43;
// [Asm]   r12 -- r43;
// [Asm]   r5 -- r51;
// [Asm]   r12 -- r23;
// [Asm]   r13 -- r98;
// [Asm]   r2 -- r98;
// [Asm]   r9 -- r122;
// [Asm]   r10 -- r135;
// [Asm]   r1 -- r35;
// [Asm]   r7 -- r140;
// [Asm]   r9 -- r39;
// [Asm]   r11 -- r131;
// [Asm]   r12 -- r62;
// [Asm]   r2 -- r69;
// [Asm]   r1 -- r117;
// [Asm]   r6 -- r25;
// [Asm]   r5 -- r143;
// [Asm]   r59 -- r61;
// [Asm]   r5 -- r120;
// [Asm]   r7 -- r44;
// [Asm]   r8 -- r136;
// [Asm]   r11 -- r62;
// [Asm]   r2 -- r73;
// [Asm]   r114 -- r115;
// [Asm]   r10 -- r94;
// [Asm]   r39 -- r76;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r103;
// [Asm]   r39 -- r82;
// [Asm]   r7 -- r116;
// [Asm]   r53 -- r136;
// [Asm]   r1 -- r55;
// [Asm]   r29 -- r30;
// [Asm]   r12 -- r34;
// [Asm]   r1 -- r140;
// [Asm]   r11 -- r70;
// [Asm]   r72 -- r73;
// [Asm]   r12 -- r97;
// [Asm]   r7 -- r103;
// [Asm]   r9 -- r123;
// [Asm]   r1 -- r105;
// [Asm]   r3 -- r104;
// [Asm]   r9 -- r116;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r9 -- r76;
// [Asm]   r11 -- r86;
// [Asm]   r3 -- r83;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r114;
// [Asm]   r3 -- r113;
// [Asm]   r8 -- r42;
// [Asm]   r5 -- r11;
// [Asm]   r9 -- r84;
// [Asm]   r12 -- r50;
// [Asm]   r7 -- r75;
// [Asm]   r10 -- r127;
// [Asm]   r8 -- r109;
// [Asm]   r18 -- r39;
// [Asm]   r5 -- r74;
// [Asm]   r10 -- r81;
// [Asm]   r9 -- r102;
// [Asm]   r12 -- r143;
// [Asm]   r18 -- r53;
// [Asm]   r9 -- r11;
// [Asm]   r1 -- r141;
// [Asm]   r3 -- r65;
// [Asm]   r9 -- r83;
// [Asm]   r5 -- r93;
// [Asm]   r5 -- r97;
// [Asm]   r1 -- r126;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r141;
// [Asm]   r9 -- r63;
// [Asm]   r11 -- r52;
// [Asm]   r14 -- r25;
// [Asm]   r38 -- r40;
// [Asm]   r8 -- r126;
// [Asm]   r9 -- r24;
// [Asm]   r10 -- r15;
// [Asm]   r8 -- r18;
// [Asm]   r12 -- r121;
// [Asm]   r9 -- r119;
// [Asm]   r9 -- r36;
// [Asm]   r7 -- r36;
// [Asm]   r1 -- r72;
// [Asm]   r13 -- r52;
// [Asm]   r1 -- r99;
// [Asm]   r12 -- r144;
// [Asm]   r13 -- r103;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r60;
// [Asm]   r70 -- r72;
// [Asm]   r10 -- r128;
// [Asm]   r12 -- r16;
// [Asm]   r113 -- r117;
// [Asm]   r12 -- r17;
// [Asm]   r9 -- r46;
// [Asm]   r11 -- r87;
// [Asm]   r26 -- r52;
// [Asm]   r13 -- r68;
// [Asm]   r3 -- r23;
// [Asm]   r70 -- r73;
// [Asm]   r13 -- r94;
// [Asm]   r8 -- r133;
// [Asm]   r7 -- r46;
// [Asm]   r10 -- r129;
// [Asm]   r8 -- r123;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r2 -- r58;
// [Asm]   r5 -- r132;
// [Asm]   r8 -- r135;
// [Asm]   r10 -- r62;
// [Asm]   r5 -- r12;
// [Asm]   r11 -- r44;
// [Asm]   r10 -- r79;
// [Asm]   r9 -- r25;
// [Asm]   r39 -- r81;
// [Asm]   r8 -- r93;
// [Asm]   r11 -- r68;
// [Asm]   r5 -- r63;
// [Asm]   r12 -- r81;
// [Asm]   r2 -- r15;
// [Asm]   r10 -- r115;
// [Asm]   r13 -- r61;
// [Asm]   r5 -- r8;
// [Asm]   r1 -- r125;
// [Asm]   r69 -- r70;
// [Asm]   r3 -- r112;
// [Asm]   r7 -- r56;
// [Asm]   r3 -- r56;
// [Asm]   r8 -- r68;
// [Asm]   r7 -- r77;
// [Asm]   r1 -- r144;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r85;
// [Asm]   r10 -- r19;
// [Asm]   r3 -- r32;
// [Asm]   r29 -- r31;
// [Asm]   r1 -- r17;
// [Asm]   r9 -- r45;
// [Asm]   r15 -- r53;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r60;
// [Asm]   r3 -- r89;
// [Asm]   r5 -- r139;
// [Asm]   r3 -- r18;
// [Asm]   r9 -- r41;
// [Asm]   r14 -- r39;
// [Asm]   r52 -- r144;
// [Asm]   r40 -- r87;
// [Asm]   r8 -- r91;
// [Asm]   r11 -- r103;
// [Asm]   r1 -- r70;
// [Asm]   r13 -- r90;
// [Asm]   r10 -- r113;
// [Asm]   r1 -- r103;
// [Asm]   r1 -- r31;
// [Asm]   r40 -- r103;
// [Asm]   r11 -- r122;
// [Asm]   r10 -- r56;
// [Asm]   r1 -- r87;
// [Asm]   r5 -- r104;
// [Asm]   r3 -- r97;
// [Asm]   r5 -- r86;
// [Asm]   r52 -- r128;
// [Asm]   r11 -- r48;
// [Asm]   r39 -- r92;
// [Asm]   r53 -- r140;
// [Asm]   r7 -- r93;
// [Asm]   r2 -- r46;
// [Asm]   r58 -- r59;
// [Asm]   r13 -- r43;
// [Asm]   r7 -- r63;
// [Asm]   r6 -- r18;
// [Asm]   r8 -- r78;
// [Asm]   r8 -- r94;
// [Asm]   r9 -- r141;
// [Asm]   r3 -- r40;
// [Asm]   r9 -- r137;
// [Asm]   r11 -- r141;
// [Asm]   r9 -- r59;
// [Asm]   r9 -- r120;
// [Asm]   r9 -- r87;
// [Asm]   r3 -- r123;
// [Asm]   r12 -- r115;
// [Asm]   r7 -- r121;
// [Asm]   r24 -- r52;
// [Asm]   r3 -- r69;
// [Asm]   r5 -- r80;
// [Asm]   r3 -- r27;
// [Asm]   r12 -- r113;
// [Asm]   r2 -- r97;
// [Asm]   r13 -- r18;
// [Asm]   r3 -- r95;
// [Asm]   r13 -- r57;
// [Asm]   r5 -- r7;
// [Asm]   r10 -- r141;
// [Asm]   r12 -- r86;
// [Asm]   r2 -- r129;
// [Asm]   r2 -- r103;
// [Asm]   r12 -- r90;
// [Asm]   r11 -- r96;
// [Asm]   r13 -- r22;
// [Asm]   r8 -- r11;
// [Asm]   r39 -- r90;
// [Asm]   r10 -- r25;
// [Asm]   r1 -- r136;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r110;
// [Asm]   r12 -- r68;
// [Asm]   r114 -- r118;
// [Asm]   r12 -- r53;
// [Asm]   r55 -- r56;
// [Asm]   r11 -- r25;
// [Asm]   r13 -- r115;
// [Asm]   r10 -- r17;
// [Asm]   r11 -- r117;
// [Asm]   r12 -- r135;
// [Asm]   r2 -- r72;
// [Asm]   r13 -- r24;
// [Asm]   r9 -- r98;
// [Asm]   r2 -- r141;
// [Asm]   r40 -- r77;
// [Asm]   r52 -- r134;
// [Asm]   r2 -- r122;
// [Asm]   r12 -- r38;
// [Asm]   r9 -- r60;
// [Asm]   r7 -- r111;
// [Asm]   r11 -- r57;
// [Asm]   r13 -- r46;
// [Asm]   r11 -- r137;
// [Asm]   r11 -- r91;
// [Asm]   r7 -- r88;
// [Asm]   r53 -- r138;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r1 -- r127;
// [Asm]   r9 -- r103;
// [Asm]   r3 -- r134;
// [Asm]   r7 -- r99;
// [Asm]   r13 -- r109;
// [Asm]   r13 -- r128;
// [Asm]   r13 -- r112;
// [Asm]   r7 -- r71;
// [Asm]   r1 -- r60;
// [Asm]   r6 -- r16;
// [Asm]   r12 -- r94;
// [Asm]   r5 -- r87;
// [Asm]   r11 -- r119;
// [Asm]   r1 -- r65;
// [Asm]   r10 -- r27;
// [Asm]   r11 -- r143;
// [Asm]   r53 -- r139;
// [Asm]   r1 -- r66;
// [Asm]   r12 -- r107;
// [Asm]   r9 -- r67;
// [Asm]   r8 -- r110;
// [Asm]   r7 -- r115;
// [Asm]   r10 -- r137;
// [Asm]   r1 -- r39;
// [Asm]   r9 -- r44;
// [Asm]   r2 -- r63;
// [Asm]   r7 -- r123;
// [Asm]   r113 -- r114;
// [Asm]   r1 -- r106;
// [Asm]   r135 -- r138;
// [Asm]   r12 -- r42;
// [Asm]   r40 -- r86;
// [Asm]   r7 -- r37;
// [Asm]   r9 -- r112;
// [Asm]   r2 -- r57;
// [Asm]   r4 -- r11;
// [Asm]   r1 -- r133;
// [Asm]   r9 -- r38;
// [Asm]   r15 -- r17;
// [Asm]   r3 -- r84;
// [Asm]   r52 -- r138;
// [Asm]   r3 -- r129;
// [Asm]   r8 -- r52;
// [Asm]   r11 -- r116;
// [Asm]   r8 -- r67;
// [Asm]   r2 -- r104;
// [Asm]   r7 -- r114;
// [Asm]   r12 -- r49;
// [Asm]   r5 -- r133;
// [Asm]   r10 -- r23;
// [Asm]   r3 -- r55;
// [Asm]   r12 -- r102;
// [Asm]   r1 -- r83;
// [Asm]   r1 -- r138;
// [Asm]   r12 -- r39;
// [Asm]   r11 -- r79;
// [Asm]   r1 -- r84;
// [Asm]   r9 -- r113;
// [Asm]   r19 -- r52;
// [Asm]   r9 -- r65;
// [Asm]   r9 -- r16;
// [Asm]   r1 -- r73;
// [Asm]   r13 -- r142;
// [Asm]   r2 -- r71;
// [Asm]   r40 -- r96;
// [Asm]   r9 -- r19;
// [Asm]   r7 -- r50;
// [Asm]   r11 -- r27;
// [Asm]   r7 -- r68;
// [Asm]   r5 -- r43;
// [Asm]   r3 -- r109;
// [Asm]   r2 -- r110;
// [Asm]   r7 -- r69;
// [Asm]   r9 -- r54;
// [Asm]   r5 -- r76;
// [Asm]   r10 -- r21;
// [Asm]   r16 -- r52;
// [Asm]   r3 -- r116;
// [Asm]   r40 -- r102;
// [Asm]   r1 -- r93;
// [Asm]   r12 -- r18;
// [Asm]   r8 -- r138;
// [Asm]   r3 -- r44;
// [Asm]   r13 -- r124;
// [Asm]   r2 -- r133;
// [Asm]   r7 -- r51;
// [Asm]   r5 -- r82;
// [Asm]   r3 -- r91;
// [Asm]   r113 -- r119;
// [Asm]   r12 -- r84;
// [Asm]   r1 -- r90;
// [Asm]   r53 -- r109;
// [Asm]   r5 -- r21;
// [Asm]   r8 -- r51;
// [Asm]   r10 -- r61;
// [Asm]   r1 -- r30;
// [Asm]   r7 -- r97;
// [Asm]   r13 -- r66;
// [Asm]   r11 -- r74;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r81;
// [Asm]   r5 -- r85;
// [Asm]   r5 -- r22;
// [Asm]   r22 -- r52;
// [Asm]   r7 -- r84;
// [Asm]   r2 -- r140;
// [Asm]   r1 -- r45;
// [Asm]   r52 -- r68;
// [Asm]   r12 -- r69;
// [Asm]   r11 -- r67;
// [Asm]   r10 -- r89;
// [Asm]   r11 -- r121;
// [Asm]   r1 -- r52;
// [Asm]   r12 -- r132;
// [Asm]   r5 -- r129;
// [Asm]   r13 -- r64;
// [Asm]   r11 -- r18;
// [Asm]   r10 -- r40;
// [Asm]   r9 -- r68;
// [Asm]   r8 -- r120;
// [Asm]   r7 -- r138;
// [Asm]   r5 -- r122;
// [Asm]   r3 -- r5;
// [Asm]   r114 -- r121;
// [Asm]   r7 -- r132;
// [Asm]   r12 -- r103;
// [Asm]   r8 -- r12;
// [Asm]   r23 -- r53;
// [Asm]   r8 -- r61;
// [Asm]   r8 -- r24;
// [Asm]   r3 -- r92;
// [Asm]   r10 -- r104;
// [Asm]   r8 -- r75;
// [Asm]   r13 -- r38;
// [Asm]   r5 -- r116;
// [Asm]   r2 -- r25;
// [Asm]   r22 -- r53;
// [Asm]   r83 -- r85;
// [Asm]   r14 -- r53;
// [Asm]   r13 -- r63;
// [Asm]   r3 -- r141;
// [Asm]   r2 -- r83;
// [Asm]   r5 -- r117;
// [Asm]   r8 -- r132;
// [Asm]   r10 -- r38;
// [Asm]   r13 -- r55;
// [Asm]   r10 -- r12;
// [Asm]   r1 -- r77;
// [Asm]   r8 -- r134;
// [Asm]   r12 -- r104;
// [Asm]   r2 -- r67;
// [Asm]   r12 -- r138;
// [Asm]   r13 -- r83;
// [Asm]   r53 -- r126;
// [Asm]   r113 -- r120;
// [Asm]   r13 -- r138;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r12 -- r116;
// [Asm]   r3 -- r124;
// [Asm]   r9 -- r74;
// [Asm]   r5 -- r55;
// [Asm]   r8 -- r70;
// [Asm]   r8 -- r108;
// [Asm]   r40 -- r124;
// [Asm]   r3 -- r49;
// [Asm]   r2 -- r36;
// [Asm]   r1 -- r80;
// [Asm]   r12 -- r21;
// [Asm]   r7 -- r42;
// [Asm]   r6 -- r23;
// [Asm]   r40 -- r82;
// [Asm]   r11 -- r36;
// [Asm]   r3 -- r127;
// [Asm]   r4 -- r14;
// [Asm]   r3 -- r46;
// [Asm]   r7 -- r65;
// [Asm]   r7 -- r67;
// [Asm]   r53 -- r132;
// [Asm]   r14 -- r15;
// [Asm]   r9 -- r89;
// [Asm]   r1 -- r111;
// [Asm]   r51 -- r52;
// [Asm]   r2 -- r116;
// [Asm]   r7 -- r139;
// [Asm]   r40 -- r89;
// [Asm]   r12 -- r119;
// [Asm]   r5 -- r131;
// [Asm]   r3 -- r45;
// [Asm]   r19 -- r40;
// [Asm]   r40 -- r76;
// [Asm]   r13 -- r15;
// [Asm]   r8 -- r143;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r43;
// [Asm]   r57 -- r65;
// [Asm]   r7 -- r133;
// [Asm]   r114 -- r120;
// [Asm]   r30 -- r35;
// [Asm]   r25 -- r53;
// [Asm]   r1 -- r34;
// [Asm]   r102 -- r103;
// [Asm]   r12 -- r72;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r53 -- r133;
// [Asm]   r9 -- r91;
// [Asm]   r9 -- r94;
// [Asm]   r8 -- r9;
// [Asm]   r10 -- r107;
// [Asm]   r11 -- r126;
// [Asm]   r9 -- r110;
// [Asm]   r2 -- r65;
// [Asm]   r2 -- r88;
// [Asm]   r2 -- r80;
// [Asm]   r6 -- r22;
// [Asm]   r39 -- r103;
// [Asm]   r79 -- r80;
// [Asm]   r11 -- r108;
// [Asm]   r3 -- r135;
// [Asm]   r52 -- r133;
// [Asm]   r10 -- r51;
// [Asm]   r11 -- r114;
// [Asm]   r13 -- r114;
// [Asm]   r8 -- r64;
// [Asm]   r5 -- r113;
// [Asm]   r39 -- r102;
// [Asm]   r1 -- r130;
// [Asm]   r3 -- r114;
// [Asm]   r3 -- r57;
// [Asm]   r2 -- r40;
// [Asm]   r6 -- r27;
// [Asm]   r12 -- r20;
// [Asm]   r4 -- r15;
// [Asm]   r12 -- r41;
// [Asm]   r11 -- r65;
// [Asm]   r9 -- r70;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r10 -- r43;
// [Asm]   r1 -- r81;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r13 -- r23;
// [Asm]   r8 -- r140;
// [Asm]   r1 -- r94;
// [Asm]   r11 -- r59;
// [Asm]   r14 -- r21;
// [Asm]   r7 -- r15;
// [Asm]   r7 -- r85;
// [Asm]   r119 -- r120;
// [Asm]   r3 -- r131;
// [Asm]   r5 -- r70;
// [Asm]   r10 -- r46;
// [Asm]   r7 -- r41;
// [Asm]   r13 -- r65;
// [Asm]   r11 -- r34;
// [Asm]   r12 -- r98;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r98;
// [Asm]   r5 -- r39;
// [Asm]   r7 -- r57;
// [Asm]   r23 -- r40;
// [Asm]   r13 -- r47;
// [Asm]   r1 -- r135;
// [Asm]   r7 -- r16;
// [Asm]   r9 -- r48;
// [Asm]   r10 -- r126;
// [Asm]   r7 -- r18;
// [Asm]   r8 -- r115;
// [Asm]   r39 -- r77;
// [Asm]   r3 -- r128;
// [Asm]   r7 -- r12;
// [Asm]   r7 -- r14;
// [Asm]   r1 -- r54;
// [Asm]   r9 -- r81;
// [Asm]   r3 -- r119;
// [Asm]   r8 -- r60;
// [Asm]   r2 -- r39;
// [Asm]   r6 -- r21;
// [Asm]   r2 -- r94;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r115;
// [Asm]   r8 -- r84;
// [Asm]   r22 -- r40;
// [Asm]   r14 -- r16;
// [Asm]   r7 -- r40;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r88;
// [Asm]   r2 -- r95;
// [Asm]   r10 -- r139;
// [Asm]   r13 -- r75;
// [Asm]   r8 -- r90;
// [Asm]   r12 -- r128;
// [Asm]   r8 -- r141;
// [Asm]   r1 -- r18;
// [Asm]   r11 -- r92;
// [Asm]   r99 -- r100;
// [Asm]   r7 -- r109;
// [Asm]   r11 -- r112;
// [Asm]   r30 -- r31;
// [Asm]   r9 -- r111;
// [Asm]   r2 -- r10;
// [Asm]   r57 -- r64;
// [Asm]   r7 -- r137;
// [Asm]   r1 -- r69;
// [Asm]   r23 -- r52;
// [Asm]   r13 -- r50;
// [Asm]   r39 -- r96;
// [Asm]   r1 -- r20;
// [Asm]   r39 -- r88;
// [Asm]   r3 -- r24;
// [Asm]   r5 -- r73;
// [Asm]   r10 -- r58;
// [Asm]   r3 -- r51;
// [Asm]   r13 -- r92;
// [Asm]   r3 -- r34;
// [Asm]   r143 -- r144;
// [Asm]   r16 -- r17;
// [Asm]   r2 -- r74;
// [Asm]   r13 -- r37;
// [Asm]   r9 -- r18;
// [Asm]   r1 -- r46;
// [Asm]   r13 -- r40;
// [Asm]   r2 -- r136;
// [Asm]   r10 -- r49;
// [Asm]   r25 -- r39;
// [Asm]   r7 -- r34;
// [Asm]   r8 -- r102;
// [Asm]   r7 -- r55;
// [Asm]   r1 -- r118;
// [Asm]   r10 -- r37;
// [Asm]   r18 -- r52;
// [Asm]   r10 -- r92;
// [Asm]   r39 -- r85;
// [Asm]   r9 -- r117;
// [Asm]   r11 -- r82;
// [Asm]   r138 -- r139;
// [Asm]   r8 -- r37;
// [Asm]   r5 -- r53;
// [Asm]   r52 -- r140;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r47;
// [Asm]   r3 -- r80;
// [Asm]   r12 -- r74;
// [Asm]   r13 -- r106;
// [Asm]   r9 -- r131;
// [Asm]   r13 -- r104;
// [Asm]   r10 -- r136;
// [Asm]   r3 -- r82;
// [Asm]   r2 -- r128;
// [Asm]   r7 -- r70;
// [Asm]   r1 -- r27;
// [Asm]   r14 -- r52;
// [Asm]   r2 -- r79;
// [Asm]   r13 -- r116;
// [Asm]   r9 -- r118;
// [Asm]   r8 -- r39;
// [Asm]   r11 -- r63;
// [Asm]   r7 -- r98;
// [Asm]   r78 -- r79;
// [Asm]   r3 -- r102;
// [Asm]   r7 -- r61;
// [Asm]   r8 -- r22;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r52 -- r136;
// [Asm]   r12 -- r61;
// [Asm]   r5 -- r50;
// [Asm]   r3 -- r118;
// [Asm]   r1 -- r49;
// [Asm]   r16 -- r39;
// [Asm]   r8 -- r96;
// [Asm]   r7 -- r96;
// [Asm]   r52 -- r109;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r58 -- r65;
// [Asm]   r7 -- r113;
// [Asm]   r10 -- r55;
// [Asm]   r57 -- r63;
// [Asm]   r39 -- r86;
// [Asm]   r13 -- r132;
// [Asm]   r3 -- r58;
// [Asm]   r2 -- r70;
// [Asm]   r7 -- r64;
// [Asm]   r2 -- r87;
// [Asm]   r13 -- r60;
// [Asm]   r9 -- r72;
// [Asm]   r2 -- r127;
// [Asm]   r12 -- r45;
// [Asm]   r1 -- r58;
// [Asm]   r10 -- r72;
// [Asm]   r2 -- r126;
// [Asm]   r5 -- r138;
// [Asm]   r11 -- r40;
// [Asm]   r6 -- r15;
// [Asm]   r14 -- r17;
// [Asm]   r40 -- r78;
// [Asm]   r3 -- r132;
// [Asm]   r20 -- r39;
// [Asm]   r11 -- r71;
// [Asm]   r9 -- r15;
// [Asm]   r5 -- r103;
// [Asm]   r12 -- r80;
// [Asm]   r13 -- r127;
// [Asm]   r10 -- r106;
// [Asm]   r5 -- r77;
// [Asm]   r12 -- r15;
// [Asm]   r14 -- r23;
// [Asm]   r7 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r78;
// [Asm]   r5 -- r52;
// [Asm]   r5 -- r84;
// [Asm]   r9 -- r42;
// [Asm]   r5 -- r44;
// [Asm]   r53 -- r129;
// [Asm]   r2 -- r131;
// [Asm]   r3 -- r122;
// [Asm]   r3 -- r28;
// [Asm]   r8 -- r38;
// [Asm]   r14 -- r24;
// [Asm]   r1 -- r132;
// [Asm]   r3 -- r106;
// [Asm]   r8 -- r65;
// [Asm]   r7 -- r9;
// [Asm]   r10 -- r34;
// [Asm]   r7 -- r66;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r13 -- r56;
// [Asm]   r6 -- r8;
// [Asm]   r2 -- r121;
// [Asm]   r131 -- r132;
// [Asm]   r5 -- r64;
// [Asm]   r8 -- r28;
// [Asm]   r10 -- r91;
// [Asm]   r40 -- r80;
// [Asm]   r12 -- r71;
// [Asm]   r9 -- r80;
// [Asm]   r5 -- r127;
// [Asm]   r7 -- r92;
// [Asm]   r10 -- r50;
// [Asm]   r9 -- r134;
// [Asm]   r40 -- r95;
// [Asm]   r11 -- r42;
// [Asm]   r19 -- r53;
// [Asm]   r9 -- r142;
// [Asm]   r13 -- r34;
// [Asm]   r10 -- r120;
// [Asm]   r5 -- r137;
// [Asm]   r5 -- r46;
// [Asm]   r8 -- r13;
// [Asm]   r10 -- r84;
// [Asm]   r2 -- r56;
// [Asm]   r8 -- r85;
// [Asm]   r10 -- r90;
// [Asm]   r13 -- r96;
// [Asm]   r3 -- r64;
// [Asm]   r15 -- r40;
// [Asm]   r10 -- r52;
// [Asm]   r6 -- r42;
// [Asm]   r8 -- r116;
// [Asm]   r10 -- r39;
// [Asm]   r1 -- r115;
// [Asm]   r3 -- r81;
// [Asm]   r2 -- r109;
// [Asm]   r10 -- r140;
// [Asm]   r2 -- r130;
// [Asm]   r7 -- r136;
// [Asm]   r9 -- r138;
// [Asm]   r3 -- r75;
// [Asm]   r7 -- r58;
// [Asm]   r13 -- r62;
// [Asm]   r11 -- r69;
// [Asm]   r7 -- r124;
// [Asm]   r17 -- r52;
// [Asm]   r52 -- r130;
// [Asm]   r1 -- r113;
// [Asm]   r13 -- r73;
// [Asm]   r10 -- r80;
// [Asm]   r1 -- r36;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r63;
// [Asm]   r8 -- r46;
// [Asm]   r10 -- r24;
// [Asm]   r1 -- r120;
// [Asm]   r12 -- r26;
// [Asm]   r5 -- r40;
// [Asm]   r13 -- r117;
// [Asm]   r10 -- r14;
// [Asm]   r52 -- r139;
// [Asm]   r5 -- r112;
// [Asm]   r13 -- r122;
// [Asm]   r58 -- r61;
// [Asm]   r12 -- r70;
// [Asm]   r15 -- r39;
// [Asm]   r2 -- r31;
// [Asm]   r3 -- r52;
// [Asm]   r11 -- r61;
// [Asm]   r9 -- r53;
// [Asm]   r12 -- r137;
// [Asm]   r5 -- r114;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r13 -- r76;
// [Asm]   r24 -- r40;
// [Asm]   r3 -- r16;
// [Asm]   r12 -- r57;
// [Asm]   r8 -- r104;
// [Asm]   r3 -- r53;
// [Asm]   r12 -- r127;
// [Asm]   r2 -- r49;
// [Asm]   r7 -- r25;
// [Asm]   r12 -- r65;
// [Asm]   r7 -- r72;
// [Asm]   r3 -- r62;
// [Asm]   r12 -- r85;
// [Asm]   r58 -- r63;
// [Asm]   r14 -- r40;
// [Asm]   r57 -- r59;
// [Asm]   r3 -- r11;
// [Asm]   r57 -- r58;
// [Asm]   r9 -- r26;
// [Asm]   r1 -- r102;
// [Asm]   r53 -- r134;
// [Asm]   r52 -- r132;
// [Asm]   r1 -- r139;
// [Asm]   r10 -- r69;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r138;
// [Asm]   r13 -- r130;
// [Asm]   r7 -- r128;
// [Asm]   r2 -- r42;
// [Asm]   r11 -- r109;
// [Asm]   r11 -- r19;
// [Asm]   r1 -- r50;
// [Asm]   r9 -- r82;
// [Asm]   r10 -- r93;
// [Asm]   r52 -- r131;
// [Asm]   r10 -- r67;
// [Asm]   r8 -- r114;
// [Asm]   r31 -- r35;
// [Asm]   r3 -- r85;
// [Asm]   r3 -- r8;
// [Asm]   r9 -- r56;
// [Asm]   r8 -- r34;
// [Asm]   r9 -- r88;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r112;
// [Asm]   r9 -- r75;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r48;
// [Asm]   r11 -- r97;
// [Asm]   r9 -- r66;
// [Asm]   r1 -- r64;
// [Asm]   r3 -- r74;
// [Asm]   r7 -- r79;
// [Asm]   r59 -- r60;
// [Asm]   r3 -- r39;
// [Asm]   r69 -- r71;
// [Asm]   r6 -- r104;
// [Asm]   r13 -- r121;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r59;
// [Asm]   r5 -- r58;
// [Asm]   r5 -- r128;
// [Asm]   r7 -- r143;
// [Asm]   r8 -- r23;
// [Asm]   r1 -- r107;
// [Asm]   r5 -- r60;
// [Asm]   r12 -- r58;
// [Asm]   r10 -- r22;
// [Asm]   r8 -- r72;
// [Asm]   r8 -- r59;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r121;
// [Asm]   r3 -- r71;
// [Asm]   r2 -- r13;
// [Asm]   r8 -- r103;
// [Asm]   r1 -- r51;
// [Asm]   r13 -- r141;
// [Asm]   r13 -- r93;
// [Asm]   r3 -- r17;
// [Asm]   r39 -- r40;
// [Asm]   r11 -- r15;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r13 -- r72;
// [Asm]   r2 -- r96;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r40 -- r92;
// [Asm]   r10 -- r130;
// [Asm]   r13 -- r134;
// [Asm]   r5 -- r36;
// [Asm]   r2 -- r86;
// [Asm]   r3 -- r94;
// [Asm]   r4 -- r13;
// [Asm]   r8 -- r112;
// [Asm]   r12 -- r112;
// [Asm]   r58 -- r62;
// [Asm]   r39 -- r84;
// [Asm]   r9 -- r129;
// [Asm]   r3 -- r25;
// [Asm]   r3 -- r110;
// [Asm]   r8 -- r122;
// [Asm]   r2 -- r134;
// [Asm]   r52 -- r126;
// [Asm]   r14 -- r26;
// [Asm]   r1 -- r109;
// [Asm]   r1 -- r75;
// [Asm]   r6 -- r41;
// [Asm]   r114 -- r119;
// [Asm]   r52 -- r141;
// [Asm]   r11 -- r135;
// [Asm]   r13 -- r88;
// [Asm]   r9 -- r128;
// [Asm]   r12 -- r118;
// [Asm]   r9 -- r40;
// [Asm]   r9 -- r93;
// [Asm]   r2 -- r84;
// [Asm]   r3 -- r105;
// [Asm]   r13 -- r136;
// [Asm]   r8 -- r131;
// [Asm]   r20 -- r52;
// [Asm]   r113 -- r116;
// [Asm]   r7 -- r20;
// [Asm]   r8 -- r76;
// [Asm]   r13 -- r16;
// [Asm]   r9 -- r61;
// [Asm]   r18 -- r40;
// [Asm]   r11 -- r140;
// [Asm]   r11 -- r23;
// [Asm]   r13 -- r80;
// [Asm]   r13 -- r48;
// [Asm]   r40 -- r85;
// [Asm]   r11 -- r124;
// [Asm]   r12 -- r89;
// [Asm]   r13 -- r133;
// [Asm]   r11 -- r46;
// [Asm]   r8 -- r25;
// [Asm]   r11 -- r51;
// [Asm]   r11 -- r85;
// [Asm]   r11 -- r94;
// [Asm]   r8 -- r119;
// [Asm]   r5 -- r38;
// [Asm]   r8 -- r118;
// [Asm]   r11 -- r37;
// [Asm]   r13 -- r91;
// [Asm]   r13 -- r19;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r58 -- r60;
// [Asm]   r8 -- r81;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r132;
// [Asm]   r1 -- r121;
// [Asm]   r7 -- r22;
// [Asm]   r2 -- r118;
// [Asm]   r53 -- r141;
// [Asm]   r2 -- r137;
// [Asm]   r11 -- r136;
// [Asm]   r22 -- r39;
// [Asm]   r12 -- r63;
// [Asm]   r12 -- r55;
// [Asm]   r8 -- r62;
// [Asm]   r7 -- r19;
// [Asm]   r11 -- r139;
// [Asm]   r13 -- r78;
// [Asm]   r10 -- r122;
// [Asm]   r1 -- r79;
// [Asm]   r2 -- r89;
// [Asm]   r13 -- r86;
// [Asm]   r1 -- r97;
// [Asm]   r1 -- r143;
// [Asm]   r13 -- r14;
// [Asm]   r5 -- r68;
// [Asm]   r12 -- r22;
// [Asm]   r3 -- r125;
// [Asm]   r3 -- r29;
// [Asm]   r11 -- r41;
// [Asm]   r10 -- r57;
// [Asm]   r1 -- r89;
// [Asm]   r3 -- r66;
// [Asm]   r5 -- r81;
// [Asm]   r1 -- r95;
// [Asm]   r7 -- r104;
// [Asm]   r2 -- r75;
// [Asm]   r5 -- r118;
// [Asm]   r2 -- r124;
// [Asm]   r12 -- r124;
// [Asm]   r5 -- r25;
// [Asm]   r10 -- r36;
// [Asm]   r2 -- r93;
// [Asm]   r12 -- r87;
// [Asm]   r31 -- r33;
// [Asm]   r9 -- r58;
// [Asm]   r40 -- r88;
// [Asm]   r114 -- r116;
// [Asm]   r13 -- r39;
// [Asm]   r4 -- r10;
// [Asm]   r11 -- r129;
// [Asm]   r9 -- r109;
// [Asm]   r12 -- r139;
// [Asm]   r11 -- r28;
// [Asm]   r2 -- r27;
// [Asm]   r11 -- r90;
// [Asm]   r11 -- r56;
// [Asm]   r10 -- r86;
// [Asm]   r1 -- r42;
// [Asm]   r86 -- r87;
// [Asm]   r24 -- r39;
// [Asm]   r2 -- r62;
// [Asm]   r3 -- r67;
// [Asm]   r10 -- r123;
// [Asm]   r14 -- r20;
// [Asm]   r10 -- r60;
// [Asm]   r1 -- r37;
// [Asm]   r13 -- r44;
// [Asm]   r13 -- r131;
// [Asm]   r12 -- r141;
// [Asm]   r13 -- r140;
// [Asm]   r7 -- r126;
// [Asm]   r1 -- r98;
// [Asm]   r5 -- r95;
// [Asm]   r19 -- r39;
// [Asm]   r10 -- r118;
// [Asm]   r1 -- r19;
// [Asm]   r40 -- r79;
// [Asm]   r10 -- r88;
// [Asm]   r1 -- r88;
// [Asm]   r10 -- r13;
// [Asm]   r10 -- r124;
// [Asm]   r12 -- r129;
// [Asm]   r5 -- r42;
// [Asm]   r1 -- r119;
// [Asm]   r2 -- r16;
// [Asm]   r51 -- r53;
// [Asm]   r52 -- r108;
// [Asm]   r13 -- r119;
// [Asm]   r13 -- r28;
// [Asm]   r10 -- r47;
// [Asm]   r5 -- r92;
// [Asm]   r12 -- r130;
// [Asm]   r8 -- r98;
// [Asm]   r1 -- r62;
// [Asm]   r7 -- r108;
// [Asm]   r11 -- r53;
// [Asm]   r12 -- r114;
// [Asm]   r1 -- r67;
// [Asm]   r7 -- r118;
// [Asm]   r5 -- r140;
// [Asm]   r8 -- r79;
// [Asm]   r2 -- r59;
// [Asm]   r14 -- r19;
// [Asm]   r12 -- r52;
// [Asm]   r2 -- r92;
// [Asm]   r12 -- r110;
// [Asm]   r8 -- r71;
// [Asm]   r2 -- r68;
// [Asm]   r11 -- r128;
// [Asm]   r10 -- r20;
// [Asm]   r12 -- r133;
// [Asm]   r12 -- r93;
// [Asm]   r3 -- r30;
// [Asm]   r9 -- r140;
// [Asm]   r10 -- r134;
// [Asm]   r5 -- r83;
// [Asm]   r8 -- r129;
// [Asm]   r25 -- r52;
// [Asm]   r12 -- r28;
// [Asm]   r9 -- r28;
// [Asm]   r12 -- r108;
// [Asm]   r8 -- r77;
// [Asm]   r3 -- r13;
// [Asm]   r13 -- r84;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r115;
// [Asm]   r12 -- r40;
// [Asm]   r7 -- r141;
// [Asm]   r52 -- r127;
// [Asm]   r3 -- r10;
// [Asm]   r7 -- r95;
// [Asm]   r5 -- r91;
// [Asm]   r12 -- r59;
// [Asm]   r39 -- r80;
// [Asm]   r11 -- r113;
// [Asm]   r4 -- r12;
// [Asm]   r10 -- r75;
// [Asm]   r3 -- r120;
// [Asm]   r7 -- r102;
// [Asm]   r12 -- r117;
// [Asm]   r8 -- r63;
// [Asm]   r1 -- r108;
// [Asm]   r5 -- r90;
// [Asm]   r1 -- r6;
// [Asm]   r40 -- r90;
// [Asm]   r3 -- r130;
// [Asm]   r11 -- r47;
// [Asm]   r7 -- r54;
// [Asm]   r12 -- r78;
// [Asm]   r9 -- r95;
// [Asm]   r115 -- r117;
// [Asm]   r14 -- r22;
// [Asm]   r2 -- r23;
// [Asm]   r9 -- r47;
// [Asm]   r1 -- r142;
// [Asm]   r9 -- r104;
// [Asm]   r7 -- r82;
// [Asm]   r8 -- r107;
// [Asm]   r5 -- r109;
// [Asm]   r5 -- r89;
// [Asm]   r2 -- r120;
// [Asm]   r8 -- r117;
// [Asm]   r10 -- r95;
// [Asm]   r8 -- r82;
// [Asm]   r7 -- r52;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r8 -- r66;
// [Asm]   r9 -- r57;
// [Asm]   r7 -- r127;
// [Asm]   r13 -- r42;
// [Asm]   r12 -- r126;
// [Asm]   r8 -- r56;
// [Asm]   r12 -- r51;
// [Asm]   r5 -- r48;
// [Asm]   r1 -- r53;
// [Asm]   r12 -- r36;
// [Asm]   r8 -- r19;
// [Asm]   r11 -- r49;
// [Asm]   r57 -- r66;
// [Asm]   r13 -- r85;
// [Asm]   r8 -- r137;
// [Asm]   r53 -- r137;
// [Asm]   r5 -- r79;
// [Asm]   r10 -- r108;
// [Asm]   r13 -- r26;
// [Asm]   r2 -- r119;
// [Asm]   r8 -- r144;
// [Asm]   r8 -- r43;
// [Asm]   r3 -- r87;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r47;
// [Asm]   r10 -- r102;
// [Asm]   r13 -- r144;
// [Asm]   r10 -- r41;
// [Asm]   r2 -- r55;
// [Asm]   r16 -- r40;
// [Asm]   r70 -- r75;
// [Asm]   r6 -- r12;
// [Asm]   r13 -- r25;
// [Asm]   r7 -- r81;
// [Asm]   r9 -- r126;
// [Asm]   r6 -- r24;
// [Asm]   r9 -- r132;
// [Asm]   r9 -- r51;
// [Asm]   r9 -- r121;
// [Asm]   r7 -- r73;
// [Asm]   r11 -- r83;
// [Asm]   r1 -- r124;
// [Asm]   r39 -- r78;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r13 -- r120;
// [Asm]   r5 -- r110;
// [Asm]   r10 -- r28;
// [Asm]   r9 -- r34;
// [Asm]   r58 -- r64;
// [Asm]   r10 -- r63;
// [Asm]   r7 -- r60;
// [Asm]   r11 -- r98;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r24;
// [Asm]   r10 -- r73;
// [Asm]   r6 -- r28;
// [Asm]   r53 -- r142;
// [Asm]   r1 -- r59;
// [Asm]   r11 -- r39;
// [Asm]   r9 -- r69;
// [Asm]   r5 -- r136;
// [Asm]   r1 -- r74;
// [Asm]   r12 -- r140;
// [Asm]   r12 -- r123;
// [Asm]   r11 -- r50;
// [Asm]   r13 -- r108;
// [Asm]   r7 -- r11;
// [Asm]   r7 -- r47;
// [Asm]   r108 -- r109;
// [Asm]   r11 -- r89;
// [Asm]   r9 -- r37;
// [Asm]   r8 -- r88;
// [Asm]   r13 -- r53;
// [Asm]   r135 -- r137;
// [Asm]   r7 -- r39;
// [Asm]   r8 -- r73;
// [Asm]   r13 -- r135;
// [Asm]   r7 -- r43;
// [Asm]   r5 -- r115;
// [Asm]   r7 -- r130;
// [Asm]   r9 -- r114;
// [Asm]   r11 -- r26;
// [Asm]   r12 -- r37;
// [Asm]   r8 -- r58;
// [Asm]   r53 -- r135;
// [Asm]   r5 -- r123;
// [Asm]   r13 -- r137;
// [Asm]   r11 -- r58;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r27;
// [Asm]   r31 -- r32;
// [Asm]   r40 -- r84;
// [Asm]   r3 -- r138;
// [Asm]   r7 -- r142;
// [Asm]   r3 -- r93;
// [Asm]   r8 -- r124;
// [Asm]   r1 -- r3;
// [Asm]   r10 -- r143;
// [Asm]   r1 -- r82;
// [Asm]   r1 -- r92;
// [Asm]   r10 -- r96;
// [Asm]   r11 -- r127;
// [Asm]   r12 -- r136;
// [Asm]   r9 -- r50;
// [Asm]   r11 -- r21;
// [Asm]   r52 -- r137;
// [Asm]   r10 -- r66;
// [Asm]   r2 -- r64;
// [Asm]   r52 -- r53;
// [Asm]   r12 -- r60;
// [Asm]   r79 -- r81;
// [Asm]   r2 -- r32;
// [Asm]   r11 -- r76;
// [Asm]   r3 -- r98;
// [Asm]   r100 -- r101;
// [Asm]   r26 -- r39;
// [Asm]   r12 -- r79;
// [Asm]   r9 -- r86;
// [Asm]   r3 -- r137;
// [Asm]   r12 -- r77;
// [Asm]   r1 -- r86;
// [Asm]   r1 -- r57;
// [Asm]   r5 -- r72;
// [Asm]   r9 -- r79;
// [Asm]   r13 -- r59;
// [Asm]   r13 -- r36;
// [Asm]   r11 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r99 -- r101;
// [Asm]   r39 -- r95;
// [Asm]   r11 -- r66;
// [Asm]   r2 -- r43;
// [Asm]   r5 -- r59;
// [Asm]   r5 -- r18;
// [Asm]   r9 -- r143;
// [Asm]   r5 -- r47;
// [Asm]   r1 -- r129;
// [Asm]   r39 -- r83;
// [Asm]   r10 -- r110;
// [Asm]   r3 -- r37;
// [Asm]   r11 -- r45;
// [Asm]   r9 -- r17;
// [Asm]   r3 -- r126;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r52 -- r129;
// [Asm]   r9 -- r130;
// [Asm]   r9 -- r49;
// [Asm]   r3 -- r68;
// [Asm]   r7 -- r27;
// [Asm]   r17 -- r39;
// [Asm]   r13 -- r74;
// [Asm]   r7 -- r91;
// [Asm]   r11 -- r102;
// [Asm]   r13 -- r69;
// [Asm]   r113 -- r115;
// [Asm]   r2 -- r34;
// [Asm]   r8 -- r45;
// [Asm]   r13 -- r118;
// [Asm]   r5 -- r62;
// [Asm]   r3 -- r78;
// [Asm]   r2 -- r6;
// [Asm]   r10 -- r144;
// [Asm]   r5 -- r57;
// [Asm]   r10 -- r133;
// [Asm]   r11 -- r13;
// [Asm]   r13 -- r139;
// [Asm]   r10 -- r45;
// [Asm]   r39 -- r79;
// [Asm]   r39 -- r91;
// [Asm]   r9 -- r23;
// [Asm]   r5 -- r78;
// [Asm]   r7 -- r94;
// [Asm]   r7 -- r38;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r135 -- r136;
// [Asm]   r5 -- r67;
// [Asm]   r13 -- r41;
// [Asm]   r8 -- r48;
// [Asm]   r13 -- r58;
// [Asm]   r11 -- r93;
// [Asm]   r1 -- r134;
// [Asm]   r7 -- r119;
// [Asm]   r10 -- r42;
// [Asm]   r15 -- r52;
// [Asm]   r7 -- r80;
// [Asm]   r2 -- r108;
// [Asm]   r3 -- r144;
// [Asm]   r5 -- r66;
// [Asm]   r13 -- r129;
// [Asm]   r20 -- r40;
// [Asm]   r9 -- r135;
// [Asm]   r21 -- r39;
// [Asm]   r13 -- r77;
// [Asm]   r8 -- r86;
// [Asm]   r5 -- r144;
// [Asm]   r11 -- r84;
// [Asm]   r24 -- r53;
// [Asm]   r7 -- r129;
// [Asm]   r10 -- r59;
// [Asm]   r13 -- r113;
// [Asm]   r7 -- r131;
// [Asm]   r7 -- r76;
// [Asm]   r11 -- r132;
// [Asm]   r3 -- r19;
// [Asm]   r11 -- r104;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r77;
// [Asm]   r20 -- r53;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r38;
// [Asm]   r11 -- r64;
// [Asm]   r1 -- r47;
// [Asm]   r114 -- r117;
// [Asm]   r12 -- r88;
// [Asm]   r5 -- r71;
// [Asm]   r47 -- r48;
// [Asm]   r2 -- r90;
// [Asm]   r131 -- r133;
// [Asm]   r11 -- r118;
// [Asm]   r8 -- r128;
// [Asm]   r30 -- r32;
// [Asm]   r5 -- r124;
// [Asm]   r11 -- r16;
// [Asm]   r1 -- r22;
// [Asm]   r13 -- r102;
// [Asm]   r2 -- r52;
// [Asm]   r11 -- r12;
// [Asm]   r8 -- r113;
// [Asm]   r2 -- r135;
// [Asm]   r7 -- r107;
// [Asm]   r12 -- r64;
// [Asm]   r11 -- r142;
// [Asm]   r1 -- r13;
// [Asm]   r9 -- r64;
// [Asm]   r7 -- r74;
// [Asm]   r11 -- r22;
// [Asm]   r10 -- r48;
// [Asm]   r10 -- r70;
// [Asm]   r115 -- r116;
// [Asm]   r1 -- r104;
// [Asm]   r2 -- r114;
// [Asm]   r7 -- r48;
// [Asm]   r12 -- r82;
// [Asm]   r13 -- r110;
// [Asm]   r7 -- r49;
// [Asm]   r8 -- r20;
// [Asm]   r23 -- r39;
// [Asm]   r8 -- r47;
// [Asm]   r6 -- r20;
// [Asm]   r9 -- r52;
// [Asm]   r57 -- r62;
// [Asm]   r13 -- r126;
// [Asm]   r3 -- r50;
// [Asm]   r7 -- r17;
// [Asm]   r8 -- r41;
// [Asm]   r9 -- r85;
// [Asm]   r2 -- r107;
// [Asm]   r9 -- r97;
// [Asm]   r53 -- r144;
// [Asm]   r11 -- r110;
// [Asm]   r2 -- r102;
// [Asm]   r8 -- r53;
// [Asm]   r12 -- r73;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r12 -- r76;
// [Asm]   r1 -- r29;
// [Asm]   r13 -- r143;
// [Asm]   r3 -- r117;
// [Asm]   r83 -- r84;
// [Asm]   r5 -- r45;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r8 -- r92;
// [Asm]   r10 -- r85;
// [Asm]   r2 -- r77;
// [Asm]   r1 -- r25;
// [Asm]   r13 -- r17;
// [Asm]   r13 -- r123;
// [Asm]   r5 -- r94;
// [Asm]   r5 -- r56;
// [Asm]   r12 -- r66;
// [Asm]   r5 -- r61;
// [Asm]   r3 -- r140;
// [Asm]   r1 -- r61;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r3 -- r73;
// [Asm]   r5 -- r142;
// [Asm]   r12 -- r122;
// [Asm]   r8 -- r26;
// [Asm]   r8 -- r83;
// [Asm]   r10 -- r119;
// [Asm]   r11 -- r72;
// [Asm]   r10 -- r109;
// [Asm]   r7 -- r87;
// [Asm]   r10 -- r65;
// [Asm]   r63 -- r64;
// [Asm]   r2 -- r35;
// [Asm]   r13 -- r87;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r9 -- r13;
// [Asm]   r13 -- r79;
// [Asm]   r26 -- r53;
// [Asm]   r11 -- r115;
// [Asm]   r8 -- r50;
// [Asm]   r1 -- r100;
// [Asm]   r11 -- r123;
// [Asm]   r1 -- r76;
// [Asm]   r2 -- r20;
// [Asm]   r7 -- r120;
// [Asm]   r53 -- r128;
// [Asm]   r8 -- r57;
// [Asm]   r91 -- r92;
// [Asm]   r5 -- r41;
// [Asm]   r130 -- r131;
// [Asm]   r40 -- r81;
// [Asm]   r8 -- r89;
// [Asm]   r13 -- r97;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r71;
// [Asm]   r3 -- r43;
// [Asm]   r9 -- r27;
// [Asm]   r17 -- r40;
// [Asm]   r26 -- r40;
// [Asm]   r39 -- r89;
// [Asm]   r21 -- r53;
// [Asm]   r9 -- r77;
// [Asm]   r1 -- r7;
// [Asm]   r2 -- r85;
// [Asm]   r1 -- r56;
// [Asm]   r3 -- r60;
// [Asm]   r3 -- r79;
// [Asm]   r3 -- r108;
// [Asm]   r1 -- r63;
// [Asm]   r5 -- r96;
// [Asm]   r13 -- r49;
// [Asm]   r13 -- r107;
// [Asm]   r7 -- r53;
// [Asm]   r10 -- r142;
// [Asm]   r9 -- r124;
// [Asm]   r5 -- r49;
// [Asm]   r1 -- r91;
// [Asm]   r10 -- r132;
// [Asm]   r52 -- r135;
// [Asm]   r12 -- r109;
// [Asm]   r1 -- r131;
// [Asm]   r10 -- r77;
// [Asm]   r7 -- r135;
// [Asm]   r11 -- r138;
// [Asm]   r5 -- r134;
// [Asm]   r12 -- r19;
// [Asm]   r7 -- r83;
// [Asm]   r10 -- r138;
// [Asm]   r52 -- r142;
// [Asm]   r11 -- r134;
// [Asm]   r2 -- r76;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r3 -- r76;
// [Asm]   r8 -- r127;
// [Asm]   r12 -- r44;
// [Asm]   r7 -- r90;
// [Asm]   r2 -- r33;
// [Asm]   r8 -- r17;
// [Asm]   r11 -- r81;
// [Asm]   r3 -- r96;
// [Asm]   r3 -- r4;
// [Asm]   r9 -- r108;
// [Asm]   r8 -- r69;
// [Asm]   r12 -- r67;
// [Asm]   r5 -- r75;
// [Asm]   r0 -- r2;
// [Asm]   r12 -- r46;
// [Asm]   r1 -- r21;
// [Asm]   r13 -- r89;
// [Asm]   r8 -- r121;
// [Asm]   r10 -- r74;
// [Asm]   r10 -- r117;
// [Asm]   r1 -- r116;
// [Asm]   r5 -- r108;
// [Asm]   r2 -- r8;
// [Asm]   r13 -- r51;
// [Asm]   r9 -- r139;
// [Asm]   r70 -- r71;
// [Asm]   r3 -- r133;
// [Asm]   r8 -- r44;
// [Asm]   r1 -- r122;
// [Asm]   r8 -- r80;
// [Asm]   r57 -- r60;
// [Asm]   r2 -- r117;
// [Asm]   r9 -- r133;
// [Asm]   r12 -- r95;
// [Asm]   r113 -- r118;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r53 -- r131;
// [Asm]   r53 -- r127;
// [Asm]   r12 -- r47;
// [Asm]   r1 -- r44;
// [Asm]   r3 -- r61;
// [Asm]   r10 -- r112;
// [Asm]   r7 -- r110;
// [Asm]   r13 -- r21;
// [Asm]   r8 -- r87;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r106;
// [Asm]   r3 -- r88;
// [Asm]   r5 -- r34;
// [Asm]   r2 -- r53;
// [Asm]   r2 -- r61;
// [Asm]   r10 -- r114;
// [Asm]   r9 -- r90;
// [Asm]   r12 -- r92;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r1 -- r128;
// [Asm]   r10 -- r83;
// [Asm]   r10 -- r87;
// [Asm]   r12 -- r131;
// [Asm]   r14 -- r18;
// [Asm]   r2 -- r143;
// [Asm]   r11 -- r17;
// [Asm]   r2 -- r125;
// [Asm]   r12 -- r134;
// [Asm]   r5 -- r20;
// [Asm]   r7 -- r45;
// [Asm]   r2 -- r18;
// [Asm]   r11 -- r120;
// [Asm]   r2 -- r105;
// [Asm]   r83 -- r86;
// [Asm]   r21 -- r40;
// [Asm]   r9 -- r96;
// [Asm]   r10 -- r78;
// [Asm]   r10 -- r68;
// [Asm]   r13 -- r45;
// [Asm]   r10 -- r131;
// [Asm]   r7 -- r89;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r123;
// [Asm]   r10 -- r71;
// [Asm]   r9 -- r115;
// [Asm]   r7 -- r134;
// [Asm]   r10 -- r76;
// [Asm]   r8 -- r55;
// [Asm]   r12 -- r56;
// [Asm]   r2 -- r82;
// [Asm]   r7 -- r86;
// [Asm]   r13 -- r70;
// [Asm]   r12 -- r96;
// [Asm]   r2 -- r144;
// [Asm]   r3 -- r90;
// [Asm]   r16 -- r53;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r8 -- r49;
// [Asm]   r1 -- r101;
// [Asm]   r13 -- r20;
// [Asm]   r3 -- r77;
// [Asm]   r5 -- r126;
// [Asm]   r21 -- r52;
// [Asm]   r9 -- r22;
// [Asm]   r13 -- r81;
// [Asm]   r9 -- r92;
// [Asm]   r5 -- r130;
// [Asm]   r1 -- r96;
// [Asm]   r113 -- r122;
// [Asm]   r12 -- r75;
// [Asm]   r11 -- r75;
// [Asm]   r3 -- r136;
// [Asm]   r5 -- r37;
// [Asm]   r8 -- r74;
// [Asm]   r2 -- r113;
// [Asm]   r11 -- r95;
// [Asm]   r8 -- r40;
// [Asm]   r10 -- r44;
// [Asm]   r2 -- r66;
// [Asm]   r9 -- r43;
// [Asm]   r40 -- r91;
// [Asm]   r3 -- r72;
// [Asm]   r9 -- r144;
// [Asm]   r3 -- r143;
// [Asm]   r10 -- r97;
// [Asm]   r17 -- r53;
// [Asm]   r3 -- r41;
// [Asm]   r2 -- r21;
// [Asm]   r5 -- r102;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r11 -- r88;
// [Asm]   r9 -- r55;
// [Asm]   r10 -- r82;
// [Asm]   r3 -- r59;
// [Asm]   r11 -- r38;
// [Asm]   r9 -- r127;
// [Asm]   r5 -- r27;
// [Asm]   r10 -- r116;
// [Asm]   r38 -- r39;
// [Asm]   r12 -- r48;
// [Asm]   r3 -- r142;
// [Asm]   r40 -- r83;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r9 -- r71;
// [Asm]   r11 -- r133;
// [Asm]   r13 -- r105;
// [Asm]   r25 -- r40;
// [Asm]   r7 -- r122;
// [Asm]   r12 -- r83;
// [Asm]   r13 -- r27;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v22-> 1:s11-> 2:zero-> 3:v2-> 4:v6-> 5:v11-> 6:v46-> 7:v5-> 8:v10-> 9:v13-> 10:v7-> 11:v31-> 12:v9-> 13:v23-> 14:a0-> 15:a1-> 16:a2-> 17:a3-> 39:v17-> 40:v8-> 18:a4-> 52:v16-> 53:v15-> 19:a5-> 20:a6-> 21:a7-> 22:t0-> 23:t1-> 24:t2-> 25:t3-> 26:t4-> 38:v128-> 51:v82-> 76:v130-> 77:v132-> 78:v133-> 79:v134-> 80:v180-> 81:v181-> 82:v137-> 83:v138-> 84:v176-> 85:v139-> 86:v140-> 87:v174-> 88:v142-> 89:v170-> 90:v171-> 91:v144-> 92:v169-> 95:v146-> 96:v147-> 102:v121-> 103:v189-> 108:v75-> 109:v228-> 126:v100-> 127:v101-> 128:v84-> 129:v86-> 130:v87-> 131:v88-> 132:v219-> 133:v220-> 134:v91-> 135:v92-> 136:v215-> 137:v93-> 138:v94-> 139:v213-> 140:v96-> 141:v209-> 142:v210-> 143:v98-> 144:v208-> 27:v50-> 28:v51-> 41:v52-> 42:v54-> 43:v55-> 68:v232-> 104:v47-> 124:v193-> 34:v78-> 36:v58-> 46:v42-> 47:v44-> 48:v12-> 49:v79-> 50:v80-> 55:v59-> 56:v60-> 57:v62-> 58:v63-> 59:v64-> 60:v65-> 61:v66-> 62:v67-> 63:v68-> 64:v235-> 65:v69-> 66:v70-> 67:v71-> 69:v152-> 70:v39-> 71:v164-> 72:v153-> 73:v163-> 75:v40-> 74:v155-> 93:v125-> 94:v126-> 97:v32-> 98:v259-> 110:v124-> 112:v106-> 113:v108-> 114:v109-> 115:v110-> 116:v111-> 117:v112-> 118:v113-> 119:v114-> 120:v196-> 121:v115-> 122:v116-> 123:v117-> 37:v123-> 44:v77-> 45:v57-> 107:v3-> 106:v266-> 31:v4-> 29:v160-> 30:v19-> 32:v161-> 35:v20-> 33:v158-> 105:v268-> 54:v34-> 111:v35-> 125:v271-> 99:v36-> 100:v37-> 101:v14"
// [Asm]   comment = "v22<-a0;v13<-s5;v113<-a2;v77<-a0;v60<-a1;v7<-s6;v35<-a0;v34<-a0;v100<-a0;v114<-a2;v142<-a0;v180<-a0;v210<-a0;v17<-s2;v69<-a2;v134<-a1;v108<-a0;v84<-a0;v71<-a0;v132<-a0;v31<-s7;v63<-a1;v268<-a0;v133<-a0;v96<-a0;v65<-a3;v163<-a0;v125<-a0;v128<-a0;v116<-a1;v174<-a0;v146<-a0;v5<-s3;v208<-a1;v235<-a3;v70<-a1;v110<-a2;v87<-a0;v94<-a1;v39<-a1;v12<-a1;v123<-a0;v121<-a0;v117<-a0;v271<-a0;v164<-a2;v176<-a1;v57<-a0;v169<-a1;v3<-a0;v68<-a2;v93<-a1;v213<-a0;v115<-a2;v171<-a0;v32<-a0;v181<-a0;v126<-a0;v14<-a2;v42<-a0;v196<-a3;v158<-a1;v64<-a2;v130<-a0;v140<-a1;v15<-s10;v11<-s1;v55<-a0;v4<-a0;v36<-a0;v220<-a0;v16<-s2;v86<-a0;v66<-a3;v2<-s0;v75<-a0;v219<-a0;v137<-a0;v40<-a0;v50<-a0;v67<-a2;v8<-s10;v124<-a0;v78<-a0;v138<-a0;v189<-a1;v91<-a0;v147<-a0;v82<-a0;v92<-a0;v59<-a0;v215<-a1;v153<-a2;v47<-a0;v111<-a3;v37<-a1;v139<-a1;v44<-a0;v46<-s2;v23<-s9;v54<-a0;v112<-a3;v6<-a2;v160<-a1;v20<-a1;v88<-a1;v109<-a1;v10<-s4;v58<-a0;v106<-a0;v161<-a1;v79<-a0;v155<-a0;v62<-a0;v209<-a0;v232<-a0;v259<-a1;v193<-a0;v144<-a0;v9<-s8;v266<-a0;v228<-a1;v101<-a0;v51<-a0;v52<-a0;v152<-a0;v170<-a0;v80<-a0;v19<-a2;v98<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of fannkuch.572"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   addi v6, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a2, -8
// [Asm] subst   sw zero, 0(v6) ->   sw zero, 0(a2)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v46 ->   mv a1, s2
// [Asm] subst   mv a3, v7 ->   mv a3, s6
// [Asm] subst   call flip_loop.577 ->   call flip_loop.577
// [Asm] subst   slliw v160, v19, 2 ->   slliw a1, a2, 2
// [Asm] subst   add v161, v4, v160 ->   add a1, a0, a1
// [Asm] subst   sw v19, 0(v161) ->   sw a2, 0(a1)
// [Asm] subst   addi v158, v19, 1 ->   addi a1, a2, 1
// [Asm] subst   mv v19, v158 ->   mv a2, a1
// [Asm] subst   j .fannkuch.572_14 ->   j .fannkuch.572_14
// [Asm] subst   addi v20, v2, -1 ->   addi a1, s0, -1
// [Asm] subst   blt v20, v19, .fannkuch.572_16 ->   blt a1, a2, .fannkuch.572_16
// [Asm] subst   mv v123, zero ->   mv a0, zero
// [Asm] subst   mv v23, v22 ->   mv s9, a0
// [Asm] subst   lw v128, 0(v31) ->   lw a0, 0(s7)
// [Asm] subst   beq v128, v2, .fannkuch.572_85 ->   beq a0, s0, .fannkuch.572_85
// [Asm] subst   lw v52, 0(v7) ->   lw a0, 0(s6)
// [Asm] subst   sw v52, 0(v46) ->   sw a0, 0(s2)
// [Asm] subst   lw v54, 0(v11) ->   lw a0, 0(s1)
// [Asm] subst   addi v55, v54, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v55, 0(v11) ->   sw a0, 0(s1)
// [Asm] subst   j .fannkuch.572_73 ->   j .fannkuch.572_73
// [Asm] subst   mv v77, zero ->   mv a0, zero
// [Asm] subst   mv v31, v3 ->   mv s7, a0
// [Asm] subst   mv v57, zero ->   mv a0, zero
// [Asm] subst   mv a0, v31 ->   mv a0, s7
// [Asm] subst   mv a1, v9 ->   mv a1, s8
// [Asm] subst   call init_count.575 ->   call init_count.575
// [Asm] subst   sw zero, 0(v11) ->   sw zero, 0(s1)
// [Asm] subst   lw v44, 0(v7) ->   lw a0, 0(s6)
// [Asm] subst   addi v12, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v12, -8 ->   andi s11, a1, -8
// [Asm] subst   sw v44, 0(v12) ->   sw a0, 0(a1)
// [Asm] subst   lw v79, 0(v10) ->   lw a0, 0(s4)
// [Asm] subst   addi v80, v79, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v80, 0(v10) ->   sw a0, 0(s4)
// [Asm] subst   j .fannkuch.572_20 ->   j .fannkuch.572_20
// [Asm] subst   lw v82, 0(v31) ->   lw a0, 0(s7)
// [Asm] subst   beq v82, v2, .fannkuch.572_109 ->   beq a0, s0, .fannkuch.572_109
// [Asm] subst   mv v46, v12 ->   mv s2, a1
// [Asm] subst   mv v34, zero ->   mv a0, zero
// [Asm] subst   lw v59, 0(v13) ->   lw a0, 0(s5)
// [Asm] subst   lw v60, 0(v11) ->   lw a1, 0(s1)
// [Asm] subst   blt v60, v59, .fannkuch.572_28 ->   blt a1, a0, .fannkuch.572_28
// [Asm] subst   lw v62, 0(v5) ->   lw a0, 0(s3)
// [Asm] subst   lw v63, 0(v11) ->   lw a1, 0(s1)
// [Asm] subst   lw v64, 0(v10) ->   lw a2, 0(s4)
// [Asm] subst   srai v65, v64, 1 ->   srai a3, a2, 1
// [Asm] subst   slli v66, v65, 1 ->   slli a3, a3, 1
// [Asm] subst   sub v67, v64, v66 ->   sub a2, a2, a3
// [Asm] subst   slli v68, v67, 1 ->   slli a2, a2, 1
// [Asm] subst   li v235, 1 ->   li a3, 1
// [Asm] subst   sub v69, v235, v68 ->   sub a2, a3, a2
// [Asm] subst   mul v70, v63, v69 ->   mul a1, a1, a2
// [Asm] subst   add v71, v62, v70 ->   add a0, a0, a1
// [Asm] subst   sw v71, 0(v5) ->   sw a0, 0(s3)
// [Asm] subst   addi v16, s11, -4 ->   addi s2, s11, -4
// [Asm] subst   andi s11, v16, -8 ->   andi s11, s2, -8
// [Asm] subst   li v232, 1 ->   li a0, 1
// [Asm] subst   sw v232, 0(v16) ->   sw a0, 0(s2)
// [Asm] subst   addi v15, s11, -4 ->   addi s10, s11, -4
// [Asm] subst   andi s11, v15, -8 ->   andi s11, s10, -8
// [Asm] subst   sw zero, 0(v15) ->   sw zero, 0(s10)
// [Asm] subst   sw zero, 0(v16) ->   sw zero, 0(s2)
// [Asm] subst   j .fannkuch.572_106 ->   j .fannkuch.572_106
// [Asm] subst   slliw v152, v39, 2 ->   slliw a0, a1, 2
// [Asm] subst   add v164, v23, v152 ->   add a2, s9, a0
// [Asm] subst   lw v153, 0(v164) ->   lw a2, 0(a2)
// [Asm] subst   add v163, v7, v152 ->   add a0, s6, a0
// [Asm] subst   sw v153, 0(v163) ->   sw a2, 0(a0)
// [Asm] subst   addi v155, v39, 1 ->   addi a0, a1, 1
// [Asm] subst   mv v39, v155 ->   mv a1, a0
// [Asm] subst   j .fannkuch.572_24 ->   j .fannkuch.572_24
// [Asm] subst   sw zero, 0(v8) ->   sw zero, 0(s10)
// [Asm] subst   j .fannkuch.572_82 ->   j .fannkuch.572_82
// [Asm] subst   addi v40, v2, -1 ->   addi a0, s0, -1
// [Asm] subst   blt v40, v39, .fannkuch.572_26 ->   blt a0, a1, .fannkuch.572_26
// [Asm] subst   lw v130, 0(v23) ->   lw a0, 0(s9)
// [Asm] subst   sw v130, 0(v17) ->   sw a0, 0(s2)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v31 ->   mv a1, s7
// [Asm] subst   mv a2, v23 ->   mv a2, s9
// [Asm] subst   call move_perm1_forward.579 ->   call move_perm1_forward.579
// [Asm] subst   lw v133, 0(v31) ->   lw a0, 0(s7)
// [Asm] subst   lw v134, 0(v17) ->   lw a1, 0(s2)
// [Asm] subst   slliw v180, v133, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v181, v23, v180 ->   add a0, s9, a0
// [Asm] subst   sw v134, 0(v181) ->   sw a1, 0(a0)
// [Asm] subst   lw v137, 0(v31) ->   lw a0, 0(s7)
// [Asm] subst   slliw v138, v137, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v176, v9, v138 ->   add a1, s8, a0
// [Asm] subst   lw v139, 0(v176) ->   lw a1, 0(a1)
// [Asm] subst   addi v140, v139, -1 ->   addi a1, a1, -1
// [Asm] subst   add v174, v9, v138 ->   add a0, s8, a0
// [Asm] subst   sw v140, 0(v174) ->   sw a1, 0(a0)
// [Asm] subst   lw v142, 0(v31) ->   lw a0, 0(s7)
// [Asm] subst   slliw v170, v142, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v171, v9, v170 ->   add a0, s8, a0
// [Asm] subst   lw v144, 0(v171) ->   lw a0, 0(a0)
// [Asm] subst   li v169, 1 ->   li a1, 1
// [Asm] subst   bge v144, v169, .fannkuch.572_87 ->   bge a0, a1, .fannkuch.572_87
// [Asm] subst   lw v125, 0(v10) ->   lw a0, 0(s4)
// [Asm] subst   addi v126, v125, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v126, 0(v10) ->   sw a0, 0(s4)
// [Asm] subst   j .fannkuch.572_20 ->   j .fannkuch.572_20
// [Asm] subst   sw zero, 0(v8) ->   sw zero, 0(s10)
// [Asm] subst   sw zero, 0(v31) ->   sw zero, 0(s7)
// [Asm] subst   j .fannkuch.572_82 ->   j .fannkuch.572_82
// [Asm] subst   lw v146, 0(v31) ->   lw a0, 0(s7)
// [Asm] subst   addi v147, v146, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v147, 0(v31) ->   sw a0, 0(s7)
// [Asm] subst   j .fannkuch.572_82 ->   j .fannkuch.572_82
// [Asm] subst   mv v39, zero ->   mv a1, zero
// [Asm] subst   lw v32, 0(v31) ->   lw a0, 0(s7)
// [Asm] subst   li v259, 1 ->   li a1, 1
// [Asm] subst   blt v32, v259, .fannkuch.572_22 ->   blt a0, a1, .fannkuch.572_22
// [Asm] subst   lw v36, 0(v13) ->   lw a0, 0(s5)
// [Asm] subst   lw v37, 0(v5) ->   lw a1, 0(s3)
// [Asm] subst   addi v14, s11, -8 ->   addi a2, s11, -8
// [Asm] subst   andi s11, v14, -8 ->   andi s11, a2, -8
// [Asm] subst   sw v36, 0(v14) ->   sw a0, 0(a2)
// [Asm] subst   sw v37, 4(v14) ->   sw a1, 4(a2)
// [Asm] subst   mv a0, v14 ->   mv a0, a2
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v121, 0(v8) ->   lw a0, 0(s10)
// [Asm] subst   li v189, 1 ->   li a1, 1
// [Asm] subst   bne v121, v189, .fannkuch.572_84 ->   bne a0, a1, .fannkuch.572_84
// [Asm] subst   lw v47, 0(v46) ->   lw a0, 0(s2)
// [Asm] subst   beq v47, zero, .fannkuch.572_74 ->   beq a0, zero, .fannkuch.572_74
// [Asm] subst   slliw v268, v2, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v7, s11, v268 ->   sub s6, s11, a0
// [Asm] subst   andi s11, v7, -8 ->   andi s11, s6, -8
// [Asm] subst   mv a1, v2 ->   mv a1, s0
// [Asm] subst   slliw v266, v2, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v9, s11, v266 ->   sub s8, s11, a0
// [Asm] subst   andi s11, v9, -8 ->   andi s11, s8, -8
// [Asm] subst   mv a1, v2 ->   mv a1, s0
// [Asm] subst   addi v11, s11, -4 ->   addi s1, s11, -4
// [Asm] subst   andi s11, v11, -8 ->   andi s11, s1, -8
// [Asm] subst   sw zero, 0(v11) ->   sw zero, 0(s1)
// [Asm] subst   addi v13, s11, -4 ->   addi s5, s11, -4
// [Asm] subst   andi s11, v13, -8 ->   andi s11, s5, -8
// [Asm] subst   sw zero, 0(v13) ->   sw zero, 0(s5)
// [Asm] subst   addi v5, s11, -4 ->   addi s3, s11, -4
// [Asm] subst   andi s11, v5, -8 ->   andi s11, s3, -8
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(s3)
// [Asm] subst   addi v10, s11, -4 ->   addi s4, s11, -4
// [Asm] subst   andi s11, v10, -8 ->   andi s11, s4, -8
// [Asm] subst   sw zero, 0(v10) ->   sw zero, 0(s4)
// [Asm] subst   addi v3, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a0, -8
// [Asm] subst   sw v2, 0(v3) ->   sw s0, 0(a0)
// [Asm] subst   lw v75, 0(v16) ->   lw a0, 0(s2)
// [Asm] subst   li v228, 1 ->   li a1, 1
// [Asm] subst   bne v75, v228, .fannkuch.572_108 ->   bne a0, a1, .fannkuch.572_108
// [Asm] subst   sw zero, 0(v16) ->   sw zero, 0(s2)
// [Asm] subst   sw zero, 0(v31) ->   sw zero, 0(s7)
// [Asm] subst   j .fannkuch.572_106 ->   j .fannkuch.572_106
// [Asm] subst   lw v106, 0(v11) ->   lw a0, 0(s1)
// [Asm] subst   sw v106, 0(v13) ->   sw a0, 0(s5)
// [Asm] subst   lw v108, 0(v5) ->   lw a0, 0(s3)
// [Asm] subst   lw v109, 0(v11) ->   lw a1, 0(s1)
// [Asm] subst   lw v110, 0(v10) ->   lw a2, 0(s4)
// [Asm] subst   srai v111, v110, 1 ->   srai a3, a2, 1
// [Asm] subst   slli v112, v111, 1 ->   slli a3, a3, 1
// [Asm] subst   sub v113, v110, v112 ->   sub a2, a2, a3
// [Asm] subst   slli v114, v113, 1 ->   slli a2, a2, 1
// [Asm] subst   li v196, 1 ->   li a3, 1
// [Asm] subst   sub v115, v196, v114 ->   sub a2, a3, a2
// [Asm] subst   mul v116, v109, v115 ->   mul a1, a1, a2
// [Asm] subst   add v117, v108, v116 ->   add a0, a0, a1
// [Asm] subst   sw v117, 0(v5) ->   sw a0, 0(s3)
// [Asm] subst   addi v8, s11, -4 ->   addi s10, s11, -4
// [Asm] subst   andi s11, v8, -8 ->   andi s11, s10, -8
// [Asm] subst   li v193, 1 ->   li a0, 1
// [Asm] subst   sw v193, 0(v8) ->   sw a0, 0(s10)
// [Asm] subst   addi v17, s11, -4 ->   addi s2, s11, -4
// [Asm] subst   andi s11, v17, -8 ->   andi s11, s2, -8
// [Asm] subst   sw zero, 0(v17) ->   sw zero, 0(s2)
// [Asm] subst   slliw v271, v2, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v4, s11, v271 ->   sub a0, s11, a0
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a0, -8
// [Asm] subst   mv a1, v2 ->   mv a1, s0
// [Asm] subst   mv v19, zero ->   mv a2, zero
// [Asm] subst   lw v100, 0(v31) ->   lw a0, 0(s7)
// [Asm] subst   addi v101, v100, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v101, 0(v31) ->   sw a0, 0(s7)
// [Asm] subst   j .fannkuch.572_106 ->   j .fannkuch.572_106
// [Asm] subst   lw v84, 0(v23) ->   lw a0, 0(s9)
// [Asm] subst   sw v84, 0(v15) ->   sw a0, 0(s10)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v31 ->   mv a1, s7
// [Asm] subst   mv a2, v23 ->   mv a2, s9
// [Asm] subst   call move_perm1_forward.581 ->   call move_perm1_forward.581
// [Asm] subst   lw v87, 0(v31) ->   lw a0, 0(s7)
// [Asm] subst   lw v88, 0(v15) ->   lw a1, 0(s10)
// [Asm] subst   slliw v219, v87, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v220, v23, v219 ->   add a0, s9, a0
// [Asm] subst   sw v88, 0(v220) ->   sw a1, 0(a0)
// [Asm] subst   lw v91, 0(v31) ->   lw a0, 0(s7)
// [Asm] subst   slliw v92, v91, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v215, v9, v92 ->   add a1, s8, a0
// [Asm] subst   lw v93, 0(v215) ->   lw a1, 0(a1)
// [Asm] subst   addi v94, v93, -1 ->   addi a1, a1, -1
// [Asm] subst   add v213, v9, v92 ->   add a0, s8, a0
// [Asm] subst   sw v94, 0(v213) ->   sw a1, 0(a0)
// [Asm] subst   lw v96, 0(v31) ->   lw a0, 0(s7)
// [Asm] subst   slliw v209, v96, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v210, v9, v209 ->   add a0, s8, a0
// [Asm] subst   lw v98, 0(v210) ->   lw a0, 0(a0)
// [Asm] subst   li v208, 1 ->   li a1, 1
// [Asm] subst   bge v98, v208, .fannkuch.572_111 ->   bge a0, a1, .fannkuch.572_111
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v7, FnParam(fref=f1, fpref=$f.1) -> v3, Insn(iref=%7) -> v11, FnParam(fref=f1, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%2) -> v6, Insn(iref=%9) -> v13, Insn(iref=%8) -> v12, Insn(iref=%1) -> v5, Insn(iref=%10) -> v8, Self(fref=f1) -> v0, Insn(iref=%6) -> v10, Insn(iref=%5) -> v9, Insn(iref=%0) -> v4
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%3), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=1)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v2, v4, zero, v22, v3]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v7, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v2, v6, v18, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v2, v19, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init_count.575"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="t0", color=blue];
// [Asm]   r23 [label="t3", color=blue];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v7 ← a3", color=green];
// [Asm]   r6 [label="v22 ← a3", color=green];
// [Asm]   r13 [label="v11 ← a2", color=green];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r11 [label="v19 ← a3", color=green];
// [Asm]   r7 [label="v14 ← a0", color=green];
// [Asm]   r10 [label="v18 ← a3", color=green];
// [Asm]   r22 [label="t2", color=blue];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r8 [label="v6 ← a2", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r24 [label="t4", color=blue];
// [Asm]   r25 [label="v13 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r21 [label="t1", color=blue];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r12 [label="v10 ← a2", color=green];
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r0 -- r24;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r0 -- r17;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r14;
// [Asm]   r3 -- r9;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r13;
// [Asm]   r3 -- r11;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r3 -- r24;
// [Asm]   r3 -- r18;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r13;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r20;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r0 -- r18;
// [Asm]   comment = "0:a0-> 2:a1-> 3:zero-> 1:v2-> 4:v3-> 5:v4-> 6:v22-> 8:v6-> 9:v7-> 10:v18-> 11:v19-> 12:v10-> 13:v11-> 14:a2-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 20:t0-> 21:t1-> 22:t2-> 23:t3-> 24:t4-> 25:v13-> 7:v14"
// [Asm]   comment = "v7<-a3;v22<-a3;v11<-a2;v3<-a1;v2<-a0;v19<-a3;v14<-a0;v18<-a3;v6<-a2;v4<-a2;v13<-a0;v10<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init_count.575"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v6, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   addi v7, v6, -1 ->   addi a3, a2, -1
// [Asm] subst   slliw v18, v7, 2 ->   slliw a3, a3, 2
// [Asm] subst   add v19, v3, v18 ->   add a3, a1, a3
// [Asm] subst   sw v6, 0(v19) ->   sw a2, 0(a3)
// [Asm] subst   lw v10, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   addi v11, v10, -1 ->   addi a2, a2, -1
// [Asm] subst   sw v11, 0(v2) ->   sw a2, 0(a0)
// [Asm] subst   call init_count.575 ->   call init_count.575
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   lw v4, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   li v22, 1 ->   li a3, 1
// [Asm] subst   beq v4, v22, .init_count.575_1 ->   beq a2, a3, .init_count.575_1
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   j .init_count.575_3 ->   j .init_count.575_3
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v6, Insn(iref=%1) -> v3, Insn(iref=%3) -> v5, Self(fref=f10) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.582"];
// [Asm]   r0 [label="v11 ← a0", color=green];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a5", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a6", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r14 [label="v2 ← a0", color=green];
// [Asm]   r8 [label="a7", color=blue];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r15 [label="v3 ← s0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="v4 ← a0", color=green];
// [Asm]   r18 [label="v6 ← a0", color=green];
// [Asm]   r17 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r4 -- r15;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r15 -- r17;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r8 -- r15;
// [Asm]   r9 -- r15;
// [Asm]   r1 -- r4;
// [Asm]   r7 -- r15;
// [Asm]   r10 -- r15;
// [Asm]   r12 -- r15;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r11 -- r15;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r3;
// [Asm]   r15 -- r16;
// [Asm]   r14 -- r15;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v11-> 1:a0-> 2:a1-> 15:v3-> 3:a2-> 4:a3-> 5:a4-> 6:a5-> 7:a6-> 8:a7-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:v2-> 16:v4-> 17:v5-> 18:v6"
// [Asm]   comment = "v11<-a0;v2<-a0;v3<-s0;v4<-a0;v6<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.582"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v11, 9 ->   li a0, 9
// [Asm] subst   call fannkuch.572 ->   call fannkuch.572
// [Asm] subst   lw v3, 0(v2) ->   lw s0, 0(a0)
// [Asm] subst   lw v4, 4(v2) ->   lw a0, 4(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v3 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%12) -> v23, BlockParam(bref=b2, bpref=$b.0) -> v6, Insn(iref=%9) -> v19, Self(fref=f2) -> v0, Insn(iref=%8) -> v18, Insn(iref=%10) -> v20, Insn(iref=%5) -> v14, Insn(iref=%0) -> v7, Insn(iref=%4) -> v13, Insn(iref=%3) -> v12, Insn(iref=%13) -> v24, Insn(iref=%7) -> v17, BlockParam(bref=b5, bpref=$b.0) -> v10, Insn(iref=%22) -> v16, Insn(iref=%23) -> v11, Insn(iref=%17) -> v22, Insn(iref=%2) -> v9, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v8, Insn(iref=%11) -> v21, Insn(iref=%6) -> v15, FnParam(fref=f2, fpref=$f.0) -> v2, FnParam(fref=f2, fpref=$f.3) -> v5, FnParam(fref=f2, fpref=$f.2) -> v4
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%10), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%6), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b2, bpref=$b.0), Insn(iref=%1)])
// [Asm] defs: [v7]
// [Asm] live_set: [v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v11, v5, zero, v4, v37, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v5, zero, v4, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v5, v14, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v5, zero, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v11, v5, zero, v4, v32, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v11, v5, zero, v4, v6, v33, v3]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v5, zero, v4, v6, v17, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v5, zero, v4, v6, v17, v31, v3]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v5, zero, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v5, zero, v20, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v21, zero, v20, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v5, v21, zero, v26, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v5, v21, zero, v27, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v4, v5, v24, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: [v24]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of flip_loop.577"];
// [Asm]   r0 [label="v7 ← a0", color=green];
// [Asm]   r20 [label="v26 ← a0", color=green];
// [Asm]   r23 [label="v10 ← a0", color=green];
// [Asm]   r3 [label="v4 ← a2", color=green];
// [Asm]   r9 [label="v37 ← a5", color=green];
// [Asm]   r26 [label="a1", color=blue];
// [Asm]   r27 [label="a3", color=blue];
// [Asm]   r6 [label="v8 ← a0", color=green];
// [Asm]   r13 [label="v32 ← a5", color=green];
// [Asm]   r4 [label="v6 ← a3", color=green];
// [Asm]   r1 [label="v5 ← a1", color=green];
// [Asm]   r11 [label="v14 ← a5", color=green];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="v12 ← a5", color=green];
// [Asm]   r22 [label="v24 ← a0", color=green];
// [Asm]   r14 [label="v33 ← a5", color=green];
// [Asm]   r8 [label="v11 ← a0", color=green];
// [Asm]   r5 [label="v3 ← a4", color=green];
// [Asm]   r24 [label="v2 ← a0", color=green];
// [Asm]   r15 [label="v17 ← a5", color=green];
// [Asm]   r25 [label="a2", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v31 ← a0", color=green];
// [Asm]   r18 [label="v20 ← a0", color=green];
// [Asm]   r19 [label="v21 ← a5", color=green];
// [Asm]   r21 [label="v27 ← a0", color=green];
// [Asm]   r17 [label="v19 ← a0", color=green];
// [Asm]   r12 [label="v15 ← a5", color=green];
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   r5 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r1 -- r16;
// [Asm]   r19 -- r21;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r8 -- r12;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r24 -- r27;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r27;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r8 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r24;
// [Asm]   r0 -- r4;
// [Asm]   r8 -- r14;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r22;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r24 -- r26;
// [Asm]   r3 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r18 -- r19;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r5 -- r25;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r19 -- r20;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:v7-> 1:v5-> 2:zero-> 3:v4-> 4:v6-> 5:v3-> 6:v8-> 8:v11-> 9:v37-> 10:v12-> 11:v14-> 12:v15-> 13:v32-> 14:v33-> 15:v17-> 16:v31-> 17:v19-> 18:v20-> 19:v21-> 20:v26-> 21:v27-> 22:v24-> 24:v2-> 27:a3-> 25:a2-> 26:a1-> 7:a0-> 23:v10"
// [Asm]   comment = "v7<-a0;v26<-a0;v10<-a0;v4<-a2;v37<-a5;v8<-a0;v32<-a5;v6<-a3;v5<-a1;v14<-a5;v12<-a5;v24<-a0;v33<-a5;v11<-a0;v3<-a4;v2<-a0;v17<-a5;v31<-a0;v20<-a0;v21<-a5;v27<-a0;v19<-a0;v15<-a5;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of flip_loop.577"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v7, 0(v3) ->   lw a0, 0(a4)
// [Asm] subst   srai v8, v7, 1 ->   srai a0, a0, 1
// [Asm] subst   blt v8, v6, .flip_loop.577_4 ->   blt a0, a3, .flip_loop.577_4
// [Asm] subst   ret ->   ret
// [Asm] subst   slliw v11, v6, 2 ->   slliw a0, a3, 2
// [Asm] subst   add v37, v5, v11 ->   add a5, a1, a0
// [Asm] subst   lw v12, 0(v37) ->   lw a5, 0(a5)
// [Asm] subst   sw v12, 0(v4) ->   sw a5, 0(a2)
// [Asm] subst   lw v14, 0(v3) ->   lw a5, 0(a4)
// [Asm] subst   sub v15, v14, v6 ->   sub a5, a5, a3
// [Asm] subst   slliw v32, v15, 2 ->   slliw a5, a5, 2
// [Asm] subst   add v33, v5, v32 ->   add a5, a1, a5
// [Asm] subst   lw v17, 0(v33) ->   lw a5, 0(a5)
// [Asm] subst   add v31, v5, v11 ->   add a0, a1, a0
// [Asm] subst   sw v17, 0(v31) ->   sw a5, 0(a0)
// [Asm] subst   lw v19, 0(v3) ->   lw a0, 0(a4)
// [Asm] subst   sub v20, v19, v6 ->   sub a0, a0, a3
// [Asm] subst   lw v21, 0(v4) ->   lw a5, 0(a2)
// [Asm] subst   slliw v26, v20, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v27, v5, v26 ->   add a0, a1, a0
// [Asm] subst   sw v21, 0(v27) ->   sw a5, 0(a0)
// [Asm] subst   addi v24, v6, 1 ->   addi a0, a3, 1
// [Asm] subst   mv v6, v24 ->   mv a3, a0
// [Asm] subst   j .flip_loop.577_2 ->   j .flip_loop.577_2
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   mv v3, a1 ->   mv a4, a1
// [Asm] subst   mv v5, a3 ->   mv a1, a3
// [Asm] subst   mv v6, v2 ->   mv a3, a0
// [Asm] pre_assigned_registers: Self(fref=f22) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.582 ->   call main.582
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] fannkuch.572:
// [Asm] # block info: defs: [v2], uses: [a0], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [s11, a0, zero], live_out: [s11, zero, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_0:
// [Asm]   # save_ctx1  # live: [s11, zero, a0]
// [Asm]   mv v2, a0  # live: [s11, zero, v2]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v19, v4, a1, s11, v271], uses: [v271, v4, s11, zero, v2], upward_exposed: [s11, zero, v2], params_defs: []
// [Asm] # live_in: [s11, zero, v2], live_out: [v19, v4, s11, zero, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_12:
// [Asm]   slliw v271, v2, 2  # live: [v271, s11, zero, v2]
// [Asm]   sub v4, s11, v271  # live: [v4, zero, v2]
// [Asm]   andi s11, v4, -8  # live: [v4, s11, zero, v2]
// [Asm]   mv a1, v2  # live: [v4, s11, zero, v2]
// [Asm] # control
// [Asm]   mv v19, zero  # live: [v19, v4, s11, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [v19, v20, v2], upward_exposed: [v19, v2], params_defs: [v19]
// [Asm] # live_in: [v19, v4, s11, zero, v2], live_out: [v19, v4, s11, zero, v2]
// [Asm] # block parameters: [v19]
// [Asm] .fannkuch.572_14:
// [Asm]   addi v20, v2, -1  # live: [zero, v20, v19, v4, s11, v2]
// [Asm] # control
// [Asm]   blt v20, v19, .fannkuch.572_16  # live: [v19, v4, s11, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v19, v161, v160, v158], uses: [v19, v4, v161, v160, v158], upward_exposed: [v19, v4], params_defs: []
// [Asm] # live_in: [v19, v4, s11, zero, v2], live_out: [v19, v4, s11, zero, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_15:
// [Asm]   slliw v160, v19, 2  # live: [v19, v4, s11, v160, zero, v2]
// [Asm]   add v161, v4, v160  # live: [v19, v4, s11, v161, zero, v2]
// [Asm]   sw v19, 0(v161)  # live: [v19, v4, s11, zero, v2]
// [Asm]   addi v158, v19, 1  # live: [v4, s11, zero, v158, v2]
// [Asm] # control
// [Asm]   mv v19, v158  # live: [v19, v4, s11, zero, v2]
// [Asm]   j .fannkuch.572_14  # live: [v19, v4, s11, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [v4], upward_exposed: [v4], params_defs: []
// [Asm] # live_in: [v4, s11, zero, v2], live_out: [s11, zero, v22, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_16:
// [Asm] # control
// [Asm]   mv v22, v4  # live: [s11, zero, v22, v2]
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [v22], upward_exposed: [v22], params_defs: [v22]
// [Asm] # live_in: [s11, zero, v22, v2], live_out: [s11, zero, v23, v2]
// [Asm] # block parameters: [v22]
// [Asm] .fannkuch.572_17:
// [Asm] # control
// [Asm]   mv v23, v22  # live: [s11, zero, v23, v2]
// [Asm] 
// [Asm] # block info: defs: [v11, v268, v5, v10, v13, v7, a1, s11, v266, v9, v3], uses: [v3, v11, v268, v5, v10, zero, v13, v7, s11, v266, v9, v2], upward_exposed: [s11, zero, v2], params_defs: [v23]
// [Asm] # live_in: [s11, zero, v23, v2], live_out: [v3, v11, v5, v10, zero, v13, v23, v7, s11, v9, v2]
// [Asm] # block parameters: [v23]
// [Asm] .fannkuch.572_1:
// [Asm]   slliw v268, v2, 2  # live: [v268, zero, v23, s11, v2]
// [Asm]   sub v7, s11, v268  # live: [zero, v23, v7, v2]
// [Asm]   andi s11, v7, -8  # live: [zero, v23, v7, s11, v2]
// [Asm]   mv a1, v2  # live: [zero, v23, v7, s11, v2]
// [Asm]   slliw v266, v2, 2  # live: [zero, v23, v7, s11, v266, v2]
// [Asm]   sub v9, s11, v266  # live: [zero, v23, v7, v9, v2]
// [Asm]   andi s11, v9, -8  # live: [zero, v23, v7, s11, v9, v2]
// [Asm]   mv a1, v2  # live: [zero, v23, v7, s11, v9, v2]
// [Asm]   addi v11, s11, -4  # live: [v11, zero, v23, v7, v9, v2]
// [Asm]   andi s11, v11, -8  # live: [v11, zero, v23, v7, s11, v9, v2]
// [Asm]   sw zero, 0(v11)  # live: [v11, zero, v23, v7, s11, v9, v2]
// [Asm]   addi v13, s11, -4  # live: [v11, zero, v13, v23, v7, v9, v2]
// [Asm]   andi s11, v13, -8  # live: [v11, zero, v13, v23, v7, s11, v9, v2]
// [Asm]   sw zero, 0(v13)  # live: [v11, zero, v13, v23, v7, s11, v9, v2]
// [Asm]   addi v5, s11, -4  # live: [v11, v5, zero, v13, v23, v7, v9, v2]
// [Asm]   andi s11, v5, -8  # live: [v11, v5, zero, v13, v23, v7, s11, v9, v2]
// [Asm]   sw zero, 0(v5)  # live: [v11, v5, zero, v13, v23, v7, s11, v9, v2]
// [Asm]   addi v10, s11, -4  # live: [v11, v5, v10, zero, v13, v23, v7, v9, v2]
// [Asm]   andi s11, v10, -8  # live: [v11, v5, v10, zero, v13, v23, v7, s11, v9, v2]
// [Asm]   sw zero, 0(v10)  # live: [v11, v5, v10, zero, v13, v23, v7, s11, v9, v2]
// [Asm]   addi v3, s11, -4  # live: [v2, v11, v5, v10, zero, v13, v23, v7, v9, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, v11, v5, v10, zero, v13, v23, v7, s11, v9, v3]
// [Asm]   sw v2, 0(v3)  # live: [v2, v11, v5, v10, zero, v13, v23, v7, s11, v9, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v31], uses: [v3], upward_exposed: [v3], params_defs: []
// [Asm] # live_in: [v3, v11, v5, v10, zero, v13, v23, v7, s11, v9, v2], live_out: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_18:
// [Asm] # control
// [Asm]   mv v31, v3  # live: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v32, v259], uses: [v32, v31, v259], upward_exposed: [v31], params_defs: [v31]
// [Asm] # live_in: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2], live_out: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] # block parameters: [v31]
// [Asm] .fannkuch.572_20:
// [Asm]   lw v32, 0(v31)  # live: [v11, v5, v10, zero, v13, v23, v7, v32, s11, v31, v9, v2]
// [Asm] # control
// [Asm]   li v259, 1  # live: [v11, v5, v10, zero, v13, v23, v7, v32, s11, v31, v9, v259, v2]
// [Asm]   blt v32, v259, .fannkuch.572_22  # live: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v39], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2], live_out: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v39, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_21:
// [Asm] # control
// [Asm]   mv v39, zero  # live: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v39, v2]
// [Asm] 
// [Asm] # block info: defs: [v40], uses: [v40, v39, v2], upward_exposed: [v39, v2], params_defs: [v39]
// [Asm] # live_in: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v39, v2], live_out: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v39, v2]
// [Asm] # block parameters: [v39]
// [Asm] .fannkuch.572_24:
// [Asm]   addi v40, v2, -1  # live: [v2, v11, v5, v10, v13, v7, s11, v31, v9, v39, zero, v23, v40]
// [Asm] # control
// [Asm]   blt v40, v39, .fannkuch.572_26  # live: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v39, v2]
// [Asm] 
// [Asm] # block info: defs: [v152, v153, v155, v164, v163, v39], uses: [v164, v153, v155, v23, v152, v7, v39, v163], upward_exposed: [v7, v39, v23], params_defs: []
// [Asm] # live_in: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v39, v2], live_out: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v39, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_25:
// [Asm]   slliw v152, v39, 2  # live: [v11, v5, v10, v13, v7, s11, v31, v9, v39, zero, v23, v152, v2]
// [Asm]   add v164, v23, v152  # live: [v11, v5, v10, v13, v7, s11, v31, v9, v39, v164, zero, v23, v152, v2]
// [Asm]   lw v153, 0(v164)  # live: [v11, v153, v5, v10, v13, v7, s11, v31, v9, v39, zero, v23, v152, v2]
// [Asm]   add v163, v7, v152  # live: [v11, v153, v5, v10, v13, v7, s11, v31, v9, v39, zero, v23, v163, v2]
// [Asm]   sw v153, 0(v163)  # live: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v39, v2]
// [Asm]   addi v155, v39, 1  # live: [v11, v155, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] # control
// [Asm]   mv v39, v155  # live: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v39, v2]
// [Asm]   j .fannkuch.572_24  # live: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v39, v2]
// [Asm] 
// [Asm] # block info: defs: [v34], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, s11, zero, v13], live_out: [v5, s11, v34, v13]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_22:
// [Asm] # control
// [Asm]   mv v34, zero  # live: [v5, s11, v34, v13]
// [Asm] 
// [Asm] # block info: defs: [v35], uses: [v34], upward_exposed: [v34], params_defs: [v34]
// [Asm] # live_in: [v5, s11, v34, v13], live_out: [v5, s11, v13, v35]
// [Asm] # block parameters: [v34]
// [Asm] .fannkuch.572_31:
// [Asm] # control
// [Asm]   mv v35, v34  # live: [v5, s11, v13, v35]
// [Asm] 
// [Asm] # block info: defs: [v37, v14, s11, a0, v36], uses: [v5, v14, v13, a0, v36, v37, s11], upward_exposed: [v5, s11, v13], params_defs: [v35]
// [Asm] # live_in: [v5, s11, v13, v35], live_out: []
// [Asm] # block parameters: [v35]
// [Asm] .fannkuch.572_2:
// [Asm]   lw v36, 0(v13)  # live: [v5, s11, v36]
// [Asm]   lw v37, 0(v5)  # live: [v37, s11, v36]
// [Asm]   addi v14, s11, -8  # live: [v37, v14, v36]
// [Asm]   andi s11, v14, -8  # live: [v37, v14, v36]
// [Asm]   sw v36, 0(v14)  # live: [v37, v14]
// [Asm]   sw v37, 4(v14)  # live: [v14]
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, v42, ft0, ft1, a1, v12, s11, v44, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, a0, zero, v7, a1, s11, v12, v31, v44, v9], upward_exposed: [v11, s11, v31, v9, zero, v7], params_defs: []
// [Asm] # live_in: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2], live_out: [v11, v5, v10, zero, v13, v23, v7, v12, s11, v31, v9, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_26:
// [Asm]   # save_ctx2  # live: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm]   mv a0, v31  # live: [v11, v5, v10, v13, a0, v7, s11, v31, v9, zero, v23, v2]
// [Asm]   mv a1, v9  # live: [v11, v5, v10, v13, a0, v7, a1, s11, v31, v9, zero, v23, v2]
// [Asm]   call init_count.575  # live: [v11, v5, v10, v13, a0, v7, s11, v31, v9, zero, v23, v2]
// [Asm]   mv v42, a0  # live: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm]   # restore_ctx2  # live: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm]   sw zero, 0(v11)  # live: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm]   lw v44, 0(v7)  # live: [v11, v5, v10, v13, v7, s11, v31, v44, v9, zero, v23, v2]
// [Asm]   addi v12, s11, -4  # live: [v11, v5, v10, v13, v7, v12, v31, v44, v9, zero, v23, v2]
// [Asm]   andi s11, v12, -8  # live: [v11, v5, v10, v13, v7, v12, s11, v31, v44, v9, zero, v23, v2]
// [Asm]   sw v44, 0(v12)  # live: [v11, v5, v10, zero, v13, v23, v7, v12, s11, v31, v9, v2]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v46], uses: [v12], upward_exposed: [v12], params_defs: []
// [Asm] # live_in: [v11, v5, v10, zero, v13, v23, v7, v12, s11, v31, v9, v2], live_out: [v11, v46, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_71:
// [Asm] # control
// [Asm]   mv v46, v12  # live: [v11, v46, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v47], uses: [v47, v46, zero], upward_exposed: [v46, zero], params_defs: [v46]
// [Asm] # live_in: [v11, v46, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2], live_out: [v11, v46, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] # block parameters: [v46]
// [Asm] .fannkuch.572_73:
// [Asm]   lw v47, 0(v46)  # live: [v11, v46, v5, v10, v13, v7, s11, v31, v9, zero, v23, v47, v2]
// [Asm] # control
// [Asm]   beq v47, zero, .fannkuch.572_74  # live: [v11, v46, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, fa1, v51, fa2, ft6, a4, fa6, v50, a6, ft10, ft5, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v46, zero, a0, v50, v7, a2, v6, a1, s11, a3], upward_exposed: [v46, s11, zero, v7], params_defs: []
// [Asm] # live_in: [v11, v46, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2], live_out: [v11, v46, v5, v10, v13, v7, s11, v31, v9, v51, zero, v23, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_75:
// [Asm]   addi v6, s11, -4  # live: [v11, v46, v5, v10, v13, v7, v31, v9, zero, v23, v6, v2]
// [Asm]   andi s11, v6, -8  # live: [v11, v46, v5, v10, v13, v7, s11, v31, v9, zero, v23, v6, v2]
// [Asm]   sw zero, 0(v6)  # live: [v11, v46, v5, v10, v13, v7, s11, v31, v9, zero, v23, v6, v2]
// [Asm]   # save_ctx2  # live: [v11, v46, v5, v10, v13, v7, s11, v31, v9, zero, v23, v6, v2]
// [Asm]   mv a0, zero  # live: [v11, v46, v5, v10, v13, a0, v7, s11, v31, v9, zero, v23, v6, v2]
// [Asm]   mv a1, v46  # live: [v11, v46, v5, v10, v13, a0, v7, a1, s11, v31, v9, zero, v23, v6, v2]
// [Asm]   mv a2, v6  # live: [v11, v46, v5, v10, v13, a0, v7, a2, a1, s11, v31, v9, zero, v23, v2]
// [Asm]   mv a3, v7  # live: [v11, v46, v5, v10, v13, a0, v7, a2, a1, s11, a3, v31, v9, zero, v23, v2]
// [Asm]   call flip_loop.577  # live: [v11, v46, v5, v10, v13, zero, a0, v23, v7, s11, v31, v9, v2]
// [Asm]   mv v50, a0  # live: [v11, v46, v5, v10, v13, zero, v23, v50, v7, s11, v31, v9, v2]
// [Asm]   # restore_ctx2  # live: [v11, v46, v5, v10, v13, zero, v23, v50, v7, s11, v31, v9, v2]
// [Asm] # control
// [Asm]   mv v51, v50  # live: [v2, v11, v46, v5, v10, v13, zero, v23, v7, s11, v31, v9, v51]
// [Asm] 
// [Asm] # block info: defs: [v52, v54, v55], uses: [v11, v46, v7, v52, v54, v55], upward_exposed: [v11, v46, v7], params_defs: [v51]
// [Asm] # live_in: [v11, v46, v5, v10, v13, v7, s11, v31, v9, v51, zero, v23, v2], live_out: [v11, v46, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] # block parameters: [v51]
// [Asm] .fannkuch.572_77:
// [Asm]   lw v52, 0(v7)  # live: [v11, v46, v5, v10, v13, v7, s11, v52, v31, v9, zero, v23, v2]
// [Asm]   sw v52, 0(v46)  # live: [v11, v46, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm]   lw v54, 0(v11)  # live: [v11, v46, v5, v10, v13, v7, s11, v31, v9, zero, v23, v54, v2]
// [Asm]   addi v55, v54, 1  # live: [v11, v46, v5, v10, v13, v7, s11, v31, v9, zero, v23, v55, v2]
// [Asm]   sw v55, 0(v11)  # live: [v11, v46, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] # control
// [Asm]   mv v46, v46  # live: [v11, v46, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm]   j .fannkuch.572_73  # live: [v11, v46, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v57], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2], live_out: [v11, v5, v10, v13, zero, v23, v7, v57, s11, v31, v9, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_74:
// [Asm] # control
// [Asm]   mv v57, zero  # live: [v11, v5, v10, v13, zero, v23, v7, v57, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v58], uses: [v57], upward_exposed: [v57], params_defs: [v57]
// [Asm] # live_in: [v11, v5, v10, v13, zero, v23, v7, v57, s11, v31, v9, v2], live_out: [v11, v58, v5, v10, v13, zero, v23, v7, s11, v31, v9, v2]
// [Asm] # block parameters: [v57]
// [Asm] .fannkuch.572_76:
// [Asm] # control
// [Asm]   mv v58, v57  # live: [v11, v58, v5, v10, v13, zero, v23, v7, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v59, v60], uses: [v11, v59, v13, v60], upward_exposed: [v11, v13], params_defs: [v58]
// [Asm] # live_in: [v11, v58, v5, v10, v13, zero, v23, v7, s11, v31, v9, v2], live_out: [v11, v5, v10, v13, zero, v23, v7, s11, v31, v9, v2]
// [Asm] # block parameters: [v58]
// [Asm] .fannkuch.572_32:
// [Asm]   lw v59, 0(v13)  # live: [v11, v5, v10, v13, zero, v23, v7, v59, s11, v31, v9, v2]
// [Asm]   lw v60, 0(v11)  # live: [v11, v5, v10, v13, zero, v23, v7, v59, s11, v31, v9, v60, v2]
// [Asm] # control
// [Asm]   blt v60, v59, .fannkuch.572_28  # live: [v11, v5, v10, v13, zero, v23, v7, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v116, v110, v114, v111, v108, v17, s11, v196, v113, v193, v109, v115, v106, v112, v8, v117], uses: [v11, v116, v5, v10, v13, v110, v114, v111, v108, v17, s11, v196, v113, v193, v109, v115, v106, v112, zero, v8, v117], upward_exposed: [v11, v5, v10, s11, v13, zero], params_defs: []
// [Asm] # live_in: [v11, v5, v10, v13, zero, v23, v7, s11, v31, v9, v2], live_out: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_27:
// [Asm]   lw v106, 0(v11)  # live: [v11, v5, v10, v13, v7, s11, v31, v9, v106, zero, v23, v2]
// [Asm]   sw v106, 0(v13)  # live: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm]   lw v108, 0(v5)  # live: [v11, v5, v10, v13, v7, v108, s11, v31, v9, zero, v23, v2]
// [Asm]   lw v109, 0(v11)  # live: [v11, v5, v10, v13, v7, v108, s11, v31, v9, v109, zero, v23, v2]
// [Asm]   lw v110, 0(v10)  # live: [v11, v5, v10, v13, v110, v7, v108, s11, v31, v9, v109, zero, v23, v2]
// [Asm]   srai v111, v110, 1  # live: [v11, v5, v10, v13, v110, v7, v108, v111, s11, v31, v9, v109, zero, v23, v2]
// [Asm]   slli v112, v111, 1  # live: [v11, v5, v10, v13, v110, v7, v108, s11, v31, v9, v109, v112, zero, v23, v2]
// [Asm]   sub v113, v110, v112  # live: [v11, v5, v10, v13, v7, v108, s11, v31, v9, v113, v109, zero, v23, v2]
// [Asm]   slli v114, v113, 1  # live: [v11, v5, v10, v13, v7, v114, v108, s11, v31, v9, v109, zero, v23, v2]
// [Asm]   li v196, 1  # live: [v11, v5, v10, v13, v7, v114, v108, s11, v31, v196, v9, v109, zero, v23, v2]
// [Asm]   sub v115, v196, v114  # live: [v11, v5, v10, v13, v7, v108, s11, v31, v9, v109, v115, zero, v23, v2]
// [Asm]   mul v116, v109, v115  # live: [v11, v116, v5, v10, v13, v7, v108, s11, v31, v9, zero, v23, v2]
// [Asm]   add v117, v108, v116  # live: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v117, v2]
// [Asm]   sw v117, 0(v5)  # live: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm]   addi v8, s11, -4  # live: [v11, v5, v10, v13, v7, v31, v9, zero, v23, v8, v2]
// [Asm]   andi s11, v8, -8  # live: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   li v193, 1  # live: [v11, v5, v10, v13, v7, s11, v31, v9, v193, zero, v23, v8, v2]
// [Asm]   sw v193, 0(v8)  # live: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   addi v17, s11, -4  # live: [v11, v5, v10, v13, v7, v17, v31, v9, zero, v23, v8, v2]
// [Asm]   andi s11, v17, -8  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   sw zero, 0(v17)  # live: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2], live_out: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_80:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v121, v189], uses: [v189, v121, v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2], live_out: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_82:
// [Asm]   lw v121, 0(v8)  # live: [v11, v5, v10, v121, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] # control
// [Asm]   li v189, 1  # live: [v189, v11, v5, v10, v121, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   bne v121, v189, .fannkuch.572_84  # live: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v128], uses: [v128, v31, v2], upward_exposed: [v31, v2], params_defs: []
// [Asm] # live_in: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2], live_out: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_83:
// [Asm]   lw v128, 0(v31)  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v128, v2]
// [Asm] # control
// [Asm]   beq v128, v2, .fannkuch.572_85  # live: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v174, t1, v134, ft0, ft1, a1, fa1, v142, v130, fa2, ft6, v169, fa6, a4, a6, ft5, ft10, v170, v144, v137, ft7, ft4, ft9, v171, a5, fa4, a0, v133, ft2, a2, a3, v138, ft8, a7, t3, fa7, v176, t0, fa5, fa3, ft3, fa0, t4, t2, v180, v181, v140, v139, v132], uses: [v144, v174, v171, a0, v133, v134, a2, a1, v17, v31, v9, v138, v176, v142, v130, zero, v169, v23, v180, v181, v140, v170, v139, v137], upward_exposed: [v17, v31, zero, v9, v23], params_defs: []
// [Asm] # live_in: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2], live_out: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_86:
// [Asm]   lw v130, 0(v23)  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, v130, zero, v23, v8, v2]
// [Asm]   sw v130, 0(v17)  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   # save_ctx2  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   mv a0, zero  # live: [v11, v5, v10, v13, a0, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   mv a1, v31  # live: [v11, v5, v10, v13, a0, v7, v17, a1, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   mv a2, v23  # live: [v11, v5, v10, v13, a0, v7, a2, v17, a1, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   call move_perm1_forward.579  # live: [v11, v5, v10, v13, a0, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   mv v132, a0  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   # restore_ctx2  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   lw v133, 0(v31)  # live: [v11, v5, v10, v13, v133, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   lw v134, 0(v17)  # live: [v11, v5, v10, v13, v133, v7, v134, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   slliw v180, v133, 2  # live: [v11, v5, v10, v13, v7, v134, v17, s11, v31, v9, zero, v23, v8, v180, v2]
// [Asm]   add v181, v23, v180  # live: [v11, v5, v10, v13, v7, v134, v17, s11, v31, v9, zero, v23, v8, v181, v2]
// [Asm]   sw v134, 0(v181)  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   lw v137, 0(v31)  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v137, v2]
// [Asm]   slliw v138, v137, 2  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, v138, zero, v23, v8, v2]
// [Asm]   add v176, v9, v138  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, v138, v176, zero, v23, v8, v2]
// [Asm]   lw v139, 0(v176)  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, v138, zero, v23, v8, v139, v2]
// [Asm]   addi v140, v139, -1  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, v138, zero, v23, v8, v140, v2]
// [Asm]   add v174, v9, v138  # live: [v11, v174, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v140, v2]
// [Asm]   sw v140, 0(v174)  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   lw v142, 0(v31)  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, v142, zero, v23, v8, v2]
// [Asm]   slliw v170, v142, 2  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v170, v2]
// [Asm]   add v171, v9, v170  # live: [v11, v5, v10, v171, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   lw v144, 0(v171)  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v144, v2]
// [Asm] # control
// [Asm]   li v169, 1  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v169, v23, v8, v144, v2]
// [Asm]   bge v144, v169, .fannkuch.572_87  # live: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v146, v147], uses: [v146, v31, v147], upward_exposed: [v31], params_defs: []
// [Asm] # live_in: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2], live_out: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_88:
// [Asm]   lw v146, 0(v31)  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, v146, zero, v23, v8, v2]
// [Asm]   addi v147, v146, 1  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v147, v9, zero, v23, v8, v2]
// [Asm]   sw v147, 0(v31)  # live: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] # control
// [Asm]   j .fannkuch.572_82  # live: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v62, v66, v69, v71, v16, v67, v65, s11, v235, v64, v232, v63, v68, v70, v15], uses: [v11, v66, v62, v69, v5, v71, v16, v10, v67, v65, s11, v235, v64, v232, v63, v68, zero, v70, v15], upward_exposed: [v11, v5, v10, s11, zero], params_defs: []
// [Asm] # live_in: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2], live_out: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_28:
// [Asm]   lw v62, 0(v5)  # live: [v11, v62, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm]   lw v63, 0(v11)  # live: [v11, v62, v5, v10, v13, v7, s11, v31, v9, v63, zero, v23, v2]
// [Asm]   lw v64, 0(v10)  # live: [v11, v62, v5, v10, v13, v7, s11, v31, v9, v64, v63, zero, v23, v2]
// [Asm]   srai v65, v64, 1  # live: [v11, v62, v5, v10, v13, v7, v65, s11, v31, v9, v64, v63, zero, v23, v2]
// [Asm]   slli v66, v65, 1  # live: [v11, v62, v66, v5, v10, v13, v7, s11, v31, v9, v64, v63, zero, v23, v2]
// [Asm]   sub v67, v64, v66  # live: [v11, v62, v5, v10, v13, v67, v7, s11, v31, v9, v63, zero, v23, v2]
// [Asm]   slli v68, v67, 1  # live: [v11, v62, v5, v10, v13, v7, s11, v31, v9, v63, zero, v68, v23, v2]
// [Asm]   li v235, 1  # live: [v11, v62, v5, v10, v13, v7, s11, v31, v235, v9, v63, zero, v68, v23, v2]
// [Asm]   sub v69, v235, v68  # live: [v11, v62, v5, v69, v10, v13, v7, s11, v31, v9, v63, zero, v23, v2]
// [Asm]   mul v70, v63, v69  # live: [v11, v62, v5, v10, v13, v7, s11, v31, v9, zero, v23, v70, v2]
// [Asm]   add v71, v62, v70  # live: [v11, v5, v71, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm]   sw v71, 0(v5)  # live: [v11, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm]   addi v16, s11, -4  # live: [v11, v16, v5, v10, v13, v7, v31, v9, zero, v23, v2]
// [Asm]   andi s11, v16, -8  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm]   li v232, 1  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v232, zero, v23, v2]
// [Asm]   sw v232, 0(v16)  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v2]
// [Asm]   addi v15, s11, -4  # live: [v11, v16, v5, v10, v13, v7, v31, v9, zero, v23, v15, v2]
// [Asm]   andi s11, v15, -8  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm]   sw zero, 0(v15)  # live: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2], live_out: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_104:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v75, v228], uses: [v16, v75, v228], upward_exposed: [v16], params_defs: []
// [Asm] # live_in: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2], live_out: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_106:
// [Asm]   lw v75, 0(v16)  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v75, zero, v23, v15, v2]
// [Asm] # control
// [Asm]   li v228, 1  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v75, zero, v23, v228, v15, v2]
// [Asm]   bne v75, v228, .fannkuch.572_108  # live: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v82], uses: [v82, v31, v2], upward_exposed: [v31, v2], params_defs: []
// [Asm] # live_in: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2], live_out: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_107:
// [Asm]   lw v82, 0(v31)  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v82, zero, v23, v15, v2]
// [Asm] # control
// [Asm]   beq v82, v2, .fannkuch.572_109  # live: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v91, v220, ft0, ft1, a1, v86, fa1, v93, v98, fa2, v215, ft6, fa6, a4, a6, ft10, ft5, v210, ft7, ft4, v87, ft9, a5, a0, fa4, v208, ft2, v88, v92, a2, a3, v219, ft8, a7, t3, fa7, t0, v94, v209, fa5, v96, fa3, ft3, fa0, v84, t4, v213, t2], uses: [v87, v91, a0, v220, v208, v88, v92, a2, a1, v31, v9, v219, v93, v98, v94, v209, v215, v96, zero, v23, v84, v213, v15, v210], upward_exposed: [v15, v31, zero, v9, v23], params_defs: []
// [Asm] # live_in: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2], live_out: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_110:
// [Asm]   lw v84, 0(v23)  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v84, v15, v2]
// [Asm]   sw v84, 0(v15)  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm]   # save_ctx2  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm]   mv a0, zero  # live: [v11, v16, v5, v10, v13, a0, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm]   mv a1, v31  # live: [v11, v16, v5, v10, v13, a0, v7, a1, s11, v31, v9, zero, v23, v15, v2]
// [Asm]   mv a2, v23  # live: [v11, v16, v5, v10, v13, a0, v7, a2, a1, s11, v31, v9, zero, v23, v15, v2]
// [Asm]   call move_perm1_forward.581  # live: [v11, v16, v5, v10, v13, a0, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm]   mv v86, a0  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm]   # restore_ctx2  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm]   lw v87, 0(v31)  # live: [v11, v16, v5, v87, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm]   lw v88, 0(v15)  # live: [v11, v16, v5, v87, v10, v13, v7, v88, s11, v31, v9, zero, v23, v15, v2]
// [Asm]   slliw v219, v87, 2  # live: [v11, v16, v5, v10, v13, v7, v88, s11, v31, v9, v219, zero, v23, v15, v2]
// [Asm]   add v220, v23, v219  # live: [v11, v16, v5, v10, v13, v220, v7, v88, s11, v31, v9, zero, v23, v15, v2]
// [Asm]   sw v88, 0(v220)  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm]   lw v91, 0(v31)  # live: [v11, v16, v5, v91, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm]   slliw v92, v91, 2  # live: [v11, v16, v5, v10, v13, v7, v92, s11, v31, v9, zero, v23, v15, v2]
// [Asm]   add v215, v9, v92  # live: [v11, v16, v5, v10, v13, v7, v92, s11, v31, v9, v215, zero, v23, v15, v2]
// [Asm]   lw v93, 0(v215)  # live: [v11, v16, v5, v10, v13, v7, v92, s11, v31, v9, v93, zero, v23, v15, v2]
// [Asm]   addi v94, v93, -1  # live: [v11, v16, v5, v10, v13, v7, v92, s11, v31, v9, v94, zero, v23, v15, v2]
// [Asm]   add v213, v9, v92  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v94, zero, v23, v213, v15, v2]
// [Asm]   sw v94, 0(v213)  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm]   lw v96, 0(v31)  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v96, zero, v23, v15, v2]
// [Asm]   slliw v209, v96, 2  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v209, zero, v23, v15, v2]
// [Asm]   add v210, v9, v209  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v210, v2]
// [Asm]   lw v98, 0(v210)  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v98, zero, v23, v15, v2]
// [Asm] # control
// [Asm]   li v208, 1  # live: [v11, v16, v5, v10, v13, v208, v7, s11, v31, v9, v98, zero, v23, v15, v2]
// [Asm]   bge v98, v208, .fannkuch.572_111  # live: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v100, v101], uses: [v31, v100, v101], upward_exposed: [v31], params_defs: []
// [Asm] # live_in: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2], live_out: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_112:
// [Asm]   lw v100, 0(v31)  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v100, v2]
// [Asm]   addi v101, v100, 1  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, v101, zero, v23, v15, v2]
// [Asm]   sw v101, 0(v31)  # live: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] # control
// [Asm]   j .fannkuch.572_106  # live: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v77], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2], live_out: [v11, v5, v10, zero, v13, v77, v23, v7, s11, v31, v9, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_108:
// [Asm] # control
// [Asm]   mv v77, zero  # live: [v11, v5, v10, zero, v13, v77, v23, v7, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v78], uses: [v77], upward_exposed: [v77], params_defs: [v77]
// [Asm] # live_in: [v11, v5, v10, zero, v13, v77, v23, v7, s11, v31, v9, v2], live_out: [v11, v5, v10, zero, v13, v78, v23, v7, s11, v31, v9, v2]
// [Asm] # block parameters: [v77]
// [Asm] .fannkuch.572_115:
// [Asm] # control
// [Asm]   mv v78, v77  # live: [v11, v5, v10, zero, v13, v78, v23, v7, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v80, v79], uses: [v80, v10, v31, v79], upward_exposed: [v10, v31], params_defs: [v78]
// [Asm] # live_in: [v11, v5, v10, zero, v13, v78, v23, v7, s11, v31, v9, v2], live_out: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] # block parameters: [v78]
// [Asm] .fannkuch.572_34:
// [Asm]   lw v79, 0(v10)  # live: [v11, v5, v10, zero, v13, v79, v23, v7, s11, v31, v9, v2]
// [Asm]   addi v80, v79, 1  # live: [v11, v5, v10, zero, v13, v23, v7, v80, s11, v31, v9, v2]
// [Asm]   sw v80, 0(v10)  # live: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] # control
// [Asm]   mv v31, v31  # live: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm]   j .fannkuch.572_20  # live: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v16, v31, zero], upward_exposed: [v16, v31, zero], params_defs: []
// [Asm] # live_in: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2], live_out: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_109:
// [Asm]   sw zero, 0(v16)  # live: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm]   sw zero, 0(v31)  # live: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] # control
// [Asm]   j .fannkuch.572_106  # live: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v16, zero], upward_exposed: [v16, zero], params_defs: []
// [Asm] # live_in: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2], live_out: [v11, v16, v5, v10, v13, v7, s11, v31, v9, zero, v23, v15, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_111:
// [Asm]   sw zero, 0(v16)  # live: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] # control
// [Asm]   j .fannkuch.572_106  # live: [v11, v16, v5, v10, v13, zero, v23, v7, s11, v15, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v123], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2], live_out: [v11, v5, v10, zero, v13, v123, v23, v7, s11, v31, v9, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_84:
// [Asm] # control
// [Asm]   mv v123, zero  # live: [v11, v5, v10, zero, v13, v123, v23, v7, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v124], uses: [v123], upward_exposed: [v123], params_defs: [v123]
// [Asm] # live_in: [v11, v5, v10, zero, v13, v123, v23, v7, s11, v31, v9, v2], live_out: [v11, v5, v124, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] # block parameters: [v123]
// [Asm] .fannkuch.572_91:
// [Asm] # control
// [Asm]   mv v124, v123  # live: [v11, v5, v124, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v125, v126], uses: [v10, v31, v125, v126], upward_exposed: [v10, v31], params_defs: [v124]
// [Asm] # live_in: [v11, v5, v124, v10, zero, v13, v23, v7, s11, v31, v9, v2], live_out: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] # block parameters: [v124]
// [Asm] .fannkuch.572_33:
// [Asm]   lw v125, 0(v10)  # live: [v11, v5, v10, zero, v13, v125, v23, v7, s11, v31, v9, v2]
// [Asm]   addi v126, v125, 1  # live: [v11, v5, v10, zero, v13, v126, v23, v7, s11, v31, v9, v2]
// [Asm]   sw v126, 0(v10)  # live: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] # control
// [Asm]   mv v31, v31  # live: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm]   j .fannkuch.572_20  # live: [v11, v5, v10, zero, v13, v23, v7, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v31, zero, v8], upward_exposed: [v31, zero, v8], params_defs: []
// [Asm] # live_in: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2], live_out: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_85:
// [Asm]   sw zero, 0(v8)  # live: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm]   sw zero, 0(v31)  # live: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] # control
// [Asm]   j .fannkuch.572_82  # live: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v8], upward_exposed: [zero, v8], params_defs: []
// [Asm] # live_in: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2], live_out: [v11, v5, v10, v13, v7, v17, s11, v31, v9, zero, v23, v8, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch.572_87:
// [Asm]   sw zero, 0(v8)  # live: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] # control
// [Asm]   j .fannkuch.572_82  # live: [v11, v5, v10, v13, zero, v23, v7, v8, v17, s11, v31, v9, v2]
// [Asm] 
// [Asm] # leaf false
// [Asm] move_perm1_forward.581:
// [Asm] # block info: defs: [v3, v4, v5, v6, v2], uses: [v2, v5, a0, a2, a1, v6, v3], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v3, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.581_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm]   lw v5, 0(v3)  # live: [v2, v4, v5, zero, v3]
// [Asm]   addi v6, v5, -1  # live: [v2, v4, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v6, v2, .move_perm1_forward.581_2  # live: [v2, v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v14, v13, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, v19, a6, ft10, ft5, ft7, ft4, v10, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v3, v16, v18, v10, a0, zero, v8, v19, v4, a2, a1, v17, v2], upward_exposed: [v3, v4, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v4, zero, v3], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.581_1:
// [Asm]   addi v8, v2, 1  # live: [v8, v2, v4, zero, v3]
// [Asm]   slliw v18, v8, 2  # live: [v8, v2, v4, v18, zero, v3]
// [Asm]   add v19, v4, v18  # live: [v8, v2, v19, v4, zero, v3]
// [Asm]   lw v10, 0(v19)  # live: [v8, v2, v4, v10, zero, v3]
// [Asm]   slliw v16, v2, 2  # live: [v8, v4, v16, v10, zero, v3]
// [Asm]   add v17, v4, v16  # live: [v8, v4, v17, v10, zero, v3]
// [Asm]   sw v10, 0(v17)  # live: [v8, v4, zero, v3]
// [Asm]   # save_ctx2  # live: [v8, v4, zero, v3]
// [Asm]   mv a0, v8  # live: [v4, zero, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, zero, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, zero, a0]
// [Asm]   call move_perm1_forward.581  # live: [zero, a0]
// [Asm]   mv v13, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .move_perm1_forward.581_3:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.581_2:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm]   j .move_perm1_forward.581_3  # live: [v14]
// [Asm] 
// [Asm] # leaf false
// [Asm] move_perm1_forward.579:
// [Asm] # block info: defs: [v3, v4, v5, v6, v2], uses: [v2, v5, a0, a2, a1, v6, v3], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v3, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.579_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm]   lw v5, 0(v3)  # live: [v2, v4, v5, zero, v3]
// [Asm]   addi v6, v5, -1  # live: [v2, v4, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v6, v2, .move_perm1_forward.579_2  # live: [v2, v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v14, v13, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, v19, a6, ft10, ft5, ft7, ft4, v10, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v3, v16, v18, v10, a0, zero, v8, v19, v4, a2, a1, v17, v2], upward_exposed: [v3, v4, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v4, zero, v3], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.579_1:
// [Asm]   addi v8, v2, 1  # live: [v8, v2, v4, zero, v3]
// [Asm]   slliw v18, v8, 2  # live: [v8, v2, v4, v18, zero, v3]
// [Asm]   add v19, v4, v18  # live: [v8, v2, v19, v4, zero, v3]
// [Asm]   lw v10, 0(v19)  # live: [v8, v2, v4, v10, zero, v3]
// [Asm]   slliw v16, v2, 2  # live: [v8, v4, v16, v10, zero, v3]
// [Asm]   add v17, v4, v16  # live: [v8, v4, v17, v10, zero, v3]
// [Asm]   sw v10, 0(v17)  # live: [v8, v4, zero, v3]
// [Asm]   # save_ctx2  # live: [v8, v4, zero, v3]
// [Asm]   mv a0, v8  # live: [v4, zero, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, zero, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, zero, a0]
// [Asm]   call move_perm1_forward.579  # live: [zero, a0]
// [Asm]   mv v13, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .move_perm1_forward.579_3:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.579_2:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm]   j .move_perm1_forward.579_3  # live: [v14]
// [Asm] 
// [Asm] # leaf false
// [Asm] main.582:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v2, v11, a0, v4, v6, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.582_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v11, 9  # live: [v11]
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   call fannkuch.572  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm]   lw v3, 0(v2)  # live: [v2, v3]
// [Asm]   lw v4, 4(v2)  # live: [v4, v3]
// [Asm]   # save_ctx2  # live: [v4, v3]
// [Asm]   mv a0, v4  # live: [a0, v3]
// [Asm]   call minimbt_print_int  # live: [a0, v3]
// [Asm]   mv v5, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm]   # save_ctx2  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] flip_loop.577:
// [Asm] # block info: defs: [v3, v4, v5, v6, v2], uses: [a2, a1, a3, a0, v2], upward_exposed: [a2, a1, a3, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, zero], live_out: [v4, v6, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .flip_loop.577_0:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v8, v7], uses: [v7, v8, v6, v3], upward_exposed: [v6, v3], params_defs: [v6]
// [Asm] # live_in: [v4, v6, v5, zero, v3], live_out: [v4, v6, v5, zero, v3]
// [Asm] # block parameters: [v6]
// [Asm] .flip_loop.577_2:
// [Asm]   lw v7, 0(v3)  # live: [v5, zero, v7, v4, v6, v3]
// [Asm]   srai v8, v7, 1  # live: [v5, zero, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   blt v8, v6, .flip_loop.577_4  # live: [v4, v6, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v11, v14, v21, v26, v37, v32, v17, v12, v24, v31, v33, v20, v27, v19, v6, v15], uses: [v11, v5, v14, v21, v26, v37, v32, v17, v12, v24, v31, v33, v20, v27, v19, v4, v6, v15, v3], upward_exposed: [v4, v6, v5, v3], params_defs: []
// [Asm] # live_in: [v4, v6, v5, zero, v3], live_out: [v4, v6, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .flip_loop.577_3:
// [Asm]   slliw v11, v6, 2  # live: [v11, v5, zero, v4, v6, v3]
// [Asm]   add v37, v5, v11  # live: [v11, v5, zero, v4, v37, v6, v3]
// [Asm]   lw v12, 0(v37)  # live: [v11, v5, zero, v4, v6, v12, v3]
// [Asm]   sw v12, 0(v4)  # live: [v11, v5, zero, v4, v6, v3]
// [Asm]   lw v14, 0(v3)  # live: [v11, v5, v14, zero, v4, v6, v3]
// [Asm]   sub v15, v14, v6  # live: [v11, v5, zero, v4, v6, v15, v3]
// [Asm]   slliw v32, v15, 2  # live: [v11, v5, zero, v4, v32, v6, v3]
// [Asm]   add v33, v5, v32  # live: [v11, v5, zero, v4, v6, v33, v3]
// [Asm]   lw v17, 0(v33)  # live: [v11, v5, zero, v4, v6, v17, v3]
// [Asm]   add v31, v5, v11  # live: [v5, zero, v4, v6, v17, v31, v3]
// [Asm]   sw v17, 0(v31)  # live: [v5, zero, v4, v6, v3]
// [Asm]   lw v19, 0(v3)  # live: [v5, zero, v19, v4, v6, v3]
// [Asm]   sub v20, v19, v6  # live: [v5, zero, v20, v4, v6, v3]
// [Asm]   lw v21, 0(v4)  # live: [v5, v21, zero, v20, v4, v6, v3]
// [Asm]   slliw v26, v20, 2  # live: [v5, v21, zero, v26, v4, v6, v3]
// [Asm]   add v27, v5, v26  # live: [v5, v21, zero, v27, v4, v6, v3]
// [Asm]   sw v21, 0(v27)  # live: [v4, v5, v6, zero, v3]
// [Asm]   addi v24, v6, 1  # live: [v4, v5, v24, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v24  # live: [v4, v6, v5, zero, v3]
// [Asm]   j .flip_loop.577_2  # live: [v4, v6, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .flip_loop.577_4:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .flip_loop.577_5:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.582  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] init_count.575:
// [Asm] # block info: defs: [v3, v4, v22, v2], uses: [v4, a1, a0, v22, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v3, zero, v2]
// [Asm] # block parameters: []
// [Asm] .init_count.575_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm]   lw v4, 0(v2)  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   li v22, 1  # live: [v2, v4, zero, v22, v3]
// [Asm]   beq v4, v22, .init_count.575_1  # live: [v2, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v19, a6, ft5, ft10, v6, ft7, v11, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v2, v11, v18, v10, a0, zero, v7, v19, v6, a1, v3], upward_exposed: [v3, zero, v2], params_defs: []
// [Asm] # live_in: [v2, zero, v3], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .init_count.575_2:
// [Asm]   lw v6, 0(v2)  # live: [v2, v6, zero, v3]
// [Asm]   addi v7, v6, -1  # live: [v2, v7, v6, zero, v3]
// [Asm]   slliw v18, v7, 2  # live: [v2, v6, v18, zero, v3]
// [Asm]   add v19, v3, v18  # live: [v2, v19, v6, zero, v3]
// [Asm]   sw v6, 0(v19)  # live: [v2, zero, v3]
// [Asm]   lw v10, 0(v2)  # live: [v2, v10, zero, v3]
// [Asm]   addi v11, v10, -1  # live: [v2, v11, zero, v3]
// [Asm]   sw v11, 0(v2)  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [zero, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, zero, a0]
// [Asm]   call init_count.575  # live: [zero, a0]
// [Asm]   mv v13, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .init_count.575_3:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .init_count.575_1:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm]   j .init_count.575_3  # live: [v14]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("fannkuch", Tuple([Int, Int])), args: [("n", Int)], body: LetRec({name: ("gen_perm1", Array(Int)), args: [("len", Int)], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))}, Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("gen_perm1", Array(Int)), args: [("len", Int)], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))}, Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr")))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))
// [Knf] build_knf: App(Var("init_arr"), [Int(0)])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))))
// [Knf] build_knf: App(Var("gen_perm1"), [Var("n")])
// [Knf] build_knf: Var("gen_perm1")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))
// [Knf] build_knf: Array(Int(1), Var("n"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))
// [Knf] build_knf: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i")))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm1"), Var("i"))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("copy_perm")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))
// [Knf] build_knf: App(Var("copy_perm"), [Int(0)])
// [Knf] build_knf: Var("copy_perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)
// [Knf] build_knf: If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit)
// [Knf] build_knf: If(Eq(Get(Var("r"), Int(0)), Int(1)), Unit, Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), [])))
// [Knf] build_knf: Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))
// [Knf] build_knf: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("init_count"), [])
// [Knf] build_knf: Var("init_count")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))
// [Knf] build_knf: App(Var("init_count"), [])
// [Knf] build_knf: Var("init_count")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))
// [Knf] build_knf: Put(Var("flips"), Int(0), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))
// [Knf] build_knf: Array(Int(1), Get(Var("perm"), Int(0)))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("perm"), Int(0))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))
// [Knf] build_knf: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)
// [Knf] build_knf: If(Eq(Get(Var("k"), Int(0)), Int(0)), Unit, Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Put(Var("t"), Int(0), Get(Var("perm"), Var("i")))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm"), Var("i"))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0)))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("t"), Int(0))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("flip_loop")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))))
// [Knf] build_knf: App(Var("flip_loop"), [Int(0)])
// [Knf] build_knf: Var("flip_loop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))
// [Knf] build_knf: Put(Var("k"), Int(0), Get(Var("perm"), Int(0)))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm"), Int(0))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))
// [Knf] build_knf: Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("do_flip"), [Var("k")])
// [Knf] build_knf: Var("do_flip")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))
// [Knf] build_knf: App(Var("do_flip"), [Var("k")])
// [Knf] build_knf: Var("do_flip")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))
// [Knf] build_knf: If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit)
// [Knf] build_knf: Get(Var("max_flips"), Int(0))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0)))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))
// [Knf] build_knf: Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int)))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("check_sum"), Int(0))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int))
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))
// [Knf] build_knf: Array(Int(1), Bool(true))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))
// [Knf] build_knf: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)
// [Knf] build_knf: Get(Var("go"), Int(0))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), []))
// [Knf] build_knf: If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))))))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit))
// [Knf] build_knf: Put(Var("go"), Int(0), Bool(false))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)
// [Knf] build_knf: Put(Var("r"), Int(0), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))
// [Knf] build_knf: Put(Var("t"), Int(0), Get(Var("perm1"), Int(0)))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm1"), Int(0))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit))
// [Knf] build_knf: Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)
// [Knf] build_knf: App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("move_perm1_forward")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))
// [Knf] build_knf: App(Var("move_perm1_forward"), [Int(0)])
// [Knf] build_knf: Var("move_perm1_forward")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))
// [Knf] build_knf: Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0)))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("t"), Int(0))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))
// [Knf] build_knf: Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("count"), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)
// [Knf] build_knf: If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("count"), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Put(Var("go"), Int(0), Bool(false))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("go_loop"), [])
// [Knf] build_knf: Var("go_loop")
// [Knf] build_knf: Unit
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))
// [Knf] build_knf: App(Var("go_loop"), [])
// [Knf] build_knf: Var("go_loop")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))
// [Knf] build_knf: Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("compute"), [Var("r")])
// [Knf] build_knf: Var("compute")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))
// [Knf] build_knf: App(Var("compute"), [Var("r")])
// [Knf] build_knf: Var("compute")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])
// [Knf] build_knf: Get(Var("max_flips"), Int(0))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("check_sum"), Int(0))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))}, App(Var("main"), []))
// [Knf] build_knf: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))
// [Knf] build_knf: App(Var("fannkuch"), [Int(9)])
// [Knf] build_knf: Var("fannkuch")
// [Knf] build_knf: Int(9)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")]))
// [Knf] build_knf: App(Var("print_int"), [Var("check_sum")])
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: App(Var("print_int"), [Var("max_flips")])
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%4)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Mem(fref=f0, mref=m0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[Int32(val=0)]) already set
// [Core] b1 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%13)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f2, fpref=$f.0)]) already set
// [Core] b3 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b4 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0)]) already set
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f3, fpref=$f.0)]) already set
// [Core] b1 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b7 control: Jump(target=b2, args=[]) already set
// [Core] b8 control: Jump(target=b2, args=[]) already set
// [Core] b6 control: Panic -> Branch(cond=Insn(iref=%19), t=b7, t_args=[], f=b8, f_args=[])
// [Core] b5 control: Jump(target=b2, args=[]) already set
// [Core] b9 control: Panic -> Jump(target=b10, args=[BlockParam(bref=b9, bpref=$b.0)])
// [Core] b3 control: Panic -> Branch(cond=Insn(iref=%3), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b10 control: Panic -> Jump(target=b11, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Core] b4 control: Panic -> Jump(target=b11, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b11 control: Panic -> Return(args=[BlockParam(bref=b11, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[]) already set
// [Core] b1 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b7 control: Jump(target=b2, args=[]) already set
// [Core] b8 control: Jump(target=b2, args=[]) already set
// [Core] b6 control: Panic -> Branch(cond=Insn(iref=%19), t=b7, t_args=[], f=b8, f_args=[])
// [Core] b5 control: Jump(target=b2, args=[]) already set
// [Core] b9 control: Panic -> Jump(target=b10, args=[BlockParam(bref=b9, bpref=$b.0)])
// [Core] b3 control: Panic -> Branch(cond=Insn(iref=%3), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b10 control: Panic -> Jump(target=b11, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Core] b4 control: Panic -> Jump(target=b11, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b11 control: Panic -> Return(args=[BlockParam(bref=b11, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[]) already set
// [Core] b9 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0)]) already set
// [Core] b10 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0)]) already set
// [Core] b8 control: Panic -> Branch(cond=Insn(iref=%14), t=b9, t_args=[], f=b10, f_args=[])
// [Core] b7 control: Jump(target=b6, args=[Insn(iref=%6)]) already set
// [Core] b11 control: Panic -> Jump(target=b12, args=[BlockParam(bref=b11, bpref=$b.0)])
// [Core] b6 control: Panic -> Branch(cond=Insn(iref=%3), t=b7, t_args=[], f=b8, f_args=[])
// [Core] b12 control: Panic -> Return(args=[BlockParam(bref=b12, bpref=$b.0)])
// [Core] b3 control: Jump(target=b5, args=[Int32(val=0)]) already set
// [Core] b4 control: Panic -> Jump(target=b13, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b13 control: Panic -> Return(args=[BlockParam(bref=b13, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f8, fpref=$f.0)]) already set
// [Core] b0 control: Panic -> Return(args=[Mem(fref=f9, mref=m7)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%4)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl fannkuch.572
// [Main]   .type fannkuch.572, @function
// [Main] # leaf false
// [Main] fannkuch.572:
// [Main] .fannkuch.572_0:
// [Main]   addi sp, sp, -96
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   sd s8, 72(sp)
// [Main]   sd s9, 80(sp)
// [Main]   sd s10, 88(sp)
// [Main]   mv s0, a0
// [Main] 
// [Main] .fannkuch.572_12:
// [Main]   slliw a0, s0, 2
// [Main]   sub a0, s11, a0
// [Main]   andi s11, a0, -8
// [Main]   mv a1, s0
// [Main]   mv a2, zero
// [Main] 
// [Main] .fannkuch.572_14:
// [Main]   addi a1, s0, -1
// [Main]   blt a1, a2, .fannkuch.572_16
// [Main] 
// [Main] .fannkuch.572_15:
// [Main]   slliw a1, a2, 2
// [Main]   add a1, a0, a1
// [Main]   sw a2, 0(a1)
// [Main]   addi a1, a2, 1
// [Main]   mv a2, a1
// [Main]   j .fannkuch.572_14
// [Main] 
// [Main] .fannkuch.572_16:
// [Main] 
// [Main] .fannkuch.572_17:
// [Main]   mv s9, a0
// [Main] 
// [Main] .fannkuch.572_1:
// [Main]   slliw a0, s0, 2
// [Main]   sub s6, s11, a0
// [Main]   andi s11, s6, -8
// [Main]   mv a1, s0
// [Main]   slliw a0, s0, 2
// [Main]   sub s8, s11, a0
// [Main]   andi s11, s8, -8
// [Main]   mv a1, s0
// [Main]   addi s1, s11, -4
// [Main]   andi s11, s1, -8
// [Main]   sw zero, 0(s1)
// [Main]   addi s5, s11, -4
// [Main]   andi s11, s5, -8
// [Main]   sw zero, 0(s5)
// [Main]   addi s3, s11, -4
// [Main]   andi s11, s3, -8
// [Main]   sw zero, 0(s3)
// [Main]   addi s4, s11, -4
// [Main]   andi s11, s4, -8
// [Main]   sw zero, 0(s4)
// [Main]   addi a0, s11, -4
// [Main]   andi s11, a0, -8
// [Main]   sw s0, 0(a0)
// [Main] 
// [Main] .fannkuch.572_18:
// [Main]   mv s7, a0
// [Main] 
// [Main] .fannkuch.572_20:
// [Main]   lw a0, 0(s7)
// [Main]   li a1, 1
// [Main]   blt a0, a1, .fannkuch.572_22
// [Main] 
// [Main] .fannkuch.572_21:
// [Main]   mv a1, zero
// [Main] 
// [Main] .fannkuch.572_24:
// [Main]   addi a0, s0, -1
// [Main]   blt a0, a1, .fannkuch.572_26
// [Main] 
// [Main] .fannkuch.572_25:
// [Main]   slliw a0, a1, 2
// [Main]   add a2, s9, a0
// [Main]   lw a2, 0(a2)
// [Main]   add a0, s6, a0
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a1, 1
// [Main]   mv a1, a0
// [Main]   j .fannkuch.572_24
// [Main] 
// [Main] .fannkuch.572_22:
// [Main]   mv a0, zero
// [Main] 
// [Main] .fannkuch.572_31:
// [Main] 
// [Main] .fannkuch.572_2:
// [Main]   lw a0, 0(s5)
// [Main]   lw a1, 0(s3)
// [Main]   addi a2, s11, -8
// [Main]   andi s11, a2, -8
// [Main]   sw a0, 0(a2)
// [Main]   sw a1, 4(a2)
// [Main]   mv a0, a2
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   ld s8, 72(sp)
// [Main]   ld s9, 80(sp)
// [Main]   ld s10, 88(sp)
// [Main]   addi sp, sp, 96
// [Main]   ret
// [Main] 
// [Main] .fannkuch.572_26:
// [Main]   mv a0, s7
// [Main]   mv a1, s8
// [Main]   call init_count.575
// [Main]   sw zero, 0(s1)
// [Main]   lw a0, 0(s6)
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw a0, 0(a1)
// [Main] 
// [Main] .fannkuch.572_71:
// [Main]   mv s2, a1
// [Main] 
// [Main] .fannkuch.572_73:
// [Main]   lw a0, 0(s2)
// [Main]   beq a0, zero, .fannkuch.572_74
// [Main] 
// [Main] .fannkuch.572_75:
// [Main]   addi a2, s11, -4
// [Main]   andi s11, a2, -8
// [Main]   sw zero, 0(a2)
// [Main]   mv a0, zero
// [Main]   mv a1, s2
// [Main]   mv a3, s6
// [Main]   call flip_loop.577
// [Main] 
// [Main] .fannkuch.572_77:
// [Main]   lw a0, 0(s6)
// [Main]   sw a0, 0(s2)
// [Main]   lw a0, 0(s1)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s1)
// [Main]   j .fannkuch.572_73
// [Main] 
// [Main] .fannkuch.572_74:
// [Main]   mv a0, zero
// [Main] 
// [Main] .fannkuch.572_76:
// [Main] 
// [Main] .fannkuch.572_32:
// [Main]   lw a0, 0(s5)
// [Main]   lw a1, 0(s1)
// [Main]   blt a1, a0, .fannkuch.572_28
// [Main] 
// [Main] .fannkuch.572_27:
// [Main]   lw a0, 0(s1)
// [Main]   sw a0, 0(s5)
// [Main]   lw a0, 0(s3)
// [Main]   lw a1, 0(s1)
// [Main]   lw a2, 0(s4)
// [Main]   srai a3, a2, 1
// [Main]   slli a3, a3, 1
// [Main]   sub a2, a2, a3
// [Main]   slli a2, a2, 1
// [Main]   li a3, 1
// [Main]   sub a2, a3, a2
// [Main]   mul a1, a1, a2
// [Main]   add a0, a0, a1
// [Main]   sw a0, 0(s3)
// [Main]   addi s10, s11, -4
// [Main]   andi s11, s10, -8
// [Main]   li a0, 1
// [Main]   sw a0, 0(s10)
// [Main]   addi s2, s11, -4
// [Main]   andi s11, s2, -8
// [Main]   sw zero, 0(s2)
// [Main] 
// [Main] .fannkuch.572_80:
// [Main] 
// [Main] .fannkuch.572_82:
// [Main]   lw a0, 0(s10)
// [Main]   li a1, 1
// [Main]   bne a0, a1, .fannkuch.572_84
// [Main] 
// [Main] .fannkuch.572_83:
// [Main]   lw a0, 0(s7)
// [Main]   beq a0, s0, .fannkuch.572_85
// [Main] 
// [Main] .fannkuch.572_86:
// [Main]   lw a0, 0(s9)
// [Main]   sw a0, 0(s2)
// [Main]   mv a0, zero
// [Main]   mv a1, s7
// [Main]   mv a2, s9
// [Main]   call move_perm1_forward.579
// [Main]   lw a0, 0(s7)
// [Main]   lw a1, 0(s2)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s9, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s7)
// [Main]   slliw a0, a0, 2
// [Main]   add a1, s8, a0
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   add a0, s8, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s7)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s8, a0
// [Main]   lw a0, 0(a0)
// [Main]   li a1, 1
// [Main]   bge a0, a1, .fannkuch.572_87
// [Main] 
// [Main] .fannkuch.572_88:
// [Main]   lw a0, 0(s7)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s7)
// [Main]   j .fannkuch.572_82
// [Main] 
// [Main] .fannkuch.572_28:
// [Main]   lw a0, 0(s3)
// [Main]   lw a1, 0(s1)
// [Main]   lw a2, 0(s4)
// [Main]   srai a3, a2, 1
// [Main]   slli a3, a3, 1
// [Main]   sub a2, a2, a3
// [Main]   slli a2, a2, 1
// [Main]   li a3, 1
// [Main]   sub a2, a3, a2
// [Main]   mul a1, a1, a2
// [Main]   add a0, a0, a1
// [Main]   sw a0, 0(s3)
// [Main]   addi s2, s11, -4
// [Main]   andi s11, s2, -8
// [Main]   li a0, 1
// [Main]   sw a0, 0(s2)
// [Main]   addi s10, s11, -4
// [Main]   andi s11, s10, -8
// [Main]   sw zero, 0(s10)
// [Main] 
// [Main] .fannkuch.572_104:
// [Main] 
// [Main] .fannkuch.572_106:
// [Main]   lw a0, 0(s2)
// [Main]   li a1, 1
// [Main]   bne a0, a1, .fannkuch.572_108
// [Main] 
// [Main] .fannkuch.572_107:
// [Main]   lw a0, 0(s7)
// [Main]   beq a0, s0, .fannkuch.572_109
// [Main] 
// [Main] .fannkuch.572_110:
// [Main]   lw a0, 0(s9)
// [Main]   sw a0, 0(s10)
// [Main]   mv a0, zero
// [Main]   mv a1, s7
// [Main]   mv a2, s9
// [Main]   call move_perm1_forward.581
// [Main]   lw a0, 0(s7)
// [Main]   lw a1, 0(s10)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s9, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s7)
// [Main]   slliw a0, a0, 2
// [Main]   add a1, s8, a0
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   add a0, s8, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s7)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s8, a0
// [Main]   lw a0, 0(a0)
// [Main]   li a1, 1
// [Main]   bge a0, a1, .fannkuch.572_111
// [Main] 
// [Main] .fannkuch.572_112:
// [Main]   lw a0, 0(s7)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s7)
// [Main]   j .fannkuch.572_106
// [Main] 
// [Main] .fannkuch.572_108:
// [Main]   mv a0, zero
// [Main] 
// [Main] .fannkuch.572_115:
// [Main] 
// [Main] .fannkuch.572_34:
// [Main]   lw a0, 0(s4)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s4)
// [Main]   j .fannkuch.572_20
// [Main] 
// [Main] .fannkuch.572_109:
// [Main]   sw zero, 0(s2)
// [Main]   sw zero, 0(s7)
// [Main]   j .fannkuch.572_106
// [Main] 
// [Main] .fannkuch.572_111:
// [Main]   sw zero, 0(s2)
// [Main]   j .fannkuch.572_106
// [Main] 
// [Main] .fannkuch.572_84:
// [Main]   mv a0, zero
// [Main] 
// [Main] .fannkuch.572_91:
// [Main] 
// [Main] .fannkuch.572_33:
// [Main]   lw a0, 0(s4)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s4)
// [Main]   j .fannkuch.572_20
// [Main] 
// [Main] .fannkuch.572_85:
// [Main]   sw zero, 0(s10)
// [Main]   sw zero, 0(s7)
// [Main]   j .fannkuch.572_82
// [Main] 
// [Main] .fannkuch.572_87:
// [Main]   sw zero, 0(s10)
// [Main]   j .fannkuch.572_82
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl move_perm1_forward.581
// [Main]   .type move_perm1_forward.581, @function
// [Main] # leaf false
// [Main] move_perm1_forward.581:
// [Main] .move_perm1_forward.581_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a3, 0(a1)
// [Main]   addi a3, a3, -1
// [Main]   blt a3, a0, .move_perm1_forward.581_2
// [Main] 
// [Main] .move_perm1_forward.581_1:
// [Main]   addi a3, a0, 1
// [Main]   slliw a4, a3, 2
// [Main]   add a4, a2, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a2, a0
// [Main]   sw a4, 0(a0)
// [Main]   mv a0, a3
// [Main]   call move_perm1_forward.581
// [Main]   mv a0, zero
// [Main] 
// [Main] .move_perm1_forward.581_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .move_perm1_forward.581_2:
// [Main]   mv a0, zero
// [Main]   j .move_perm1_forward.581_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl move_perm1_forward.579
// [Main]   .type move_perm1_forward.579, @function
// [Main] # leaf false
// [Main] move_perm1_forward.579:
// [Main] .move_perm1_forward.579_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a3, 0(a1)
// [Main]   addi a3, a3, -1
// [Main]   blt a3, a0, .move_perm1_forward.579_2
// [Main] 
// [Main] .move_perm1_forward.579_1:
// [Main]   addi a3, a0, 1
// [Main]   slliw a4, a3, 2
// [Main]   add a4, a2, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a2, a0
// [Main]   sw a4, 0(a0)
// [Main]   mv a0, a3
// [Main]   call move_perm1_forward.579
// [Main]   mv a0, zero
// [Main] 
// [Main] .move_perm1_forward.579_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .move_perm1_forward.579_2:
// [Main]   mv a0, zero
// [Main]   j .move_perm1_forward.579_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.582
// [Main]   .type main.582, @function
// [Main] # leaf false
// [Main] main.582:
// [Main] .main.582_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   li a0, 9
// [Main]   call fannkuch.572
// [Main]   lw s0, 0(a0)
// [Main]   lw a0, 4(a0)
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl flip_loop.577
// [Main]   .type flip_loop.577, @function
// [Main] # leaf true
// [Main] flip_loop.577:
// [Main] .flip_loop.577_0:
// [Main]   mv a4, a1
// [Main]   mv a1, a3
// [Main]   mv a3, a0
// [Main] 
// [Main] .flip_loop.577_2:
// [Main]   lw a0, 0(a4)
// [Main]   srai a0, a0, 1
// [Main]   blt a0, a3, .flip_loop.577_4
// [Main] 
// [Main] .flip_loop.577_3:
// [Main]   slliw a0, a3, 2
// [Main]   add a5, a1, a0
// [Main]   lw a5, 0(a5)
// [Main]   sw a5, 0(a2)
// [Main]   lw a5, 0(a4)
// [Main]   sub a5, a5, a3
// [Main]   slliw a5, a5, 2
// [Main]   add a5, a1, a5
// [Main]   lw a5, 0(a5)
// [Main]   add a0, a1, a0
// [Main]   sw a5, 0(a0)
// [Main]   lw a0, 0(a4)
// [Main]   sub a0, a0, a3
// [Main]   lw a5, 0(a2)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a1, a0
// [Main]   sw a5, 0(a0)
// [Main]   addi a0, a3, 1
// [Main]   mv a3, a0
// [Main]   j .flip_loop.577_2
// [Main] 
// [Main] .flip_loop.577_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .flip_loop.577_5:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.582
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_count.575
// [Main]   .type init_count.575, @function
// [Main] # leaf false
// [Main] init_count.575:
// [Main] .init_count.575_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a2, 0(a0)
// [Main]   li a3, 1
// [Main]   beq a2, a3, .init_count.575_1
// [Main] 
// [Main] .init_count.575_2:
// [Main]   lw a2, 0(a0)
// [Main]   addi a3, a2, -1
// [Main]   slliw a3, a3, 2
// [Main]   add a3, a1, a3
// [Main]   sw a2, 0(a3)
// [Main]   lw a2, 0(a0)
// [Main]   addi a2, a2, -1
// [Main]   sw a2, 0(a0)
// [Main]   call init_count.575
// [Main]   mv a0, zero
// [Main] 
// [Main] .init_count.575_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .init_count.575_1:
// [Main]   mv a0, zero
// [Main]   j .init_count.575_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function move_perm1_forward.581
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f6, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f6, fpref=$f.2), offset=Insn(iref=%3), width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f6, fpref=$f.2), offset=FnParam(fref=f6, fpref=$f.0), width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[Insn(iref=%3), FnParam(fref=f6, fpref=$f.1), FnParam(fref=f6, fpref=$f.2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f6, fpref=$f.0), Insn(iref=%1)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function move_perm1_forward.581 to wasm
// [Wasm] Lowering function move_perm1_forward.579
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f4, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f4, fpref=$f.2), offset=Insn(iref=%3), width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f4, fpref=$f.2), offset=FnParam(fref=f4, fpref=$f.0), width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Insn(iref=%3), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f4, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f4, fpref=$f.0), Insn(iref=%1)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function move_perm1_forward.579 to wasm
// [Wasm] Lowering function fannkuch.572
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=Mem(fref=f9, mref=m12), offset=BlockParam(bref=b14, bpref=$b.0), width=@32), val=BlockParam(bref=b14, bpref=$b.0))
// [Wasm] Get Local name Mem(fref=f9, mref=m12) -> $f9.m12
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b14, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering control Jump(target=b14, args=[Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b1, bpref=$b.0), offset=BlockParam(bref=b24, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b1, bpref=$b.0) -> $b1.$b.0
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=Mem(fref=f9, mref=m0), offset=BlockParam(bref=b24, bpref=$b.0), width=@32), val=Insn(iref=%21))
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b24, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering control Jump(target=b24, args=[Insn(iref=%23)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=Mem(fref=f9, mref=m19), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name Mem(fref=f9, mref=m19) -> $f9.m19
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.0), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Lowering control Jump(target=b82, args=[])
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=Mem(fref=f9, mref=m19), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name Mem(fref=f9, mref=m19) -> $f9.m19
// [Wasm] Lowering control Jump(target=b82, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%100) -> $%100
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%100), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%100) -> $%100
// [Wasm] Get Local name Insn(iref=%101) -> $%101
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.0), index=0, width=@32), val=Insn(iref=%101))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%101) -> $%101
// [Wasm] Lowering control Jump(target=b82, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b1, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b1, bpref=$b.0) -> $b1.$b.0
// [Wasm] Get Local name Insn(iref=%85) -> $%85
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m20), index=0, width=@32), val=Insn(iref=%85))
// [Wasm] Get Local name Mem(fref=f9, mref=m20) -> $f9.m20
// [Wasm] Get Local name Insn(iref=%85) -> $%85
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Int32(val=0), BlockParam(bref=b20, bpref=$b.0), BlockParam(bref=b1, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name BlockParam(bref=b1, bpref=$b.0) -> $b1.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%88) -> $%88
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m20), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m20) -> $f9.m20
// [Wasm] Get Local name Insn(iref=%89) -> $%89
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b1, bpref=$b.0), offset=Insn(iref=%88), width=@32), val=Insn(iref=%89))
// [Wasm] Get Local name BlockParam(bref=b1, bpref=$b.0) -> $b1.$b.0
// [Wasm] Get Local name Insn(iref=%88) -> $%88
// [Wasm] Get Local name Insn(iref=%89) -> $%89
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%91) -> $%91
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=Mem(fref=f9, mref=m1), offset=Insn(iref=%91), width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Get Local name Insn(iref=%91) -> $%91
// [Wasm] Get Local name Insn(iref=%93) -> $%93
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%93), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%93) -> $%93
// [Wasm] Get Local name Insn(iref=%94) -> $%94
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=Mem(fref=f9, mref=m1), offset=Insn(iref=%91), width=@32), val=Insn(iref=%94))
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Get Local name Insn(iref=%91) -> $%91
// [Wasm] Get Local name Insn(iref=%94) -> $%94
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%96) -> $%96
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=Mem(fref=f9, mref=m1), offset=Insn(iref=%96), width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Get Local name Insn(iref=%96) -> $%96
// [Wasm] Get Local name Insn(iref=%97) -> $%97
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%97)])
// [Wasm] Get Local name Insn(iref=%97) -> $%97
// [Wasm] Get Local name Insn(iref=%98) -> $%98
// [Wasm] Lowering control Branch(cond=Insn(iref=%98), t=b87, t_args=[], f=b88, f_args=[])
// [Wasm] Get Local name Insn(iref=%98) -> $%98
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%81) -> $%81
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%81), FnParam(fref=f9, fpref=$f.0)])
// [Wasm] Get Local name Insn(iref=%81) -> $%81
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%82) -> $%82
// [Wasm] Lowering control Branch(cond=Insn(iref=%82), t=b85, t_args=[], f=b86, f_args=[])
// [Wasm] Get Local name Insn(iref=%82) -> $%82
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m5), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%49), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m5), index=0, width=@32), val=Insn(iref=%50))
// [Wasm] Get Local name Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering control Jump(target=b20, args=[BlockParam(bref=b20, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Lowering control Jump(target=b33, args=[BlockParam(bref=b91, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b91, bpref=$b.0) -> $b91.$b.0
// [Wasm] Lowering control Jump(target=b91, args=[Unit])
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=Mem(fref=f9, mref=m19), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m19) -> $f9.m19
// [Wasm] Get Local name Insn(iref=%79) -> $%79
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%79), Bool(val=true)])
// [Wasm] Get Local name Insn(iref=%79) -> $%79
// [Wasm] Get Local name Insn(iref=%80) -> $%80
// [Wasm] Lowering control Branch(cond=Insn(iref=%80), t=b83, t_args=[], f=b84, f_args=[])
// [Wasm] Get Local name Insn(iref=%80) -> $%80
// [Wasm] Lowering control Jump(target=b81, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m2), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m2) -> $f9.m2
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m3), index=0, width=@32), val=Insn(iref=%32))
// [Wasm] Get Local name Mem(fref=f9, mref=m3) -> $f9.m3
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m4), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m4) -> $f9.m4
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m2), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m2) -> $f9.m2
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m5), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%36), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%38), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%36), Insn(iref=%39)])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%40), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=1), Insn(iref=%41)])
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%35), Insn(iref=%42)])
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%34), Insn(iref=%43)])
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m4), index=0, width=@32), val=Insn(iref=%44))
// [Wasm] Get Local name Mem(fref=f9, mref=m4) -> $f9.m4
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m19, fills=[Init(val=Bool(val=true))])
// [Wasm] Get Local name Mem(fref=f9, mref=m19) -> $f9.m19
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m20, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m20) -> $f9.m20
// [Wasm] Lowering control Jump(target=b80, args=[])
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=Mem(fref=f9, mref=m21), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name Mem(fref=f9, mref=m21) -> $f9.m21
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.0), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Lowering control Jump(target=b106, args=[])
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=Mem(fref=f9, mref=m21), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name Mem(fref=f9, mref=m21) -> $f9.m21
// [Wasm] Lowering control Jump(target=b106, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%124) -> $%124
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%124), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%124) -> $%124
// [Wasm] Get Local name Insn(iref=%125) -> $%125
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.0), index=0, width=@32), val=Insn(iref=%125))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%125) -> $%125
// [Wasm] Lowering control Jump(target=b106, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b1, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b1, bpref=$b.0) -> $b1.$b.0
// [Wasm] Get Local name Insn(iref=%109) -> $%109
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m22), index=0, width=@32), val=Insn(iref=%109))
// [Wasm] Get Local name Mem(fref=f9, mref=m22) -> $f9.m22
// [Wasm] Get Local name Insn(iref=%109) -> $%109
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[Int32(val=0), BlockParam(bref=b20, bpref=$b.0), BlockParam(bref=b1, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name BlockParam(bref=b1, bpref=$b.0) -> $b1.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%112) -> $%112
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m22), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m22) -> $f9.m22
// [Wasm] Get Local name Insn(iref=%113) -> $%113
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b1, bpref=$b.0), offset=Insn(iref=%112), width=@32), val=Insn(iref=%113))
// [Wasm] Get Local name BlockParam(bref=b1, bpref=$b.0) -> $b1.$b.0
// [Wasm] Get Local name Insn(iref=%112) -> $%112
// [Wasm] Get Local name Insn(iref=%113) -> $%113
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%115) -> $%115
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=Mem(fref=f9, mref=m1), offset=Insn(iref=%115), width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Get Local name Insn(iref=%115) -> $%115
// [Wasm] Get Local name Insn(iref=%117) -> $%117
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%117), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%117) -> $%117
// [Wasm] Get Local name Insn(iref=%118) -> $%118
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=Mem(fref=f9, mref=m1), offset=Insn(iref=%115), width=@32), val=Insn(iref=%118))
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Get Local name Insn(iref=%115) -> $%115
// [Wasm] Get Local name Insn(iref=%118) -> $%118
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%120) -> $%120
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=Mem(fref=f9, mref=m1), offset=Insn(iref=%120), width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Get Local name Insn(iref=%120) -> $%120
// [Wasm] Get Local name Insn(iref=%121) -> $%121
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%121)])
// [Wasm] Get Local name Insn(iref=%121) -> $%121
// [Wasm] Get Local name Insn(iref=%122) -> $%122
// [Wasm] Lowering control Branch(cond=Insn(iref=%122), t=b111, t_args=[], f=b112, f_args=[])
// [Wasm] Get Local name Insn(iref=%122) -> $%122
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%105) -> $%105
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%105), FnParam(fref=f9, fpref=$f.0)])
// [Wasm] Get Local name Insn(iref=%105) -> $%105
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%106) -> $%106
// [Wasm] Lowering control Branch(cond=Insn(iref=%106), t=b109, t_args=[], f=b110, f_args=[])
// [Wasm] Get Local name Insn(iref=%106) -> $%106
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m5), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%67), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Get Local name Insn(iref=%68) -> $%68
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m5), index=0, width=@32), val=Insn(iref=%68))
// [Wasm] Get Local name Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Get Local name Insn(iref=%68) -> $%68
// [Wasm] Lowering control Jump(target=b20, args=[BlockParam(bref=b20, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Lowering control Jump(target=b34, args=[BlockParam(bref=b115, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b115, bpref=$b.0) -> $b115.$b.0
// [Wasm] Lowering control Jump(target=b115, args=[Unit])
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=Mem(fref=f9, mref=m21), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m21) -> $f9.m21
// [Wasm] Get Local name Insn(iref=%103) -> $%103
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%103), Bool(val=true)])
// [Wasm] Get Local name Insn(iref=%103) -> $%103
// [Wasm] Get Local name Insn(iref=%104) -> $%104
// [Wasm] Lowering control Branch(cond=Insn(iref=%104), t=b107, t_args=[], f=b108, f_args=[])
// [Wasm] Get Local name Insn(iref=%104) -> $%104
// [Wasm] Lowering control Jump(target=b105, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m4), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m4) -> $f9.m4
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m2), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m2) -> $f9.m2
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m5), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%54), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%56), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%54), Insn(iref=%57)])
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%58), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=1), Insn(iref=%59)])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%53), Insn(iref=%60)])
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%52), Insn(iref=%61)])
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m4), index=0, width=@32), val=Insn(iref=%62))
// [Wasm] Get Local name Mem(fref=f9, mref=m4) -> $f9.m4
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m21, fills=[Init(val=Bool(val=true))])
// [Wasm] Get Local name Mem(fref=f9, mref=m21) -> $f9.m21
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m22, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m22) -> $f9.m22
// [Wasm] Lowering control Jump(target=b104, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m3), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m3) -> $f9.m3
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m2), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m2) -> $f9.m2
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%29), Insn(iref=%30)])
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering control Branch(cond=Insn(iref=%31), t=b27, t_args=[], f=b28, f_args=[])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering control Jump(target=b32, args=[BlockParam(bref=b76, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b76, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Get Local name Insn(iref=%74) -> $%74
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b73, bpref=$b.0), index=0, width=@32), val=Insn(iref=%74))
// [Wasm] Get Local name BlockParam(bref=b73, bpref=$b.0) -> $b73.$b.0
// [Wasm] Get Local name Insn(iref=%74) -> $%74
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m2), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m2) -> $f9.m2
// [Wasm] Get Local name Insn(iref=%76) -> $%76
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%76), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%76) -> $%76
// [Wasm] Get Local name Insn(iref=%77) -> $%77
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m2), index=0, width=@32), val=Insn(iref=%77))
// [Wasm] Get Local name Mem(fref=f9, mref=m2) -> $f9.m2
// [Wasm] Get Local name Insn(iref=%77) -> $%77
// [Wasm] Lowering control Jump(target=b73, args=[BlockParam(bref=b73, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b73, bpref=$b.0) -> $b73.$b.0
// [Wasm] Get Local name BlockParam(bref=b73, bpref=$b.0) -> $b73.$b.0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m71, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m71) -> $f9.m71
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[Int32(val=0), BlockParam(bref=b73, bpref=$b.0), Mem(fref=f9, mref=m71), Mem(fref=f9, mref=m0)])
// [Wasm] Get Local name BlockParam(bref=b73, bpref=$b.0) -> $b73.$b.0
// [Wasm] Get Local name Mem(fref=f9, mref=m71) -> $f9.m71
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Lowering control Jump(target=b77, args=[Insn(iref=%73)])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b73, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b73, bpref=$b.0) -> $b73.$b.0
// [Wasm] Get Local name Insn(iref=%70) -> $%70
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%70), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%70) -> $%70
// [Wasm] Get Local name Insn(iref=%71) -> $%71
// [Wasm] Lowering control Branch(cond=Insn(iref=%71), t=b74, t_args=[], f=b75, f_args=[])
// [Wasm] Get Local name Insn(iref=%71) -> $%71
// [Wasm] Lowering control Jump(target=b72, args=[Mem(fref=f9, mref=m18)])
// [Wasm] Get Local name Mem(fref=f9, mref=m18) -> $f9.m18
// [Wasm] Get Local name BlockParam(bref=b73, bpref=$b.0) -> $b73.$b.0
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[BlockParam(bref=b20, bpref=$b.0), Mem(fref=f9, mref=m1)])
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m2), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name Mem(fref=f9, mref=m2) -> $f9.m2
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m18, fills=[Init(val=Insn(iref=%26))])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name Mem(fref=f9, mref=m18) -> $f9.m18
// [Wasm] Lowering control Jump(target=b71, args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f9, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b24, bpref=$b.0), Insn(iref=%19)])
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Branch(cond=Insn(iref=%20), t=b25, t_args=[], f=b26, f_args=[])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Jump(target=b23, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m3), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m3) -> $f9.m3
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m4), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m4) -> $f9.m4
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m7, fills=[Field(index=0, val=Insn(iref=%9)), Field(index=1, val=Insn(iref=%10))])
// [Wasm] Get Local name Mem(fref=f9, mref=m7) -> $f9.m7
// [Wasm] Get Local name Mem(fref=f9, mref=m7) -> $f9.m7
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Mem(fref=f9, mref=m7) -> $f9.m7
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Return(args=[Mem(fref=f9, mref=m7)])
// [Wasm] Get Local name Mem(fref=f9, mref=m7) -> $f9.m7
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b31, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Lowering control Jump(target=b31, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%17)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering control Branch(cond=Insn(iref=%18), t=b21, t_args=[], f=b22, f_args=[])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering control Jump(target=b19, args=[Mem(fref=f9, mref=m6)])
// [Wasm] Get Local name Mem(fref=f9, mref=m6) -> $f9.m6
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Zero])
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m2) -> $f9.m2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m3, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m3) -> $f9.m3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m4, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m4) -> $f9.m4
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m5, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m6, fills=[Init(val=FnParam(fref=f9, fpref=$f.0))])
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f9, mref=m6) -> $f9.m6
// [Wasm] Lowering control Jump(target=b18, args=[])
// [Wasm] Lowering control Jump(target=b1, args=[BlockParam(bref=b17, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Get Local name BlockParam(bref=b1, bpref=$b.0) -> $b1.$b.0
// [Wasm] Lowering control Jump(target=b17, args=[Mem(fref=f9, mref=m12)])
// [Wasm] Get Local name Mem(fref=f9, mref=m12) -> $f9.m12
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f9, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b14, bpref=$b.0), Insn(iref=%13)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Branch(cond=Insn(iref=%14), t=b15, t_args=[], f=b16, f_args=[])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m12, fills=[Zero])
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f9, mref=m12) -> $f9.m12
// [Wasm] Lowering control Jump(target=b13, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Lowering control Jump(target=b12, args=[])
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%112) -> $%112
// [Wasm] Local BlockParam(bref=b1, bpref=$b.0) -> $b1.$b.0
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%82) -> $%82
// [Wasm] Local Insn(iref=%76) -> $%76
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%88) -> $%88
// [Wasm] Local Mem(fref=f9, mref=m12) -> $f9.m12
// [Wasm] Local Insn(iref=%39) -> $%39
// [Wasm] Local Insn(iref=%118) -> $%118
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local Insn(iref=%81) -> $%81
// [Wasm] Local Insn(iref=%96) -> $%96
// [Wasm] Local Insn(iref=%94) -> $%94
// [Wasm] Local Insn(iref=%56) -> $%56
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%68) -> $%68
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Local Insn(iref=%93) -> $%93
// [Wasm] Local BlockParam(bref=b115, bpref=$b.0) -> $b115.$b.0
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%74) -> $%74
// [Wasm] Local Mem(fref=f9, mref=m4) -> $f9.m4
// [Wasm] Local Insn(iref=%113) -> $%113
// [Wasm] Local Mem(fref=f9, mref=m18) -> $f9.m18
// [Wasm] Local BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%121) -> $%121
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%53) -> $%53
// [Wasm] Local Insn(iref=%106) -> $%106
// [Wasm] Local Mem(fref=f9, mref=m7) -> $f9.m7
// [Wasm] Local Insn(iref=%54) -> $%54
// [Wasm] Local Mem(fref=f9, mref=m71) -> $f9.m71
// [Wasm] Local Insn(iref=%67) -> $%67
// [Wasm] Local Insn(iref=%60) -> $%60
// [Wasm] Local Insn(iref=%91) -> $%91
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%101) -> $%101
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%79) -> $%79
// [Wasm] Local Insn(iref=%124) -> $%124
// [Wasm] Local Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Local Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Local Insn(iref=%125) -> $%125
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%71) -> $%71
// [Wasm] Local Insn(iref=%103) -> $%103
// [Wasm] Local Mem(fref=f9, mref=m19) -> $f9.m19
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Insn(iref=%89) -> $%89
// [Wasm] Local Insn(iref=%109) -> $%109
// [Wasm] Local BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Local Insn(iref=%120) -> $%120
// [Wasm] Local BlockParam(bref=b73, bpref=$b.0) -> $b73.$b.0
// [Wasm] Local Insn(iref=%100) -> $%100
// [Wasm] Local Mem(fref=f9, mref=m21) -> $f9.m21
// [Wasm] Local Insn(iref=%50) -> $%50
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%77) -> $%77
// [Wasm] Local Mem(fref=f9, mref=m2) -> $f9.m2
// [Wasm] Local BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Local Insn(iref=%80) -> $%80
// [Wasm] Local Insn(iref=%52) -> $%52
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%58) -> $%58
// [Wasm] Local Mem(fref=f9, mref=m20) -> $f9.m20
// [Wasm] Local Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Local BlockParam(bref=b91, bpref=$b.0) -> $b91.$b.0
// [Wasm] Local Insn(iref=%117) -> $%117
// [Wasm] Local Insn(iref=%57) -> $%57
// [Wasm] Local Mem(fref=f9, mref=m6) -> $f9.m6
// [Wasm] Local Insn(iref=%104) -> $%104
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Insn(iref=%62) -> $%62
// [Wasm] Local Insn(iref=%122) -> $%122
// [Wasm] Local Insn(iref=%97) -> $%97
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%70) -> $%70
// [Wasm] Local Insn(iref=%61) -> $%61
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%115) -> $%115
// [Wasm] Local Insn(iref=%98) -> $%98
// [Wasm] Local Insn(iref=%85) -> $%85
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Mem(fref=f9, mref=m22) -> $f9.m22
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Mem(fref=f9, mref=m3) -> $f9.m3
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%105) -> $%105
// [Wasm] Lowered function fannkuch.572 to wasm
// [Wasm] Lowering function init_count.575
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f1, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%2), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f1, fpref=$f.1), offset=Insn(iref=%3), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f1, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%6), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f1, fpref=$f.0), index=0, width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f1, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function init_count.575 to wasm
// [Wasm] Lowering function main.582
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Int32, Int32]), f=f9, args=[Int32(val=9)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%4)])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main.582 to wasm
// [Wasm] Lowering function flip_loop.577
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.3), offset=BlockParam(bref=b2, bpref=$b.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.2), index=0, width=@32), val=Insn(iref=%3))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%5), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.3), offset=Insn(iref=%6), width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.3), offset=BlockParam(bref=b2, bpref=$b.0), width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%9), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.3), offset=Insn(iref=%10), width=@32), val=Insn(iref=%11))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%0), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b2, bpref=$b.0), Insn(iref=%1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b1, args=[FnParam(fref=f2, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function flip_loop.577 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f10, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] func_tre: fannkuch.1 false
// [KnfOpt] func_tre: gen_perm1.3 false
// [KnfOpt] func_tre: init_arr.7 true
// [KnfOpt] func_tre: compute.35 true
// [KnfOpt] func_tre: copy_perm.40 true
// [KnfOpt] func_tre: init_count.50 false
// [KnfOpt] func_tre: do_flip.76 true
// [KnfOpt] func_tre: flip_loop.84 true
// [KnfOpt] func_tre: go_loop.154 true
// [KnfOpt] func_tre: move_perm1_forward.169 false
// [KnfOpt] func_tre: main.223 false
// [KnfOpt] freq: {fannkuch.1: Once, gen_perm1.3: Once, init_arr.7: Once, init_arr.229: Many(2), compute.35: Once, compute.367: Many(2), copy_perm.372: Once, copy_perm.374: Many(2), init_count.384: Many(2), do_flip.410: Once, do_flip.412: Many(2), flip_loop.420: Once, flip_loop.422: Many(2), go_loop.492: Once, go_loop.493: Many(2), move_perm1_forward.510: Many(2), main.223: Once}
// [KnfOpt] Inline threshold 15
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision init_arr.7 accepted
// [KnfOpt] Knf inline Some(init_arr) let _15: Unit = Unit
// [KnfOpt] Var(arr.6)
// [KnfOpt] Inline threshold 39
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision gen_perm1.3 rejected
// [KnfOpt] Inline threshold 17
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision copy_perm.372 accepted
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 39
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 45
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision flip_loop.420 rejected
// [KnfOpt] Inline threshold 87
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision do_flip.410 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 127
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision go_loop.492 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 127
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision go_loop.492 rejected
// [KnfOpt] Knf inline Some(copy_perm) let _383: Unit = Unit
// [KnfOpt] let rec init_count.384: Unit = () {
// [KnfOpt]   let _385: Int = Int(0)
// [KnfOpt]   let _386: Int = Get r.368[_385]
// [KnfOpt]   let _387: Int = Int(1)
// [KnfOpt]   if (_386 == _387) then {
// [KnfOpt]     let _388: Unit = Unit
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _389: Int = Int(0)
// [KnfOpt]     let _390: Int = Get r.368[_389]
// [KnfOpt]     let _391: Int = Int(1)
// [KnfOpt]     let _392: Int = Sub(_390, _391)
// [KnfOpt]     let _393: Int = Int(0)
// [KnfOpt]     let _394: Int = Get r.368[_393]
// [KnfOpt]     let _395: Unit = Put count.20[_392] = _394
// [KnfOpt]     let _396: Int = Int(0)
// [KnfOpt]     let _397: Int = Int(0)
// [KnfOpt]     let _398: Int = Get r.368[_397]
// [KnfOpt]     let _399: Int = Int(1)
// [KnfOpt]     let _400: Int = Sub(_398, _399)
// [KnfOpt]     let _401: Unit = Put r.368[_396] = _400
// [KnfOpt]     let _388: Unit = Apply(init_count.384, [])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _402: Unit = Apply(init_count.384, [])
// [KnfOpt] let _403: Int = Int(0)
// [KnfOpt] let _404: Int = Int(0)
// [KnfOpt] let _405: Unit = Put flips.23[_403] = _404
// [KnfOpt] let _406: Int = Int(1)
// [KnfOpt] let _407: Int = Int(0)
// [KnfOpt] let _408: Int = Get perm.18[_407]
// [KnfOpt] let k.409: Array(Int) = ExtApply(minimbt_create_array, [_406, _408, ])
// [KnfOpt] let rec do_flip.410: Unit = (k.411: Array(Int)) {
// [KnfOpt]   let join do_flip.412: Unit = (k.413: Array(Int)) {
// [KnfOpt]     let _414: Int = Int(0)
// [KnfOpt]     let _415: Int = Get k.413[_414]
// [KnfOpt]     let _416: Int = Int(0)
// [KnfOpt]     if (_415 == _416) then {
// [KnfOpt]       Unit
// [KnfOpt]     } else {
// [KnfOpt]       let _417: Int = Int(1)
// [KnfOpt]       let _418: Int = Int(0)
// [KnfOpt]       let t.419: Array(Int) = ExtApply(minimbt_create_array, [_417, _418, ])
// [KnfOpt]       let rec flip_loop.420: Unit = (i.421: Int) {
// [KnfOpt]         let join flip_loop.422: Unit = (i.423: Int) {
// [KnfOpt]           let _424: Int = Int(0)
// [KnfOpt]           let _425: Int = Get k.413[_424]
// [KnfOpt]           let _426: Int = Int(2)
// [KnfOpt]           let _427: Int = Div(_425, _426)
// [KnfOpt]           if (i.423 <= _427) then {
// [KnfOpt]             let _428: Int = Int(0)
// [KnfOpt]             let _429: Int = Get perm.18[i.423]
// [KnfOpt]             let _430: Unit = Put t.419[_428] = _429
// [KnfOpt]             let _431: Int = Int(0)
// [KnfOpt]             let _432: Int = Get k.413[_431]
// [KnfOpt]             let _433: Int = Sub(_432, i.423)
// [KnfOpt]             let _434: Int = Get perm.18[_433]
// [KnfOpt]             let _435: Unit = Put perm.18[i.423] = _434
// [KnfOpt]             let _436: Int = Int(0)
// [KnfOpt]             let _437: Int = Get k.413[_436]
// [KnfOpt]             let _438: Int = Sub(_437, i.423)
// [KnfOpt]             let _439: Int = Int(0)
// [KnfOpt]             let _440: Int = Get t.419[_439]
// [KnfOpt]             let _441: Unit = Put perm.18[_438] = _440
// [KnfOpt]             let _442: Int = Int(1)
// [KnfOpt]             let _443: Int = Add(i.423, _442)
// [KnfOpt]             Jump(flip_loop.422, [_443, ])
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(flip_loop.422, [i.421, ])
// [KnfOpt]       }
// [KnfOpt]       let _444: Int = Int(0)
// [KnfOpt]       let _445: Unit = Apply(flip_loop.420, [_444, ])
// [KnfOpt]       let _446: Int = Int(0)
// [KnfOpt]       let _447: Int = Int(0)
// [KnfOpt]       let _448: Int = Get perm.18[_447]
// [KnfOpt]       let _449: Unit = Put k.413[_446] = _448
// [KnfOpt]       let _450: Int = Int(0)
// [KnfOpt]       let _451: Int = Int(0)
// [KnfOpt]       let _452: Int = Get flips.23[_451]
// [KnfOpt]       let _453: Int = Int(1)
// [KnfOpt]       let _454: Int = Add(_452, _453)
// [KnfOpt]       let _455: Unit = Put flips.23[_450] = _454
// [KnfOpt]       Jump(do_flip.412, [k.413, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(do_flip.412, [k.411, ])
// [KnfOpt] }
// [KnfOpt] let _456: Unit = Apply(do_flip.410, [k.409, ])
// [KnfOpt] let _457: Int = Int(0)
// [KnfOpt] let _458: Int = Get max_flips.26[_457]
// [KnfOpt] let _459: Int = Int(0)
// [KnfOpt] let _460: Int = Get flips.23[_459]
// [KnfOpt] if (_458 <= _460) then {
// [KnfOpt]   let _462: Int = Int(0)
// [KnfOpt]   let _463: Int = Int(0)
// [KnfOpt]   let _464: Int = Get flips.23[_463]
// [KnfOpt]   let _461: Unit = Put max_flips.26[_462] = _464
// [KnfOpt]   let _465: Int = Int(0)
// [KnfOpt]   let _466: Int = Int(0)
// [KnfOpt]   let _467: Int = Get check_sum.29[_466]
// [KnfOpt]   let _468: Int = Int(0)
// [KnfOpt]   let _469: Int = Get flips.23[_468]
// [KnfOpt]   let _470: Int = Int(1)
// [KnfOpt]   let _471: Int = Int(0)
// [KnfOpt]   let _472: Int = Get nperm.32[_471]
// [KnfOpt]   let _473: Int = Int(0)
// [KnfOpt]   let _474: Int = Get nperm.32[_473]
// [KnfOpt]   let _475: Int = Int(2)
// [KnfOpt]   let _476: Int = Div(_474, _475)
// [KnfOpt]   let _477: Int = Int(2)
// [KnfOpt]   let _478: Int = Mul(_476, _477)
// [KnfOpt]   let _479: Int = Sub(_472, _478)
// [KnfOpt]   let _480: Int = Int(2)
// [KnfOpt]   let _481: Int = Mul(_479, _480)
// [KnfOpt]   let _482: Int = Sub(_470, _481)
// [KnfOpt]   let _483: Int = Mul(_469, _482)
// [KnfOpt]   let _484: Int = Add(_467, _483)
// [KnfOpt]   let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]   let _486: Int = Int(1)
// [KnfOpt]   let _487: Bool = Bool(true)
// [KnfOpt]   let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]   let _489: Int = Int(1)
// [KnfOpt]   let _490: Int = Int(0)
// [KnfOpt]   let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]   let rec go_loop.492: Unit = () {
// [KnfOpt]     let join go_loop.493: Unit = () {
// [KnfOpt]       let _494: Int = Int(0)
// [KnfOpt]       let _495: Bool = Get go.488[_494]
// [KnfOpt]       let _496: Bool = Bool(true)
// [KnfOpt]       if (_495 == _496) then {
// [KnfOpt]         let _497: Int = Int(0)
// [KnfOpt]         let _498: Int = Get r.368[_497]
// [KnfOpt]         if (_498 == n.2) then {
// [KnfOpt]           let _500: Int = Int(0)
// [KnfOpt]           let _501: Bool = Bool(false)
// [KnfOpt]           let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]           let _503: Int = Int(0)
// [KnfOpt]           let _504: Int = Int(0)
// [KnfOpt]           let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]           let _499: Unit = Unit
// [KnfOpt]           Jump(go_loop.493, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _506: Int = Int(0)
// [KnfOpt]           let _507: Int = Int(0)
// [KnfOpt]           let _508: Int = Get perm1.16[_507]
// [KnfOpt]           let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]           let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]             let _512: Int = Int(0)
// [KnfOpt]             let _513: Int = Get r.368[_512]
// [KnfOpt]             let _514: Int = Int(1)
// [KnfOpt]             let _515: Int = Sub(_513, _514)
// [KnfOpt]             if (i.511 <= _515) then {
// [KnfOpt]               let _516: Int = Int(1)
// [KnfOpt]               let _517: Int = Add(i.511, _516)
// [KnfOpt]               let _518: Int = Get perm1.16[_517]
// [KnfOpt]               let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]               let _520: Int = Int(1)
// [KnfOpt]               let _521: Int = Add(i.511, _520)
// [KnfOpt]               let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _523: Int = Int(0)
// [KnfOpt]           let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]           let _525: Int = Int(0)
// [KnfOpt]           let _526: Int = Get r.368[_525]
// [KnfOpt]           let _527: Int = Int(0)
// [KnfOpt]           let _528: Int = Get t.491[_527]
// [KnfOpt]           let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]           let _530: Int = Int(0)
// [KnfOpt]           let _531: Int = Get r.368[_530]
// [KnfOpt]           let _532: Int = Int(0)
// [KnfOpt]           let _533: Int = Get r.368[_532]
// [KnfOpt]           let _534: Int = Get count.20[_533]
// [KnfOpt]           let _535: Int = Int(1)
// [KnfOpt]           let _536: Int = Sub(_534, _535)
// [KnfOpt]           let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]           let _538: Int = Int(1)
// [KnfOpt]           let _539: Int = Int(0)
// [KnfOpt]           let _540: Int = Get r.368[_539]
// [KnfOpt]           let _541: Int = Get count.20[_540]
// [KnfOpt]           if (_538 <= _541) then {
// [KnfOpt]             let _543: Int = Int(0)
// [KnfOpt]             let _544: Bool = Bool(false)
// [KnfOpt]             let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _545: Int = Int(0)
// [KnfOpt]             let _546: Int = Int(0)
// [KnfOpt]             let _547: Int = Get r.368[_546]
// [KnfOpt]             let _548: Int = Int(1)
// [KnfOpt]             let _549: Int = Add(_547, _548)
// [KnfOpt]             let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.493, [])
// [KnfOpt]   }
// [KnfOpt]   let _550: Unit = Apply(go_loop.492, [])
// [KnfOpt]   let _551: Int = Int(0)
// [KnfOpt]   let _552: Int = Int(0)
// [KnfOpt]   let _553: Int = Get nperm.32[_552]
// [KnfOpt]   let _554: Int = Int(1)
// [KnfOpt]   let _555: Int = Add(_553, _554)
// [KnfOpt]   let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]   Jump(compute.367, [r.368, ])
// [KnfOpt] } else {
// [KnfOpt]   let _461: Unit = Unit
// [KnfOpt]   let _465: Int = Int(0)
// [KnfOpt]   let _466: Int = Int(0)
// [KnfOpt]   let _467: Int = Get check_sum.29[_466]
// [KnfOpt]   let _468: Int = Int(0)
// [KnfOpt]   let _469: Int = Get flips.23[_468]
// [KnfOpt]   let _470: Int = Int(1)
// [KnfOpt]   let _471: Int = Int(0)
// [KnfOpt]   let _472: Int = Get nperm.32[_471]
// [KnfOpt]   let _473: Int = Int(0)
// [KnfOpt]   let _474: Int = Get nperm.32[_473]
// [KnfOpt]   let _475: Int = Int(2)
// [KnfOpt]   let _476: Int = Div(_474, _475)
// [KnfOpt]   let _477: Int = Int(2)
// [KnfOpt]   let _478: Int = Mul(_476, _477)
// [KnfOpt]   let _479: Int = Sub(_472, _478)
// [KnfOpt]   let _480: Int = Int(2)
// [KnfOpt]   let _481: Int = Mul(_479, _480)
// [KnfOpt]   let _482: Int = Sub(_470, _481)
// [KnfOpt]   let _483: Int = Mul(_469, _482)
// [KnfOpt]   let _484: Int = Add(_467, _483)
// [KnfOpt]   let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]   let _486: Int = Int(1)
// [KnfOpt]   let _487: Bool = Bool(true)
// [KnfOpt]   let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]   let _489: Int = Int(1)
// [KnfOpt]   let _490: Int = Int(0)
// [KnfOpt]   let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]   let rec go_loop.492: Unit = () {
// [KnfOpt]     let join go_loop.493: Unit = () {
// [KnfOpt]       let _494: Int = Int(0)
// [KnfOpt]       let _495: Bool = Get go.488[_494]
// [KnfOpt]       let _496: Bool = Bool(true)
// [KnfOpt]       if (_495 == _496) then {
// [KnfOpt]         let _497: Int = Int(0)
// [KnfOpt]         let _498: Int = Get r.368[_497]
// [KnfOpt]         if (_498 == n.2) then {
// [KnfOpt]           let _500: Int = Int(0)
// [KnfOpt]           let _501: Bool = Bool(false)
// [KnfOpt]           let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]           let _503: Int = Int(0)
// [KnfOpt]           let _504: Int = Int(0)
// [KnfOpt]           let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]           let _499: Unit = Unit
// [KnfOpt]           Jump(go_loop.493, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _506: Int = Int(0)
// [KnfOpt]           let _507: Int = Int(0)
// [KnfOpt]           let _508: Int = Get perm1.16[_507]
// [KnfOpt]           let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]           let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]             let _512: Int = Int(0)
// [KnfOpt]             let _513: Int = Get r.368[_512]
// [KnfOpt]             let _514: Int = Int(1)
// [KnfOpt]             let _515: Int = Sub(_513, _514)
// [KnfOpt]             if (i.511 <= _515) then {
// [KnfOpt]               let _516: Int = Int(1)
// [KnfOpt]               let _517: Int = Add(i.511, _516)
// [KnfOpt]               let _518: Int = Get perm1.16[_517]
// [KnfOpt]               let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]               let _520: Int = Int(1)
// [KnfOpt]               let _521: Int = Add(i.511, _520)
// [KnfOpt]               let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _523: Int = Int(0)
// [KnfOpt]           let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]           let _525: Int = Int(0)
// [KnfOpt]           let _526: Int = Get r.368[_525]
// [KnfOpt]           let _527: Int = Int(0)
// [KnfOpt]           let _528: Int = Get t.491[_527]
// [KnfOpt]           let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]           let _530: Int = Int(0)
// [KnfOpt]           let _531: Int = Get r.368[_530]
// [KnfOpt]           let _532: Int = Int(0)
// [KnfOpt]           let _533: Int = Get r.368[_532]
// [KnfOpt]           let _534: Int = Get count.20[_533]
// [KnfOpt]           let _535: Int = Int(1)
// [KnfOpt]           let _536: Int = Sub(_534, _535)
// [KnfOpt]           let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]           let _538: Int = Int(1)
// [KnfOpt]           let _539: Int = Int(0)
// [KnfOpt]           let _540: Int = Get r.368[_539]
// [KnfOpt]           let _541: Int = Get count.20[_540]
// [KnfOpt]           if (_538 <= _541) then {
// [KnfOpt]             let _543: Int = Int(0)
// [KnfOpt]             let _544: Bool = Bool(false)
// [KnfOpt]             let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _545: Int = Int(0)
// [KnfOpt]             let _546: Int = Int(0)
// [KnfOpt]             let _547: Int = Get r.368[_546]
// [KnfOpt]             let _548: Int = Int(1)
// [KnfOpt]             let _549: Int = Add(_547, _548)
// [KnfOpt]             let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.493, [])
// [KnfOpt]   }
// [KnfOpt]   let _550: Unit = Apply(go_loop.492, [])
// [KnfOpt]   let _551: Int = Int(0)
// [KnfOpt]   let _552: Int = Int(0)
// [KnfOpt]   let _553: Int = Get nperm.32[_552]
// [KnfOpt]   let _554: Int = Int(1)
// [KnfOpt]   let _555: Int = Add(_553, _554)
// [KnfOpt]   let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]   Jump(compute.367, [r.368, ])
// [KnfOpt] }
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 39
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 45
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision flip_loop.420 rejected
// [KnfOpt] Inline threshold 87
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision do_flip.410 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 127
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision go_loop.492 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 127
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision go_loop.492 rejected
// [KnfOpt] Inline threshold 607
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 7
// [KnfOpt] Inline decision compute.35 rejected
// [KnfOpt] Inline threshold 697
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 9
// [KnfOpt] Inline decision fannkuch.1 rejected
// [KnfOpt] Numbers of let rec: 11 11 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f6: Multiple, f4: Multiple, f8: Once, f9: Once, f0: Once, f1: Multiple, f10: Once, f5: Once, f2: Once, f3: Once, f7: Once, f22: Once})
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%11) -> BlockParam(bref=b14, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%31) -> BlockParam(bref=b15, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%49) -> BlockParam(bref=b16, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b1, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b2, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b2, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] compute.574 is inlining Call(ty=Unit, f=f3, args=[Mem(fref=f8, mref=m0), FnParam(fref=f8, fpref=$f.2), FnParam(fref=f8, fpref=$f.4)])
// [CoreOpt] shifted callee .fn do_flip.576 #f3 : fn(array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b53 {
// [CoreOpt]   .bb #b53 () {
// [CoreOpt]     jump b54($f0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b54 pre #Some(b53) header #b55 {
// [CoreOpt]     .block #b56
// [CoreOpt]     .block #b57
// [CoreOpt]     .block #b58
// [CoreOpt]   }
// [CoreOpt]   .bb #b55 (array[int32]) {
// [CoreOpt]     let %53: int32 = load int32 field($b55.0, 0 * @32)
// [CoreOpt]     let %54: bool = eq(%53, 0)
// [CoreOpt]     br %54 b56() b57()
// [CoreOpt]   }
// [CoreOpt]   .bb #b56 () {
// [CoreOpt]     jump b58(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b57 () {
// [CoreOpt]     let _ = alloc <m53: array[int32] heap(1)> <- [..] = 0
// [CoreOpt]     let %56: unit = call f2(0, $b55.0, f3.m53, $f1)
// [CoreOpt]     jump b59(%56)
// [CoreOpt]   }
// [CoreOpt]   .bb #b58 (unit) {
// [CoreOpt]     return $b58.0
// [CoreOpt]   }
// [CoreOpt]   .bb #b59 (unit) {
// [CoreOpt]     let %57: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let _ = store int32 field($b55.0, 0 * @32) <- %57
// [CoreOpt]     let %59: int32 = load int32 field($f2, 0 * @32)
// [CoreOpt]     let %60: int32 = add(%59, 1)
// [CoreOpt]     let _ = store int32 field($f2, 0 * @32) <- %60
// [CoreOpt]     jump b55($b55.0)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] compute.574 is inlining Call(ty=Unit, f=f5, args=[FnParam(fref=f8, fpref=$f.1), BlockParam(bref=b2, bpref=$b.0), Mem(fref=f8, mref=m2), Mem(fref=f8, mref=m1), FnParam(fref=f8, fpref=$f.3), FnParam(fref=f8, fpref=$f.6)])
// [CoreOpt] shifted callee .fn go_loop.578 #f5 : fn(int32, array[int32], array[int32], array[bool], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b62 {
// [CoreOpt]   .bb #b62 () {
// [CoreOpt]     jump b63()
// [CoreOpt]   }
// [CoreOpt]   .loop #b63 pre #Some(b62) header #b64 {
// [CoreOpt]     .block #b65
// [CoreOpt]     .block #b66
// [CoreOpt]     .block #b67
// [CoreOpt]     .block #b68
// [CoreOpt]     .block #b69
// [CoreOpt]     .block #b70
// [CoreOpt]     .block #b71
// [CoreOpt]     .block #b72
// [CoreOpt]     .block #b73
// [CoreOpt]   }
// [CoreOpt]   .bb #b64 () {
// [CoreOpt]     let %62: bool = load bool field($f3, 0 * @32)
// [CoreOpt]     let %63: bool = eq(%62, true)
// [CoreOpt]     br %63 b65() b66()
// [CoreOpt]   }
// [CoreOpt]   .bb #b65 () {
// [CoreOpt]     let %64: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %65: bool = eq(%64, $f0)
// [CoreOpt]     br %65 b67() b68()
// [CoreOpt]   }
// [CoreOpt]   .bb #b66 () {
// [CoreOpt]     jump b73(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b67 () {
// [CoreOpt]     let _ = store bool field($f3, 0 * @32) <- false
// [CoreOpt]     let _ = store int32 field($f1, 0 * @32) <- 0
// [CoreOpt]     jump b64()
// [CoreOpt]   }
// [CoreOpt]   .bb #b68 () {
// [CoreOpt]     let %68: int32 = load int32 field($f5, 0 * @32)
// [CoreOpt]     let _ = store int32 field($f2, 0 * @32) <- %68
// [CoreOpt]     let %70: unit = call f4(0, $f1, $f5)
// [CoreOpt]     let %71: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %72: int32 = load int32 field($f2, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($f5, %71 * @32) <- %72
// [CoreOpt]     let %74: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %75: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %76: int32 = load int32 offset($f4, %75 * @32)
// [CoreOpt]     let %77: int32 = sub(%76, 1)
// [CoreOpt]     let _ = store int32 offset($f4, %74 * @32) <- %77
// [CoreOpt]     let %79: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %80: int32 = load int32 offset($f4, %79 * @32)
// [CoreOpt]     let %81: bool = le(1, %80)
// [CoreOpt]     br %81 b69() b70()
// [CoreOpt]   }
// [CoreOpt]   .bb #b69 () {
// [CoreOpt]     let _ = store bool field($f3, 0 * @32) <- false
// [CoreOpt]     jump b64()
// [CoreOpt]   }
// [CoreOpt]   .bb #b70 () {
// [CoreOpt]     let %83: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %84: int32 = add(%83, 1)
// [CoreOpt]     let _ = store int32 field($f1, 0 * @32) <- %84
// [CoreOpt]     jump b64()
// [CoreOpt]   }
// [CoreOpt]   .bb #b71 (any) {
// [CoreOpt]     jump b72($b71.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b72 (any) {
// [CoreOpt]     jump b73($b72.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b73 (any) {
// [CoreOpt]     return $b73.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] compute.574 is inlining Call(ty=Unit, f=f7, args=[FnParam(fref=f8, fpref=$f.1), BlockParam(bref=b2, bpref=$b.0), Mem(fref=f8, mref=m4), Mem(fref=f8, mref=m3), FnParam(fref=f8, fpref=$f.3), FnParam(fref=f8, fpref=$f.6)])
// [CoreOpt] shifted callee .fn go_loop.580 #f7 : fn(int32, array[int32], array[int32], array[bool], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b86 {
// [CoreOpt]   .bb #b86 () {
// [CoreOpt]     jump b87()
// [CoreOpt]   }
// [CoreOpt]   .loop #b87 pre #Some(b86) header #b88 {
// [CoreOpt]     .block #b89
// [CoreOpt]     .block #b90
// [CoreOpt]     .block #b91
// [CoreOpt]     .block #b92
// [CoreOpt]     .block #b93
// [CoreOpt]     .block #b94
// [CoreOpt]     .block #b95
// [CoreOpt]     .block #b96
// [CoreOpt]     .block #b97
// [CoreOpt]   }
// [CoreOpt]   .bb #b88 () {
// [CoreOpt]     let %86: bool = load bool field($f3, 0 * @32)
// [CoreOpt]     let %87: bool = eq(%86, true)
// [CoreOpt]     br %87 b89() b90()
// [CoreOpt]   }
// [CoreOpt]   .bb #b89 () {
// [CoreOpt]     let %88: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %89: bool = eq(%88, $f0)
// [CoreOpt]     br %89 b91() b92()
// [CoreOpt]   }
// [CoreOpt]   .bb #b90 () {
// [CoreOpt]     jump b97(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b91 () {
// [CoreOpt]     let _ = store bool field($f3, 0 * @32) <- false
// [CoreOpt]     let _ = store int32 field($f1, 0 * @32) <- 0
// [CoreOpt]     jump b88()
// [CoreOpt]   }
// [CoreOpt]   .bb #b92 () {
// [CoreOpt]     let %92: int32 = load int32 field($f5, 0 * @32)
// [CoreOpt]     let _ = store int32 field($f2, 0 * @32) <- %92
// [CoreOpt]     let %94: unit = call f6(0, $f1, $f5)
// [CoreOpt]     let %95: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %96: int32 = load int32 field($f2, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($f5, %95 * @32) <- %96
// [CoreOpt]     let %98: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %99: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %100: int32 = load int32 offset($f4, %99 * @32)
// [CoreOpt]     let %101: int32 = sub(%100, 1)
// [CoreOpt]     let _ = store int32 offset($f4, %98 * @32) <- %101
// [CoreOpt]     let %103: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %104: int32 = load int32 offset($f4, %103 * @32)
// [CoreOpt]     let %105: bool = le(1, %104)
// [CoreOpt]     br %105 b93() b94()
// [CoreOpt]   }
// [CoreOpt]   .bb #b93 () {
// [CoreOpt]     let _ = store bool field($f3, 0 * @32) <- false
// [CoreOpt]     jump b88()
// [CoreOpt]   }
// [CoreOpt]   .bb #b94 () {
// [CoreOpt]     let %107: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %108: int32 = add(%107, 1)
// [CoreOpt]     let _ = store int32 field($f1, 0 * @32) <- %108
// [CoreOpt]     jump b88()
// [CoreOpt]   }
// [CoreOpt]   .bb #b95 (any) {
// [CoreOpt]     jump b96($b95.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b96 (any) {
// [CoreOpt]     jump b97($b96.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b97 (any) {
// [CoreOpt]     return $b97.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] fannkuch.572 is inlining Call(ty=Array(elem=Int32), f=f0, args=[FnParam(fref=f9, fpref=$f.0)])
// [CoreOpt] shifted callee .fn gen_perm1.573 #f0 : fn(int32) -> array[int32]
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b12 {
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     let _ = alloc <m12: array[int32] heap($f0)> <- [..] = 0
// [CoreOpt]     jump b13(0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b13 pre #Some(b12) header #b14 {
// [CoreOpt]     .block #b15
// [CoreOpt]     .block #b16
// [CoreOpt]     .block #b17
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 (int32) {
// [CoreOpt]     let %13: int32 = sub($f0, 1)
// [CoreOpt]     let %14: bool = le($b14.0, %13)
// [CoreOpt]     br %14 b15() b16()
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     let _ = store int32 offset(f0.m12, $b14.0 * @32) <- $b14.0
// [CoreOpt]     let %16: int32 = add($b14.0, 1)
// [CoreOpt]     jump b14(%16)
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 () {
// [CoreOpt]     jump b17(f0.m12)
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 (any) {
// [CoreOpt]     return $b17.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] fannkuch.572 is inlining Call(ty=Unit, f=f8, args=[Mem(fref=f9, mref=m6), FnParam(fref=f9, fpref=$f.0), Mem(fref=f9, mref=m0), Mem(fref=f9, mref=m1), Mem(fref=f9, mref=m2), Mem(fref=f9, mref=m5), BlockParam(bref=b1, bpref=$b.0), Mem(fref=f9, mref=m4), Mem(fref=f9, mref=m3)])
// [CoreOpt] shifted callee .fn compute.574 #f8 : fn(array[int32], int32, array[int32], array[int32], array[int32], array[int32], array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b18 {
// [CoreOpt]   .bb #b18 () {
// [CoreOpt]     jump b19($f0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b19 pre #Some(b18) header #b20 {
// [CoreOpt]     .block #b21
// [CoreOpt]     .block #b22
// [CoreOpt]     .block #b31
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 (array[int32]) {
// [CoreOpt]     let %17: int32 = load int32 field($b20.0, 0 * @32)
// [CoreOpt]     let %18: bool = le(1, %17)
// [CoreOpt]     br %18 b21() b22()
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 () {
// [CoreOpt]     jump b23(0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b22 () {
// [CoreOpt]     jump b31(())
// [CoreOpt]   }
// [CoreOpt]   .loop #b23 pre #Some(b21) header #b24 {
// [CoreOpt]     .block #b25
// [CoreOpt]     .block #b26
// [CoreOpt]     .block #b27
// [CoreOpt]     .block #b28
// [CoreOpt]     .block #b29
// [CoreOpt]     .block #b30
// [CoreOpt]   }
// [CoreOpt]   .bb #b24 (int32) {
// [CoreOpt]     let %19: int32 = sub($f1, 1)
// [CoreOpt]     let %20: bool = le($b24.0, %19)
// [CoreOpt]     br %20 b25() b26()
// [CoreOpt]   }
// [CoreOpt]   .bb #b25 () {
// [CoreOpt]     let %21: int32 = load int32 offset($f6, $b24.0 * @32)
// [CoreOpt]     let _ = store int32 offset($f2, $b24.0 * @32) <- %21
// [CoreOpt]     let %23: int32 = add($b24.0, 1)
// [CoreOpt]     jump b24(%23)
// [CoreOpt]   }
// [CoreOpt]   .bb #b26 () {
// [CoreOpt]     let %24: unit = call f1($b20.0, $f3)
// [CoreOpt]     let _ = store int32 field($f4, 0 * @32) <- 0
// [CoreOpt]     let %26: int32 = load int32 field($f2, 0 * @32)
// [CoreOpt]     let _ = alloc <m18: array[int32] heap(1)> <- [..] = %26
// [CoreOpt]     jump b71()
// [CoreOpt]   }
// [CoreOpt]   .bb #b27 () {
// [CoreOpt]     let %32: int32 = load int32 field($f4, 0 * @32)
// [CoreOpt]     let _ = store int32 field($f8, 0 * @32) <- %32
// [CoreOpt]     let %34: int32 = load int32 field($f7, 0 * @32)
// [CoreOpt]     let %35: int32 = load int32 field($f4, 0 * @32)
// [CoreOpt]     let %36: int32 = load int32 field($f5, 0 * @32)
// [CoreOpt]     let %37: int32 = load int32 field($f5, 0 * @32)
// [CoreOpt]     let %38: int32 = div(%37, 2)
// [CoreOpt]     let %39: int32 = mul(%38, 2)
// [CoreOpt]     let %40: int32 = sub(%36, %39)
// [CoreOpt]     let %41: int32 = mul(%40, 2)
// [CoreOpt]     let %42: int32 = sub(1, %41)
// [CoreOpt]     let %43: int32 = mul(%35, %42)
// [CoreOpt]     let %44: int32 = add(%34, %43)
// [CoreOpt]     let _ = store int32 field($f7, 0 * @32) <- %44
// [CoreOpt]     let _ = alloc <m19: array[int32] heap(1)> <- [..] = true
// [CoreOpt]     let _ = alloc <m20: array[int32] heap(1)> <- [..] = 0
// [CoreOpt]     jump b80()
// [CoreOpt]   }
// [CoreOpt]   .bb #b28 () {
// [CoreOpt]     let %52: int32 = load int32 field($f7, 0 * @32)
// [CoreOpt]     let %53: int32 = load int32 field($f4, 0 * @32)
// [CoreOpt]     let %54: int32 = load int32 field($f5, 0 * @32)
// [CoreOpt]     let %55: int32 = load int32 field($f5, 0 * @32)
// [CoreOpt]     let %56: int32 = div(%55, 2)
// [CoreOpt]     let %57: int32 = mul(%56, 2)
// [CoreOpt]     let %58: int32 = sub(%54, %57)
// [CoreOpt]     let %59: int32 = mul(%58, 2)
// [CoreOpt]     let %60: int32 = sub(1, %59)
// [CoreOpt]     let %61: int32 = mul(%53, %60)
// [CoreOpt]     let %62: int32 = add(%52, %61)
// [CoreOpt]     let _ = store int32 field($f7, 0 * @32) <- %62
// [CoreOpt]     let _ = alloc <m21: array[int32] heap(1)> <- [..] = true
// [CoreOpt]     let _ = alloc <m22: array[int32] heap(1)> <- [..] = 0
// [CoreOpt]     jump b104()
// [CoreOpt]   }
// [CoreOpt]   .bb #b29 (any) {
// [CoreOpt]     jump b30($b29.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b30 (any) {
// [CoreOpt]     return $b30.0
// [CoreOpt]   }
// [CoreOpt]   .bb #b31 (any) {
// [CoreOpt]     return $b31.0
// [CoreOpt]   }
// [CoreOpt]   .bb #b32 (unit) {
// [CoreOpt]     let %29: int32 = load int32 field($f8, 0 * @32)
// [CoreOpt]     let %30: int32 = load int32 field($f4, 0 * @32)
// [CoreOpt]     let %31: bool = le(%29, %30)
// [CoreOpt]     br %31 b27() b28()
// [CoreOpt]   }
// [CoreOpt]   .bb #b33 (unit) {
// [CoreOpt]     let %49: int32 = load int32 field($f5, 0 * @32)
// [CoreOpt]     let %50: int32 = add(%49, 1)
// [CoreOpt]     let _ = store int32 field($f5, 0 * @32) <- %50
// [CoreOpt]     jump b20($b20.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b34 (unit) {
// [CoreOpt]     let %67: int32 = load int32 field($f5, 0 * @32)
// [CoreOpt]     let %68: int32 = add(%67, 1)
// [CoreOpt]     let _ = store int32 field($f5, 0 * @32) <- %68
// [CoreOpt]     jump b20($b20.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b71 () {
// [CoreOpt]     jump b72(f8.m18)
// [CoreOpt]   }
// [CoreOpt]   .loop #b72 pre #Some(b71) header #b73 {
// [CoreOpt]     .block #b74
// [CoreOpt]     .block #b75
// [CoreOpt]     .block #b76
// [CoreOpt]   }
// [CoreOpt]   .bb #b73 (array[int32]) {
// [CoreOpt]     let %70: int32 = load int32 field($b73.0, 0 * @32)
// [CoreOpt]     let %71: bool = eq(%70, 0)
// [CoreOpt]     br %71 b74() b75()
// [CoreOpt]   }
// [CoreOpt]   .bb #b74 () {
// [CoreOpt]     jump b76(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b75 () {
// [CoreOpt]     let _ = alloc <m71: array[int32] heap(1)> <- [..] = 0
// [CoreOpt]     let %73: unit = call f2(0, $b73.0, f8.m71, $f2)
// [CoreOpt]     jump b77(%73)
// [CoreOpt]   }
// [CoreOpt]   .bb #b76 (unit) {
// [CoreOpt]     jump b32($b76.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b77 (unit) {
// [CoreOpt]     let %74: int32 = load int32 field($f2, 0 * @32)
// [CoreOpt]     let _ = store int32 field($b73.0, 0 * @32) <- %74
// [CoreOpt]     let %76: int32 = load int32 field($f4, 0 * @32)
// [CoreOpt]     let %77: int32 = add(%76, 1)
// [CoreOpt]     let _ = store int32 field($f4, 0 * @32) <- %77
// [CoreOpt]     jump b73($b73.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b80 () {
// [CoreOpt]     jump b81()
// [CoreOpt]   }
// [CoreOpt]   .loop #b81 pre #Some(b80) header #b82 {
// [CoreOpt]     .block #b83
// [CoreOpt]     .block #b84
// [CoreOpt]     .block #b85
// [CoreOpt]     .block #b86
// [CoreOpt]     .block #b87
// [CoreOpt]     .block #b88
// [CoreOpt]     .block #b89
// [CoreOpt]     .block #b90
// [CoreOpt]     .block #b91
// [CoreOpt]   }
// [CoreOpt]   .bb #b82 () {
// [CoreOpt]     let %79: bool = load bool field(f8.m19, 0 * @32)
// [CoreOpt]     let %80: bool = eq(%79, true)
// [CoreOpt]     br %80 b83() b84()
// [CoreOpt]   }
// [CoreOpt]   .bb #b83 () {
// [CoreOpt]     let %81: int32 = load int32 field($b20.0, 0 * @32)
// [CoreOpt]     let %82: bool = eq(%81, $f1)
// [CoreOpt]     br %82 b85() b86()
// [CoreOpt]   }
// [CoreOpt]   .bb #b84 () {
// [CoreOpt]     jump b91(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b85 () {
// [CoreOpt]     let _ = store bool field(f8.m19, 0 * @32) <- false
// [CoreOpt]     let _ = store int32 field($b20.0, 0 * @32) <- 0
// [CoreOpt]     jump b82()
// [CoreOpt]   }
// [CoreOpt]   .bb #b86 () {
// [CoreOpt]     let %85: int32 = load int32 field($f6, 0 * @32)
// [CoreOpt]     let _ = store int32 field(f8.m20, 0 * @32) <- %85
// [CoreOpt]     let %87: unit = call f4(0, $b20.0, $f6)
// [CoreOpt]     let %88: int32 = load int32 field($b20.0, 0 * @32)
// [CoreOpt]     let %89: int32 = load int32 field(f8.m20, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($f6, %88 * @32) <- %89
// [CoreOpt]     let %91: int32 = load int32 field($b20.0, 0 * @32)
// [CoreOpt]     let %92: int32 = load int32 field($b20.0, 0 * @32)
// [CoreOpt]     let %93: int32 = load int32 offset($f3, %92 * @32)
// [CoreOpt]     let %94: int32 = sub(%93, 1)
// [CoreOpt]     let _ = store int32 offset($f3, %91 * @32) <- %94
// [CoreOpt]     let %96: int32 = load int32 field($b20.0, 0 * @32)
// [CoreOpt]     let %97: int32 = load int32 offset($f3, %96 * @32)
// [CoreOpt]     let %98: bool = le(1, %97)
// [CoreOpt]     br %98 b87() b88()
// [CoreOpt]   }
// [CoreOpt]   .bb #b87 () {
// [CoreOpt]     let _ = store bool field(f8.m19, 0 * @32) <- false
// [CoreOpt]     jump b82()
// [CoreOpt]   }
// [CoreOpt]   .bb #b88 () {
// [CoreOpt]     let %100: int32 = load int32 field($b20.0, 0 * @32)
// [CoreOpt]     let %101: int32 = add(%100, 1)
// [CoreOpt]     let _ = store int32 field($b20.0, 0 * @32) <- %101
// [CoreOpt]     jump b82()
// [CoreOpt]   }
// [CoreOpt]   .bb #b89 (any) {
// [CoreOpt]     jump b90($b89.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b90 (any) {
// [CoreOpt]     jump b91($b90.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b91 (any) {
// [CoreOpt]     jump b33($b91.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b104 () {
// [CoreOpt]     jump b105()
// [CoreOpt]   }
// [CoreOpt]   .loop #b105 pre #Some(b104) header #b106 {
// [CoreOpt]     .block #b107
// [CoreOpt]     .block #b108
// [CoreOpt]     .block #b109
// [CoreOpt]     .block #b110
// [CoreOpt]     .block #b111
// [CoreOpt]     .block #b112
// [CoreOpt]     .block #b113
// [CoreOpt]     .block #b114
// [CoreOpt]     .block #b115
// [CoreOpt]   }
// [CoreOpt]   .bb #b106 () {
// [CoreOpt]     let %103: bool = load bool field(f8.m21, 0 * @32)
// [CoreOpt]     let %104: bool = eq(%103, true)
// [CoreOpt]     br %104 b107() b108()
// [CoreOpt]   }
// [CoreOpt]   .bb #b107 () {
// [CoreOpt]     let %105: int32 = load int32 field($b20.0, 0 * @32)
// [CoreOpt]     let %106: bool = eq(%105, $f1)
// [CoreOpt]     br %106 b109() b110()
// [CoreOpt]   }
// [CoreOpt]   .bb #b108 () {
// [CoreOpt]     jump b115(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b109 () {
// [CoreOpt]     let _ = store bool field(f8.m21, 0 * @32) <- false
// [CoreOpt]     let _ = store int32 field($b20.0, 0 * @32) <- 0
// [CoreOpt]     jump b106()
// [CoreOpt]   }
// [CoreOpt]   .bb #b110 () {
// [CoreOpt]     let %109: int32 = load int32 field($f6, 0 * @32)
// [CoreOpt]     let _ = store int32 field(f8.m22, 0 * @32) <- %109
// [CoreOpt]     let %111: unit = call f6(0, $b20.0, $f6)
// [CoreOpt]     let %112: int32 = load int32 field($b20.0, 0 * @32)
// [CoreOpt]     let %113: int32 = load int32 field(f8.m22, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($f6, %112 * @32) <- %113
// [CoreOpt]     let %115: int32 = load int32 field($b20.0, 0 * @32)
// [CoreOpt]     let %116: int32 = load int32 field($b20.0, 0 * @32)
// [CoreOpt]     let %117: int32 = load int32 offset($f3, %116 * @32)
// [CoreOpt]     let %118: int32 = sub(%117, 1)
// [CoreOpt]     let _ = store int32 offset($f3, %115 * @32) <- %118
// [CoreOpt]     let %120: int32 = load int32 field($b20.0, 0 * @32)
// [CoreOpt]     let %121: int32 = load int32 offset($f3, %120 * @32)
// [CoreOpt]     let %122: bool = le(1, %121)
// [CoreOpt]     br %122 b111() b112()
// [CoreOpt]   }
// [CoreOpt]   .bb #b111 () {
// [CoreOpt]     let _ = store bool field(f8.m21, 0 * @32) <- false
// [CoreOpt]     jump b106()
// [CoreOpt]   }
// [CoreOpt]   .bb #b112 () {
// [CoreOpt]     let %124: int32 = load int32 field($b20.0, 0 * @32)
// [CoreOpt]     let %125: int32 = add(%124, 1)
// [CoreOpt]     let _ = store int32 field($b20.0, 0 * @32) <- %125
// [CoreOpt]     jump b106()
// [CoreOpt]   }
// [CoreOpt]   .bb #b113 (any) {
// [CoreOpt]     jump b114($b113.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b114 (any) {
// [CoreOpt]     jump b115($b114.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b115 (any) {
// [CoreOpt]     jump b34($b115.0)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] do_flip.576 is inlining Call(ty=Unit, f=f2, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0), Mem(fref=f3, mref=m0), FnParam(fref=f3, fpref=$f.1)])
// [CoreOpt] shifted callee .fn flip_loop.577 #f2 : fn(int32, array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b9 {
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     jump b10($f0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b10 pre #Some(b9) header #b11 {
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b13
// [CoreOpt]     .block #b14
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 (int32) {
// [CoreOpt]     let %9: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %10: int32 = div(%9, 2)
// [CoreOpt]     let %11: bool = le($b11.0, %10)
// [CoreOpt]     br %11 b12() b13()
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     let %12: int32 = load int32 offset($f3, $b11.0 * @32)
// [CoreOpt]     let _ = store int32 field($f2, 0 * @32) <- %12
// [CoreOpt]     let %14: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %15: int32 = sub(%14, $b11.0)
// [CoreOpt]     let %16: int32 = load int32 offset($f3, %15 * @32)
// [CoreOpt]     let _ = store int32 offset($f3, $b11.0 * @32) <- %16
// [CoreOpt]     let %18: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %19: int32 = sub(%18, $b11.0)
// [CoreOpt]     let %20: int32 = load int32 field($f2, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($f3, %19 * @32) <- %20
// [CoreOpt]     let %22: int32 = add($b11.0, 1)
// [CoreOpt]     jump b11(%22)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 () {
// [CoreOpt]     jump b14(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 (any) {
// [CoreOpt]     return $b14.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f8
// [CoreOpt] Remove dead function: f0
// [CoreOpt] Remove dead function: f5
// [CoreOpt] Remove dead function: f3
// [CoreOpt] Remove dead function: f7
// [CoreOpt] LVN subst Insn(iref=%6) with Insn(iref=%3)
// [CoreOpt] LVN subst Insn(iref=%6) with Insn(iref=%3)
// [CoreOpt] LVN subst Insn(iref=%55) with Insn(iref=%54)
// [CoreOpt] LVN subst Insn(iref=%92) with Insn(iref=%91)
// [CoreOpt] LVN subst Insn(iref=%37) with Insn(iref=%36)
// [CoreOpt] LVN subst Insn(iref=%116) with Insn(iref=%115)
// [CoreOpt] LVN subst Insn(iref=%4) with Insn(iref=%2)
// [CoreOpt2] LVN subst Insn(iref=%129) with Insn(iref=%130)
// [CoreOpt2] LVN subst Insn(iref=%137) with Insn(iref=%139)
// [CoreOpt2] LVN subst Insn(iref=%147) with Insn(iref=%149)
// [CoreOpt2] LVN subst Insn(iref=%20) with Insn(iref=%23)
