// [Asm] pre_assigned_registers: FnParam(fref=f6, fpref=$f.1) -> v3, Insn(iref=%3) -> v8, Insn(iref=%7) -> v12, BlockParam(bref=b3, bpref=$b.0) -> v13, Insn(iref=%2) -> v7, FnParam(fref=f6, fpref=$f.0) -> v2, FnParam(fref=f6, fpref=$f.2) -> v4, Insn(iref=%1) -> v6, Insn(iref=%6) -> v11, Self(fref=f6) -> v0, Insn(iref=%5) -> v10, Insn(iref=%0) -> v5, Insn(iref=%4) -> v9
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f6, fpref=$f.0), Insn(iref=%1)])
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v2, v4, v18, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v2, v19, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v4, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v2, v4, v16, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v4, v17, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v3]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of move_perm1_forward197l6_6"];
// [Asm]   r0 [label="v8 ← a0", color=green];
// [Asm]   r20 [label="a4", color=blue];
// [Asm]   r23 [label="a7", color=blue];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v17 ← a4", color=green];
// [Asm]   r26 [label="v5 ← a0", color=green];
// [Asm]   r27 [label="v6 ← a0", color=green];
// [Asm]   r6 [label="v19 ← a0", color=green];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="v2 ← a3", color=green];
// [Asm]   r11 [label="a0", color=blue];
// [Asm]   r7 [label="v9 ← a0", color=green];
// [Asm]   r10 [label="v11 ← a0", color=green];
// [Asm]   r22 [label="a6", color=blue];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r8 [label="v16 ← a4", color=green];
// [Asm]   r5 [label="v18 ← a0", color=green];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r24 [label="v12 ← a0", color=green];
// [Asm]   r25 [label="v13 ← a0", color=green];
// [Asm]   r2 [label="v4 ← a2", color=green];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="a3", color=blue];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r11 -- r14;
// [Asm]   r1 -- r7;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r3 -- r11;
// [Asm]   r11 -- r23;
// [Asm]   r1 -- r13;
// [Asm]   r11 -- r22;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r11 -- r18;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r7 -- r9;
// [Asm]   r3 -- r5;
// [Asm]   r11 -- r19;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r13;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r14;
// [Asm]   r3 -- r27;
// [Asm]   r4 -- r7;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r8;
// [Asm]   r11 -- r15;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r27;
// [Asm]   r11 -- r21;
// [Asm]   comment = "0:v8-> 1:v2-> 2:v4-> 3:zero-> 4:v3-> 5:v18-> 6:v19-> 7:v9-> 8:v16-> 9:v17-> 26:v5-> 27:v6-> 10:v11-> 11:a0-> 12:a1-> 13:a2-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 19:a3-> 20:a4-> 21:a5-> 22:a6-> 23:a7-> 24:v12-> 25:v13"
// [Asm]   comment = "v8<-a0;v17<-a4;v5<-a0;v6<-a0;v19<-a0;v3<-a1;v2<-a3;v9<-a0;v11<-a0;v16<-a4;v18<-a0;v12<-a0;v13<-a0;v4<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of move_perm1_forward197l6_6"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v8, v2, 1 ->   addi a0, a3, 1
// [Asm] subst   slliw v18, v8, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v19, v4, v18 ->   add a0, a2, a0
// [Asm] subst   lw v9, 0(v19) ->   lw a0, 0(a0)
// [Asm] subst   slliw v16, v2, 2 ->   slliw a4, a3, 2
// [Asm] subst   add v17, v4, v16 ->   add a4, a2, a4
// [Asm] subst   sw v9, 0(v17) ->   sw a0, 0(a4)
// [Asm] subst   addi v11, v2, 1 ->   addi a0, a3, 1
// [Asm] subst   call move_perm1_forward197l6_6 ->   call move_perm1_forward197l6_6
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   j .move_perm1_forward197l6_6_3 ->   j .move_perm1_forward197l6_6_3
// [Asm] subst   mv v2, a0 ->   mv a3, a0
// [Asm] subst   lw v5, 0(v3) ->   lw a0, 0(a1)
// [Asm] subst   addi v6, v5, -1 ->   addi a0, a0, -1
// [Asm] subst   blt v6, v2, .move_perm1_forward197l6_6_2 ->   blt a0, a3, .move_perm1_forward197l6_6_2
// [Asm] pre_assigned_registers: FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v13, FnParam(fref=f4, fpref=$f.3) -> v5, Insn(iref=%9) -> v20, Insn(iref=%8) -> v19, Insn(iref=%10) -> v21, BlockParam(bref=b0, bpref=$b.3) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> v8, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%5) -> v16, Insn(iref=%0) -> v10, Insn(iref=%4) -> v15, Insn(iref=%3) -> v14, Insn(iref=%13) -> v24, Insn(iref=%7) -> v18, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%2) -> v12, Insn(iref=%1) -> v11, Insn(iref=%11) -> v22, Self(fref=f4) -> v0, Insn(iref=%6) -> v17, Insn(iref=%12) -> v23
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%1)])
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v10, zero, v7, v8, v41, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, v5, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v9 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v38]
// [Asm] live_set: [zero, v7, v8, v38, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [v39]
// [Asm] live_set: [zero, v7, v8, v6, v9, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16, zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [zero, v7, v8, v6, v17, v9]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v33]
// [Asm] live_set: [zero, v7, v8, v6, v9, v33]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [zero, v7, v8, v6, v9, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v18, zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v18, zero, v7, v8, v6, v31, v9]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v18, zero, v7, v8, v32, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [zero, v20, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v21, zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v21, zero, v22, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v26]
// [Asm] live_set: [zero, v26, v22, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [zero, v22, v27, v8, v7, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v7, v24, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v24]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of flip_loop99l5_4"];
// [Asm]   r0 [label="v10 ← a0", color=green];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r26 [label="v32 ← a5", color=green];
// [Asm]   r6 [label="v41 ← a5", color=green];
// [Asm]   r13 [label="v4 ← a2", color=green];
// [Asm]   r4 [label="v6 ← a3", color=green];
// [Asm]   r29 [label="v22 ← a5", color=green];
// [Asm]   r7 [label="v11 ← a0", color=green];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r8 [label="v2 ← a4", color=green];
// [Asm]   r5 [label="v9 ← a4", color=green];
// [Asm]   r24 [label="v18 ← a0", color=green];
// [Asm]   r32 [label="v24 ← a0", color=green];
// [Asm]   r15 [label="v13 ← a0", color=green];
// [Asm]   r31 [label="v27 ← a0", color=green];
// [Asm]   r17 [label="v38 ← a0", color=green];
// [Asm]   r12 [label="v3 ← a1", color=green];
// [Asm]   r20 [label="v16 ← a0", color=green];
// [Asm]   r23 [label="v34 ← a0", color=green];
// [Asm]   r3 [label="v8 ← a2", color=green];
// [Asm]   r27 [label="v20 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v21 ← a0", color=green];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r22 [label="v33 ← a0", color=green];
// [Asm]   r14 [label="v5 ← a0", color=green];
// [Asm]   r30 [label="v26 ← a0", color=green];
// [Asm]   r25 [label="v31 ← a5", color=green];
// [Asm]   r2 [label="v7 ← a1", color=green];
// [Asm]   r16 [label="a0", color=blue];
// [Asm]   r18 [label="v39 ← a0", color=green];
// [Asm]   r19 [label="v14 ← a0", color=green];
// [Asm]   r21 [label="v17 ← a0", color=green];
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r5 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r5 -- r18;
// [Asm]   r3 -- r32;
// [Asm]   r29 -- r31;
// [Asm]   r1 -- r17;
// [Asm]   r5 -- r29;
// [Asm]   r1 -- r20;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r5 -- r31;
// [Asm]   r1 -- r31;
// [Asm]   r4 -- r21;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r4 -- r28;
// [Asm]   r9 -- r12;
// [Asm]   r5 -- r32;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r4 -- r29;
// [Asm]   r28 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r25;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r11;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r29 -- r30;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r32;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r24 -- r26;
// [Asm]   r1 -- r28;
// [Asm]   r3 -- r22;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r29;
// [Asm]   r13 -- r14;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r25;
// [Asm]   r12 -- r14;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r26;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v10-> 1:zero-> 2:v7-> 3:v8-> 4:v6-> 5:v9-> 6:v41-> 7:v11-> 17:v38-> 18:v39-> 19:v14-> 20:v16-> 21:v17-> 22:v33-> 23:v34-> 24:v18-> 25:v31-> 26:v32-> 27:v20-> 28:v21-> 29:v22-> 30:v26-> 31:v27-> 14:v5-> 13:v4-> 12:v3-> 8:v2-> 32:v24-> 11:a3-> 9:a2-> 10:a1-> 15:v13-> 16:a0"
// [Asm]   comment = "v10<-a0;v32<-a5;v41<-a5;v4<-a2;v6<-a3;v22<-a5;v11<-a0;v2<-a4;v9<-a4;v18<-a0;v24<-a0;v13<-a0;v27<-a0;v38<-a0;v3<-a1;v16<-a0;v34<-a0;v8<-a2;v20<-a0;v21<-a0;v33<-a0;v5<-a0;v26<-a0;v31<-a5;v7<-a1;v39<-a0;v14<-a0;v17<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of flip_loop99l5_4"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v10, 0(v8) ->   lw a0, 0(a2)
// [Asm] subst   li v41, 2 ->   li a5, 2
// [Asm] subst   div v11, v10, v41 ->   div a0, a0, a5
// [Asm] subst   blt v11, v6, .flip_loop99l5_4_2 ->   blt a0, a3, .flip_loop99l5_4_2
// [Asm] subst   mv v2, a0 ->   mv a4, a0
// [Asm] subst   mv v5, a3 ->   mv a0, a3
// [Asm] subst   mv v6, v2 ->   mv a3, a4
// [Asm] subst   mv v9, v5 ->   mv a4, a0
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   slliw v38, v6, 2 ->   slliw a0, a3, 2
// [Asm] subst   add v39, v9, v38 ->   add a0, a4, a0
// [Asm] subst   lw v14, 0(v39) ->   lw a0, 0(a0)
// [Asm] subst   sw v14, 0(v7) ->   sw a0, 0(a1)
// [Asm] subst   lw v16, 0(v8) ->   lw a0, 0(a2)
// [Asm] subst   sub v17, v16, v6 ->   sub a0, a0, a3
// [Asm] subst   slliw v33, v17, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v34, v9, v33 ->   add a0, a4, a0
// [Asm] subst   lw v18, 0(v34) ->   lw a0, 0(a0)
// [Asm] subst   slliw v31, v6, 2 ->   slliw a5, a3, 2
// [Asm] subst   add v32, v9, v31 ->   add a5, a4, a5
// [Asm] subst   sw v18, 0(v32) ->   sw a0, 0(a5)
// [Asm] subst   lw v20, 0(v8) ->   lw a0, 0(a2)
// [Asm] subst   sub v21, v20, v6 ->   sub a0, a0, a3
// [Asm] subst   lw v22, 0(v7) ->   lw a5, 0(a1)
// [Asm] subst   slliw v26, v21, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v27, v9, v26 ->   add a0, a4, a0
// [Asm] subst   sw v22, 0(v27) ->   sw a5, 0(a0)
// [Asm] subst   addi v24, v6, 1 ->   addi a0, a3, 1
// [Asm] subst   mv v6, v24 ->   mv a3, a0
// [Asm] subst   j .flip_loop99l5_4_0 ->   j .flip_loop99l5_4_0
// [Asm] pre_assigned_registers: BlockParam(bref=b1, bpref=$b.0) -> v15, FnParam(fref=f8, fpref=$f.0) -> v2, Mem(fref=f8, mref=m13) -> v7, Insn(iref=%9) -> v24, Mem(fref=f8, mref=m6) -> v3, Insn(iref=%8) -> v23, Insn(iref=%10) -> v25, Mem(fref=f8, mref=m5) -> v9, Insn(iref=%14) -> v14, Mem(fref=f8, mref=m4) -> v4, Insn(iref=%5) -> v20, Mem(fref=f8, mref=m1) -> v8, Insn(iref=%4) -> v19, Mem(fref=f8, mref=m8) -> v5, Insn(iref=%3) -> v18, Insn(iref=%13) -> v13, Insn(iref=%7) -> v22, Mem(fref=f8, mref=m0) -> v6, Mem(fref=f8, mref=m7) -> v12, Insn(iref=%2) -> v17, Insn(iref=%1) -> v16, Insn(iref=%11) -> v26, Mem(fref=f8, mref=m3) -> v11, Mem(fref=f8, mref=m2) -> v10, Self(fref=f8) -> v0, Insn(iref=%6) -> v21, Insn(iref=%12) -> v27
// [Asm] defs: [v42]
// [Asm] live_set: [zero, v42, v15, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v6]
// [Asm] live_set: [zero, v6, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v6, s11, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v6, a1, s11, v15, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v6, a1, s11, v15, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, a2, v6, a1, s11, v15, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, v6, v15, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v40]
// [Asm] live_set: [v40, zero, v6, v15, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v8, v6, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v8, v6, s11, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v8, v6, a1, s11, v15, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v8, v6, a1, s11, v15, v2]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v8, a2, v6, a1, s11, v15, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, v8, v6, v15, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, v8, v6, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v10, zero, v8, v6, v15, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v8, v6, v15, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v8, v6, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v10, zero, v8, v6, v15, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v8, v6, v15, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v11, v10, zero, v8, v4, v6, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v10, zero, v8, v4, v6, v15, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v8, v4, v6, v15, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v11, v10, zero, v8, v4, v6, v15, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v10, zero, v8, v4, v6, v15, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v8, v4, v6, v15, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v11, v10, v8, v4, v6, v15, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v11, v10, v8, v4, v6, v15, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v10, v8, v4, v6, v15, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v3, v11, v10, v8, v4, v6, v12, v15, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v11, v10, v8, v4, v6, s11, v12, v15, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v2, v3, v11, v10, v8, v4, v6, s11, v12, v15, v9, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v10, v8, v4, v6, s11, v12, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v8, v4, v6, s11, v12, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v8, v4, s11, v12, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v8, v4, s11, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v4, s11, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v4, s11, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v4, s11, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v4, s11, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v4, s11, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v11, v4, s11, v12, v3]
// [Asm] move_origin: [v12]
// [Asm] defined: s10 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v11, v4, s11, v31, v3]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v4, s11, v31, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v4, s11, v31, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v4, s11, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v24]
// [Asm] live_set: [v11, v4, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v4, s11]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v4, s11]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v25, s11, v26]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v25, v5, v26]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v25, v5, v26]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v26]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v45]
// [Asm] live_set: [zero, v45, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v7, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v7, a1, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v7, a1, s11, v2]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v7, a2, a1, s11, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, v7, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v7, s11, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v7, a1, s11, v2]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v7, a2, a1, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v7, s11, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v7, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v15, s11, zero, v2]
// [Asm] move_origin: [v7]
// [Asm] defined: v15 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of fannkuch1l0_8"];
// [Asm]   r0 [label="v42 ← a0", color=green];
// [Asm]   r33 [label="v5 ← a2", color=green];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r26 [label="v12 ← a3", color=green];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="v2 ← s1", color=green];
// [Asm]   r29 [label="v31 ← a1", color=green];
// [Asm]   r35 [label="v7 ← s0", color=green];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="v6 ← s2", color=green];
// [Asm]   r36 [label="v14 ← a0", color=green];
// [Asm]   r24 [label="v9 ← a1", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r32 [label="v26 ← a1", color=green];
// [Asm]   r31 [label="v25 ← a0", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r20 [label="v8 ← s3", color=green];
// [Asm]   r23 [label="v4 ← s5", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r27 [label="v34 ← a4", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="s10", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r34 [label="v45 ← a0", color=green];
// [Asm]   r22 [label="v11 ← s4", color=green];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r30 [label="v24 ← a0", color=green];
// [Asm]   r25 [label="v3 ← a2", color=green];
// [Asm]   r2 [label="v15 ← s0", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v40 ← a0", color=green];
// [Asm]   r21 [label="v10 ← a0", color=green];
// [Asm]   r21 -- r24;
// [Asm]   r5 -- r21;
// [Asm]   r16 -- r20;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r6 -- r35;
// [Asm]   r11 -- r35;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r17 -- r35;
// [Asm]   r5 -- r18;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r18 -- r35;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r35;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r8;
// [Asm]   r20 -- r23;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r26 -- r27;
// [Asm]   r22 -- r25;
// [Asm]   r20 -- r22;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r25 -- r29;
// [Asm]   r9 -- r23;
// [Asm]   r2 -- r12;
// [Asm]   r22 -- r27;
// [Asm]   r8 -- r23;
// [Asm]   r20 -- r27;
// [Asm]   r10 -- r22;
// [Asm]   r1 -- r2;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r9 -- r20;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r3 -- r17;
// [Asm]   r12 -- r23;
// [Asm]   r18 -- r20;
// [Asm]   r15 -- r23;
// [Asm]   r13 -- r35;
// [Asm]   r3 -- r35;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r35;
// [Asm]   r6 -- r23;
// [Asm]   r0 -- r4;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r23 -- r29;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r7 -- r29;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r11 -- r20;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r20 -- r26;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r22;
// [Asm]   r15 -- r35;
// [Asm]   r7 -- r20;
// [Asm]   r5 -- r19;
// [Asm]   r22 -- r26;
// [Asm]   r1 -- r13;
// [Asm]   r11 -- r23;
// [Asm]   r11 -- r22;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r8 -- r20;
// [Asm]   r5 -- r11;
// [Asm]   r24 -- r26;
// [Asm]   r6 -- r20;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r14 -- r35;
// [Asm]   r23 -- r26;
// [Asm]   r12 -- r20;
// [Asm]   r7 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r23 -- r25;
// [Asm]   r2 -- r14;
// [Asm]   r32 -- r33;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r13 -- r23;
// [Asm]   r23 -- r30;
// [Asm]   r0 -- r3;
// [Asm]   r22 -- r28;
// [Asm]   r7 -- r15;
// [Asm]   r16 -- r35;
// [Asm]   r12 -- r22;
// [Asm]   r8 -- r35;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r4 -- r36;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r25;
// [Asm]   r7 -- r16;
// [Asm]   r31 -- r33;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r7 -- r12;
// [Asm]   r15 -- r20;
// [Asm]   r3 -- r23;
// [Asm]   r7 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   r2 -- r27;
// [Asm]   r1 -- r24;
// [Asm]   r18 -- r23;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   r12 -- r35;
// [Asm]   r25 -- r28;
// [Asm]   r23 -- r31;
// [Asm]   r14 -- r20;
// [Asm]   r1 -- r12;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r32;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r34;
// [Asm]   r4 -- r35;
// [Asm]   r4 -- r21;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r21 -- r27;
// [Asm]   r7 -- r10;
// [Asm]   r17 -- r22;
// [Asm]   r2 -- r8;
// [Asm]   r24 -- r27;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r3 -- r27;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r22;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r13 -- r22;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r24;
// [Asm]   r21 -- r22;
// [Asm]   r7 -- r8;
// [Asm]   r10 -- r35;
// [Asm]   r16 -- r23;
// [Asm]   r14 -- r22;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r16 -- r22;
// [Asm]   r17 -- r20;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r16;
// [Asm]   r20 -- r24;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r9 -- r35;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r15 -- r22;
// [Asm]   r25 -- r27;
// [Asm]   r14 -- r23;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r22 -- r29;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r25 -- r26;
// [Asm]   r3 -- r28;
// [Asm]   r18 -- r22;
// [Asm]   r23 -- r27;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r13 -- r20;
// [Asm]   r22 -- r24;
// [Asm]   r20 -- r25;
// [Asm]   r6 -- r8;
// [Asm]   r9 -- r22;
// [Asm]   r4 -- r11;
// [Asm]   r17 -- r23;
// [Asm]   r22 -- r30;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r21 -- r25;
// [Asm]   r23 -- r28;
// [Asm]   r10 -- r23;
// [Asm]   r22 -- r23;
// [Asm]   r7 -- r11;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r21 -- r26;
// [Asm]   r3 -- r36;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r31 -- r32;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r4 -- r26;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v42-> 1:zero-> 2:v15-> 3:s11-> 4:v2-> 5:v6-> 6:a1-> 7:a0-> 8:a2-> 20:v8-> 22:v11-> 23:v4-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 35:v7-> 13:t4-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 21:v10-> 24:v9-> 25:v3-> 26:v12-> 27:v34-> 19:v40-> 29:v31-> 28:s10-> 36:v14-> 30:v24-> 34:v45-> 31:v25-> 32:v26-> 33:v5"
// [Asm]   comment = "v42<-a0;v5<-a2;v12<-a3;v2<-s1;v31<-a1;v7<-s0;v6<-s2;v14<-a0;v9<-a1;v26<-a1;v25<-a0;v8<-s3;v4<-s5;v34<-a4;v45<-a0;v11<-s4;v24<-a0;v3<-a2;v15<-s0;v40<-a0;v10<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of fannkuch1l0_8"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v42, v2, 2 ->   slliw a0, s1, 2
// [Asm] subst   sub v6, s11, v42 ->   sub s2, s11, a0
// [Asm] subst   andi s11, v6, -8 ->   andi s11, s2, -8
// [Asm] subst   mv a1, v2 ->   mv a1, s1
// [Asm] subst   mv a0, v6 ->   mv a0, s2
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   slliw v40, v2, 2 ->   slliw a0, s1, 2
// [Asm] subst   sub v8, s11, v40 ->   sub s3, s11, a0
// [Asm] subst   andi s11, v8, -8 ->   andi s11, s3, -8
// [Asm] subst   mv a1, v2 ->   mv a1, s1
// [Asm] subst   mv a0, v8 ->   mv a0, s3
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   addi v10, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi s11, v10, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v10) ->   sw zero, 0(a0)
// [Asm] subst   addi v11, s11, -4 ->   addi s4, s11, -4
// [Asm] subst   andi s11, v11, -8 ->   andi s11, s4, -8
// [Asm] subst   sw zero, 0(v11) ->   sw zero, 0(s4)
// [Asm] subst   addi v4, s11, -4 ->   addi s5, s11, -4
// [Asm] subst   andi s11, v4, -8 ->   andi s11, s5, -8
// [Asm] subst   sw zero, 0(v4) ->   sw zero, 0(s5)
// [Asm] subst   addi v9, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v9, -8 ->   andi s11, a1, -8
// [Asm] subst   sw zero, 0(v9) ->   sw zero, 0(a1)
// [Asm] subst   addi v3, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a2, -8
// [Asm] subst   sw v2, 0(v3) ->   sw s1, 0(a2)
// [Asm] subst   addi v12, s11, -72 ->   addi a3, s11, -72
// [Asm] subst   andi s11, v12, -8 ->   andi s11, a3, -8
// [Asm] subst   la v34, compute40_19 ->   la a4, compute40_19
// [Asm] subst   sd v34, 0(v12) ->   sd a4, 0(a3)
// [Asm] subst   sd v2, 8(v12) ->   sd s1, 8(a3)
// [Asm] subst   sd v6, 16(v12) ->   sd s2, 16(a3)
// [Asm] subst   sd v15, 24(v12) ->   sd s0, 24(a3)
// [Asm] subst   sd v8, 32(v12) ->   sd s3, 32(a3)
// [Asm] subst   sd v10, 40(v12) ->   sd a0, 40(a3)
// [Asm] subst   sd v11, 48(v12) ->   sd s4, 48(a3)
// [Asm] subst   sd v4, 56(v12) ->   sd s5, 56(a3)
// [Asm] subst   sd v9, 64(v12) ->   sd a1, 64(a3)
// [Asm] subst   mv s10, v12 ->   mv s10, a3
// [Asm] subst   ld v31, 0(v12) ->   ld a1, 0(a3)
// [Asm] subst   mv a0, v3 ->   mv a0, a2
// [Asm] subst   jalr v31 ->   jalr a1
// [Asm] subst   lw v25, 0(v11) ->   lw a0, 0(s4)
// [Asm] subst   lw v26, 0(v4) ->   lw a1, 0(s5)
// [Asm] subst   addi v5, s11, -8 ->   addi a2, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a2, -8
// [Asm] subst   sw v25, 0(v5) ->   sw a0, 0(a2)
// [Asm] subst   sw v26, 4(v5) ->   sw a1, 4(a2)
// [Asm] subst   mv a0, v5 ->   mv a0, a2
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v2, a0 ->   mv s1, a0
// [Asm] subst   slliw v45, v2, 2 ->   slliw a0, s1, 2
// [Asm] subst   sub v7, s11, v45 ->   sub s0, s11, a0
// [Asm] subst   andi s11, v7, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a1, v2 ->   mv a1, s1
// [Asm] subst   mv a0, v7 ->   mv a0, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v7 ->   mv a1, s0
// [Asm] subst   mv a2, v2 ->   mv a2, s1
// [Asm] subst   call init_arr9l2_0 ->   call init_arr9l2_0
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v6, Insn(iref=%1) -> v3, Insn(iref=%3) -> v5, Self(fref=f9) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main262l1_9"];
// [Asm]   r0 [label="v11 ← a0", color=green];
// [Asm]   r3 [label="t1", color=blue];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="t4", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="t2", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r14 [label="v2 ← a0", color=green];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="t3", color=blue];
// [Asm]   r15 [label="v3 ← s0", color=green];
// [Asm]   r2 [label="t0", color=blue];
// [Asm]   r16 [label="v4 ← a0", color=green];
// [Asm]   r18 [label="v6 ← a0", color=green];
// [Asm]   r17 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r4 -- r15;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r15 -- r17;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r8 -- r15;
// [Asm]   r9 -- r15;
// [Asm]   r1 -- r4;
// [Asm]   r7 -- r15;
// [Asm]   r10 -- r15;
// [Asm]   r12 -- r15;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r11 -- r15;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r3;
// [Asm]   r15 -- r16;
// [Asm]   r14 -- r15;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v11-> 1:a0-> 2:t0-> 15:v3-> 3:t1-> 4:t2-> 5:t3-> 6:t4-> 7:a1-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:v2-> 16:v4-> 17:v5-> 18:v6"
// [Asm]   comment = "v11<-a0;v2<-a0;v3<-s0;v4<-a0;v6<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main262l1_9"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v11, 9 ->   li a0, 9
// [Asm] subst   call fannkuch1l0_8 ->   call fannkuch1l0_8
// [Asm] subst   lw v3, 0(v2) ->   lw s0, 0(a0)
// [Asm] subst   lw v4, 4(v2) ->   lw a0, 4(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v3 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v12, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v11, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v8
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [v14]
// [Asm] live_set: [v6, v5, v14, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v6, v5, v15, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v6, v12, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v12]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init_arr9l2_0"];
// [Asm]   r8 [label="a0", color=blue];
// [Asm]   r0 [label="v14 ← a0", color=green];
// [Asm]   r5 [label="v15 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r2 [label="v5 ← a2", color=green];
// [Asm]   r9 [label="v2 ← a3", color=green];
// [Asm]   r6 [label="v12 ← a0", color=green];
// [Asm]   r13 [label="v4 ← a0", color=green];
// [Asm]   r4 [label="v7 ← a3", color=green];
// [Asm]   r1 [label="v6 ← a1", color=green];
// [Asm]   r11 [label="a1", color=blue];
// [Asm]   r7 [label="v8 ← a0", color=green];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r12 [label="v3 ← a1", color=green];
// [Asm]   r14 [label="v10 ← a0", color=green];
// [Asm]   r9 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r12 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r3;
// [Asm]   r10 -- r12;
// [Asm]   r3 -- r13;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r1 -- r7;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r9;
// [Asm]   r2 -- r13;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r13;
// [Asm]   r9 -- r10;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r9 -- r13;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   comment = "0:v14-> 1:v6-> 2:v5-> 3:zero-> 4:v7-> 5:v15-> 7:v8-> 6:v12-> 13:v4-> 12:v3-> 9:v2-> 10:a2-> 11:a1-> 8:a0-> 14:v10"
// [Asm]   comment = "v14<-a0;v15<-a0;v5<-a2;v2<-a3;v12<-a0;v4<-a0;v7<-a3;v6<-a1;v8<-a0;v3<-a1;v10<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init_arr9l2_0"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v14, v5, 2 ->   slliw a0, a2, 2
// [Asm] subst   add v15, v6, v14 ->   add a0, a1, a0
// [Asm] subst   sw v5, 0(v15) ->   sw a2, 0(a0)
// [Asm] subst   addi v12, v5, 1 ->   addi a0, a2, 1
// [Asm] subst   mv v5, v12 ->   mv a2, a0
// [Asm] subst   j .init_arr9l2_0_0 ->   j .init_arr9l2_0_0
// [Asm] subst   addi v8, v7, -1 ->   addi a0, a3, -1
// [Asm] subst   blt v8, v5, .init_arr9l2_0_2 ->   blt a0, a2, .init_arr9l2_0_2
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v2, a0 ->   mv a3, a0
// [Asm] subst   mv v4, a2 ->   mv a0, a2
// [Asm] subst   mv v5, v2 ->   mv a2, a3
// [Asm] subst   mv v7, v4 ->   mv a3, a0
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v54, Insn(iref=%41) -> v24, Insn(iref=%33) -> v36, Insn(iref=%63) -> v93, BlockParam(bref=b10, bpref=$b.0) -> v45, Insn(iref=%8) -> v46, Insn(iref=%10) -> v48, BlockParam(bref=b34, bpref=$b.0) -> v44, Mem(fref=f19, mref=m31) -> v13, Insn(iref=%25) -> v64, Insn(iref=%39) -> v43, Insn(iref=%59) -> v89, BlockParam(bref=b40, bpref=$b.2) -> v21, Insn(iref=%4) -> v28, Insn(iref=%56) -> v86, Insn(iref=%49) -> v100, Mem(fref=f19, mref=m0) -> v11, Insn(iref=%42) -> v103, Insn(iref=%65) -> v98, Insn(iref=%68) -> v97, Insn(iref=%26) -> v65, BlockParam(bref=b46, bpref=$b.5) -> v71, BlockParam(bref=b53, bpref=$b.0) -> v99, BlockParam(bref=b9, bpref=$b.0) -> v26, Insn(iref=%31) -> v34, Insn(iref=%64) -> v94, Insn(iref=%38) -> v42, Insn(iref=%16) -> v55, Insn(iref=%53) -> v83, Insn(iref=%54) -> v84, Insn(iref=%60) -> v90, Insn(iref=%67) -> v96, Insn(iref=%5) -> v29, Insn(iref=%19) -> v58, FreeVar(fvref=^6) -> v8, Insn(iref=%13) -> v52, BlockParam(bref=b11, bpref=$b.0) -> v75, Insn(iref=%55) -> v85, Insn(iref=%66) -> v95, Insn(iref=%23) -> v62, Insn(iref=%48) -> v80, Insn(iref=%20) -> v59, BlockParam(bref=b40, bpref=$b.0) -> v19, Mem(fref=f19, mref=m2) -> v14, FreeVar(fvref=^3) -> v5, Insn(iref=%34) -> v37, Insn(iref=%36) -> v40, BlockParam(bref=b31, bpref=$b.0) -> v31, BlockParam(bref=b31, bpref=$b.1) -> v32, FreeVar(fvref=^5) -> v7, Mem(fref=f19, mref=m1) -> v12, BlockParam(bref=b46, bpref=$b.1) -> v67, BlockParam(bref=b43, bpref=$b.0) -> v25, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%50) -> v101, Insn(iref=%14) -> v53, FreeVar(fvref=^4) -> v6, Insn(iref=%51) -> v81, BlockParam(bref=b37, bpref=$b.0) -> v38, BlockParam(bref=b46, bpref=$b.3) -> v69, Insn(iref=%52) -> v82, Insn(iref=%44) -> v105, Insn(iref=%32) -> v35, Insn(iref=%58) -> v88, BlockParam(bref=b6, bpref=$b.0) -> v18, Insn(iref=%1) -> v17, Insn(iref=%11) -> v49, BlockParam(bref=b55, bpref=$b.0) -> v74, BlockParam(bref=b31, bpref=$b.2) -> v33, Insn(iref=%57) -> v87, Insn(iref=%6) -> v30, Insn(iref=%35) -> v39, Insn(iref=%62) -> v92, FnParam(fref=f19, fpref=$f.0) -> v2, Self(fref=f19) -> v0, Insn(iref=%46) -> v73, Insn(iref=%28) -> v76, Insn(iref=%9) -> v47, Insn(iref=%24) -> v63, Insn(iref=%37) -> v41, BlockParam(bref=b54, bpref=$b.0) -> v102, BlockParam(bref=b0, bpref=$b.0) -> v15, Insn(iref=%45) -> v72, FreeVar(fvref=^7) -> v9, BlockParam(bref=b46, bpref=$b.4) -> v70, Insn(iref=%29) -> v77, BlockParam(bref=b46, bpref=$b.0) -> v66, Insn(iref=%47) -> v79, Insn(iref=%0) -> v16, Insn(iref=%61) -> v91, BlockParam(bref=b40, bpref=$b.1) -> v20, Insn(iref=%3) -> v27, Insn(iref=%18) -> v57, FreeVar(fvref=^8) -> v10, BlockParam(bref=b5, bpref=$b.0) -> v51, Insn(iref=%22) -> v61, Insn(iref=%17) -> v56, BlockParam(bref=b40, bpref=$b.3) -> v22, Insn(iref=%43) -> v104, Insn(iref=%30) -> v78, Insn(iref=%21) -> v60, Insn(iref=%40) -> v23, Insn(iref=%12) -> v50, BlockParam(bref=b46, bpref=$b.2) -> v68
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%63)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%47), BlockParam(bref=b46, bpref=$b.2)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%45), Bool(val=true)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%8), Insn(iref=%9)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%31), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b40, bpref=$b.0), Insn(iref=%40)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%0)])
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v25 is X
// [Asm] defs: [v109]
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, v109, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v109 is X
// [Asm] defs: [v110]
// [Asm] live_set: [v5, v21, v10, v22, v110, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v110 is X
// [Asm] defs: [v103]
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v103, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v103 is X
// [Asm] defs: [v107]
// [Asm] live_set: [v5, v21, v10, v22, v7, v107, s11, v9, zero, v20, v8, v19, v103, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v107 is X
// [Asm] defs: [v108]
// [Asm] live_set: [v5, v21, v10, v22, v7, v108, s11, v9, zero, v20, v8, v19, v103, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v108 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v105]
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v105, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v105 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: [v105]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: [v20]
// [Asm] defs: []
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: [v21]
// [Asm] defs: []
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: [v22]
// [Asm] defs: []
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v18]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v23, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v95]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, v95, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v95 is X
// [Asm] defs: [v96]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v96, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v96 is X
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v99]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v99, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v99 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [zero]
// [Asm] defined: v18 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v74, v6, v15, s11, v9, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v74 is X
// [Asm] defs: [v66]
// [Asm] live_set: [v66, v5, v10, v7, s11, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v14]
// [Asm] defined: v66 is X
// [Asm] defs: [v67]
// [Asm] live_set: [v66, v5, v10, v67, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v12]
// [Asm] defined: v67 is X
// [Asm] defs: [v68]
// [Asm] live_set: [v66, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: v68 is X
// [Asm] defs: [v69]
// [Asm] live_set: [v66, v69, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v15]
// [Asm] defined: v69 is X
// [Asm] defs: [v70]
// [Asm] live_set: [v66, v69, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: v70 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: v71 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v5, v10, v26, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: [v25]
// [Asm] defined: v26 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v21, v10, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: v22 is X
// [Asm] defs: [v76]
// [Asm] live_set: [v76, v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: [v77]
// [Asm] live_set: [v5, v10, zero, v77, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v77 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, v39, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v41]
// [Asm] live_set: [v5, v10, v7, v32, v41, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v5, v10, v42, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v31]
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v32]
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v33]
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v102]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v102, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v102 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v5, v10, v7, s11, v52, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v5, v53, v10, v7, s11, v52, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v5, v53, v10, v7, s11, v52, v9, zero, v8, v4, v6, v15, v54, v3]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [v55]
// [Asm] live_set: [v5, v53, v10, v7, s11, v52, v9, zero, v8, v4, v6, v15, v54, v55, v3]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: [v150]
// [Asm] live_set: [v5, v53, v10, v7, v150, s11, v52, v9, zero, v8, v4, v6, v15, v54, v55, v3]
// [Asm] move_origin: []
// [Asm] defined: v150 is X
// [Asm] defs: [v56]
// [Asm] live_set: [v5, v53, v10, v7, s11, v52, v9, v56, zero, v8, v4, v6, v15, v54, v3]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: [v148]
// [Asm] live_set: [v5, v53, v10, v7, s11, v52, v9, v56, zero, v8, v148, v4, v6, v15, v54, v3]
// [Asm] move_origin: []
// [Asm] defined: v148 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v5, v53, v10, v7, s11, v52, v9, zero, v8, v4, v6, v15, v57, v54, v3]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v5, v58, v53, v10, v7, s11, v52, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v58 is X
// [Asm] defs: [v145]
// [Asm] live_set: [v5, v58, v53, v10, v7, s11, v52, v9, v145, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v145 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v5, v10, v53, v7, s11, v52, v9, zero, v8, v4, v59, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: [v143]
// [Asm] live_set: [v5, v10, v53, v7, s11, v52, v143, v9, zero, v8, v4, v59, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v143 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v5, v10, v53, v7, s11, v52, v9, v60, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v5, v10, v7, s11, v52, v9, zero, v8, v4, v6, v15, v61, v3]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: [v62]
// [Asm] live_set: [v62, v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v10, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v10, v7, v12, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v140]
// [Asm] live_set: [v5, v10, v7, v12, s11, v9, zero, v8, v4, v6, v140, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v140 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v12, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v5, v10, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v14, v5, v10, v7, v12, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v5, v10, zero, v7, v8, v4, v6, v12, s11, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v10, a0, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, v10, a0, v7, a1, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v10, a0, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v29, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v10, v7, v9, zero, v29, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, v10, v7, s11, v9, zero, v29, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: [v66]
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: [v67]
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: [v68]
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: [v69]
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: [v70]
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: [v71]
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v81]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v81, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v81 is X
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v66, v69, v71, v5, v10, a0, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v66, v69, v71, v5, v10, a0, v67, v7, a1, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: [v69]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v66, v69, v71, v5, v10, a0, v67, v7, a2, a1, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: [v71]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v66, v69, v71, v5, v10, a0, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v83]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v83 is X
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v84]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v84, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v84 is X
// [Asm] defs: [v85]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v85, v84, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v85 is X
// [Asm] defs: [v127]
// [Asm] live_set: [v66, v69, v71, v5, v10, v127, v67, v7, s11, v9, v68, zero, v8, v85, v4, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v127 is X
// [Asm] defs: [v128]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v85, v4, v6, v70, v15, v128, v3]
// [Asm] move_origin: []
// [Asm] defined: v128 is X
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v87]
// [Asm] live_set: [v66, v69, v71, v5, v87, v10, v67, v7, s11, v9, v68, zero, v8, v4, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v87 is X
// [Asm] defs: [v88]
// [Asm] live_set: [v66, v69, v71, v5, v87, v10, v67, v7, v88, s11, v9, v68, zero, v8, v4, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v88 is X
// [Asm] defs: [v122]
// [Asm] live_set: [v66, v69, v71, v5, v87, v10, v67, v7, s11, v9, v68, zero, v8, v4, v6, v70, v15, v122, v3]
// [Asm] move_origin: []
// [Asm] defined: v122 is X
// [Asm] defs: [v123]
// [Asm] live_set: [v66, v69, v71, v5, v87, v10, v67, v123, v7, s11, v9, v68, zero, v8, v4, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v123 is X
// [Asm] defs: [v89]
// [Asm] live_set: [v66, v69, v71, v5, v87, v10, v67, v7, s11, v9, v68, zero, v8, v4, v6, v70, v15, v89, v3]
// [Asm] move_origin: []
// [Asm] defined: v89 is X
// [Asm] defs: [v90]
// [Asm] live_set: [v66, v69, v71, v5, v87, v10, v67, v7, s11, v9, v68, zero, v8, v4, v90, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v90 is X
// [Asm] defs: [v119]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v119, v7, s11, v9, v68, zero, v8, v4, v90, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v119 is X
// [Asm] defs: [v120]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v120, v7, s11, v9, v68, zero, v8, v4, v90, v6, v70, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v120 is X
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v92]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, v92, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v92 is X
// [Asm] defs: [v115]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v115, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v115 is X
// [Asm] defs: [v116]
// [Asm] live_set: [v66, v116, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v116 is X
// [Asm] defs: [v93]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v93, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v93 is X
// [Asm] defs: [v114]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, v114, s11, v9, v93, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v114 is X
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v99]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v99, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v99 is X
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v99, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v49]
// [Asm] live_set: [v5, v10, v49, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v51]
// [Asm] live_set: [v51, v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v51 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v5, v10, v7, s11, v31, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v11]
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v7]
// [Asm] defined: v33 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v5, v10, zero, v45, v7, v8, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: [v44]
// [Asm] defined: v45 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v44, v9, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v44 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v5, v75, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: [v74]
// [Asm] defined: v75 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v79]
// [Asm] live_set: [v66, v69, v71, v5, v10, v79, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v51]
// [Asm] live_set: [v51, v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v51 is X
// [Asm] defs: []
// [Asm] live_set: [v51, v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v72]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v72, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: [v136]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v72, zero, v68, v8, v136, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v136 is X
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v169]
// [Asm] live_set: [v5, v16, v10, zero, v169, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v169 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [v5, v46, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v5, v46, v10, zero, v7, v8, v4, v47, v6, v15, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s11, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [zero, a0, v0, s11]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v0, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v0, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, v0, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v0, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, zero, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v5, zero, v8, v7, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v5, zero, v8, v7, v0, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v5, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v102]
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v102, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v102 is X
// [Asm] defs: []
// [Asm] live_set: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v102, v3]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v5, v10, v13, v7, v32, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v10, v13, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v13, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v13, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v10, a0, v13, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, v10, a0, v7, v32, a1, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v13]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, v10, a0, v7, v32, a2, a1, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v31]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v5, v10, a0, v7, v32, a2, a1, s11, a3, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v32]
// [Asm] defined: a3 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v10, a0, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v37]
// [Asm] live_set: [v5, v10, v7, v32, v37, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v32, v37, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v38]
// [Asm] live_set: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v38, v4, v6, v15, v3]
// [Asm] move_origin: [v37]
// [Asm] defined: v38 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of compute40_19"];
// [Asm]   r0 [label="v25 ← a0", color=green];
// [Asm]   r46 [label="v52 ← a0", color=green];
// [Asm]   r33 [label="v18 ← a0", color=green];
// [Asm]   r76 [label="v29 ← a0", color=green];
// [Asm]   r59 [label="v61 ← a1", color=green];
// [Asm]   r9 [label="s11", color=blue];
// [Asm]   r26 [label="v69 ← s6", color=green];
// [Asm]   r86 [label="v122 ← a1", color=green];
// [Asm]   r44 [label="v42 ← a0", color=green];
// [Asm]   r53 [label="v57 ← a3", color=green];
// [Asm]   r56 [label="v59 ← a2", color=green];
// [Asm]   r10 [label="v9 ← s7", color=green];
// [Asm]   r111 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="v7 ← s3", color=green];
// [Asm]   r54 [label="v58 ← a2", color=green];
// [Asm]   r24 [label="v95 ← a0", color=green];
// [Asm]   r43 [label="v41 ← a0", color=green];
// [Asm]   r88 [label="v89 ← a1", color=green];
// [Asm]   r80 [label="v84 ← a0", color=green];
// [Asm]   r31 [label="v96 ← a0", color=green];
// [Asm]   r39 [label="v39 ← a0", color=green];
// [Asm]   r99 [label="v45 ← a0", color=green];
// [Asm]   r17 [label="v110 ← a0", color=green];
// [Asm]   r52 [label="v148 ← a4", color=green];
// [Asm]   r65 [label="t1", color=blue];
// [Asm]   r79 [label="v83 ← a0", color=green];
// [Asm]   r20 [label="v108 ← a5", color=green];
// [Asm]   r113 [label="v37 ← a0", color=green];
// [Asm]   r61 [label="v140 ← a1", color=green];
// [Asm]   r23 [label="v23 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r108 [label="v46 ← a0", color=green];
// [Asm]   r82 [label="v127 ← a0", color=green];
// [Asm]   r67 [label="t3", color=blue];
// [Asm]   r27 [label="v71 ← s0", color=green];
// [Asm]   r77 [label="v11 ← a1", color=green];
// [Asm]   r75 [label="v27 ← a0", color=green];
// [Asm]   r62 [label="v14 ← a1", color=green];
// [Asm]   r40 [label="v32 ← s4", color=green];
// [Asm]   r11 [label="v3 ← s8", color=green];
// [Asm]   r110 [label="v0 ← a1", color=green];
// [Asm]   r58 [label="v60 ← a2", color=green];
// [Asm]   r34 [label="v74 ← a0", color=green];
// [Asm]   r105 [label="v136 ← a1", color=green];
// [Asm]   r83 [label="v128 ← a0", color=green];
// [Asm]   r103 [label="v79 ← a0", color=green];
// [Asm]   r14 [label="v22 ← a3", color=green];
// [Asm]   r96 [label="v114 ← a1", color=green];
// [Asm]   r51 [label="v56 ← a3", color=green];
// [Asm]   r78 [label="v81 ← a0", color=green];
// [Asm]   r55 [label="v145 ← a3", color=green];
// [Asm]   r16 [label="v19 ← a1", color=green];
// [Asm]   r21 [label="v105 ← a0", color=green];
// [Asm]   r60 [label="v62 ← a0", color=green];
// [Asm]   r73 [label="a6", color=blue];
// [Asm]   r93 [label="v115 ← a0", color=green];
// [Asm]   r38 [label="v77 ← a0", color=green];
// [Asm]   r72 [label="a5", color=blue];
// [Asm]   r104 [label="v72 ← a0", color=green];
// [Asm]   r87 [label="v123 ← a1", color=green];
// [Asm]   r100 [label="v44 ← a0", color=green];
// [Asm]   r85 [label="v88 ← a1", color=green];
// [Asm]   r47 [label="v53 ← a1", color=green];
// [Asm]   r6 [label="v4 ← s4", color=green];
// [Asm]   r13 [label="v21 ← a2", color=green];
// [Asm]   r42 [label="v33 ← s3", color=green];
// [Asm]   r4 [label="v8 ← s2", color=green];
// [Asm]   r95 [label="v93 ← a0", color=green];
// [Asm]   r29 [label="v68 ← s8", color=green];
// [Asm]   r35 [label="v12 ← a0", color=green];
// [Asm]   r7 [label="v6 ← s5", color=green];
// [Asm]   r114 [label="v38 ← a0", color=green];
// [Asm]   r64 [label="t0", color=blue];
// [Asm]   r8 [label="v15 ← s6", color=green];
// [Asm]   r36 [label="v26 ← a0", color=green];
// [Asm]   r112 [label="v13 ← a1", color=green];
// [Asm]   r66 [label="t2", color=blue];
// [Asm]   r32 [label="v99 ← a0", color=green];
// [Asm]   r15 [label="v20 ← a4", color=green];
// [Asm]   r49 [label="v55 ← a3", color=green];
// [Asm]   r57 [label="v143 ← a3", color=green];
// [Asm]   r74 [label="a7", color=blue];
// [Asm]   r68 [label="t4", color=blue];
// [Asm]   r98 [label="v51 ← a0", color=green];
// [Asm]   r91 [label="v120 ← a0", color=green];
// [Asm]   r70 [label="a3", color=blue];
// [Asm]   r12 [label="v109 ← a0", color=green];
// [Asm]   r48 [label="v54 ← a2", color=green];
// [Asm]   r37 [label="v76 ← a0", color=green];
// [Asm]   r102 [label="v34 ← a0", color=green];
// [Asm]   r106 [label="v16 ← a0", color=green];
// [Asm]   r109 [label="v47 ← a1", color=green];
// [Asm]   r1 [label="v5 ← s0", color=green];
// [Asm]   r41 [label="v31 ← s9", color=green];
// [Asm]   r28 [label="v67 ← s10", color=green];
// [Asm]   r71 [label="a4", color=blue];
// [Asm]   r22 [label="a0", color=blue];
// [Asm]   r69 [label="a2", color=blue];
// [Asm]   r84 [label="v87 ← a0", color=green];
// [Asm]   r89 [label="v90 ← a1", color=green];
// [Asm]   r50 [label="v150 ← a4", color=green];
// [Asm]   r30 [label="v70 ← s5", color=green];
// [Asm]   r45 [label="v102 ← a0", color=green];
// [Asm]   r92 [label="v92 ← a0", color=green];
// [Asm]   r107 [label="v169 ← a1", color=green];
// [Asm]   r25 [label="v66 ← s9", color=green];
// [Asm]   r63 [label="a1", color=blue];
// [Asm]   r2 [label="v10 ← s1", color=green];
// [Asm]   r18 [label="v103 ← a0", color=green];
// [Asm]   r19 [label="v107 ← a5", color=green];
// [Asm]   r90 [label="v119 ← a0", color=green];
// [Asm]   r97 [label="v49 ← a0", color=green];
// [Asm]   r81 [label="v85 ← a1", color=green];
// [Asm]   r101 [label="v75 ← a0", color=green];
// [Asm]   r94 [label="v116 ← a0", color=green];
// [Asm]   r9 -- r101;
// [Asm]   r5 -- r105;
// [Asm]   r10 -- r64;
// [Asm]   r5 -- r69;
// [Asm]   r6 -- r102;
// [Asm]   r7 -- r112;
// [Asm]   r2 -- r38;
// [Asm]   r6 -- r70;
// [Asm]   r2 -- r78;
// [Asm]   r6 -- r48;
// [Asm]   r25 -- r79;
// [Asm]   r10 -- r53;
// [Asm]   r16 -- r20;
// [Asm]   r9 -- r107;
// [Asm]   r11 -- r78;
// [Asm]   r29 -- r93;
// [Asm]   r11 -- r35;
// [Asm]   r25 -- r84;
// [Asm]   r8 -- r36;
// [Asm]   r6 -- r68;
// [Asm]   r35 -- r61;
// [Asm]   r4 -- r101;
// [Asm]   r29 -- r91;
// [Asm]   r26 -- r72;
// [Asm]   r25 -- r104;
// [Asm]   r4 -- r44;
// [Asm]   r6 -- r88;
// [Asm]   r4 -- r90;
// [Asm]   r8 -- r101;
// [Asm]   r22 -- r110;
// [Asm]   r2 -- r91;
// [Asm]   r3 -- r9;
// [Asm]   r9 -- r78;
// [Asm]   r7 -- r78;
// [Asm]   r3 -- r107;
// [Asm]   r40 -- r73;
// [Asm]   r10 -- r103;
// [Asm]   r4 -- r48;
// [Asm]   r5 -- r65;
// [Asm]   r3 -- r86;
// [Asm]   r29 -- r95;
// [Asm]   r2 -- r51;
// [Asm]   r11 -- r55;
// [Asm]   r46 -- r57;
// [Asm]   r3 -- r26;
// [Asm]   r11 -- r100;
// [Asm]   r28 -- r92;
// [Asm]   r3 -- r70;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r62;
// [Asm]   r4 -- r113;
// [Asm]   r2 -- r41;
// [Asm]   r7 -- r32;
// [Asm]   r1 -- r68;
// [Asm]   r9 -- r73;
// [Asm]   r8 -- r106;
// [Asm]   r29 -- r86;
// [Asm]   r3 -- r48;
// [Asm]   r26 -- r64;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r46 -- r56;
// [Asm]   r29 -- r92;
// [Asm]   r28 -- r91;
// [Asm]   r1 -- r112;
// [Asm]   r9 -- r62;
// [Asm]   r6 -- r69;
// [Asm]   r26 -- r27;
// [Asm]   r25 -- r95;
// [Asm]   r8 -- r95;
// [Asm]   r5 -- r35;
// [Asm]   r10 -- r98;
// [Asm]   r25 -- r29;
// [Asm]   r11 -- r80;
// [Asm]   r46 -- r59;
// [Asm]   r5 -- r107;
// [Asm]   r30 -- r67;
// [Asm]   r8 -- r16;
// [Asm]   r26 -- r79;
// [Asm]   r2 -- r48;
// [Asm]   r10 -- r18;
// [Asm]   r56 -- r57;
// [Asm]   r4 -- r83;
// [Asm]   r84 -- r87;
// [Asm]   r30 -- r87;
// [Asm]   r25 -- r74;
// [Asm]   r5 -- r32;
// [Asm]   r27 -- r70;
// [Asm]   r11 -- r73;
// [Asm]   r8 -- r97;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r41 -- r63;
// [Asm]   r11 -- r43;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r51;
// [Asm]   r2 -- r98;
// [Asm]   r1 -- r35;
// [Asm]   r6 -- r56;
// [Asm]   r9 -- r39;
// [Asm]   r40 -- r72;
// [Asm]   r2 -- r69;
// [Asm]   r6 -- r114;
// [Asm]   r40 -- r42;
// [Asm]   r28 -- r70;
// [Asm]   r6 -- r25;
// [Asm]   r42 -- r102;
// [Asm]   r7 -- r44;
// [Asm]   r11 -- r62;
// [Asm]   r2 -- r73;
// [Asm]   r6 -- r62;
// [Asm]   r10 -- r94;
// [Asm]   r28 -- r81;
// [Asm]   r3 -- r103;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r55;
// [Asm]   r29 -- r30;
// [Asm]   r26 -- r78;
// [Asm]   r30 -- r66;
// [Asm]   r11 -- r70;
// [Asm]   r42 -- r44;
// [Asm]   r7 -- r103;
// [Asm]   r1 -- r105;
// [Asm]   r3 -- r104;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r80 -- r81;
// [Asm]   r47 -- r56;
// [Asm]   r6 -- r46;
// [Asm]   r22 -- r26;
// [Asm]   r9 -- r76;
// [Asm]   r9 -- r30;
// [Asm]   r11 -- r86;
// [Asm]   r3 -- r83;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r114;
// [Asm]   r30 -- r79;
// [Asm]   r3 -- r113;
// [Asm]   r8 -- r42;
// [Asm]   r5 -- r11;
// [Asm]   r24 -- r29;
// [Asm]   r9 -- r84;
// [Asm]   r16 -- r18;
// [Asm]   r7 -- r75;
// [Asm]   r28 -- r63;
// [Asm]   r8 -- r109;
// [Asm]   r5 -- r74;
// [Asm]   r10 -- r81;
// [Asm]   r9 -- r99;
// [Asm]   r9 -- r102;
// [Asm]   r9 -- r11;
// [Asm]   r3 -- r65;
// [Asm]   r9 -- r83;
// [Asm]   r5 -- r93;
// [Asm]   r6 -- r105;
// [Asm]   r5 -- r97;
// [Asm]   r2 -- r14;
// [Asm]   r29 -- r45;
// [Asm]   r47 -- r51;
// [Asm]   r26 -- r91;
// [Asm]   r4 -- r100;
// [Asm]   r3 -- r99;
// [Asm]   r46 -- r53;
// [Asm]   r9 -- r63;
// [Asm]   r11 -- r52;
// [Asm]   r48 -- r49;
// [Asm]   r30 -- r92;
// [Asm]   r9 -- r24;
// [Asm]   r10 -- r15;
// [Asm]   r6 -- r113;
// [Asm]   r27 -- r69;
// [Asm]   r8 -- r18;
// [Asm]   r8 -- r35;
// [Asm]   r9 -- r36;
// [Asm]   r1 -- r72;
// [Asm]   r7 -- r36;
// [Asm]   r1 -- r99;
// [Asm]   r41 -- r112;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r60;
// [Asm]   r25 -- r87;
// [Asm]   r4 -- r63;
// [Asm]   r89 -- r91;
// [Asm]   r12 -- r16;
// [Asm]   r6 -- r38;
// [Asm]   r9 -- r46;
// [Asm]   r8 -- r100;
// [Asm]   r11 -- r87;
// [Asm]   r10 -- r32;
// [Asm]   r15 -- r19;
// [Asm]   r3 -- r23;
// [Asm]   r28 -- r93;
// [Asm]   r26 -- r32;
// [Asm]   r7 -- r46;
// [Asm]   r25 -- r66;
// [Asm]   r9 -- r21;
// [Asm]   r1 -- r24;
// [Asm]   r2 -- r58;
// [Asm]   r5 -- r12;
// [Asm]   r10 -- r62;
// [Asm]   r41 -- r64;
// [Asm]   r11 -- r44;
// [Asm]   r40 -- r66;
// [Asm]   r6 -- r95;
// [Asm]   r10 -- r79;
// [Asm]   r2 -- r45;
// [Asm]   r9 -- r25;
// [Asm]   r8 -- r93;
// [Asm]   r4 -- r41;
// [Asm]   r11 -- r68;
// [Asm]   r5 -- r63;
// [Asm]   r40 -- r74;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r69 -- r70;
// [Asm]   r3 -- r112;
// [Asm]   r3 -- r56;
// [Asm]   r7 -- r56;
// [Asm]   r6 -- r66;
// [Asm]   r8 -- r68;
// [Asm]   r7 -- r77;
// [Asm]   r25 -- r83;
// [Asm]   r29 -- r88;
// [Asm]   r4 -- r110;
// [Asm]   r1 -- r10;
// [Asm]   r4 -- r54;
// [Asm]   r30 -- r93;
// [Asm]   r1 -- r85;
// [Asm]   r30 -- r83;
// [Asm]   r10 -- r19;
// [Asm]   r10 -- r99;
// [Asm]   r6 -- r54;
// [Asm]   r27 -- r32;
// [Asm]   r26 -- r66;
// [Asm]   r29 -- r31;
// [Asm]   r1 -- r17;
// [Asm]   r9 -- r31;
// [Asm]   r9 -- r45;
// [Asm]   r4 -- r78;
// [Asm]   r42 -- r43;
// [Asm]   r4 -- r91;
// [Asm]   r3 -- r89;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r60;
// [Asm]   r4 -- r22;
// [Asm]   r76 -- r77;
// [Asm]   r6 -- r77;
// [Asm]   r11 -- r111;
// [Asm]   r3 -- r18;
// [Asm]   r9 -- r41;
// [Asm]   r8 -- r91;
// [Asm]   r4 -- r35;
// [Asm]   r41 -- r69;
// [Asm]   r4 -- r69;
// [Asm]   r11 -- r103;
// [Asm]   r29 -- r94;
// [Asm]   r1 -- r70;
// [Asm]   r10 -- r113;
// [Asm]   r1 -- r103;
// [Asm]   r1 -- r31;
// [Asm]   r22 -- r41;
// [Asm]   r29 -- r78;
// [Asm]   r10 -- r56;
// [Asm]   r1 -- r87;
// [Asm]   r5 -- r104;
// [Asm]   r3 -- r97;
// [Asm]   r5 -- r86;
// [Asm]   r4 -- r86;
// [Asm]   r6 -- r96;
// [Asm]   r11 -- r48;
// [Asm]   r7 -- r93;
// [Asm]   r29 -- r85;
// [Asm]   r40 -- r68;
// [Asm]   r2 -- r46;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r63;
// [Asm]   r8 -- r78;
// [Asm]   r42 -- r66;
// [Asm]   r8 -- r94;
// [Asm]   r106 -- r107;
// [Asm]   r4 -- r28;
// [Asm]   r42 -- r65;
// [Asm]   r3 -- r40;
// [Asm]   r9 -- r59;
// [Asm]   r26 -- r69;
// [Asm]   r9 -- r87;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r69;
// [Asm]   r5 -- r80;
// [Asm]   r2 -- r97;
// [Asm]   r13 -- r18;
// [Asm]   r3 -- r95;
// [Asm]   r8 -- r29;
// [Asm]   r26 -- r87;
// [Asm]   r5 -- r7;
// [Asm]   r2 -- r103;
// [Asm]   r11 -- r96;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r10 -- r25;
// [Asm]   r1 -- r110;
// [Asm]   r25 -- r63;
// [Asm]   r4 -- r49;
// [Asm]   r6 -- r32;
// [Asm]   r11 -- r25;
// [Asm]   r10 -- r17;
// [Asm]   r2 -- r72;
// [Asm]   r26 -- r67;
// [Asm]   r9 -- r98;
// [Asm]   r9 -- r60;
// [Asm]   r7 -- r111;
// [Asm]   r28 -- r67;
// [Asm]   r11 -- r57;
// [Asm]   r7 -- r88;
// [Asm]   r11 -- r91;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r9 -- r103;
// [Asm]   r9 -- r29;
// [Asm]   r22 -- r42;
// [Asm]   r46 -- r47;
// [Asm]   r4 -- r79;
// [Asm]   r7 -- r99;
// [Asm]   r16 -- r19;
// [Asm]   r7 -- r71;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r60;
// [Asm]   r6 -- r16;
// [Asm]   r25 -- r26;
// [Asm]   r5 -- r87;
// [Asm]   r4 -- r30;
// [Asm]   r1 -- r65;
// [Asm]   r10 -- r27;
// [Asm]   r1 -- r66;
// [Asm]   r9 -- r67;
// [Asm]   r35 -- r62;
// [Asm]   r1 -- r39;
// [Asm]   r9 -- r44;
// [Asm]   r2 -- r63;
// [Asm]   r29 -- r80;
// [Asm]   r28 -- r88;
// [Asm]   r8 -- r54;
// [Asm]   r1 -- r106;
// [Asm]   r7 -- r37;
// [Asm]   r9 -- r112;
// [Asm]   r2 -- r57;
// [Asm]   r4 -- r11;
// [Asm]   r30 -- r45;
// [Asm]   r9 -- r38;
// [Asm]   r6 -- r112;
// [Asm]   r3 -- r84;
// [Asm]   r15 -- r17;
// [Asm]   r8 -- r52;
// [Asm]   r29 -- r67;
// [Asm]   r8 -- r67;
// [Asm]   r4 -- r72;
// [Asm]   r2 -- r104;
// [Asm]   r7 -- r114;
// [Asm]   r10 -- r23;
// [Asm]   r3 -- r55;
// [Asm]   r11 -- r101;
// [Asm]   r1 -- r83;
// [Asm]   r29 -- r96;
// [Asm]   r6 -- r82;
// [Asm]   r11 -- r79;
// [Asm]   r1 -- r84;
// [Asm]   r9 -- r113;
// [Asm]   r9 -- r65;
// [Asm]   r9 -- r16;
// [Asm]   r4 -- r39;
// [Asm]   r1 -- r73;
// [Asm]   r2 -- r71;
// [Asm]   r9 -- r19;
// [Asm]   r11 -- r27;
// [Asm]   r7 -- r50;
// [Asm]   r30 -- r105;
// [Asm]   r7 -- r68;
// [Asm]   r5 -- r43;
// [Asm]   r0 -- r7;
// [Asm]   r3 -- r109;
// [Asm]   r9 -- r54;
// [Asm]   r7 -- r69;
// [Asm]   r5 -- r76;
// [Asm]   r10 -- r21;
// [Asm]   r30 -- r88;
// [Asm]   r40 -- r102;
// [Asm]   r25 -- r64;
// [Asm]   r1 -- r93;
// [Asm]   r7 -- r106;
// [Asm]   r3 -- r44;
// [Asm]   r4 -- r111;
// [Asm]   r28 -- r78;
// [Asm]   r8 -- r31;
// [Asm]   r6 -- r81;
// [Asm]   r7 -- r51;
// [Asm]   r27 -- r78;
// [Asm]   r3 -- r91;
// [Asm]   r5 -- r82;
// [Asm]   r1 -- r90;
// [Asm]   r5 -- r21;
// [Asm]   r28 -- r87;
// [Asm]   r30 -- r70;
// [Asm]   r8 -- r51;
// [Asm]   r4 -- r34;
// [Asm]   r10 -- r61;
// [Asm]   r7 -- r97;
// [Asm]   r1 -- r30;
// [Asm]   r28 -- r71;
// [Asm]   r4 -- r97;
// [Asm]   r47 -- r50;
// [Asm]   r11 -- r74;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r81;
// [Asm]   r5 -- r85;
// [Asm]   r6 -- r100;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r84;
// [Asm]   r1 -- r45;
// [Asm]   r41 -- r70;
// [Asm]   r11 -- r67;
// [Asm]   r10 -- r89;
// [Asm]   r1 -- r52;
// [Asm]   r5 -- r29;
// [Asm]   r11 -- r18;
// [Asm]   r42 -- r72;
// [Asm]   r10 -- r40;
// [Asm]   r6 -- r101;
// [Asm]   r9 -- r68;
// [Asm]   r6 -- r89;
// [Asm]   r3 -- r5;
// [Asm]   r28 -- r72;
// [Asm]   r27 -- r84;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r61;
// [Asm]   r8 -- r12;
// [Asm]   r8 -- r24;
// [Asm]   r3 -- r92;
// [Asm]   r10 -- r104;
// [Asm]   r8 -- r75;
// [Asm]   r2 -- r25;
// [Asm]   r6 -- r60;
// [Asm]   r30 -- r104;
// [Asm]   r2 -- r83;
// [Asm]   r10 -- r38;
// [Asm]   r10 -- r12;
// [Asm]   r1 -- r77;
// [Asm]   r26 -- r84;
// [Asm]   r2 -- r67;
// [Asm]   r28 -- r83;
// [Asm]   r10 -- r31;
// [Asm]   r84 -- r86;
// [Asm]   r9 -- r100;
// [Asm]   r4 -- r56;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r1;
// [Asm]   r5 -- r101;
// [Asm]   r30 -- r63;
// [Asm]   r4 -- r25;
// [Asm]   r9 -- r74;
// [Asm]   r8 -- r70;
// [Asm]   r5 -- r55;
// [Asm]   r3 -- r49;
// [Asm]   r8 -- r108;
// [Asm]   r2 -- r36;
// [Asm]   r41 -- r67;
// [Asm]   r1 -- r80;
// [Asm]   r6 -- r55;
// [Asm]   r6 -- r23;
// [Asm]   r7 -- r42;
// [Asm]   r11 -- r36;
// [Asm]   r4 -- r14;
// [Asm]   r3 -- r46;
// [Asm]   r7 -- r65;
// [Asm]   r7 -- r67;
// [Asm]   r14 -- r15;
// [Asm]   r9 -- r89;
// [Asm]   r1 -- r111;
// [Asm]   r51 -- r52;
// [Asm]   r46 -- r50;
// [Asm]   r4 -- r106;
// [Asm]   r13 -- r15;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r43;
// [Asm]   r26 -- r92;
// [Asm]   r40 -- r67;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r34;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r9 -- r91;
// [Asm]   r8 -- r9;
// [Asm]   r9 -- r94;
// [Asm]   r10 -- r107;
// [Asm]   r25 -- r78;
// [Asm]   r28 -- r68;
// [Asm]   r40 -- r44;
// [Asm]   r25 -- r73;
// [Asm]   r42 -- r113;
// [Asm]   r9 -- r110;
// [Asm]   r2 -- r65;
// [Asm]   r2 -- r88;
// [Asm]   r46 -- r51;
// [Asm]   r30 -- r103;
// [Asm]   r2 -- r80;
// [Asm]   r42 -- r63;
// [Asm]   r10 -- r29;
// [Asm]   r28 -- r45;
// [Asm]   r29 -- r70;
// [Asm]   r41 -- r102;
// [Asm]   r6 -- r22;
// [Asm]   r41 -- r74;
// [Asm]   r11 -- r108;
// [Asm]   r10 -- r51;
// [Asm]   r11 -- r114;
// [Asm]   r8 -- r64;
// [Asm]   r5 -- r113;
// [Asm]   r3 -- r114;
// [Asm]   r2 -- r44;
// [Asm]   r3 -- r57;
// [Asm]   r4 -- r71;
// [Asm]   r6 -- r27;
// [Asm]   r30 -- r65;
// [Asm]   r25 -- r85;
// [Asm]   r2 -- r40;
// [Asm]   r22 -- r64;
// [Asm]   r4 -- r80;
// [Asm]   r22 -- r67;
// [Asm]   r4 -- r15;
// [Asm]   r11 -- r65;
// [Asm]   r10 -- r101;
// [Asm]   r26 -- r68;
// [Asm]   r9 -- r70;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r1 -- r81;
// [Asm]   r10 -- r43;
// [Asm]   r25 -- r35;
// [Asm]   r8 -- r15;
// [Asm]   r13 -- r23;
// [Asm]   r1 -- r94;
// [Asm]   r22 -- r28;
// [Asm]   r11 -- r59;
// [Asm]   r7 -- r15;
// [Asm]   r14 -- r21;
// [Asm]   r6 -- r57;
// [Asm]   r7 -- r85;
// [Asm]   r6 -- r87;
// [Asm]   r4 -- r109;
// [Asm]   r25 -- r31;
// [Asm]   r5 -- r70;
// [Asm]   r81 -- r83;
// [Asm]   r10 -- r46;
// [Asm]   r104 -- r105;
// [Asm]   r7 -- r41;
// [Asm]   r11 -- r34;
// [Asm]   r4 -- r114;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r5 -- r98;
// [Asm]   r26 -- r83;
// [Asm]   r7 -- r57;
// [Asm]   r7 -- r16;
// [Asm]   r26 -- r31;
// [Asm]   r9 -- r48;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r12;
// [Asm]   r15 -- r20;
// [Asm]   r26 -- r95;
// [Asm]   r7 -- r14;
// [Asm]   r1 -- r54;
// [Asm]   r47 -- r58;
// [Asm]   r29 -- r73;
// [Asm]   r27 -- r81;
// [Asm]   r42 -- r67;
// [Asm]   r26 -- r80;
// [Asm]   r9 -- r81;
// [Asm]   r8 -- r60;
// [Asm]   r6 -- r71;
// [Asm]   r2 -- r39;
// [Asm]   r46 -- r49;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r87;
// [Asm]   r8 -- r99;
// [Asm]   r4 -- r38;
// [Asm]   r2 -- r94;
// [Asm]   r4 -- r66;
// [Asm]   r27 -- r65;
// [Asm]   r1 -- r12;
// [Asm]   r8 -- r84;
// [Asm]   r27 -- r105;
// [Asm]   r6 -- r47;
// [Asm]   r22 -- r40;
// [Asm]   r14 -- r16;
// [Asm]   r29 -- r69;
// [Asm]   r7 -- r40;
// [Asm]   r27 -- r29;
// [Asm]   r10 -- r26;
// [Asm]   r5 -- r88;
// [Asm]   r2 -- r95;
// [Asm]   r1 -- r4;
// [Asm]   r25 -- r45;
// [Asm]   r8 -- r90;
// [Asm]   r4 -- r105;
// [Asm]   r7 -- r100;
// [Asm]   r1 -- r18;
// [Asm]   r25 -- r67;
// [Asm]   r11 -- r92;
// [Asm]   r7 -- r109;
// [Asm]   r11 -- r112;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r9 -- r111;
// [Asm]   r10 -- r100;
// [Asm]   r11 -- r32;
// [Asm]   r1 -- r69;
// [Asm]   r6 -- r109;
// [Asm]   r63 -- r69;
// [Asm]   r2 -- r111;
// [Asm]   r1 -- r20;
// [Asm]   r89 -- r90;
// [Asm]   r3 -- r24;
// [Asm]   r5 -- r73;
// [Asm]   r4 -- r40;
// [Asm]   r10 -- r58;
// [Asm]   r3 -- r51;
// [Asm]   r16 -- r17;
// [Asm]   r2 -- r74;
// [Asm]   r30 -- r78;
// [Asm]   r9 -- r18;
// [Asm]   r22 -- r70;
// [Asm]   r25 -- r88;
// [Asm]   r1 -- r46;
// [Asm]   r84 -- r88;
// [Asm]   r29 -- r74;
// [Asm]   r10 -- r49;
// [Asm]   r15 -- r18;
// [Asm]   r7 -- r34;
// [Asm]   r8 -- r102;
// [Asm]   r7 -- r55;
// [Asm]   r10 -- r37;
// [Asm]   r10 -- r92;
// [Asm]   r4 -- r43;
// [Asm]   r4 -- r98;
// [Asm]   r28 -- r104;
// [Asm]   r11 -- r82;
// [Asm]   r8 -- r37;
// [Asm]   r5 -- r53;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r47;
// [Asm]   r3 -- r80;
// [Asm]   r6 -- r94;
// [Asm]   r24 -- r27;
// [Asm]   r3 -- r82;
// [Asm]   r41 -- r65;
// [Asm]   r7 -- r70;
// [Asm]   r25 -- r86;
// [Asm]   r29 -- r63;
// [Asm]   r2 -- r79;
// [Asm]   r28 -- r29;
// [Asm]   r8 -- r39;
// [Asm]   r11 -- r63;
// [Asm]   r7 -- r98;
// [Asm]   r7 -- r61;
// [Asm]   r3 -- r102;
// [Asm]   r8 -- r22;
// [Asm]   r27 -- r83;
// [Asm]   r4 -- r50;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r42 -- r71;
// [Asm]   r5 -- r50;
// [Asm]   r1 -- r49;
// [Asm]   r8 -- r96;
// [Asm]   r7 -- r96;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r10 -- r55;
// [Asm]   r11 -- r30;
// [Asm]   r7 -- r113;
// [Asm]   r3 -- r58;
// [Asm]   r7 -- r64;
// [Asm]   r2 -- r70;
// [Asm]   r2 -- r87;
// [Asm]   r6 -- r58;
// [Asm]   r9 -- r72;
// [Asm]   r29 -- r68;
// [Asm]   r28 -- r94;
// [Asm]   r1 -- r58;
// [Asm]   r10 -- r72;
// [Asm]   r4 -- r24;
// [Asm]   r27 -- r94;
// [Asm]   r11 -- r40;
// [Asm]   r14 -- r17;
// [Asm]   r6 -- r15;
// [Asm]   r9 -- r35;
// [Asm]   r11 -- r71;
// [Asm]   r9 -- r15;
// [Asm]   r5 -- r103;
// [Asm]   r10 -- r106;
// [Asm]   r6 -- r44;
// [Asm]   r5 -- r77;
// [Asm]   r12 -- r15;
// [Asm]   r25 -- r27;
// [Asm]   r14 -- r23;
// [Asm]   r4 -- r59;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r6 -- r79;
// [Asm]   r26 -- r73;
// [Asm]   r6 -- r51;
// [Asm]   r1 -- r78;
// [Asm]   r5 -- r52;
// [Asm]   r5 -- r84;
// [Asm]   r9 -- r42;
// [Asm]   r5 -- r44;
// [Asm]   r8 -- r38;
// [Asm]   r3 -- r28;
// [Asm]   r3 -- r106;
// [Asm]   r7 -- r9;
// [Asm]   r8 -- r65;
// [Asm]   r30 -- r86;
// [Asm]   r26 -- r93;
// [Asm]   r10 -- r34;
// [Asm]   r41 -- r66;
// [Asm]   r4 -- r60;
// [Asm]   r9 -- r106;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r66;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r5 -- r64;
// [Asm]   r6 -- r34;
// [Asm]   r3 -- r111;
// [Asm]   r10 -- r91;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r80;
// [Asm]   r10 -- r50;
// [Asm]   r7 -- r92;
// [Asm]   r46 -- r54;
// [Asm]   r25 -- r94;
// [Asm]   r11 -- r42;
// [Asm]   r30 -- r94;
// [Asm]   r18 -- r19;
// [Asm]   r4 -- r73;
// [Asm]   r22 -- r30;
// [Asm]   r5 -- r46;
// [Asm]   r8 -- r13;
// [Asm]   r10 -- r84;
// [Asm]   r22 -- r69;
// [Asm]   r29 -- r72;
// [Asm]   r2 -- r56;
// [Asm]   r8 -- r85;
// [Asm]   r10 -- r90;
// [Asm]   r22 -- r112;
// [Asm]   r3 -- r64;
// [Asm]   r28 -- r79;
// [Asm]   r27 -- r91;
// [Asm]   r10 -- r52;
// [Asm]   r6 -- r42;
// [Asm]   r10 -- r39;
// [Asm]   r47 -- r49;
// [Asm]   r3 -- r81;
// [Asm]   r2 -- r109;
// [Asm]   r27 -- r64;
// [Asm]   r3 -- r75;
// [Asm]   r7 -- r58;
// [Asm]   r11 -- r69;
// [Asm]   r7 -- r31;
// [Asm]   r4 -- r96;
// [Asm]   r4 -- r77;
// [Asm]   r30 -- r95;
// [Asm]   r1 -- r113;
// [Asm]   r4 -- r17;
// [Asm]   r10 -- r80;
// [Asm]   r1 -- r36;
// [Asm]   r29 -- r84;
// [Asm]   r6 -- r111;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r24;
// [Asm]   r8 -- r46;
// [Asm]   r3 -- r63;
// [Asm]   r5 -- r40;
// [Asm]   r10 -- r14;
// [Asm]   r26 -- r90;
// [Asm]   r5 -- r112;
// [Asm]   r3 -- r52;
// [Asm]   r2 -- r31;
// [Asm]   r11 -- r61;
// [Asm]   r9 -- r53;
// [Asm]   r1 -- r26;
// [Asm]   r5 -- r114;
// [Asm]   r28 -- r32;
// [Asm]   r6 -- r75;
// [Asm]   r3 -- r15;
// [Asm]   r41 -- r72;
// [Asm]   r39 -- r41;
// [Asm]   r4 -- r51;
// [Asm]   r3 -- r16;
// [Asm]   r8 -- r104;
// [Asm]   r22 -- r68;
// [Asm]   r3 -- r53;
// [Asm]   r2 -- r49;
// [Asm]   r7 -- r25;
// [Asm]   r7 -- r72;
// [Asm]   r3 -- r62;
// [Asm]   r4 -- r64;
// [Asm]   r27 -- r71;
// [Asm]   r28 -- r30;
// [Asm]   r6 -- r84;
// [Asm]   r3 -- r11;
// [Asm]   r9 -- r26;
// [Asm]   r1 -- r102;
// [Asm]   r27 -- r28;
// [Asm]   r30 -- r64;
// [Asm]   r10 -- r69;
// [Asm]   r2 -- r7;
// [Asm]   r27 -- r67;
// [Asm]   r25 -- r91;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r4 -- r57;
// [Asm]   r11 -- r109;
// [Asm]   r11 -- r19;
// [Asm]   r26 -- r103;
// [Asm]   r1 -- r50;
// [Asm]   r9 -- r82;
// [Asm]   r10 -- r93;
// [Asm]   r6 -- r86;
// [Asm]   r10 -- r67;
// [Asm]   r8 -- r114;
// [Asm]   r9 -- r56;
// [Asm]   r8 -- r34;
// [Asm]   r29 -- r66;
// [Asm]   r3 -- r8;
// [Asm]   r3 -- r85;
// [Asm]   r9 -- r88;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r28;
// [Asm]   r2 -- r112;
// [Asm]   r9 -- r75;
// [Asm]   r22 -- r25;
// [Asm]   r5 -- r6;
// [Asm]   r26 -- r71;
// [Asm]   r1 -- r48;
// [Asm]   r25 -- r92;
// [Asm]   r11 -- r97;
// [Asm]   r1 -- r64;
// [Asm]   r9 -- r66;
// [Asm]   r7 -- r79;
// [Asm]   r3 -- r74;
// [Asm]   r3 -- r39;
// [Asm]   r26 -- r70;
// [Asm]   r27 -- r87;
// [Asm]   r5 -- r106;
// [Asm]   r6 -- r104;
// [Asm]   r48 -- r50;
// [Asm]   r7 -- r59;
// [Asm]   r9 -- r12;
// [Asm]   r5 -- r58;
// [Asm]   r41 -- r71;
// [Asm]   r22 -- r27;
// [Asm]   r5 -- r54;
// [Asm]   r8 -- r23;
// [Asm]   r26 -- r88;
// [Asm]   r1 -- r107;
// [Asm]   r5 -- r60;
// [Asm]   r10 -- r22;
// [Asm]   r8 -- r59;
// [Asm]   r22 -- r72;
// [Asm]   r8 -- r72;
// [Asm]   r3 -- r71;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r8 -- r103;
// [Asm]   r1 -- r51;
// [Asm]   r47 -- r55;
// [Asm]   r3 -- r17;
// [Asm]   r39 -- r40;
// [Asm]   r6 -- r72;
// [Asm]   r18 -- r20;
// [Asm]   r1 -- r41;
// [Asm]   r6 -- r50;
// [Asm]   r1 -- r38;
// [Asm]   r40 -- r113;
// [Asm]   r2 -- r96;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r40 -- r64;
// [Asm]   r28 -- r86;
// [Asm]   r1 -- r5;
// [Asm]   r8 -- r32;
// [Asm]   r27 -- r95;
// [Asm]   r24 -- r25;
// [Asm]   r25 -- r90;
// [Asm]   r5 -- r111;
// [Asm]   r11 -- r107;
// [Asm]   r5 -- r36;
// [Asm]   r2 -- r86;
// [Asm]   r3 -- r94;
// [Asm]   r26 -- r89;
// [Asm]   r27 -- r88;
// [Asm]   r28 -- r74;
// [Asm]   r8 -- r112;
// [Asm]   r4 -- r13;
// [Asm]   r27 -- r85;
// [Asm]   r3 -- r110;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r76;
// [Asm]   r4 -- r62;
// [Asm]   r28 -- r31;
// [Asm]   r84 -- r89;
// [Asm]   r1 -- r109;
// [Asm]   r1 -- r75;
// [Asm]   r27 -- r80;
// [Asm]   r6 -- r41;
// [Asm]   r26 -- r63;
// [Asm]   r6 -- r106;
// [Asm]   r28 -- r85;
// [Asm]   r9 -- r40;
// [Asm]   r29 -- r83;
// [Asm]   r30 -- r82;
// [Asm]   r4 -- r88;
// [Asm]   r9 -- r93;
// [Asm]   r6 -- r98;
// [Asm]   r2 -- r84;
// [Asm]   r3 -- r105;
// [Asm]   r29 -- r81;
// [Asm]   r41 -- r114;
// [Asm]   r4 -- r81;
// [Asm]   r7 -- r20;
// [Asm]   r9 -- r61;
// [Asm]   r8 -- r76;
// [Asm]   r13 -- r16;
// [Asm]   r6 -- r53;
// [Asm]   r11 -- r23;
// [Asm]   r27 -- r63;
// [Asm]   r25 -- r70;
// [Asm]   r11 -- r46;
// [Asm]   r8 -- r25;
// [Asm]   r11 -- r51;
// [Asm]   r11 -- r85;
// [Asm]   r11 -- r94;
// [Asm]   r5 -- r38;
// [Asm]   r11 -- r37;
// [Asm]   r24 -- r26;
// [Asm]   r6 -- r59;
// [Asm]   r13 -- r19;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r27 -- r68;
// [Asm]   r29 -- r82;
// [Asm]   r8 -- r81;
// [Asm]   r40 -- r65;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r108;
// [Asm]   r7 -- r22;
// [Asm]   r4 -- r55;
// [Asm]   r8 -- r62;
// [Asm]   r7 -- r19;
// [Asm]   r4 -- r99;
// [Asm]   r1 -- r79;
// [Asm]   r25 -- r82;
// [Asm]   r2 -- r89;
// [Asm]   r1 -- r97;
// [Asm]   r13 -- r14;
// [Asm]   r5 -- r68;
// [Asm]   r3 -- r29;
// [Asm]   r11 -- r41;
// [Asm]   r48 -- r51;
// [Asm]   r10 -- r57;
// [Asm]   r1 -- r89;
// [Asm]   r3 -- r66;
// [Asm]   r26 -- r74;
// [Asm]   r5 -- r81;
// [Asm]   r1 -- r95;
// [Asm]   r4 -- r36;
// [Asm]   r28 -- r103;
// [Asm]   r7 -- r104;
// [Asm]   r48 -- r52;
// [Asm]   r6 -- r39;
// [Asm]   r2 -- r75;
// [Asm]   r5 -- r25;
// [Asm]   r10 -- r36;
// [Asm]   r2 -- r93;
// [Asm]   r9 -- r58;
// [Asm]   r6 -- r74;
// [Asm]   r4 -- r74;
// [Asm]   r4 -- r10;
// [Asm]   r9 -- r109;
// [Asm]   r30 -- r85;
// [Asm]   r11 -- r28;
// [Asm]   r25 -- r65;
// [Asm]   r2 -- r27;
// [Asm]   r11 -- r90;
// [Asm]   r11 -- r56;
// [Asm]   r6 -- r52;
// [Asm]   r10 -- r86;
// [Asm]   r1 -- r42;
// [Asm]   r4 -- r108;
// [Asm]   r25 -- r28;
// [Asm]   r2 -- r62;
// [Asm]   r3 -- r67;
// [Asm]   r29 -- r79;
// [Asm]   r14 -- r20;
// [Asm]   r4 -- r102;
// [Asm]   r42 -- r73;
// [Asm]   r6 -- r36;
// [Asm]   r10 -- r60;
// [Asm]   r1 -- r37;
// [Asm]   r1 -- r98;
// [Asm]   r4 -- r58;
// [Asm]   r5 -- r95;
// [Asm]   r29 -- r105;
// [Asm]   r25 -- r93;
// [Asm]   r29 -- r103;
// [Asm]   r1 -- r19;
// [Asm]   r10 -- r88;
// [Asm]   r27 -- r79;
// [Asm]   r1 -- r88;
// [Asm]   r25 -- r69;
// [Asm]   r10 -- r13;
// [Asm]   r30 -- r68;
// [Asm]   r22 -- r65;
// [Asm]   r30 -- r91;
// [Asm]   r39 -- r42;
// [Asm]   r6 -- r63;
// [Asm]   r2 -- r16;
// [Asm]   r47 -- r52;
// [Asm]   r28 -- r65;
// [Asm]   r25 -- r89;
// [Asm]   r10 -- r47;
// [Asm]   r5 -- r92;
// [Asm]   r11 -- r99;
// [Asm]   r1 -- r62;
// [Asm]   r8 -- r98;
// [Asm]   r22 -- r63;
// [Asm]   r7 -- r108;
// [Asm]   r11 -- r53;
// [Asm]   r1 -- r67;
// [Asm]   r8 -- r79;
// [Asm]   r2 -- r101;
// [Asm]   r2 -- r59;
// [Asm]   r4 -- r107;
// [Asm]   r42 -- r70;
// [Asm]   r2 -- r92;
// [Asm]   r14 -- r19;
// [Asm]   r2 -- r54;
// [Asm]   r25 -- r80;
// [Asm]   r8 -- r71;
// [Asm]   r2 -- r68;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r30;
// [Asm]   r5 -- r83;
// [Asm]   r40 -- r63;
// [Asm]   r9 -- r28;
// [Asm]   r8 -- r77;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r10;
// [Asm]   r29 -- r90;
// [Asm]   r11 -- r54;
// [Asm]   r27 -- r104;
// [Asm]   r7 -- r95;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r104;
// [Asm]   r5 -- r91;
// [Asm]   r4 -- r12;
// [Asm]   r11 -- r113;
// [Asm]   r4 -- r92;
// [Asm]   r7 -- r105;
// [Asm]   r10 -- r75;
// [Asm]   r7 -- r102;
// [Asm]   r8 -- r63;
// [Asm]   r4 -- r84;
// [Asm]   r41 -- r113;
// [Asm]   r1 -- r108;
// [Asm]   r5 -- r90;
// [Asm]   r40 -- r71;
// [Asm]   r1 -- r6;
// [Asm]   r11 -- r47;
// [Asm]   r10 -- r35;
// [Asm]   r16 -- r23;
// [Asm]   r7 -- r54;
// [Asm]   r9 -- r95;
// [Asm]   r9 -- r47;
// [Asm]   r2 -- r23;
// [Asm]   r9 -- r104;
// [Asm]   r7 -- r82;
// [Asm]   r6 -- r92;
// [Asm]   r8 -- r107;
// [Asm]   r5 -- r109;
// [Asm]   r5 -- r89;
// [Asm]   r28 -- r82;
// [Asm]   r10 -- r95;
// [Asm]   r8 -- r82;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r52;
// [Asm]   r6 -- r11;
// [Asm]   r6 -- r110;
// [Asm]   r29 -- r32;
// [Asm]   r4 -- r5;
// [Asm]   r8 -- r66;
// [Asm]   r4 -- r95;
// [Asm]   r29 -- r89;
// [Asm]   r9 -- r57;
// [Asm]   r8 -- r56;
// [Asm]   r6 -- r49;
// [Asm]   r5 -- r48;
// [Asm]   r1 -- r53;
// [Asm]   r11 -- r49;
// [Asm]   r8 -- r19;
// [Asm]   r5 -- r79;
// [Asm]   r10 -- r108;
// [Asm]   r42 -- r114;
// [Asm]   r27 -- r96;
// [Asm]   r26 -- r81;
// [Asm]   r8 -- r43;
// [Asm]   r3 -- r87;
// [Asm]   r25 -- r30;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r47;
// [Asm]   r30 -- r90;
// [Asm]   r10 -- r102;
// [Asm]   r10 -- r41;
// [Asm]   r2 -- r55;
// [Asm]   r29 -- r65;
// [Asm]   r4 -- r112;
// [Asm]   r4 -- r89;
// [Asm]   r6 -- r12;
// [Asm]   r7 -- r81;
// [Asm]   r29 -- r87;
// [Asm]   r6 -- r24;
// [Asm]   r24 -- r30;
// [Asm]   r9 -- r51;
// [Asm]   r25 -- r72;
// [Asm]   r10 -- r105;
// [Asm]   r7 -- r73;
// [Asm]   r11 -- r83;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r6 -- r37;
// [Asm]   r5 -- r110;
// [Asm]   r10 -- r28;
// [Asm]   r9 -- r34;
// [Asm]   r10 -- r63;
// [Asm]   r7 -- r60;
// [Asm]   r11 -- r98;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r24;
// [Asm]   r28 -- r105;
// [Asm]   r10 -- r73;
// [Asm]   r0 -- r8;
// [Asm]   r30 -- r81;
// [Asm]   r6 -- r28;
// [Asm]   r4 -- r85;
// [Asm]   r1 -- r59;
// [Asm]   r11 -- r39;
// [Asm]   r9 -- r69;
// [Asm]   r1 -- r74;
// [Asm]   r26 -- r30;
// [Asm]   r11 -- r50;
// [Asm]   r7 -- r47;
// [Asm]   r6 -- r67;
// [Asm]   r108 -- r109;
// [Asm]   r7 -- r11;
// [Asm]   r11 -- r89;
// [Asm]   r8 -- r88;
// [Asm]   r9 -- r37;
// [Asm]   r6 -- r90;
// [Asm]   r28 -- r96;
// [Asm]   r8 -- r73;
// [Asm]   r4 -- r47;
// [Asm]   r7 -- r39;
// [Asm]   r7 -- r43;
// [Asm]   r11 -- r26;
// [Asm]   r40 -- r41;
// [Asm]   r2 -- r100;
// [Asm]   r9 -- r114;
// [Asm]   r8 -- r58;
// [Asm]   r9 -- r32;
// [Asm]   r25 -- r96;
// [Asm]   r11 -- r58;
// [Asm]   r46 -- r58;
// [Asm]   r28 -- r90;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r14;
// [Asm]   r27 -- r92;
// [Asm]   r3 -- r54;
// [Asm]   r3 -- r93;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r30;
// [Asm]   r1 -- r82;
// [Asm]   r1 -- r92;
// [Asm]   r10 -- r96;
// [Asm]   r49 -- r50;
// [Asm]   r4 -- r52;
// [Asm]   r9 -- r50;
// [Asm]   r11 -- r21;
// [Asm]   r10 -- r66;
// [Asm]   r47 -- r53;
// [Asm]   r2 -- r64;
// [Asm]   r4 -- r19;
// [Asm]   r27 -- r74;
// [Asm]   r4 -- r53;
// [Asm]   r2 -- r32;
// [Asm]   r4 -- r75;
// [Asm]   r48 -- r53;
// [Asm]   r26 -- r85;
// [Asm]   r81 -- r82;
// [Asm]   r11 -- r76;
// [Asm]   r4 -- r68;
// [Asm]   r6 -- r73;
// [Asm]   r22 -- r66;
// [Asm]   r6 -- r35;
// [Asm]   r9 -- r86;
// [Asm]   r1 -- r86;
// [Asm]   r5 -- r72;
// [Asm]   r9 -- r79;
// [Asm]   r1 -- r57;
// [Asm]   r10 -- r111;
// [Asm]   r11 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r27 -- r93;
// [Asm]   r2 -- r43;
// [Asm]   r5 -- r59;
// [Asm]   r11 -- r66;
// [Asm]   r5 -- r18;
// [Asm]   r4 -- r103;
// [Asm]   r5 -- r47;
// [Asm]   r47 -- r57;
// [Asm]   r2 -- r99;
// [Asm]   r10 -- r110;
// [Asm]   r3 -- r37;
// [Asm]   r11 -- r45;
// [Asm]   r27 -- r66;
// [Asm]   r2 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r1 -- r16;
// [Asm]   r84 -- r85;
// [Asm]   r3 -- r68;
// [Asm]   r9 -- r49;
// [Asm]   r7 -- r27;
// [Asm]   r6 -- r85;
// [Asm]   r7 -- r91;
// [Asm]   r8 -- r105;
// [Asm]   r11 -- r102;
// [Asm]   r2 -- r34;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r45;
// [Asm]   r110 -- r111;
// [Asm]   r5 -- r62;
// [Asm]   r3 -- r78;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r57;
// [Asm]   r6 -- r80;
// [Asm]   r6 -- r91;
// [Asm]   r11 -- r13;
// [Asm]   r28 -- r66;
// [Asm]   r10 -- r45;
// [Asm]   r4 -- r67;
// [Asm]   r0 -- r9;
// [Asm]   r25 -- r32;
// [Asm]   r9 -- r23;
// [Asm]   r4 -- r65;
// [Asm]   r5 -- r78;
// [Asm]   r7 -- r94;
// [Asm]   r41 -- r68;
// [Asm]   r1 -- r40;
// [Asm]   r7 -- r38;
// [Asm]   r46 -- r52;
// [Asm]   r2 -- r12;
// [Asm]   r30 -- r71;
// [Asm]   r30 -- r72;
// [Asm]   r5 -- r67;
// [Asm]   r6 -- r83;
// [Asm]   r8 -- r48;
// [Asm]   r41 -- r42;
// [Asm]   r11 -- r93;
// [Asm]   r46 -- r55;
// [Asm]   r10 -- r42;
// [Asm]   r42 -- r68;
// [Asm]   r0 -- r10;
// [Asm]   r6 -- r64;
// [Asm]   r7 -- r80;
// [Asm]   r2 -- r108;
// [Asm]   r29 -- r104;
// [Asm]   r15 -- r23;
// [Asm]   r5 -- r66;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r65;
// [Asm]   r27 -- r103;
// [Asm]   r42 -- r64;
// [Asm]   r27 -- r45;
// [Asm]   r8 -- r86;
// [Asm]   r8 -- r30;
// [Asm]   r11 -- r84;
// [Asm]   r27 -- r31;
// [Asm]   r10 -- r59;
// [Asm]   r6 -- r76;
// [Asm]   r7 -- r76;
// [Asm]   r3 -- r19;
// [Asm]   r7 -- r29;
// [Asm]   r27 -- r90;
// [Asm]   r11 -- r104;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r77;
// [Asm]   r3 -- r101;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r38;
// [Asm]   r11 -- r64;
// [Asm]   r1 -- r47;
// [Asm]   r26 -- r86;
// [Asm]   r5 -- r71;
// [Asm]   r27 -- r89;
// [Asm]   r47 -- r48;
// [Asm]   r2 -- r90;
// [Asm]   r30 -- r32;
// [Asm]   r11 -- r16;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r2 -- r52;
// [Asm]   r11 -- r12;
// [Asm]   r8 -- r113;
// [Asm]   r7 -- r107;
// [Asm]   r1 -- r13;
// [Asm]   r9 -- r64;
// [Asm]   r10 -- r48;
// [Asm]   r11 -- r22;
// [Asm]   r7 -- r74;
// [Asm]   r28 -- r80;
// [Asm]   r10 -- r70;
// [Asm]   r1 -- r104;
// [Asm]   r2 -- r114;
// [Asm]   r7 -- r48;
// [Asm]   r30 -- r74;
// [Asm]   r7 -- r49;
// [Asm]   r28 -- r69;
// [Asm]   r8 -- r20;
// [Asm]   r24 -- r28;
// [Asm]   r8 -- r47;
// [Asm]   r6 -- r99;
// [Asm]   r6 -- r20;
// [Asm]   r9 -- r52;
// [Asm]   r30 -- r84;
// [Asm]   r3 -- r50;
// [Asm]   r7 -- r17;
// [Asm]   r40 -- r114;
// [Asm]   r25 -- r71;
// [Asm]   r8 -- r41;
// [Asm]   r9 -- r85;
// [Asm]   r2 -- r107;
// [Asm]   r9 -- r97;
// [Asm]   r30 -- r80;
// [Asm]   r11 -- r110;
// [Asm]   r27 -- r82;
// [Asm]   r2 -- r102;
// [Asm]   r8 -- r53;
// [Asm]   r42 -- r69;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r41 -- r44;
// [Asm]   r4 -- r32;
// [Asm]   r22 -- r71;
// [Asm]   r1 -- r29;
// [Asm]   r5 -- r45;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r8 -- r92;
// [Asm]   r10 -- r85;
// [Asm]   r2 -- r77;
// [Asm]   r0 -- r5;
// [Asm]   r27 -- r73;
// [Asm]   r1 -- r25;
// [Asm]   r13 -- r17;
// [Asm]   r5 -- r56;
// [Asm]   r5 -- r94;
// [Asm]   r5 -- r61;
// [Asm]   r1 -- r61;
// [Asm]   r41 -- r43;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r3 -- r73;
// [Asm]   r4 -- r82;
// [Asm]   r8 -- r83;
// [Asm]   r40 -- r112;
// [Asm]   r10 -- r54;
// [Asm]   r10 -- r109;
// [Asm]   r11 -- r72;
// [Asm]   r7 -- r87;
// [Asm]   r28 -- r95;
// [Asm]   r10 -- r65;
// [Asm]   r2 -- r35;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r25 -- r68;
// [Asm]   r4 -- r93;
// [Asm]   r9 -- r13;
// [Asm]   r30 -- r89;
// [Asm]   r8 -- r50;
// [Asm]   r26 -- r65;
// [Asm]   r1 -- r100;
// [Asm]   r1 -- r76;
// [Asm]   r2 -- r20;
// [Asm]   r8 -- r57;
// [Asm]   r5 -- r41;
// [Asm]   r8 -- r89;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r71;
// [Asm]   r26 -- r45;
// [Asm]   r9 -- r27;
// [Asm]   r3 -- r43;
// [Asm]   r42 -- r74;
// [Asm]   r9 -- r77;
// [Asm]   r2 -- r85;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r56;
// [Asm]   r3 -- r60;
// [Asm]   r3 -- r79;
// [Asm]   r3 -- r108;
// [Asm]   r1 -- r63;
// [Asm]   r5 -- r96;
// [Asm]   r6 -- r29;
// [Asm]   r7 -- r53;
// [Asm]   r26 -- r96;
// [Asm]   r11 -- r31;
// [Asm]   r6 -- r107;
// [Asm]   r5 -- r49;
// [Asm]   r5 -- r99;
// [Asm]   r1 -- r91;
// [Asm]   r11 -- r106;
// [Asm]   r11 -- r105;
// [Asm]   r30 -- r73;
// [Asm]   r4 -- r27;
// [Asm]   r10 -- r77;
// [Asm]   r25 -- r105;
// [Asm]   r4 -- r42;
// [Asm]   r7 -- r83;
// [Asm]   r27 -- r30;
// [Asm]   r46 -- r48;
// [Asm]   r4 -- r21;
// [Asm]   r2 -- r76;
// [Asm]   r3 -- r76;
// [Asm]   r7 -- r90;
// [Asm]   r27 -- r72;
// [Asm]   r28 -- r73;
// [Asm]   r8 -- r17;
// [Asm]   r11 -- r81;
// [Asm]   r3 -- r96;
// [Asm]   r54 -- r55;
// [Asm]   r3 -- r4;
// [Asm]   r9 -- r108;
// [Asm]   r8 -- r69;
// [Asm]   r5 -- r75;
// [Asm]   r27 -- r86;
// [Asm]   r22 -- r73;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r6 -- r93;
// [Asm]   r10 -- r74;
// [Asm]   r5 -- r108;
// [Asm]   r2 -- r8;
// [Asm]   r28 -- r64;
// [Asm]   r22 -- r74;
// [Asm]   r6 -- r103;
// [Asm]   r40 -- r69;
// [Asm]   r6 -- r31;
// [Asm]   r40 -- r43;
// [Asm]   r8 -- r44;
// [Asm]   r6 -- r78;
// [Asm]   r29 -- r64;
// [Asm]   r26 -- r94;
// [Asm]   r8 -- r80;
// [Asm]   r95 -- r96;
// [Asm]   r10 -- r30;
// [Asm]   r6 -- r45;
// [Asm]   r26 -- r82;
// [Asm]   r28 -- r84;
// [Asm]   r9 -- r10;
// [Asm]   r29 -- r71;
// [Asm]   r5 -- r14;
// [Asm]   r1 -- r44;
// [Asm]   r3 -- r61;
// [Asm]   r10 -- r112;
// [Asm]   r7 -- r110;
// [Asm]   r13 -- r21;
// [Asm]   r8 -- r87;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r94;
// [Asm]   r6 -- r97;
// [Asm]   r42 -- r112;
// [Asm]   r6 -- r61;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r106;
// [Asm]   r3 -- r88;
// [Asm]   r2 -- r53;
// [Asm]   r5 -- r34;
// [Asm]   r2 -- r61;
// [Asm]   r25 -- r81;
// [Asm]   r10 -- r114;
// [Asm]   r9 -- r90;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r10 -- r83;
// [Asm]   r10 -- r87;
// [Asm]   r14 -- r18;
// [Asm]   r5 -- r100;
// [Asm]   r30 -- r69;
// [Asm]   r11 -- r17;
// [Asm]   r5 -- r20;
// [Asm]   r4 -- r37;
// [Asm]   r7 -- r45;
// [Asm]   r2 -- r18;
// [Asm]   r2 -- r105;
// [Asm]   r9 -- r96;
// [Asm]   r10 -- r68;
// [Asm]   r10 -- r78;
// [Asm]   r63 -- r70;
// [Asm]   r7 -- r89;
// [Asm]   r5 -- r13;
// [Asm]   r22 -- r29;
// [Asm]   r1 -- r32;
// [Asm]   r7 -- r13;
// [Asm]   r10 -- r71;
// [Asm]   r10 -- r76;
// [Asm]   r8 -- r55;
// [Asm]   r26 -- r105;
// [Asm]   r2 -- r82;
// [Asm]   r7 -- r86;
// [Asm]   r26 -- r104;
// [Asm]   r47 -- r54;
// [Asm]   r25 -- r103;
// [Asm]   r3 -- r90;
// [Asm]   r6 -- r26;
// [Asm]   r5 -- r16;
// [Asm]   r8 -- r49;
// [Asm]   r1 -- r101;
// [Asm]   r13 -- r20;
// [Asm]   r3 -- r77;
// [Asm]   r30 -- r96;
// [Asm]   r4 -- r70;
// [Asm]   r40 -- r70;
// [Asm]   r28 -- r89;
// [Asm]   r9 -- r22;
// [Asm]   r9 -- r92;
// [Asm]   r1 -- r96;
// [Asm]   r4 -- r46;
// [Asm]   r11 -- r75;
// [Asm]   r4 -- r45;
// [Asm]   r41 -- r73;
// [Asm]   r15 -- r21;
// [Asm]   r5 -- r37;
// [Asm]   r8 -- r74;
// [Asm]   r2 -- r113;
// [Asm]   r11 -- r95;
// [Asm]   r8 -- r40;
// [Asm]   r9 -- r43;
// [Asm]   r2 -- r66;
// [Asm]   r10 -- r44;
// [Asm]   r3 -- r72;
// [Asm]   r10 -- r97;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r41;
// [Asm]   r5 -- r102;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r9 -- r55;
// [Asm]   r11 -- r88;
// [Asm]   r10 -- r82;
// [Asm]   r3 -- r59;
// [Asm]   r11 -- r38;
// [Asm]   r26 -- r29;
// [Asm]   r5 -- r27;
// [Asm]   r7 -- r23;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r9 -- r71;
// [Asm]   r7 -- r101;
// [Asm]   r4 -- r61;
// [Asm]   r9 -- r105;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v25-> 1:v5-> 2:v10-> 4:v8-> 5:v7-> 6:v4-> 7:v6-> 8:v15-> 9:s11-> 10:v9-> 11:v3-> 3:zero-> 12:v109-> 16:v19-> 13:v21-> 14:v22-> 15:v20-> 17:v110-> 18:v103-> 19:v107-> 20:v108-> 23:v23-> 21:v105-> 22:a0-> 25:v66-> 28:v67-> 63:a1-> 69:a2-> 70:a3-> 26:v69-> 27:v71-> 29:v68-> 30:v70-> 64:t0-> 65:t1-> 66:t2-> 41:v31-> 67:t3-> 40:v32-> 42:v33-> 68:t4-> 71:a4-> 72:a5-> 73:a6-> 74:a7-> 24:v95-> 31:v96-> 78:v81-> 79:v83-> 80:v84-> 81:v85-> 82:v127-> 83:v128-> 84:v87-> 85:v88-> 86:v122-> 87:v123-> 88:v89-> 89:v90-> 90:v119-> 91:v120-> 92:v92-> 93:v115-> 94:v116-> 95:v93-> 96:v114-> 103:v79-> 104:v72-> 105:v136-> 32:v99-> 45:v102-> 112:v13-> 39:v39-> 43:v41-> 44:v42-> 102:v34-> 113:v37-> 114:v38-> 35:v12-> 61:v140-> 62:v14-> 36:v26-> 37:v76-> 38:v77-> 46:v52-> 47:v53-> 48:v54-> 49:v55-> 50:v150-> 51:v56-> 52:v148-> 53:v57-> 54:v58-> 55:v145-> 56:v59-> 57:v143-> 58:v60-> 59:v61-> 60:v62-> 75:v27-> 76:v29-> 77:v11-> 97:v49-> 99:v45-> 101:v75-> 106:v16-> 107:v169-> 108:v46-> 109:v47-> 34:v74-> 98:v51-> 100:v44-> 110:v0-> 111:v2-> 33:v18"
// [Asm]   comment = "v25<-a0;v52<-a0;v18<-a0;v29<-a0;v61<-a1;v69<-s6;v122<-a1;v42<-a0;v57<-a3;v59<-a2;v9<-s7;v2<-a0;v7<-s3;v58<-a2;v95<-a0;v41<-a0;v89<-a1;v84<-a0;v96<-a0;v39<-a0;v45<-a0;v110<-a0;v148<-a4;v83<-a0;v108<-a5;v37<-a0;v140<-a1;v23<-a0;v46<-a0;v127<-a0;v71<-s0;v11<-a1;v27<-a0;v14<-a1;v32<-s4;v3<-s8;v0<-a1;v60<-a2;v74<-a0;v136<-a1;v128<-a0;v79<-a0;v22<-a3;v114<-a1;v56<-a3;v81<-a0;v145<-a3;v19<-a1;v105<-a0;v62<-a0;v115<-a0;v77<-a0;v72<-a0;v123<-a1;v44<-a0;v88<-a1;v53<-a1;v4<-s4;v21<-a2;v33<-s3;v8<-s2;v93<-a0;v68<-s8;v12<-a0;v6<-s5;v38<-a0;v15<-s6;v26<-a0;v13<-a1;v99<-a0;v20<-a4;v55<-a3;v143<-a3;v51<-a0;v120<-a0;v109<-a0;v54<-a2;v76<-a0;v34<-a0;v16<-a0;v47<-a1;v5<-s0;v31<-s9;v67<-s10;v87<-a0;v90<-a1;v150<-a4;v70<-s5;v102<-a0;v92<-a0;v169<-a1;v66<-s9;v10<-s1;v103<-a0;v107<-a5;v119<-a0;v49<-a0;v85<-a1;v75<-a0;v116<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of compute40_19"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v25, zero ->   mv a0, zero
// [Asm] subst   slliw v109, v19, 2 ->   slliw a0, a1, 2
// [Asm] subst   add v110, v22, v109 ->   add a0, a3, a0
// [Asm] subst   lw v103, 0(v110) ->   lw a0, 0(a0)
// [Asm] subst   slliw v107, v19, 2 ->   slliw a5, a1, 2
// [Asm] subst   add v108, v21, v107 ->   add a5, a2, a5
// [Asm] subst   sw v103, 0(v108) ->   sw a0, 0(a5)
// [Asm] subst   addi v105, v19, 1 ->   addi a0, a1, 1
// [Asm] subst   mv v19, v105 ->   mv a1, a0
// [Asm] subst   j .compute40_19_40 ->   j .compute40_19_40
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v23, v20, -1 ->   addi a0, a4, -1
// [Asm] subst   blt v23, v19, .compute40_19_42 ->   blt a0, a1, .compute40_19_42
// [Asm] subst   lw v95, 0(v69) ->   lw a0, 0(s6)
// [Asm] subst   addi v96, v95, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v96, 0(v69) ->   sw a0, 0(s6)
// [Asm] subst   mv v99, zero ->   mv a0, zero
// [Asm] subst   mv v18, zero ->   mv a0, zero
// [Asm] subst   mv v74, zero ->   mv a0, zero
// [Asm] subst   mv v66, v14 ->   mv s9, a1
// [Asm] subst   mv v67, v12 ->   mv s10, a0
// [Asm] subst   mv v19, zero ->   mv a1, zero
// [Asm] subst   mv v20, v3 ->   mv a4, s8
// [Asm] subst   mv v21, v4 ->   mv a2, s4
// [Asm] subst   mv v22, v5 ->   mv a3, s0
// [Asm] subst   lw v76, 0(v10) ->   lw a0, 0(s1)
// [Asm] subst   addi v77, v76, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v77, 0(v10) ->   sw a0, 0(s1)
// [Asm] subst   j .compute40_19_0 ->   j .compute40_19_0
// [Asm] subst   lw v39, 0(v32) ->   lw a0, 0(s4)
// [Asm] subst   sw v39, 0(v31) ->   sw a0, 0(s9)
// [Asm] subst   lw v41, 0(v33) ->   lw a0, 0(s3)
// [Asm] subst   addi v42, v41, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v42, 0(v33) ->   sw a0, 0(s3)
// [Asm] subst   j .compute40_19_31 ->   j .compute40_19_31
// [Asm] subst   mv v102, zero ->   mv a0, zero
// [Asm] subst   lw v52, 0(v9) ->   lw a0, 0(s7)
// [Asm] subst   lw v53, 0(v7) ->   lw a1, 0(s3)
// [Asm] subst   lw v54, 0(v10) ->   lw a2, 0(s1)
// [Asm] subst   lw v55, 0(v10) ->   lw a3, 0(s1)
// [Asm] subst   li v150, 2 ->   li a4, 2
// [Asm] subst   div v56, v55, v150 ->   div a3, a3, a4
// [Asm] subst   li v148, 2 ->   li a4, 2
// [Asm] subst   mul v57, v56, v148 ->   mul a3, a3, a4
// [Asm] subst   sub v58, v54, v57 ->   sub a2, a2, a3
// [Asm] subst   li v145, 2 ->   li a3, 2
// [Asm] subst   mul v59, v58, v145 ->   mul a2, a2, a3
// [Asm] subst   li v143, 1 ->   li a3, 1
// [Asm] subst   sub v60, v143, v59 ->   sub a2, a3, a2
// [Asm] subst   mul v61, v53, v60 ->   mul a1, a1, a2
// [Asm] subst   add v62, v52, v61 ->   add a0, a0, a1
// [Asm] subst   sw v62, 0(v9) ->   sw a0, 0(s7)
// [Asm] subst   addi v12, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi s11, v12, -8 ->   andi s11, a0, -8
// [Asm] subst   li v140, 1 ->   li a1, 1
// [Asm] subst   sw v140, 0(v12) ->   sw a1, 0(a0)
// [Asm] subst   addi v14, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v14, -8 ->   andi s11, a1, -8
// [Asm] subst   sw zero, 0(v14) ->   sw zero, 0(a1)
// [Asm] subst   mv a0, v15 ->   mv a0, s6
// [Asm] subst   mv a1, v6 ->   mv a1, s5
// [Asm] subst   call init_count59l3_3 ->   call init_count59l3_3
// [Asm] subst   sw zero, 0(v7) ->   sw zero, 0(s3)
// [Asm] subst   lw v29, 0(v4) ->   lw a0, 0(s4)
// [Asm] subst   addi v11, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v11, -8 ->   andi s11, a1, -8
// [Asm] subst   sw v29, 0(v11) ->   sw a0, 0(a1)
// [Asm] subst   j .compute40_19_46 ->   j .compute40_19_46
// [Asm] subst   lw v81, 0(v71) ->   lw a0, 0(s0)
// [Asm] subst   sw v81, 0(v66) ->   sw a0, 0(s9)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v69 ->   mv a1, s6
// [Asm] subst   mv a2, v71 ->   mv a2, s0
// [Asm] subst   call move_perm1_forward197l6_6 ->   call move_perm1_forward197l6_6
// [Asm] subst   lw v84, 0(v69) ->   lw a0, 0(s6)
// [Asm] subst   lw v85, 0(v66) ->   lw a1, 0(s9)
// [Asm] subst   slliw v127, v84, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v128, v71, v127 ->   add a0, s0, a0
// [Asm] subst   sw v85, 0(v128) ->   sw a1, 0(a0)
// [Asm] subst   lw v87, 0(v69) ->   lw a0, 0(s6)
// [Asm] subst   lw v88, 0(v69) ->   lw a1, 0(s6)
// [Asm] subst   slliw v122, v88, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v123, v70, v122 ->   add a1, s5, a1
// [Asm] subst   lw v89, 0(v123) ->   lw a1, 0(a1)
// [Asm] subst   addi v90, v89, -1 ->   addi a1, a1, -1
// [Asm] subst   slliw v119, v87, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v120, v70, v119 ->   add a0, s5, a0
// [Asm] subst   sw v90, 0(v120) ->   sw a1, 0(a0)
// [Asm] subst   lw v92, 0(v69) ->   lw a0, 0(s6)
// [Asm] subst   slliw v115, v92, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v116, v70, v115 ->   add a0, s5, a0
// [Asm] subst   lw v93, 0(v116) ->   lw a0, 0(a0)
// [Asm] subst   li v114, 1 ->   li a1, 1
// [Asm] subst   bge v93, v114, .compute40_19_51 ->   bge a0, a1, .compute40_19_51
// [Asm] subst   sw zero, 0(v67) ->   sw zero, 0(s10)
// [Asm] subst   mv v99, zero ->   mv a0, zero
// [Asm] subst   j .compute40_19_53 ->   j .compute40_19_53
// [Asm] subst   lw v49, 0(v7) ->   lw a0, 0(s3)
// [Asm] subst   sw v49, 0(v8) ->   sw a0, 0(s2)
// [Asm] subst   mv v51, zero ->   mv a0, zero
// [Asm] subst   mv v31, v11 ->   mv s9, a1
// [Asm] subst   mv v44, zero ->   mv a0, zero
// [Asm] subst   lw v34, 0(v31) ->   lw a0, 0(s9)
// [Asm] subst   beq v34, zero, .compute40_19_32 ->   beq a0, zero, .compute40_19_32
// [Asm] subst   lw v79, 0(v69) ->   lw a0, 0(s6)
// [Asm] subst   beq v79, v68, .compute40_19_49 ->   beq a0, s8, .compute40_19_49
// [Asm] subst   mv v51, zero ->   mv a0, zero
// [Asm] subst   j .compute40_19_5 ->   j .compute40_19_5
// [Asm] subst   lw v72, 0(v67) ->   lw a0, 0(s10)
// [Asm] subst   li v136, 1 ->   li a1, 1
// [Asm] subst   bne v72, v136, .compute40_19_48 ->   bne a0, a1, .compute40_19_48
// [Asm] subst   lw v16, 0(v15) ->   lw a0, 0(s6)
// [Asm] subst   li v169, 1 ->   li a1, 1
// [Asm] subst   blt v16, v169, .compute40_19_2 ->   blt a0, a1, .compute40_19_2
// [Asm] subst   lw v46, 0(v8) ->   lw a0, 0(s2)
// [Asm] subst   lw v47, 0(v7) ->   lw a1, 0(s3)
// [Asm] subst   blt v47, v46, .compute40_19_4 ->   blt a1, a0, .compute40_19_4
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw s8, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s4, 16(a1)
// [Asm] subst   ld v5, 24(v0) ->   ld s0, 24(a1)
// [Asm] subst   ld v6, 32(v0) ->   ld s5, 32(a1)
// [Asm] subst   ld v7, 40(v0) ->   ld s3, 40(a1)
// [Asm] subst   ld v8, 48(v0) ->   ld s2, 48(a1)
// [Asm] subst   ld v9, 56(v0) ->   ld s7, 56(a1)
// [Asm] subst   ld v10, 64(v0) ->   ld s1, 64(a1)
// [Asm] subst   mv v15, v2 ->   mv s6, a0
// [Asm] subst   sw zero, 0(v67) ->   sw zero, 0(s10)
// [Asm] subst   sw zero, 0(v69) ->   sw zero, 0(s6)
// [Asm] subst   mv v102, zero ->   mv a0, zero
// [Asm] subst   j .compute40_19_54 ->   j .compute40_19_54
// [Asm] subst   addi v13, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v13, -8 ->   andi s11, a1, -8
// [Asm] subst   sw zero, 0(v13) ->   sw zero, 0(a1)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a2, v31 ->   mv a2, s9
// [Asm] subst   mv a3, v32 ->   mv a3, s4
// [Asm] subst   call flip_loop99l5_4 ->   call flip_loop99l5_4
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v8, Insn(iref=%3) -> v7, Insn(iref=%7) -> v11, FnParam(fref=f3, fpref=$f.1) -> v3, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%2) -> v6, Insn(iref=%9) -> v13, Insn(iref=%8) -> v12, Insn(iref=%1) -> v5, FnParam(fref=f3, fpref=$f.0) -> v2, Insn(iref=%6) -> v10, Insn(iref=%5) -> v9, Self(fref=f3) -> v0, Insn(iref=%0) -> v4
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=1)])
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v7, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v8, v7, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v2, v8, v18, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v2, v8, v19, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v13]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] move_origin: [v13]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v2, v4, zero, v23, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init_count59l3_3"];
// [Asm]   r0 [label="v14 ← a0", color=green];
// [Asm]   r20 [label="a4", color=blue];
// [Asm]   r23 [label="a7", color=blue];
// [Asm]   r3 [label="v2 ← a2", color=green];
// [Asm]   r9 [label="v10 ← a0", color=green];
// [Asm]   r26 [label="v23 ← a3", color=green];
// [Asm]   r6 [label="v8 ← a3", color=green];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="a0", color=blue];
// [Asm]   r7 [label="v18 ← a0", color=green];
// [Asm]   r10 [label="v11 ← a0", color=green];
// [Asm]   r22 [label="a6", color=blue];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r8 [label="v19 ← a0", color=green];
// [Asm]   r5 [label="v7 ← a0", color=green];
// [Asm]   r24 [label="v13 ← a0", color=green];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r25 [label="v4 ← a0", color=green];
// [Asm]   r2 [label="v6 ← a0", color=green];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r18 [label="a2", color=blue];
// [Asm]   r19 [label="a3", color=blue];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r4 -- r5;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r1 -- r15;
// [Asm]   r11 -- r23;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r25 -- r26;
// [Asm]   r1 -- r20;
// [Asm]   r11 -- r22;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r5;
// [Asm]   r11 -- r19;
// [Asm]   r6 -- r8;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r4 -- r8;
// [Asm]   r11 -- r15;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r11 -- r21;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:v14-> 1:zero-> 2:v6-> 3:v2-> 4:v3-> 5:v7-> 6:v8-> 7:v18-> 8:v19-> 9:v10-> 10:v11-> 25:v4-> 26:v23-> 11:a0-> 12:a1-> 13:t0-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 18:a2-> 19:a3-> 20:a4-> 21:a5-> 22:a6-> 23:a7-> 24:v13"
// [Asm]   comment = "v14<-a0;v2<-a2;v10<-a0;v23<-a3;v8<-a3;v3<-a1;v18<-a0;v11<-a0;v19<-a0;v7<-a0;v13<-a0;v4<-a0;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init_count59l3_3"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   j .init_count59l3_3_3 ->   j .init_count59l3_3_3
// [Asm] subst   lw v6, 0(v2) ->   lw a0, 0(a2)
// [Asm] subst   addi v7, v6, -1 ->   addi a0, a0, -1
// [Asm] subst   lw v8, 0(v2) ->   lw a3, 0(a2)
// [Asm] subst   slliw v18, v7, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v19, v3, v18 ->   add a0, a1, a0
// [Asm] subst   sw v8, 0(v19) ->   sw a3, 0(a0)
// [Asm] subst   lw v10, 0(v2) ->   lw a0, 0(a2)
// [Asm] subst   addi v11, v10, -1 ->   addi a0, a0, -1
// [Asm] subst   sw v11, 0(v2) ->   sw a0, 0(a2)
// [Asm] subst   mv a0, v2 ->   mv a0, a2
// [Asm] subst   call init_count59l3_3 ->   call init_count59l3_3
// [Asm] subst   mv v2, a0 ->   mv a2, a0
// [Asm] subst   lw v4, 0(v2) ->   lw a0, 0(a2)
// [Asm] subst   li v23, 1 ->   li a3, 1
// [Asm] subst   beq v4, v23, .init_count59l3_3_1 ->   beq a0, a3, .init_count59l3_3_1
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f22) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_22"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_22"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main262l1_9 ->   call main262l1_9
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] fannkuch1l0_8:
// [Asm] # block info: defs: [v2], uses: [a0], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [s11, a0, zero], live_out: [s11, zero, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch1l0_8_0:
// [Asm]   # save_ctx1  # live: [s11, zero, a0]
// [Asm]   mv v2, a0  # live: [s11, zero, v2]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, v45, fa0, t4, t2, v15], uses: [zero, a0, v45, v7, a2, a1, s11, v2], upward_exposed: [s11, zero, v2], params_defs: []
// [Asm] # live_in: [s11, zero, v2], live_out: [v15, s11, zero, v2]
// [Asm] # block parameters: []
// [Asm] .fannkuch1l0_8_13:
// [Asm]   slliw v45, v2, 2  # live: [zero, v45, s11, v2]
// [Asm]   sub v7, s11, v45  # live: [zero, v7, v2]
// [Asm]   andi s11, v7, -8  # live: [zero, v7, s11, v2]
// [Asm]   mv a1, v2  # live: [zero, v7, a1, s11, v2]
// [Asm]   mv a0, v7  # live: [zero, a0, v7, a1, s11, v2]
// [Asm]   mv a2, zero  # live: [zero, a0, v7, a2, a1, s11, v2]
// [Asm]   call memseti32  # live: [zero, v7, s11, v2]
// [Asm]   # save_ctx2  # live: [zero, v7, s11, v2]
// [Asm]   mv a0, zero  # live: [zero, a0, v7, s11, v2]
// [Asm]   mv a1, v7  # live: [zero, a0, v7, a1, s11, v2]
// [Asm]   mv a2, v2  # live: [zero, a0, v7, a2, a1, s11, v2]
// [Asm]   call init_arr9l2_0  # live: [v7, s11, zero, a0, v2]
// [Asm]   mv v14, a0  # live: [v7, s11, zero, v2]
// [Asm]   # restore_ctx2  # live: [v7, s11, zero, v2]
// [Asm] # control
// [Asm]   mv v15, v7  # live: [v15, s11, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v3, v25, t1, v42, v26, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v4, v6, v34, ft7, v11, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, v24, v31, s10, v9, ft8, a7, fa7, t3, t0, fa5, fa3, ft3, fa0, t4, t2, v40], uses: [v2, v3, v11, v25, v5, v10, a0, v42, v26, a2, a1, s11, v12, v31, v9, zero, v8, v4, v6, v15, v34, v40], upward_exposed: [s11, v15, zero, v2], params_defs: [v15]
// [Asm] # live_in: [v15, s11, zero, v2], live_out: []
// [Asm] # block parameters: [v15]
// [Asm] .fannkuch1l0_8_1:
// [Asm]   slliw v42, v2, 2  # live: [zero, v42, v15, s11, v2]
// [Asm]   sub v6, s11, v42  # live: [zero, v6, v15, v2]
// [Asm]   andi s11, v6, -8  # live: [zero, v6, s11, v15, v2]
// [Asm]   mv a1, v2  # live: [zero, v6, a1, s11, v15, v2]
// [Asm]   mv a0, v6  # live: [zero, a0, v6, a1, s11, v15, v2]
// [Asm]   mv a2, zero  # live: [zero, a0, a2, v6, a1, s11, v15, v2]
// [Asm]   call memseti32  # live: [zero, v6, v15, s11, v2]
// [Asm]   slliw v40, v2, 2  # live: [v40, zero, v6, v15, s11, v2]
// [Asm]   sub v8, s11, v40  # live: [zero, v8, v6, v15, v2]
// [Asm]   andi s11, v8, -8  # live: [zero, v8, v6, s11, v15, v2]
// [Asm]   mv a1, v2  # live: [zero, v8, v6, a1, s11, v15, v2]
// [Asm]   mv a0, v8  # live: [zero, a0, v8, v6, a1, s11, v15, v2]
// [Asm]   mv a2, zero  # live: [zero, a0, v8, a2, v6, a1, s11, v15, v2]
// [Asm]   call memseti32  # live: [zero, v8, v6, v15, s11, v2]
// [Asm]   addi v10, s11, -4  # live: [v10, zero, v8, v6, v15, v2]
// [Asm]   andi s11, v10, -8  # live: [v10, zero, v8, v6, v15, s11, v2]
// [Asm]   sw zero, 0(v10)  # live: [v10, zero, v8, v6, v15, s11, v2]
// [Asm]   addi v11, s11, -4  # live: [v11, v10, zero, v8, v6, v15, v2]
// [Asm]   andi s11, v11, -8  # live: [v11, v10, zero, v8, v6, v15, s11, v2]
// [Asm]   sw zero, 0(v11)  # live: [v11, v10, zero, v8, v6, v15, s11, v2]
// [Asm]   addi v4, s11, -4  # live: [v11, v10, zero, v8, v4, v6, v15, v2]
// [Asm]   andi s11, v4, -8  # live: [v11, v10, zero, v8, v4, v6, v15, s11, v2]
// [Asm]   sw zero, 0(v4)  # live: [v11, v10, zero, v8, v4, v6, v15, s11, v2]
// [Asm]   addi v9, s11, -4  # live: [v11, v10, zero, v8, v4, v6, v15, v9, v2]
// [Asm]   andi s11, v9, -8  # live: [v11, v10, zero, v8, v4, v6, v15, s11, v9, v2]
// [Asm]   sw zero, 0(v9)  # live: [v11, v10, v8, v4, v6, v15, s11, v9, v2]
// [Asm]   addi v3, s11, -4  # live: [v3, v11, v10, v8, v4, v6, v15, v9, v2]
// [Asm]   andi s11, v3, -8  # live: [v3, v11, v10, v8, v4, v6, v15, s11, v9, v2]
// [Asm]   sw v2, 0(v3)  # live: [v3, v11, v10, v8, v4, v6, v15, s11, v9, v2]
// [Asm]   addi v12, s11, -72  # live: [v3, v11, v10, v8, v4, v6, v12, v15, v9, v2]
// [Asm]   andi s11, v12, -8  # live: [v3, v11, v10, v8, v4, v6, s11, v12, v15, v9, v2]
// [Asm]   la v34, compute40_19  # live: [v2, v3, v11, v10, v8, v4, v6, s11, v12, v15, v9, v34]
// [Asm]   sd v34, 0(v12)  # live: [v2, v11, v10, v8, v4, v6, s11, v12, v15, v9, v3]
// [Asm]   sd v2, 8(v12)  # live: [v11, v10, v8, v4, v6, s11, v12, v15, v9, v3]
// [Asm]   sd v6, 16(v12)  # live: [v11, v10, v8, v4, s11, v12, v15, v9, v3]
// [Asm]   sd v15, 24(v12)  # live: [v11, v10, v8, v4, s11, v12, v9, v3]
// [Asm]   sd v8, 32(v12)  # live: [v11, v10, v4, s11, v12, v9, v3]
// [Asm]   sd v10, 40(v12)  # live: [v11, v4, s11, v12, v9, v3]
// [Asm]   sd v11, 48(v12)  # live: [v11, v4, s11, v12, v9, v3]
// [Asm]   sd v4, 56(v12)  # live: [v11, v4, s11, v12, v9, v3]
// [Asm]   sd v9, 64(v12)  # live: [v11, v4, s11, v12, v3]
// [Asm]   mv s10, v12  # live: [v11, v4, s11, v12, v3]
// [Asm]   ld v31, 0(v12)  # live: [v11, v4, s11, v31, v3]
// [Asm]   # save_ctx2  # live: [v11, v4, s11, v31, v3]
// [Asm]   mv a0, v3  # live: [v11, v4, s11, v31, a0]
// [Asm]   jalr v31  # live: [v11, v4, s11, a0]
// [Asm]   mv v24, a0  # live: [v11, v4, s11]
// [Asm]   # restore_ctx2  # live: [v11, v4, s11]
// [Asm]   lw v25, 0(v11)  # live: [v25, v4, s11]
// [Asm]   lw v26, 0(v4)  # live: [v25, s11, v26]
// [Asm]   addi v5, s11, -8  # live: [v25, v5, v26]
// [Asm]   andi s11, v5, -8  # live: [v25, v5, v26]
// [Asm]   sw v25, 0(v5)  # live: [v5, v26]
// [Asm]   sw v26, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main262l1_9:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v2, v11, a0, v4, v6, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main262l1_9_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v11, 9  # live: [v11]
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   call fannkuch1l0_8  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm]   lw v3, 0(v2)  # live: [v2, v3]
// [Asm]   lw v4, 4(v2)  # live: [v4, v3]
// [Asm]   # save_ctx2  # live: [v4, v3]
// [Asm]   mv a0, v4  # live: [a0, v3]
// [Asm]   call minimbt_print_int  # live: [a0, v3]
// [Asm]   mv v5, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm]   # save_ctx2  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] init_count59l3_3:
// [Asm] # block info: defs: [v3, v4, v23, v2], uses: [v4, a1, a0, v23, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v3, zero, v2]
// [Asm] # block parameters: []
// [Asm] .init_count59l3_3_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm]   lw v4, 0(v2)  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   li v23, 1  # live: [v2, v4, zero, v23, v3]
// [Asm]   beq v4, v23, .init_count59l3_3_1  # live: [v2, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, v19, a6, ft10, ft5, v6, ft7, v11, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v2, v11, v18, v10, a0, v13, v7, v8, v19, v6, a1, v3], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, zero, v3], live_out: [v14, zero]
// [Asm] # block parameters: []
// [Asm] .init_count59l3_3_2:
// [Asm]   lw v6, 0(v2)  # live: [v2, v6, zero, v3]
// [Asm]   addi v7, v6, -1  # live: [v2, v7, zero, v3]
// [Asm]   lw v8, 0(v2)  # live: [v2, v8, v7, zero, v3]
// [Asm]   slliw v18, v7, 2  # live: [v2, v8, v18, zero, v3]
// [Asm]   add v19, v3, v18  # live: [v2, v8, v19, zero, v3]
// [Asm]   sw v8, 0(v19)  # live: [v2, zero, v3]
// [Asm]   lw v10, 0(v2)  # live: [v2, v10, zero, v3]
// [Asm]   addi v11, v10, -1  # live: [v2, v11, zero, v3]
// [Asm]   sw v11, 0(v2)  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [zero, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, zero, a0]
// [Asm]   call init_count59l3_3  # live: [zero, a0]
// [Asm]   mv v13, a0  # live: [zero, v13]
// [Asm]   # restore_ctx2  # live: [zero, v13]
// [Asm] # control
// [Asm]   mv v14, v13  # live: [v14, zero]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: [v14]
// [Asm] # live_in: [v14, zero], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .init_count59l3_3_3:
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14, zero]
// [Asm] # block parameters: []
// [Asm] .init_count59l3_3_1:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14, zero]
// [Asm]   j .init_count59l3_3_3  # live: [v14, zero]
// [Asm] 
// [Asm] # leaf false
// [Asm] compute40_19:
// [Asm] # block info: defs: [v2, v5, v10, v7, v8, v0, v4, v6, v15, v9, v3], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: [v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_19_8:
// [Asm]   # save_ctx1  # live: [zero, a0, s11, s10]
// [Asm]   mv v0, s10  # live: [zero, a0, v0, s11]
// [Asm]   mv v2, a0  # live: [zero, v0, s11, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, zero, v0, s11, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, zero, v0, v4, s11, v3]
// [Asm]   ld v5, 24(v0)  # live: [v2, v5, zero, v0, v4, s11, v3]
// [Asm]   ld v6, 32(v0)  # live: [v2, v5, zero, v0, v4, v6, s11, v3]
// [Asm]   ld v7, 40(v0)  # live: [v2, v5, zero, v7, v0, v4, v6, s11, v3]
// [Asm]   ld v8, 48(v0)  # live: [v2, v5, zero, v8, v7, v0, v4, v6, s11, v3]
// [Asm]   ld v9, 56(v0)  # live: [v2, v5, zero, v8, v7, v0, v4, v6, s11, v9, v3]
// [Asm]   ld v10, 64(v0)  # live: [v2, v5, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] # control
// [Asm]   mv v15, v2  # live: [v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v16, v169], uses: [v16, v15, v169], upward_exposed: [v15], params_defs: [v15]
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3], live_out: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] # block parameters: [v15]
// [Asm] .compute40_19_0:
// [Asm]   lw v16, 0(v15)  # live: [v5, v16, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] # control
// [Asm]   li v169, 1  # live: [v5, v16, v10, zero, v169, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm]   blt v16, v169, .compute40_19_2  # live: [v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3], live_out: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_19_1:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v19, v21, v20, v22], uses: [v4, v5, zero, v3], upward_exposed: [v4, v5, zero, v3], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3], live_out: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_19_45:
// [Asm] # control
// [Asm]   mv v19, zero  # live: [v5, v10, v7, s11, v9, zero, v8, v19, v4, v6, v15, v3]
// [Asm]   mv v20, v3  # live: [v5, v10, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   mv v21, v4  # live: [v5, v21, v10, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   mv v22, v5  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [v19, v20, v23], upward_exposed: [v19, v20], params_defs: [v19, v21, v20, v22]
// [Asm] # live_in: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3], live_out: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] # block parameters: [v19, v20, v21, v22]
// [Asm] .compute40_19_40:
// [Asm]   addi v23, v20, -1  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v23, v8, v19, v4, v6, v15, v3]
// [Asm] # control
// [Asm]   blt v23, v19, .compute40_19_42  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v109, v110, v103, v107, v105, v19, v108], uses: [v109, v21, v22, v110, v20, v107, v103, v105, v19, v108], upward_exposed: [v19, v21, v22, v20], params_defs: []
// [Asm] # live_in: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3], live_out: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_19_41:
// [Asm]   slliw v109, v19, 2  # live: [v5, v21, v10, v22, v7, s11, v9, v109, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   add v110, v22, v109  # live: [v5, v21, v10, v22, v110, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   lw v103, 0(v110)  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v103, v4, v6, v15, v3]
// [Asm]   slliw v107, v19, 2  # live: [v5, v21, v10, v22, v7, v107, s11, v9, zero, v20, v8, v19, v103, v4, v6, v15, v3]
// [Asm]   add v108, v21, v107  # live: [v5, v21, v10, v22, v7, v108, s11, v9, zero, v20, v8, v19, v103, v4, v6, v15, v3]
// [Asm]   sw v103, 0(v108)  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   addi v105, v19, 1  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v105, v4, v6, v15, v3]
// [Asm] # control
// [Asm]   mv v19, v105  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   mv v20, v20  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   mv v21, v21  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   mv v22, v22  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm]   j .compute40_19_40  # live: [v5, v21, v10, v22, v7, s11, v9, zero, v20, v8, v19, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v18], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v18]
// [Asm] # block parameters: []
// [Asm] .compute40_19_2:
// [Asm] # control
// [Asm]   mv v18, zero  # live: [v18]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v18, a0], upward_exposed: [v18], params_defs: [v18]
// [Asm] # live_in: [v18], live_out: []
// [Asm] # block parameters: [v18]
// [Asm] .compute40_19_6:
// [Asm] # control
// [Asm]   mv a0, v18  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3], live_out: [v25, v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_19_42:
// [Asm] # control
// [Asm]   mv v25, zero  # live: [v25, v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v26], uses: [v25], upward_exposed: [v25], params_defs: [v25]
// [Asm] # live_in: [v25, v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3], live_out: [v5, v10, v26, zero, v7, v8, v4, v6, v15, s11, v9, v3]
// [Asm] # block parameters: [v25]
// [Asm] .compute40_19_43:
// [Asm] # control
// [Asm]   mv v26, v25  # live: [v5, v10, v26, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, fa1, fa2, ft6, v29, fa6, v27, a4, a6, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, a0, zero, v29, v7, v4, v6, a1, v15, s11], upward_exposed: [v4, v6, v15, s11, zero, v7], params_defs: [v26]
// [Asm] # live_in: [v5, v10, v26, zero, v7, v8, v4, v6, v15, s11, v9, v3], live_out: [v11, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] # block parameters: [v26]
// [Asm] .compute40_19_9:
// [Asm]   # save_ctx2  # live: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv a0, v15  # live: [v5, v10, a0, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv a1, v6  # live: [v5, v10, a0, v7, a1, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   call init_count59l3_3  # live: [v5, v10, a0, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv v27, a0  # live: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   # restore_ctx2  # live: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   sw zero, 0(v7)  # live: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   lw v29, 0(v4)  # live: [v5, v10, v7, s11, v9, zero, v29, v8, v4, v6, v15, v3]
// [Asm]   addi v11, s11, -4  # live: [v11, v5, v10, v7, v9, zero, v29, v8, v4, v6, v15, v3]
// [Asm]   andi s11, v11, -8  # live: [v11, v5, v10, v7, s11, v9, zero, v29, v8, v4, v6, v15, v3]
// [Asm]   sw v29, 0(v11)  # live: [v11, v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v32, v31, v33], uses: [v11, v4, v7], upward_exposed: [v11, v4, v7], params_defs: []
// [Asm] # live_in: [v11, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3], live_out: [v5, v10, v7, v32, s11, v31, v9, v33, zero, v8, v4, v6, v15, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_19_36:
// [Asm] # control
// [Asm]   mv v31, v11  # live: [v5, v10, v7, s11, v31, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv v32, v4  # live: [v5, v10, v7, v32, s11, v31, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv v33, v7  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v34], uses: [v31, v34, zero], upward_exposed: [v31, zero], params_defs: [v32, v31, v33]
// [Asm] # live_in: [v5, v10, v7, v32, s11, v31, v9, v33, zero, v8, v4, v6, v15, v3], live_out: [v5, v10, v7, v32, s11, v31, v9, v33, zero, v8, v4, v6, v15, v3]
// [Asm] # block parameters: [v31, v32, v33]
// [Asm] .compute40_19_31:
// [Asm]   lw v34, 0(v31)  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v34, v3]
// [Asm] # control
// [Asm]   beq v34, zero, .compute40_19_32  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v37, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, v38, t2], uses: [v13, zero, a0, v32, a2, v37, a1, a3, s11, v31], upward_exposed: [v32, s11, v31, zero], params_defs: []
// [Asm] # live_in: [v5, v10, v7, v32, s11, v31, v9, v33, zero, v8, v4, v6, v15, v3], live_out: [v5, v10, v7, v32, s11, v31, v9, v33, zero, v8, v38, v4, v6, v15, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_19_33:
// [Asm]   addi v13, s11, -4  # live: [v5, v10, v13, v7, v32, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   andi s11, v13, -8  # live: [v5, v10, v13, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   sw zero, 0(v13)  # live: [v5, v10, v13, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   # save_ctx2  # live: [v5, v10, v13, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv a0, zero  # live: [v5, v10, a0, v13, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv a1, v13  # live: [v5, v10, a0, v7, v32, a1, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv a2, v31  # live: [v5, v10, a0, v7, v32, a2, a1, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv a3, v32  # live: [v5, v10, a0, v7, v32, a2, a1, s11, a3, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   call flip_loop99l5_4  # live: [v5, v10, a0, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv v37, a0  # live: [v5, v10, v7, v32, v37, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   # restore_ctx2  # live: [v5, v10, v7, v32, v37, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] # control
// [Asm]   mv v38, v37  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v38, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v41, v42, v39], uses: [v42, v32, v41, v31, v33, v39], upward_exposed: [v32, v31, v33], params_defs: [v38]
// [Asm] # live_in: [v5, v10, v7, v32, s11, v31, v9, v33, zero, v8, v38, v4, v6, v15, v3], live_out: [v5, v10, v7, v32, s11, v31, v9, v33, zero, v8, v4, v6, v15, v3]
// [Asm] # block parameters: [v38]
// [Asm] .compute40_19_37:
// [Asm]   lw v39, 0(v32)  # live: [v5, v10, v7, v32, s11, v31, v33, v9, v39, zero, v8, v4, v6, v15, v3]
// [Asm]   sw v39, 0(v31)  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   lw v41, 0(v33)  # live: [v5, v10, v7, v32, v41, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   addi v42, v41, 1  # live: [v5, v10, v42, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   sw v42, 0(v33)  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] # control
// [Asm]   mv v31, v31  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv v32, v32  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv v33, v33  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   j .compute40_19_31  # live: [v5, v10, v7, v32, s11, v31, v33, v9, zero, v8, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v44], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3], live_out: [v5, v10, zero, v8, v7, v4, v6, s11, v15, v44, v9, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_19_32:
// [Asm] # control
// [Asm]   mv v44, zero  # live: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v44, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v45], uses: [v44], upward_exposed: [v44], params_defs: [v44]
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v44, v9, v3], live_out: [v5, v10, zero, v8, v45, v7, v4, v6, v15, s11, v9, v3]
// [Asm] # block parameters: [v44]
// [Asm] .compute40_19_34:
// [Asm] # control
// [Asm]   mv v45, v44  # live: [v5, v10, zero, v45, v7, v8, v4, v6, v15, s11, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v47, v46], uses: [v7, v47, v46, v8], upward_exposed: [v7, v8], params_defs: [v45]
// [Asm] # live_in: [v5, v10, zero, v7, v8, v45, v4, v6, v15, s11, v9, v3], live_out: [v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] # block parameters: [v45]
// [Asm] .compute40_19_10:
// [Asm]   lw v46, 0(v8)  # live: [v5, v46, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3]
// [Asm]   lw v47, 0(v7)  # live: [v5, v46, v10, zero, v7, v8, v4, v47, v6, v15, s11, v9, v3]
// [Asm] # control
// [Asm]   blt v47, v46, .compute40_19_4  # live: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v49, v51], uses: [v8, v49, zero, v7], upward_exposed: [v8, zero, v7], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3], live_out: [v3, v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v51]
// [Asm] # block parameters: []
// [Asm] .compute40_19_3:
// [Asm]   lw v49, 0(v7)  # live: [v5, v10, v49, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm]   sw v49, 0(v8)  # live: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] # control
// [Asm]   mv v51, zero  # live: [v51, v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v62, v58, v14, v53, v150, v52, v143, v12, s11, v145, v60, v56, v148, v59, v140, v57, v61, v55, v54], uses: [v62, v58, v14, v53, v10, v150, v7, v143, v52, s11, v12, v145, v9, v60, v56, zero, v148, v59, v140, v57, v61, v55, v54], upward_exposed: [v10, s11, v9, zero, v7], params_defs: [v51]
// [Asm] # live_in: [v3, v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v51], live_out: [v14, v5, v10, v7, v12, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm] # block parameters: [v51]
// [Asm] .compute40_19_5:
// [Asm]   lw v52, 0(v9)  # live: [v5, v10, v7, s11, v52, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   lw v53, 0(v7)  # live: [v5, v53, v10, v7, s11, v52, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   lw v54, 0(v10)  # live: [v5, v53, v10, v7, s11, v52, v9, zero, v8, v4, v6, v15, v54, v3]
// [Asm]   lw v55, 0(v10)  # live: [v5, v53, v10, v7, s11, v52, v9, zero, v8, v4, v6, v15, v54, v55, v3]
// [Asm]   li v150, 2  # live: [v5, v53, v10, v7, v150, s11, v52, v9, zero, v8, v4, v6, v15, v54, v55, v3]
// [Asm]   div v56, v55, v150  # live: [v5, v53, v10, v7, s11, v52, v9, v56, zero, v8, v4, v6, v15, v54, v3]
// [Asm]   li v148, 2  # live: [v5, v53, v10, v7, s11, v52, v9, v56, zero, v8, v148, v4, v6, v15, v54, v3]
// [Asm]   mul v57, v56, v148  # live: [v5, v53, v10, v7, s11, v52, v9, zero, v8, v4, v6, v15, v57, v54, v3]
// [Asm]   sub v58, v54, v57  # live: [v5, v58, v53, v10, v7, s11, v52, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   li v145, 2  # live: [v5, v58, v53, v10, v7, s11, v52, v9, v145, zero, v8, v4, v6, v15, v3]
// [Asm]   mul v59, v58, v145  # live: [v5, v10, v53, v7, s11, v52, v9, zero, v8, v4, v59, v6, v15, v3]
// [Asm]   li v143, 1  # live: [v5, v10, v53, v7, s11, v52, v143, v9, zero, v8, v4, v59, v6, v15, v3]
// [Asm]   sub v60, v143, v59  # live: [v5, v10, v53, v7, s11, v52, v9, v60, zero, v8, v4, v6, v15, v3]
// [Asm]   mul v61, v53, v60  # live: [v5, v10, v7, s11, v52, v9, zero, v8, v4, v6, v15, v61, v3]
// [Asm]   add v62, v52, v61  # live: [v62, v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   sw v62, 0(v9)  # live: [v5, v10, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   addi v12, s11, -4  # live: [v5, v10, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   andi s11, v12, -8  # live: [v5, v10, v7, v12, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   li v140, 1  # live: [v5, v10, v7, v12, s11, v9, zero, v8, v4, v6, v140, v15, v3]
// [Asm]   sw v140, 0(v12)  # live: [v5, v10, v7, v12, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   addi v14, s11, -4  # live: [v14, v5, v10, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   andi s11, v14, -8  # live: [v14, v5, v10, v7, v12, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   sw zero, 0(v14)  # live: [v14, v5, v10, zero, v7, v8, v4, v6, v12, s11, v15, v9, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v66, v69, v70, v71, v68, v67], uses: [v14, v6, v5, v12, v15, v3], upward_exposed: [v14, v6, v5, v12, v15, v3], params_defs: []
// [Asm] # live_in: [v14, v5, v10, v7, v12, s11, v9, zero, v8, v4, v6, v15, v3], live_out: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_19_57:
// [Asm] # control
// [Asm]   mv v66, v14  # live: [v66, v5, v10, v7, s11, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv v67, v12  # live: [v66, v5, v10, v67, v7, s11, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv v68, v3  # live: [v66, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v6, v15, v3]
// [Asm]   mv v69, v15  # live: [v66, v69, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v6, v15, v3]
// [Asm]   mv v70, v6  # live: [v66, v69, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm]   mv v71, v5  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v136, v72], uses: [v136, v72, v67], upward_exposed: [v67], params_defs: [v66, v69, v70, v71, v68, v67]
// [Asm] # live_in: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3], live_out: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] # block parameters: [v66, v67, v68, v69, v70, v71]
// [Asm] .compute40_19_46:
// [Asm]   lw v72, 0(v67)  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v72, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] # control
// [Asm]   li v136, 1  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v72, zero, v68, v8, v136, v4, v70, v6, v15, v3]
// [Asm]   bne v72, v136, .compute40_19_48  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v79], uses: [v69, v79, v68], upward_exposed: [v69, v68], params_defs: []
// [Asm] # live_in: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3], live_out: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_19_47:
// [Asm]   lw v79, 0(v69)  # live: [v66, v69, v71, v5, v10, v79, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] # control
// [Asm]   beq v79, v68, .compute40_19_49  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v127, v120, ft0, ft1, a1, fa1, v93, v115, fa2, ft6, a4, fa6, a6, ft5, ft10, v81, v90, v128, v89, v122, ft7, v116, ft4, v87, ft9, a5, fa4, a0, v119, v123, ft2, v92, v88, a2, v114, a3, ft8, a7, fa7, t3, t0, fa5, fa3, ft3, v85, fa0, v84, t4, t2, v83], uses: [v66, v116, v71, v69, v87, v127, a0, v123, v119, v120, v88, v92, a2, v114, a1, v93, v115, zero, v85, v84, v81, v90, v70, v128, v89, v122], upward_exposed: [v66, v71, v69, v70, zero], params_defs: []
// [Asm] # live_in: [v66, v71, v69, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3], live_out: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_19_50:
// [Asm]   lw v81, 0(v71)  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v81, v6, v70, v15, v3]
// [Asm]   sw v81, 0(v66)  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm]   # save_ctx2  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm]   mv a0, zero  # live: [v66, v69, v71, v5, v10, a0, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm]   mv a1, v69  # live: [v66, v69, v71, v5, v10, a0, v67, v7, a1, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm]   mv a2, v71  # live: [v66, v69, v71, v5, v10, a0, v67, v7, a2, a1, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm]   call move_perm1_forward197l6_6  # live: [v66, v69, v71, v5, v10, a0, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm]   mv v83, a0  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm]   # restore_ctx2  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm]   lw v84, 0(v69)  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v84, v4, v70, v6, v15, v3]
// [Asm]   lw v85, 0(v66)  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v85, v84, v4, v70, v6, v15, v3]
// [Asm]   slliw v127, v84, 2  # live: [v66, v69, v71, v5, v10, v127, v67, v7, s11, v9, v68, zero, v8, v85, v4, v6, v70, v15, v3]
// [Asm]   add v128, v71, v127  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v85, v4, v6, v70, v15, v128, v3]
// [Asm]   sw v85, 0(v128)  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v6, v70, v15, v3]
// [Asm]   lw v87, 0(v69)  # live: [v66, v69, v71, v5, v87, v10, v67, v7, s11, v9, v68, zero, v8, v4, v6, v70, v15, v3]
// [Asm]   lw v88, 0(v69)  # live: [v66, v69, v71, v5, v87, v10, v67, v7, v88, s11, v9, v68, zero, v8, v4, v6, v70, v15, v3]
// [Asm]   slliw v122, v88, 2  # live: [v66, v69, v71, v5, v87, v10, v67, v7, s11, v9, v68, zero, v8, v4, v6, v70, v15, v122, v3]
// [Asm]   add v123, v70, v122  # live: [v66, v69, v71, v5, v87, v10, v67, v123, v7, s11, v9, v68, zero, v8, v4, v6, v70, v15, v3]
// [Asm]   lw v89, 0(v123)  # live: [v66, v69, v71, v5, v87, v10, v67, v7, s11, v9, v68, zero, v8, v4, v6, v70, v15, v89, v3]
// [Asm]   addi v90, v89, -1  # live: [v66, v69, v71, v5, v87, v10, v67, v7, s11, v9, v68, zero, v8, v4, v90, v6, v70, v15, v3]
// [Asm]   slliw v119, v87, 2  # live: [v66, v69, v71, v5, v10, v67, v119, v7, s11, v9, v68, zero, v8, v4, v90, v6, v70, v15, v3]
// [Asm]   add v120, v70, v119  # live: [v66, v69, v71, v5, v10, v67, v120, v7, s11, v9, v68, zero, v8, v4, v90, v6, v70, v15, v3]
// [Asm]   sw v90, 0(v120)  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm]   lw v92, 0(v69)  # live: [v66, v69, v71, v5, v10, v67, v7, v92, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm]   slliw v115, v92, 2  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v115, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm]   add v116, v70, v115  # live: [v66, v116, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm]   lw v93, 0(v116)  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v93, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] # control
// [Asm]   li v114, 1  # live: [v66, v69, v71, v5, v10, v67, v7, v114, s11, v9, v93, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm]   bge v93, v114, .compute40_19_51  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v95, v96, v99], uses: [v95, v69, v96, zero], upward_exposed: [v69, zero], params_defs: []
// [Asm] # live_in: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3], live_out: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v99, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_19_52:
// [Asm]   lw v95, 0(v69)  # live: [v66, v69, v71, v5, v10, v67, v7, v95, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm]   addi v96, v95, 1  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v96, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm]   sw v96, 0(v69)  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] # control
// [Asm]   mv v99, zero  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v99, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v102], uses: [zero], upward_exposed: [zero], params_defs: [v99]
// [Asm] # live_in: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v99, zero, v68, v8, v4, v70, v6, v15, v3], live_out: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v102, v3]
// [Asm] # block parameters: [v99]
// [Asm] .compute40_19_53:
// [Asm] # control
// [Asm]   mv v102, zero  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v102, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v66, v69, v70, v71, v68, v67], upward_exposed: [v66, v69, v70, v71, v68, v67], params_defs: [v102]
// [Asm] # live_in: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v102, v3], live_out: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] # block parameters: [v102]
// [Asm] .compute40_19_54:
// [Asm] # control
// [Asm]   mv v66, v66  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm]   mv v67, v67  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm]   mv v68, v68  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm]   mv v69, v69  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm]   mv v70, v70  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm]   mv v71, v71  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm]   j .compute40_19_46  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v51], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3], live_out: [v3, v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v51]
// [Asm] # block parameters: []
// [Asm] .compute40_19_4:
// [Asm] # control
// [Asm]   mv v51, zero  # live: [v51, v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm]   j .compute40_19_5  # live: [v51, v5, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v74], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3], live_out: [v5, v10, zero, v7, v8, v4, v74, v6, v15, s11, v9, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_19_48:
// [Asm] # control
// [Asm]   mv v74, zero  # live: [v5, v10, zero, v8, v7, v4, v74, v6, v15, s11, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v75], uses: [v74], upward_exposed: [v74], params_defs: [v74]
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v74, v6, v15, s11, v9, v3], live_out: [v5, v75, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3]
// [Asm] # block parameters: [v74]
// [Asm] .compute40_19_55:
// [Asm] # control
// [Asm]   mv v75, v74  # live: [v5, v75, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v77, v76], uses: [v10, v15, v77, v76], upward_exposed: [v10, v15], params_defs: [v75]
// [Asm] # live_in: [v5, v75, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3], live_out: [v5, v10, zero, v7, v8, v4, v6, v15, s11, v9, v3]
// [Asm] # block parameters: [v75]
// [Asm] .compute40_19_11:
// [Asm]   lw v76, 0(v10)  # live: [v76, v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm]   addi v77, v76, 1  # live: [v5, v10, zero, v77, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm]   sw v77, 0(v10)  # live: [v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] # control
// [Asm]   mv v15, v15  # live: [v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm]   j .compute40_19_0  # live: [v5, v10, zero, v8, v7, v4, v6, v15, s11, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v102], uses: [v69, zero, v67], upward_exposed: [v69, zero, v67], params_defs: []
// [Asm] # live_in: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3], live_out: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v102, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_19_49:
// [Asm]   sw zero, 0(v67)  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm]   sw zero, 0(v69)  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] # control
// [Asm]   mv v102, zero  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v102, v3]
// [Asm]   j .compute40_19_54  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v102, v3]
// [Asm] 
// [Asm] # block info: defs: [v99], uses: [zero, v67], upward_exposed: [zero, v67], params_defs: []
// [Asm] # live_in: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v68, zero, v8, v4, v70, v6, v15, v3], live_out: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v99, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_19_51:
// [Asm]   sw zero, 0(v67)  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] # control
// [Asm]   mv v99, zero  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v99, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm]   j .compute40_19_53  # live: [v66, v69, v71, v5, v10, v67, v7, s11, v9, v99, zero, v68, v8, v4, v70, v6, v15, v3]
// [Asm] 
// [Asm] # leaf true
// [Asm] init_arr9l2_0:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .init_arr9l2_0_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v5, v7], upward_exposed: [v5, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .init_arr9l2_0_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v5, v6, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v5, .init_arr9l2_0_2  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v14, v5, v12, v15], uses: [v5, v6, v14, v15, v12, v7], upward_exposed: [v5, v6, v7], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .init_arr9l2_0_1:
// [Asm]   slliw v14, v5, 2  # live: [v6, v5, v14, zero, v7]
// [Asm]   add v15, v6, v14  # live: [v6, v5, v15, zero, v7]
// [Asm]   sw v5, 0(v15)  # live: [v6, v5, zero, v7]
// [Asm]   addi v12, v5, 1  # live: [v6, v12, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v12  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .init_arr9l2_0_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .init_arr9l2_0_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .init_arr9l2_0_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] move_perm1_forward197l6_6:
// [Asm] # block info: defs: [v3, v4, v5, v6, v2], uses: [v2, v5, a0, a2, a1, v6, v3], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v3, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward197l6_6_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm]   lw v5, 0(v3)  # live: [v2, v4, v5, zero, v3]
// [Asm]   addi v6, v5, -1  # live: [v2, v4, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v6, v2, .move_perm1_forward197l6_6_2  # live: [v2, v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v8, v19, a6, ft10, ft5, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v2, v11, v16, a0, a2, a1, v17, v9, v18, zero, v8, v19, v4, v3], upward_exposed: [v3, v4, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v4, zero, v3], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward197l6_6_1:
// [Asm]   addi v8, v2, 1  # live: [v2, v8, v4, zero, v3]
// [Asm]   slliw v18, v8, 2  # live: [v2, v4, v18, zero, v3]
// [Asm]   add v19, v4, v18  # live: [v2, v19, v4, zero, v3]
// [Asm]   lw v9, 0(v19)  # live: [v2, v4, zero, v9, v3]
// [Asm]   slliw v16, v2, 2  # live: [v2, v4, v16, zero, v9, v3]
// [Asm]   add v17, v4, v16  # live: [v2, v4, v17, zero, v9, v3]
// [Asm]   sw v9, 0(v17)  # live: [v2, v4, zero, v3]
// [Asm]   addi v11, v2, 1  # live: [v11, v4, zero, v3]
// [Asm]   # save_ctx2  # live: [v11, v4, zero, v3]
// [Asm]   mv a0, v11  # live: [v4, zero, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, zero, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, zero, a0]
// [Asm]   call move_perm1_forward197l6_6  # live: [zero, a0]
// [Asm]   mv v12, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .move_perm1_forward197l6_6_3:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward197l6_6_2:
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v13]
// [Asm]   j .move_perm1_forward197l6_6_3  # live: [v13]
// [Asm] 
// [Asm] # leaf true
// [Asm] flip_loop99l5_4:
// [Asm] # block info: defs: [v2, v5, v7, v8, v4, v6, v9, v3], uses: [v2, v5, a0, a2, v4, a1, a3, v3], upward_exposed: [a2, a1, a3, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, zero], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .flip_loop99l5_4_5:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, v5, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, v5, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, v5, zero, v8]
// [Asm]   mv v9, v5  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v11, v41, v10], uses: [v11, v41, v6, v10, v8], upward_exposed: [v6, v8], params_defs: [v8, v6, v9, v7]
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: [v6, v7, v8, v9]
// [Asm] .flip_loop99l5_4_0:
// [Asm]   lw v10, 0(v8)  # live: [v10, zero, v7, v8, v6, v9]
// [Asm]   li v41, 2  # live: [v10, zero, v7, v8, v41, v6, v9]
// [Asm]   div v11, v10, v41  # live: [v11, zero, v7, v8, v6, v9]
// [Asm] # control
// [Asm]   blt v11, v6, .flip_loop99l5_4_2  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v14, v16, v21, v26, v22, v32, v17, v24, v31, v33, v39, v18, v20, v27, v38, v6, v34], uses: [v14, v16, v21, v26, v22, v7, v32, v17, v24, v31, v9, v33, v39, v18, v20, v27, v8, v38, v6, v34], upward_exposed: [v8, v6, v9, v7], params_defs: []
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .flip_loop99l5_4_1:
// [Asm]   slliw v38, v6, 2  # live: [zero, v7, v8, v38, v6, v9]
// [Asm]   add v39, v9, v38  # live: [zero, v7, v8, v6, v9, v39]
// [Asm]   lw v14, 0(v39)  # live: [v14, zero, v7, v8, v6, v9]
// [Asm]   sw v14, 0(v7)  # live: [zero, v7, v8, v6, v9]
// [Asm]   lw v16, 0(v8)  # live: [v16, zero, v7, v8, v6, v9]
// [Asm]   sub v17, v16, v6  # live: [zero, v7, v8, v6, v17, v9]
// [Asm]   slliw v33, v17, 2  # live: [zero, v7, v8, v6, v9, v33]
// [Asm]   add v34, v9, v33  # live: [zero, v7, v8, v6, v9, v34]
// [Asm]   lw v18, 0(v34)  # live: [v18, zero, v7, v8, v6, v9]
// [Asm]   slliw v31, v6, 2  # live: [v18, zero, v7, v8, v6, v31, v9]
// [Asm]   add v32, v9, v31  # live: [v18, zero, v7, v8, v32, v6, v9]
// [Asm]   sw v18, 0(v32)  # live: [zero, v7, v8, v6, v9]
// [Asm]   lw v20, 0(v8)  # live: [zero, v20, v7, v8, v6, v9]
// [Asm]   sub v21, v20, v6  # live: [v21, zero, v7, v8, v6, v9]
// [Asm]   lw v22, 0(v7)  # live: [v21, zero, v22, v7, v8, v6, v9]
// [Asm]   slliw v26, v21, 2  # live: [zero, v26, v22, v7, v8, v6, v9]
// [Asm]   add v27, v9, v26  # live: [zero, v22, v27, v8, v7, v6, v9]
// [Asm]   sw v22, 0(v27)  # live: [v7, v6, v9, zero, v8]
// [Asm]   addi v24, v6, 1  # live: [v7, v24, v9, zero, v8]
// [Asm] # control
// [Asm]   mv v6, v24  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v7, v7  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v9, v9  # live: [v7, v6, v9, zero, v8]
// [Asm]   j .flip_loop99l5_4_0  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .flip_loop99l5_4_2:
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .flip_loop99l5_4_3:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_22:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_22_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main262l1_9  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_22  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("fannkuch", Tuple([Int, Int])), args: [("n", Int)], body: LetRec({name: ("gen_perm1", Array(Int)), args: [("len", Int)], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))}, Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("gen_perm1", Array(Int)), args: [("len", Int)], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))}, Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr")))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))
// [Knf] build_knf: App(Var("init_arr"), [Int(0)])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))))
// [Knf] build_knf: App(Var("gen_perm1"), [Var("n")])
// [Knf] build_knf: Var("gen_perm1")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))
// [Knf] build_knf: Array(Int(1), Var("n"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))
// [Knf] build_knf: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i")))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm1"), Var("i"))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("copy_perm")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))
// [Knf] build_knf: App(Var("copy_perm"), [Int(0)])
// [Knf] build_knf: Var("copy_perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)
// [Knf] build_knf: If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit)
// [Knf] build_knf: If(Eq(Get(Var("r"), Int(0)), Int(1)), Unit, Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), [])))
// [Knf] build_knf: Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))
// [Knf] build_knf: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("init_count"), [])
// [Knf] build_knf: Var("init_count")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))
// [Knf] build_knf: App(Var("init_count"), [])
// [Knf] build_knf: Var("init_count")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))
// [Knf] build_knf: Put(Var("flips"), Int(0), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))
// [Knf] build_knf: Array(Int(1), Get(Var("perm"), Int(0)))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("perm"), Int(0))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))
// [Knf] build_knf: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)
// [Knf] build_knf: If(Eq(Get(Var("k"), Int(0)), Int(0)), Unit, Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Put(Var("t"), Int(0), Get(Var("perm"), Var("i")))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm"), Var("i"))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0)))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("t"), Int(0))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("flip_loop")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))))
// [Knf] build_knf: App(Var("flip_loop"), [Int(0)])
// [Knf] build_knf: Var("flip_loop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))
// [Knf] build_knf: Put(Var("k"), Int(0), Get(Var("perm"), Int(0)))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm"), Int(0))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))
// [Knf] build_knf: Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("do_flip"), [Var("k")])
// [Knf] build_knf: Var("do_flip")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))
// [Knf] build_knf: App(Var("do_flip"), [Var("k")])
// [Knf] build_knf: Var("do_flip")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))
// [Knf] build_knf: If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit)
// [Knf] build_knf: Get(Var("max_flips"), Int(0))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0)))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))
// [Knf] build_knf: Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int)))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("check_sum"), Int(0))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int))
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))
// [Knf] build_knf: Array(Int(1), Bool(true))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))
// [Knf] build_knf: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)
// [Knf] build_knf: Get(Var("go"), Int(0))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), []))
// [Knf] build_knf: If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))))))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit))
// [Knf] build_knf: Put(Var("go"), Int(0), Bool(false))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)
// [Knf] build_knf: Put(Var("r"), Int(0), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))
// [Knf] build_knf: Put(Var("t"), Int(0), Get(Var("perm1"), Int(0)))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm1"), Int(0))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit))
// [Knf] build_knf: Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)
// [Knf] build_knf: App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("move_perm1_forward")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))
// [Knf] build_knf: App(Var("move_perm1_forward"), [Int(0)])
// [Knf] build_knf: Var("move_perm1_forward")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))
// [Knf] build_knf: Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0)))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("t"), Int(0))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))
// [Knf] build_knf: Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("count"), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)
// [Knf] build_knf: If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("count"), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Put(Var("go"), Int(0), Bool(false))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("go_loop"), [])
// [Knf] build_knf: Var("go_loop")
// [Knf] build_knf: Unit
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))
// [Knf] build_knf: App(Var("go_loop"), [])
// [Knf] build_knf: Var("go_loop")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))
// [Knf] build_knf: Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("compute"), [Var("r")])
// [Knf] build_knf: Var("compute")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))
// [Knf] build_knf: App(Var("compute"), [Var("r")])
// [Knf] build_knf: Var("compute")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])
// [Knf] build_knf: Get(Var("max_flips"), Int(0))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("check_sum"), Int(0))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))}, App(Var("main"), []))
// [Knf] build_knf: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))
// [Knf] build_knf: App(Var("fannkuch"), [Int(9)])
// [Knf] build_knf: Var("fannkuch")
// [Knf] build_knf: Int(9)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")]))
// [Knf] build_knf: App(Var("print_int"), [Var("check_sum")])
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: App(Var("print_int"), [Var("max_flips")])
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl fannkuch1l0_8
// [Main]   .type fannkuch1l0_8, @function
// [Main] # leaf false
// [Main] fannkuch1l0_8:
// [Main] .fannkuch1l0_8_0:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv s1, a0
// [Main] 
// [Main] .fannkuch1l0_8_13:
// [Main]   slliw a0, s1, 2
// [Main]   sub s0, s11, a0
// [Main]   andi s11, s0, -8
// [Main]   mv a1, s1
// [Main]   mv a0, s0
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   mv a0, zero
// [Main]   mv a1, s0
// [Main]   mv a2, s1
// [Main]   call init_arr9l2_0
// [Main] 
// [Main] .fannkuch1l0_8_1:
// [Main]   slliw a0, s1, 2
// [Main]   sub s2, s11, a0
// [Main]   andi s11, s2, -8
// [Main]   mv a1, s1
// [Main]   mv a0, s2
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   slliw a0, s1, 2
// [Main]   sub s3, s11, a0
// [Main]   andi s11, s3, -8
// [Main]   mv a1, s1
// [Main]   mv a0, s3
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   addi a0, s11, -4
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main]   addi s4, s11, -4
// [Main]   andi s11, s4, -8
// [Main]   sw zero, 0(s4)
// [Main]   addi s5, s11, -4
// [Main]   andi s11, s5, -8
// [Main]   sw zero, 0(s5)
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw zero, 0(a1)
// [Main]   addi a2, s11, -4
// [Main]   andi s11, a2, -8
// [Main]   sw s1, 0(a2)
// [Main]   addi a3, s11, -72
// [Main]   andi s11, a3, -8
// [Main]   la a4, compute40_19
// [Main]   sd a4, 0(a3)
// [Main]   sd s1, 8(a3)
// [Main]   sd s2, 16(a3)
// [Main]   sd s0, 24(a3)
// [Main]   sd s3, 32(a3)
// [Main]   sd a0, 40(a3)
// [Main]   sd s4, 48(a3)
// [Main]   sd s5, 56(a3)
// [Main]   sd a1, 64(a3)
// [Main]   mv s10, a3
// [Main]   ld a1, 0(a3)
// [Main]   mv a0, a2
// [Main]   jalr a1
// [Main]   lw a0, 0(s4)
// [Main]   lw a1, 0(s5)
// [Main]   addi a2, s11, -8
// [Main]   andi s11, a2, -8
// [Main]   sw a0, 0(a2)
// [Main]   sw a1, 4(a2)
// [Main]   mv a0, a2
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main262l1_9
// [Main]   .type main262l1_9, @function
// [Main] # leaf false
// [Main] main262l1_9:
// [Main] .main262l1_9_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   li a0, 9
// [Main]   call fannkuch1l0_8
// [Main]   lw s0, 0(a0)
// [Main]   lw a0, 4(a0)
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_count59l3_3
// [Main]   .type init_count59l3_3, @function
// [Main] # leaf false
// [Main] init_count59l3_3:
// [Main] .init_count59l3_3_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a2, a0
// [Main]   lw a0, 0(a2)
// [Main]   li a3, 1
// [Main]   beq a0, a3, .init_count59l3_3_1
// [Main] 
// [Main] .init_count59l3_3_2:
// [Main]   lw a0, 0(a2)
// [Main]   addi a0, a0, -1
// [Main]   lw a3, 0(a2)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a1, a0
// [Main]   sw a3, 0(a0)
// [Main]   lw a0, 0(a2)
// [Main]   addi a0, a0, -1
// [Main]   sw a0, 0(a2)
// [Main]   mv a0, a2
// [Main]   call init_count59l3_3
// [Main] 
// [Main] .init_count59l3_3_3:
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .init_count59l3_3_1:
// [Main]   mv a0, zero
// [Main]   j .init_count59l3_3_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl compute40_19
// [Main]   .type compute40_19, @function
// [Main] # leaf false
// [Main] compute40_19:
// [Main] .compute40_19_8:
// [Main]   addi sp, sp, -96
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   sd s8, 72(sp)
// [Main]   sd s9, 80(sp)
// [Main]   sd s10, 88(sp)
// [Main]   mv a1, s10
// [Main]   lw s8, 8(a1)
// [Main]   ld s4, 16(a1)
// [Main]   ld s0, 24(a1)
// [Main]   ld s5, 32(a1)
// [Main]   ld s3, 40(a1)
// [Main]   ld s2, 48(a1)
// [Main]   ld s7, 56(a1)
// [Main]   ld s1, 64(a1)
// [Main]   mv s6, a0
// [Main] 
// [Main] .compute40_19_0:
// [Main]   lw a0, 0(s6)
// [Main]   li a1, 1
// [Main]   blt a0, a1, .compute40_19_2
// [Main] 
// [Main] .compute40_19_1:
// [Main] 
// [Main] .compute40_19_45:
// [Main]   mv a1, zero
// [Main]   mv a4, s8
// [Main]   mv a2, s4
// [Main]   mv a3, s0
// [Main] 
// [Main] .compute40_19_40:
// [Main]   addi a0, a4, -1
// [Main]   blt a0, a1, .compute40_19_42
// [Main] 
// [Main] .compute40_19_41:
// [Main]   slliw a0, a1, 2
// [Main]   add a0, a3, a0
// [Main]   lw a0, 0(a0)
// [Main]   slliw a5, a1, 2
// [Main]   add a5, a2, a5
// [Main]   sw a0, 0(a5)
// [Main]   addi a0, a1, 1
// [Main]   mv a1, a0
// [Main]   j .compute40_19_40
// [Main] 
// [Main] .compute40_19_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40_19_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   ld s8, 72(sp)
// [Main]   ld s9, 80(sp)
// [Main]   ld s10, 88(sp)
// [Main]   addi sp, sp, 96
// [Main]   ret
// [Main] 
// [Main] .compute40_19_42:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40_19_43:
// [Main] 
// [Main] .compute40_19_9:
// [Main]   mv a0, s6
// [Main]   mv a1, s5
// [Main]   call init_count59l3_3
// [Main]   sw zero, 0(s3)
// [Main]   lw a0, 0(s4)
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw a0, 0(a1)
// [Main] 
// [Main] .compute40_19_36:
// [Main]   mv s9, a1
// [Main] 
// [Main] .compute40_19_31:
// [Main]   lw a0, 0(s9)
// [Main]   beq a0, zero, .compute40_19_32
// [Main] 
// [Main] .compute40_19_33:
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw zero, 0(a1)
// [Main]   mv a0, zero
// [Main]   mv a2, s9
// [Main]   mv a3, s4
// [Main]   call flip_loop99l5_4
// [Main] 
// [Main] .compute40_19_37:
// [Main]   lw a0, 0(s4)
// [Main]   sw a0, 0(s9)
// [Main]   lw a0, 0(s3)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s3)
// [Main]   j .compute40_19_31
// [Main] 
// [Main] .compute40_19_32:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40_19_34:
// [Main] 
// [Main] .compute40_19_10:
// [Main]   lw a0, 0(s2)
// [Main]   lw a1, 0(s3)
// [Main]   blt a1, a0, .compute40_19_4
// [Main] 
// [Main] .compute40_19_3:
// [Main]   lw a0, 0(s3)
// [Main]   sw a0, 0(s2)
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40_19_5:
// [Main]   lw a0, 0(s7)
// [Main]   lw a1, 0(s3)
// [Main]   lw a2, 0(s1)
// [Main]   lw a3, 0(s1)
// [Main]   li a4, 2
// [Main]   div a3, a3, a4
// [Main]   li a4, 2
// [Main]   mul a3, a3, a4
// [Main]   sub a2, a2, a3
// [Main]   li a3, 2
// [Main]   mul a2, a2, a3
// [Main]   li a3, 1
// [Main]   sub a2, a3, a2
// [Main]   mul a1, a1, a2
// [Main]   add a0, a0, a1
// [Main]   sw a0, 0(s7)
// [Main]   addi a0, s11, -4
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw zero, 0(a1)
// [Main] 
// [Main] .compute40_19_57:
// [Main]   mv s9, a1
// [Main]   mv s10, a0
// [Main] 
// [Main] .compute40_19_46:
// [Main]   lw a0, 0(s10)
// [Main]   li a1, 1
// [Main]   bne a0, a1, .compute40_19_48
// [Main] 
// [Main] .compute40_19_47:
// [Main]   lw a0, 0(s6)
// [Main]   beq a0, s8, .compute40_19_49
// [Main] 
// [Main] .compute40_19_50:
// [Main]   lw a0, 0(s0)
// [Main]   sw a0, 0(s9)
// [Main]   mv a0, zero
// [Main]   mv a1, s6
// [Main]   mv a2, s0
// [Main]   call move_perm1_forward197l6_6
// [Main]   lw a0, 0(s6)
// [Main]   lw a1, 0(s9)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s0, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s6)
// [Main]   lw a1, 0(s6)
// [Main]   slliw a1, a1, 2
// [Main]   add a1, s5, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s5, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s6)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s5, a0
// [Main]   lw a0, 0(a0)
// [Main]   li a1, 1
// [Main]   bge a0, a1, .compute40_19_51
// [Main] 
// [Main] .compute40_19_52:
// [Main]   lw a0, 0(s6)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s6)
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40_19_53:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40_19_54:
// [Main]   j .compute40_19_46
// [Main] 
// [Main] .compute40_19_4:
// [Main]   mv a0, zero
// [Main]   j .compute40_19_5
// [Main] 
// [Main] .compute40_19_48:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40_19_55:
// [Main] 
// [Main] .compute40_19_11:
// [Main]   lw a0, 0(s1)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s1)
// [Main]   j .compute40_19_0
// [Main] 
// [Main] .compute40_19_49:
// [Main]   sw zero, 0(s10)
// [Main]   sw zero, 0(s6)
// [Main]   mv a0, zero
// [Main]   j .compute40_19_54
// [Main] 
// [Main] .compute40_19_51:
// [Main]   sw zero, 0(s10)
// [Main]   mv a0, zero
// [Main]   j .compute40_19_53
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_arr9l2_0
// [Main]   .type init_arr9l2_0, @function
// [Main] # leaf true
// [Main] init_arr9l2_0:
// [Main] .init_arr9l2_0_5:
// [Main]   mv a3, a0
// [Main]   mv a0, a2
// [Main]   mv a2, a3
// [Main]   mv a3, a0
// [Main] 
// [Main] .init_arr9l2_0_0:
// [Main]   addi a0, a3, -1
// [Main]   blt a0, a2, .init_arr9l2_0_2
// [Main] 
// [Main] .init_arr9l2_0_1:
// [Main]   slliw a0, a2, 2
// [Main]   add a0, a1, a0
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a2, 1
// [Main]   mv a2, a0
// [Main]   j .init_arr9l2_0_0
// [Main] 
// [Main] .init_arr9l2_0_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .init_arr9l2_0_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl move_perm1_forward197l6_6
// [Main]   .type move_perm1_forward197l6_6, @function
// [Main] # leaf false
// [Main] move_perm1_forward197l6_6:
// [Main] .move_perm1_forward197l6_6_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a3, a0
// [Main]   lw a0, 0(a1)
// [Main]   addi a0, a0, -1
// [Main]   blt a0, a3, .move_perm1_forward197l6_6_2
// [Main] 
// [Main] .move_perm1_forward197l6_6_1:
// [Main]   addi a0, a3, 1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a2, a0
// [Main]   lw a0, 0(a0)
// [Main]   slliw a4, a3, 2
// [Main]   add a4, a2, a4
// [Main]   sw a0, 0(a4)
// [Main]   addi a0, a3, 1
// [Main]   call move_perm1_forward197l6_6
// [Main]   mv a0, zero
// [Main] 
// [Main] .move_perm1_forward197l6_6_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .move_perm1_forward197l6_6_2:
// [Main]   mv a0, zero
// [Main]   j .move_perm1_forward197l6_6_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl flip_loop99l5_4
// [Main]   .type flip_loop99l5_4, @function
// [Main] # leaf true
// [Main] flip_loop99l5_4:
// [Main] .flip_loop99l5_4_5:
// [Main]   mv a4, a0
// [Main]   mv a0, a3
// [Main]   mv a3, a4
// [Main]   mv a4, a0
// [Main] 
// [Main] .flip_loop99l5_4_0:
// [Main]   lw a0, 0(a2)
// [Main]   li a5, 2
// [Main]   div a0, a0, a5
// [Main]   blt a0, a3, .flip_loop99l5_4_2
// [Main] 
// [Main] .flip_loop99l5_4_1:
// [Main]   slliw a0, a3, 2
// [Main]   add a0, a4, a0
// [Main]   lw a0, 0(a0)
// [Main]   sw a0, 0(a1)
// [Main]   lw a0, 0(a2)
// [Main]   sub a0, a0, a3
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a4, a0
// [Main]   lw a0, 0(a0)
// [Main]   slliw a5, a3, 2
// [Main]   add a5, a4, a5
// [Main]   sw a0, 0(a5)
// [Main]   lw a0, 0(a2)
// [Main]   sub a0, a0, a3
// [Main]   lw a5, 0(a1)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a4, a0
// [Main]   sw a5, 0(a0)
// [Main]   addi a0, a3, 1
// [Main]   mv a3, a0
// [Main]   j .flip_loop99l5_4_0
// [Main] 
// [Main] .flip_loop99l5_4_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .flip_loop99l5_4_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_22
// [Main]   .type T$start_22, @function
// [Main] # leaf false
// [Main] T$start_22:
// [Main] .T$start_22_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main262l1_9
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_22
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function move_perm1_forward197l6_6
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f6, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f6, fpref=$f.2), offset=Insn(iref=%3), width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f6, fpref=$f.2), offset=FnParam(fref=f6, fpref=$f.0), width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f6, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[Insn(iref=%6), FnParam(fref=f6, fpref=$f.1), FnParam(fref=f6, fpref=$f.2)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f6, fpref=$f.0), Insn(iref=%1)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function move_perm1_forward197l6_6 to wasm
// [Wasm] Lowering function flip_loop99l5_4
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32), val=Insn(iref=%3))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=Insn(iref=%6), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%9), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=Insn(iref=%10), width=@32), val=Insn(iref=%11))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%13), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%0), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f4, fpref=$f.0), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2), FnParam(fref=f4, fpref=$f.3)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function flip_loop99l5_4 to wasm
// [Wasm] Lowering function fannkuch1l0_8
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f8, mref=m2) -> $f8.m2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m3, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m4, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f8, mref=m4) -> $f8.m4
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m5, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f8, mref=m5) -> $f8.m5
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m6, fills=[Init(val=FnParam(fref=f8, fpref=$f.0))])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f8, mref=m6) -> $f8.m6
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Array(elem=Int32)], ty=Unit), mref=m7, fills=[Field(index=0, val=Fn(fref=f19)), Field(index=1, val=FnParam(fref=f8, fpref=$f.0)), Field(index=2, val=Mem(fref=f8, mref=m0)), Field(index=3, val=BlockParam(bref=b1, bpref=$b.0)), Field(index=4, val=Mem(fref=f8, mref=m1)), Field(index=5, val=Mem(fref=f8, mref=m2)), Field(index=6, val=Mem(fref=f8, mref=m3)), Field(index=7, val=Mem(fref=f8, mref=m4)), Field(index=8, val=Mem(fref=f8, mref=m5))])
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name BlockParam(bref=b1, bpref=$b.0) -> $b1.$b.0
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m2) -> $f8.m2
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m4) -> $f8.m4
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m5) -> $f8.m5
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f8, mref=m7), args=[Mem(fref=f8, mref=m6)])
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m6) -> $f8.m6
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m3), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m4), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m4) -> $f8.m4
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m8, fills=[Field(index=0, val=Insn(iref=%10)), Field(index=1, val=Insn(iref=%11))])
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Return(args=[Mem(fref=f8, mref=m8)])
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m13, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f8, mref=m13) -> $f8.m13
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[Int32(val=0), Mem(fref=f8, mref=m13), FnParam(fref=f8, fpref=$f.0)])
// [Wasm] Get Local name Mem(fref=f8, mref=m13) -> $f8.m13
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Lowering control Jump(target=b1, args=[Mem(fref=f8, mref=m13)])
// [Wasm] Get Local name Mem(fref=f8, mref=m13) -> $f8.m13
// [Wasm] Get Local name BlockParam(bref=b1, bpref=$b.0) -> $b1.$b.0
// [Wasm] Lowering control Jump(target=b13, args=[])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Local BlockParam(bref=b1, bpref=$b.0) -> $b1.$b.0
// [Wasm] Local Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Local Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Local Mem(fref=f8, mref=m13) -> $f8.m13
// [Wasm] Local Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Local Mem(fref=f8, mref=m6) -> $f8.m6
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Mem(fref=f8, mref=m5) -> $f8.m5
// [Wasm] Local Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Local Mem(fref=f8, mref=m2) -> $f8.m2
// [Wasm] Local Mem(fref=f8, mref=m4) -> $f8.m4
// [Wasm] Local Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Lowered function fannkuch1l0_8 to wasm
// [Wasm] Lowering function main262l1_9
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Int32, Int32]), f=f8, args=[Int32(val=9)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%4)])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main262l1_9 to wasm
// [Wasm] Lowering function init_arr9l2_0
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=BlockParam(bref=b0, bpref=$b.0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function init_arr9l2_0 to wasm
// [Wasm] Lowering function compute40_19
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name FreeVar(fvref=^7) -> $^7
// [Wasm] Get Local name FreeVar(fvref=^8) -> $^8
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b40, bpref=$b.3), offset=BlockParam(bref=b40, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b40, bpref=$b.2), offset=BlockParam(bref=b40, bpref=$b.0), width=@32), val=Insn(iref=%42))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b40, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering control Jump(target=b40, args=[Insn(iref=%44), BlockParam(bref=b40, bpref=$b.1), BlockParam(bref=b40, bpref=$b.2), BlockParam(bref=b40, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Lowering control Jump(target=b46, args=[BlockParam(bref=b46, bpref=$b.0), BlockParam(bref=b46, bpref=$b.1), BlockParam(bref=b46, bpref=$b.2), BlockParam(bref=b46, bpref=$b.3), BlockParam(bref=b46, bpref=$b.4), BlockParam(bref=b46, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.0) -> $b46.$b.0
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.0) -> $b46.$b.0
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.1) -> $b46.$b.1
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.1) -> $b46.$b.1
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.2) -> $b46.$b.2
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.2) -> $b46.$b.2
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.4) -> $b46.$b.4
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.4) -> $b46.$b.4
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.5) -> $b46.$b.5
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.5) -> $b46.$b.5
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b46, bpref=$b.1), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.1) -> $b46.$b.1
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.3), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Lowering control Jump(target=b54, args=[Unit])
// [Wasm] Lowering control Jump(target=b54, args=[Unit])
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b46, bpref=$b.1), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.1) -> $b46.$b.1
// [Wasm] Lowering control Jump(target=b53, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%66), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.3), index=0, width=@32), val=Insn(iref=%67))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Lowering control Jump(target=b53, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.5), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.5) -> $b46.$b.5
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.0), index=0, width=@32), val=Insn(iref=%51))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.0) -> $b46.$b.0
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[Int32(val=0), BlockParam(bref=b46, bpref=$b.3), BlockParam(bref=b46, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.5) -> $b46.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.0) -> $b46.$b.0
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b46, bpref=$b.5), offset=Insn(iref=%54), width=@32), val=Insn(iref=%55))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.5) -> $b46.$b.5
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b46, bpref=$b.4), offset=Insn(iref=%58), width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.4) -> $b46.$b.4
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%59), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b46, bpref=$b.4), offset=Insn(iref=%57), width=@32), val=Insn(iref=%60))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.4) -> $b46.$b.4
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b46, bpref=$b.4), offset=Insn(iref=%62), width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.4) -> $b46.$b.4
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Get Local name Insn(iref=%63) -> $%63
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%63)])
// [Wasm] Get Local name Insn(iref=%63) -> $%63
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering control Branch(cond=Insn(iref=%64), t=b51, t_args=[], f=b52, f_args=[])
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%47), BlockParam(bref=b46, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.2) -> $b46.$b.2
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering control Branch(cond=Insn(iref=%48), t=b49, t_args=[], f=b50, f_args=[])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^8), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^8) -> $^8
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%28), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^8), index=0, width=@32), val=Insn(iref=%29))
// [Wasm] Get Local name FreeVar(fvref=^8) -> $^8
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Jump(target=b11, args=[BlockParam(bref=b55, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b55, args=[Unit])
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b46, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.1) -> $b46.$b.1
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%45), Bool(val=true)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering control Branch(cond=Insn(iref=%46), t=b47, t_args=[], f=b48, f_args=[])
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering control Jump(target=b56, args=[Mem(fref=f19, mref=m2), Mem(fref=f19, mref=m1), FreeVar(fvref=^1), BlockParam(bref=b0, bpref=$b.0), FreeVar(fvref=^4), FreeVar(fvref=^3)])
// [Wasm] Get Local name Mem(fref=f19, mref=m2) -> $f19.m2
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.0) -> $b46.$b.0
// [Wasm] Get Local name Mem(fref=f19, mref=m1) -> $f19.m1
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.1) -> $b46.$b.1
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.2) -> $b46.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.4) -> $b46.$b.4
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.5) -> $b46.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^7), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^7) -> $^7
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^8), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^8) -> $^8
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^8), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^8) -> $^8
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%16), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%17), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%15), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%19), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=1), Insn(iref=%20)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%14), Insn(iref=%21)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%13), Insn(iref=%22)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^7), index=0, width=@32), val=Insn(iref=%23))
// [Wasm] Get Local name FreeVar(fvref=^7) -> $^7
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Init(val=Bool(val=true))])
// [Wasm] Get Local name Mem(fref=f19, mref=m1) -> $f19.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f19, mref=m2) -> $f19.m2
// [Wasm] Lowering control Jump(target=b57, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^6), index=0, width=@32), val=Insn(iref=%11))
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^6), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%8), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Branch(cond=Insn(iref=%10), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b10, args=[BlockParam(bref=b34, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b34, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.0), index=0, width=@32), val=Insn(iref=%35))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%37), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.2), index=0, width=@32), val=Insn(iref=%38))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering control Jump(target=b31, args=[BlockParam(bref=b31, bpref=$b.0), BlockParam(bref=b31, bpref=$b.1), BlockParam(bref=b31, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m31, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f19, mref=m31) -> $f19.m31
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Int32(val=0), Mem(fref=f19, mref=m31), BlockParam(bref=b31, bpref=$b.0), BlockParam(bref=b31, bpref=$b.1)])
// [Wasm] Get Local name Mem(fref=f19, mref=m31) -> $f19.m31
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Lowering control Jump(target=b37, args=[Insn(iref=%34)])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%31), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering control Branch(cond=Insn(iref=%32), t=b32, t_args=[], f=b33, f_args=[])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering control Jump(target=b35, args=[Mem(fref=f19, mref=m0), FreeVar(fvref=^2), FreeVar(fvref=^5)])
// [Wasm] Get Local name Mem(fref=f19, mref=m0) -> $f19.m0
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[BlockParam(bref=b0, bpref=$b.0), FreeVar(fvref=^4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^2), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Insn(iref=%5))])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Mem(fref=f19, mref=m0) -> $f19.m0
// [Wasm] Lowering control Jump(target=b36, args=[])
// [Wasm] Lowering control Jump(target=b9, args=[BlockParam(bref=b43, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b43, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b40, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b40, bpref=$b.0), Insn(iref=%40)])
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering control Branch(cond=Insn(iref=%41), t=b41, t_args=[], f=b42, f_args=[])
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering control Jump(target=b44, args=[Int32(val=0), FreeVar(fvref=^1), FreeVar(fvref=^2), FreeVar(fvref=^3)])
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Lowering control Jump(target=b45, args=[])
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f19, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%63) -> $%63
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Mem(fref=f19, mref=m31) -> $f19.m31
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Local Mem(fref=f19, mref=m0) -> $f19.m0
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local BlockParam(bref=b46, bpref=$b.5) -> $b46.$b.5
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%64) -> $%64
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%54) -> $%54
// [Wasm] Local Insn(iref=%60) -> $%60
// [Wasm] Local Insn(iref=%67) -> $%67
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local FreeVar(fvref=^6) -> $^6
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%55) -> $%55
// [Wasm] Local Insn(iref=%66) -> $%66
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Local Mem(fref=f19, mref=m2) -> $f19.m2
// [Wasm] Local FreeVar(fvref=^3) -> $^3
// [Wasm] Local BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Local BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Local FreeVar(fvref=^5) -> $^5
// [Wasm] Local Mem(fref=f19, mref=m1) -> $f19.m1
// [Wasm] Local BlockParam(bref=b46, bpref=$b.1) -> $b46.$b.1
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local FreeVar(fvref=^4) -> $^4
// [Wasm] Local BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%58) -> $%58
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%57) -> $%57
// [Wasm] Local BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Insn(iref=%62) -> $%62
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local BlockParam(bref=b46, bpref=$b.4) -> $b46.$b.4
// [Wasm] Local FreeVar(fvref=^7) -> $^7
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local BlockParam(bref=b46, bpref=$b.0) -> $b46.$b.0
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local FreeVar(fvref=^8) -> $^8
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local BlockParam(bref=b46, bpref=$b.2) -> $b46.$b.2
// [Wasm] Lowered function compute40_19 to wasm
// [Wasm] Lowering function init_count59l3_3
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%2), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.1), offset=Insn(iref=%3), width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%6), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.0), index=0, width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%9)])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function init_count59l3_3 to wasm
// [Wasm] Lowering function T$start_22
// [Wasm] Lowering insn Call(ty=Unit, f=f9, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_22 to wasm
// [KnfOpt] Numbers of let rec: 11 11 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %14: Call(ty=Unit, f=f4, args=[Insn(iref=%13), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2), FnParam(fref=f4, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f0, args=[Insn(iref=%3), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %31: Apply(ty=Unit, f=Self(fref=f19), args=[FnParam(fref=f19, fpref=$f.0)])
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f5, args=[FnParam(fref=f5, fpref=$f.0), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f2, args=[Insn(iref=%4), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %24: Call(ty=Unit, f=f7, args=[FnParam(fref=f7, fpref=$f.0), FnParam(fref=f7, fpref=$f.1), FnParam(fref=f7, fpref=$f.2), FnParam(fref=f7, fpref=$f.3), FnParam(fref=f7, fpref=$f.4), FnParam(fref=f7, fpref=$f.5)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Multiple, f4: Once, f8: Once, f9: Once, f0: Once, f19: MaybeInClosure, f1: Once, f5: Once, f2: Once, f3: Multiple, f7: Once, f22: Once})
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b1, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] fannkuch1l0_8 is inlining Call(ty=Array(elem=Int32), f=f1, args=[FnParam(fref=f8, fpref=$f.0)])
// [CoreOpt] shifted callee .fn gen_perm14l1_1 #f1 : fn(int32) -> array[int32]
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b13 {
// [CoreOpt]   .bb #b13 () {
// [CoreOpt]     let _ = alloc <m13: array[int32] heap($f0)> <- [..] = 0
// [CoreOpt]     let %14: unit = call f0(0, f1.m13, $f0)
// [CoreOpt]     return f1.m13
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] compute40_19 is inlining Call(ty=Unit, f=f5, args=[Mem(fref=f19, mref=m0), FreeVar(fvref=^2), FreeVar(fvref=^5)])
// [CoreOpt] shifted callee .fn do_flip90l4_5 #f5 : fn(array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b36 {
// [CoreOpt]   .bb #b31 (array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %31: int32 = load int32 field($b31.0, 0 * @32)
// [CoreOpt]     let %32: bool = eq(%31, 0)
// [CoreOpt]     br %32 b32() b33()
// [CoreOpt]   }
// [CoreOpt]   .bb #b32 () {
// [CoreOpt]     jump b34(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b33 () {
// [CoreOpt]     let _ = alloc <m31: array[int32] heap(1)> <- [..] = 0
// [CoreOpt]     let %34: unit = call f4(0, f5.m31, $b31.0, $b31.1)
// [CoreOpt]     jump b37(%34)
// [CoreOpt]   }
// [CoreOpt]   .bb #b34 (unit) {
// [CoreOpt]     return $b34.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b35 header #b31 {
// [CoreOpt]     .block #b32
// [CoreOpt]     .block #b33
// [CoreOpt]     .block #b34
// [CoreOpt]   }
// [CoreOpt]   .bb #b36 () {
// [CoreOpt]     jump b35($f0, $f1, $f2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b37 (unit) {
// [CoreOpt]     let %35: int32 = load int32 field($b31.1, 0 * @32)
// [CoreOpt]     let _ = store int32 field($b31.0, 0 * @32) <- %35
// [CoreOpt]     let %37: int32 = load int32 field($b31.2, 0 * @32)
// [CoreOpt]     let %38: int32 = add(%37, 1)
// [CoreOpt]     let _ = store int32 field($b31.2, 0 * @32) <- %38
// [CoreOpt]     jump b31($b31.0, $b31.1, $b31.2)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] compute40_19 is inlining Call(ty=Unit, f=f2, args=[Int32(val=0), FreeVar(fvref=^1), FreeVar(fvref=^2), FreeVar(fvref=^3)])
// [CoreOpt] shifted callee .fn copy_perm46l2_2 #f2 : fn(int32, int32, array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b45 {
// [CoreOpt]   .bb #b40 (int32, int32, array[int32], array[int32]) {
// [CoreOpt]     let %40: int32 = sub($b40.1, 1)
// [CoreOpt]     let %41: bool = le($b40.0, %40)
// [CoreOpt]     br %41 b41() b42()
// [CoreOpt]   }
// [CoreOpt]   .bb #b41 () {
// [CoreOpt]     let %42: int32 = load int32 offset($b40.3, $b40.0 * @32)
// [CoreOpt]     let _ = store int32 offset($b40.2, $b40.0 * @32) <- %42
// [CoreOpt]     let %44: int32 = add($b40.0, 1)
// [CoreOpt]     jump b40(%44, $b40.1, $b40.2, $b40.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b42 () {
// [CoreOpt]     jump b43(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b43 (unit) {
// [CoreOpt]     return $b43.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b44 header #b40 {
// [CoreOpt]     .block #b41
// [CoreOpt]     .block #b42
// [CoreOpt]     .block #b43
// [CoreOpt]   }
// [CoreOpt]   .bb #b45 () {
// [CoreOpt]     jump b44($f0, $f1, $f2, $f3)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] compute40_19 is inlining Call(ty=Unit, f=f7, args=[Mem(fref=f19, mref=m2), Mem(fref=f19, mref=m1), FreeVar(fvref=^1), BlockParam(bref=b0, bpref=$b.0), FreeVar(fvref=^4), FreeVar(fvref=^3)])
// [CoreOpt] shifted callee .fn go_loop179l5_7 #f7 : fn(array[int32], array[bool], int32, array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b57 {
// [CoreOpt]   .bb #b46 (array[int32], array[bool], int32, array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %45: bool = load bool field($b46.1, 0 * @32)
// [CoreOpt]     let %46: bool = eq(%45, true)
// [CoreOpt]     br %46 b47() b48()
// [CoreOpt]   }
// [CoreOpt]   .bb #b47 () {
// [CoreOpt]     let %47: int32 = load int32 field($b46.3, 0 * @32)
// [CoreOpt]     let %48: bool = eq(%47, $b46.2)
// [CoreOpt]     br %48 b49() b50()
// [CoreOpt]   }
// [CoreOpt]   .bb #b48 () {
// [CoreOpt]     jump b55(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b49 () {
// [CoreOpt]     let _ = store bool field($b46.1, 0 * @32) <- false
// [CoreOpt]     let _ = store int32 field($b46.3, 0 * @32) <- 0
// [CoreOpt]     jump b54(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b50 () {
// [CoreOpt]     let %51: int32 = load int32 field($b46.5, 0 * @32)
// [CoreOpt]     let _ = store int32 field($b46.0, 0 * @32) <- %51
// [CoreOpt]     let %53: unit = call f6(0, $b46.3, $b46.5)
// [CoreOpt]     let %54: int32 = load int32 field($b46.3, 0 * @32)
// [CoreOpt]     let %55: int32 = load int32 field($b46.0, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($b46.5, %54 * @32) <- %55
// [CoreOpt]     let %57: int32 = load int32 field($b46.3, 0 * @32)
// [CoreOpt]     let %58: int32 = load int32 field($b46.3, 0 * @32)
// [CoreOpt]     let %59: int32 = load int32 offset($b46.4, %58 * @32)
// [CoreOpt]     let %60: int32 = sub(%59, 1)
// [CoreOpt]     let _ = store int32 offset($b46.4, %57 * @32) <- %60
// [CoreOpt]     let %62: int32 = load int32 field($b46.3, 0 * @32)
// [CoreOpt]     let %63: int32 = load int32 offset($b46.4, %62 * @32)
// [CoreOpt]     let %64: bool = le(1, %63)
// [CoreOpt]     br %64 b51() b52()
// [CoreOpt]   }
// [CoreOpt]   .bb #b51 () {
// [CoreOpt]     let _ = store bool field($b46.1, 0 * @32) <- false
// [CoreOpt]     jump b53(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b52 () {
// [CoreOpt]     let %66: int32 = load int32 field($b46.3, 0 * @32)
// [CoreOpt]     let %67: int32 = add(%66, 1)
// [CoreOpt]     let _ = store int32 field($b46.3, 0 * @32) <- %67
// [CoreOpt]     jump b53(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b53 (unit) {
// [CoreOpt]     jump b54(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b54 (unit) {
// [CoreOpt]     jump b46($b46.0, $b46.1, $b46.2, $b46.3, $b46.4, $b46.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b55 (unit) {
// [CoreOpt]     return $b55.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b56 header #b46 {
// [CoreOpt]     .block #b52
// [CoreOpt]     .block #b50
// [CoreOpt]     .block #b54
// [CoreOpt]     .block #b55
// [CoreOpt]     .block #b47
// [CoreOpt]     .block #b51
// [CoreOpt]     .block #b48
// [CoreOpt]     .block #b49
// [CoreOpt]     .block #b53
// [CoreOpt]   }
// [CoreOpt]   .bb #b57 () {
// [CoreOpt]     jump b56($f0, $f1, $f2, $f3, $f4, $f5)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] do_flip90l4_5 is inlining Call(ty=Unit, f=f4, args=[Int32(val=0), Mem(fref=f5, mref=m0), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [CoreOpt] shifted callee .fn flip_loop99l5_4 #f4 : fn(int32, array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b14 {
// [CoreOpt]   .bb #b9 (int32, array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %9: int32 = load int32 field($b9.2, 0 * @32)
// [CoreOpt]     let %10: int32 = div(%9, 2)
// [CoreOpt]     let %11: bool = le($b9.0, %10)
// [CoreOpt]     br %11 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     let %12: int32 = load int32 offset($b9.3, $b9.0 * @32)
// [CoreOpt]     let _ = store int32 field($b9.1, 0 * @32) <- %12
// [CoreOpt]     let %14: int32 = load int32 field($b9.2, 0 * @32)
// [CoreOpt]     let %15: int32 = sub(%14, $b9.0)
// [CoreOpt]     let %16: int32 = load int32 offset($b9.3, %15 * @32)
// [CoreOpt]     let _ = store int32 offset($b9.3, $b9.0 * @32) <- %16
// [CoreOpt]     let %18: int32 = load int32 field($b9.2, 0 * @32)
// [CoreOpt]     let %19: int32 = sub(%18, $b9.0)
// [CoreOpt]     let %20: int32 = load int32 field($b9.1, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($b9.3, %19 * @32) <- %20
// [CoreOpt]     let %22: int32 = add($b9.0, 1)
// [CoreOpt]     jump b9(%22, $b9.1, $b9.2, $b9.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     jump b12(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 (unit) {
// [CoreOpt]     return $b12.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b13 header #b9 {
// [CoreOpt]     .block #b10
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b12
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     jump b13($f0, $f1, $f2, $f3)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f5
// [CoreOpt] Remove dead function: f2
// [CoreOpt] Remove dead function: f7
