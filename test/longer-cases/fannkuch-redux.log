// [Asm] pre_assigned_registers: FnParam(fref=f6, fpref=$f.4) -> v6, Insn(iref=%15) -> v21, FnParam(fref=f6, fpref=$f.0) -> v2, Insn(iref=%9) -> v16, Insn(iref=%16) -> v22, Insn(iref=%8) -> v15, FnParam(fref=f6, fpref=$f.2) -> v4, Insn(iref=%10) -> v17, Insn(iref=%14) -> v20, Self(fref=f6) -> v0, Insn(iref=%5) -> v31, Insn(iref=%0) -> v8, Insn(iref=%19) -> v25, Insn(iref=%4) -> v30, FnParam(fref=f6, fpref=$f.1) -> v3, Insn(iref=%3) -> v12, Insn(iref=%18) -> v24, FnParam(fref=f6, fpref=$f.3) -> v5, BlockParam(bref=b11, bpref=$b.0) -> v10, Insn(iref=%7) -> v14, Insn(iref=%22) -> v27, Insn(iref=%17) -> v23, Insn(iref=%23) -> v28, Insn(iref=%2) -> v11, Insn(iref=%1) -> v9, Insn(iref=%20) -> v29, Insn(iref=%11) -> v18, FnParam(fref=f6, fpref=$f.5) -> v7, Insn(iref=%21) -> v26, Insn(iref=%6) -> v13, Insn(iref=%12) -> v19
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%18)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%2), FnParam(fref=f6, fpref=$f.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Bool(val=true)])
// [Asm] defs: [v26]
// [Asm] live_set: [v2, v5, zero, v26, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v2, v5, zero, v27, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v5, zero, v13, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v5, zero, a0, v7, v4, v6, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v5, zero, a0, v7, v4, a1, v6, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, v5, zero, a0, v7, v4, a2, a1, v6, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v5, zero, a0, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v2, v5, v16, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v5, v16, zero, v7, v4, v17, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v2, v5, v46, zero, v7, v4, v17, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v2, v5, zero, v7, v4, v47, v17, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v2, v5, zero, v7, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v2, v5, zero, v42, v7, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v2, v5, zero, v7, v19, v4, v6, v43, v3]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v2, v5, zero, v20, v7, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v2, v5, v21, zero, v7, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v2, v5, v21, zero, v7, v4, v6, v39, v3]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v2, v40, v5, v21, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v2, v5, zero, v23, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v2, v5, zero, v7, v35, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v2, v5, zero, v7, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v24, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v24, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v2, v5, v53, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v3, v11, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of go_loop.4502"];
// [Asm]   r0 [label="v26 ← a0", color=green];
// [Asm]   r38 [label="v36 ← a0", color=green];
// [Asm]   r33 [label="v21 ← a1", color=green];
// [Asm]   r9 [label="a5", color=blue];
// [Asm]   r26 [label="v17 ← a1", color=green];
// [Asm]   r6 [label="v6 ← s4", color=green];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r42 [label="v53 ← a1", color=green];
// [Asm]   r4 [label="v7 ← s2", color=green];
// [Asm]   r29 [label="v19 ← a0", color=green];
// [Asm]   r35 [label="v40 ← a0", color=green];
// [Asm]   r7 [label="v3 ← s5", color=green];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r8 [label="v27 ← a0", color=green];
// [Asm]   r5 [label="v4 ← s3", color=green];
// [Asm]   r36 [label="v23 ← a0", color=green];
// [Asm]   r24 [label="v15 ← a0", color=green];
// [Asm]   r15 [label="v13 ← a0", color=green];
// [Asm]   r32 [label="v20 ← a1", color=green];
// [Asm]   r43 [label="v11 ← a0", color=green];
// [Asm]   r31 [label="v43 ← a1", color=green];
// [Asm]   r39 [label="v24 ← a0", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r37 [label="v35 ← a0", color=green];
// [Asm]   r20 [label="t1", color=blue];
// [Asm]   r23 [label="t4", color=blue];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v46 ← a0", color=green];
// [Asm]   r1 [label="v2 ← s0", color=green];
// [Asm]   r40 [label="v34 ← a1", color=green];
// [Asm]   r28 [label="v47 ← a0", color=green];
// [Asm]   r41 [label="v8 ← a0", color=green];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r34 [label="v39 ← a0", color=green];
// [Asm]   r22 [label="t3", color=blue];
// [Asm]   r14 [label="v10 ← a0", color=green];
// [Asm]   r30 [label="v42 ← a1", color=green];
// [Asm]   r25 [label="v16 ← a0", color=green];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r16 [label="a0", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="t0", color=blue];
// [Asm]   r21 [label="t2", color=blue];
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r2 -- r38;
// [Asm]   r5 -- r21;
// [Asm]   r16 -- r20;
// [Asm]   r5 -- r33;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r6 -- r35;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r2 -- r43;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r29;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r37;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r27;
// [Asm]   r2 -- r41;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r7 -- r32;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r2 -- r34;
// [Asm]   r0 -- r6;
// [Asm]   r5 -- r31;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r28;
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r25;
// [Asm]   r5 -- r35;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r39;
// [Asm]   r29 -- r33;
// [Asm]   r7 -- r38;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r5 -- r32;
// [Asm]   r1 -- r2;
// [Asm]   r41 -- r42;
// [Asm]   r4 -- r29;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r3 -- r17;
// [Asm]   r39 -- r40;
// [Asm]   r2 -- r36;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r16 -- r21;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r6 -- r23;
// [Asm]   r1 -- r35;
// [Asm]   r0 -- r4;
// [Asm]   r7 -- r42;
// [Asm]   r5 -- r36;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r7 -- r29;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r43;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r38;
// [Asm]   r6 -- r41;
// [Asm]   r1 -- r34;
// [Asm]   r7 -- r24;
// [Asm]   r29 -- r30;
// [Asm]   r6 -- r33;
// [Asm]   r11 -- r16;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r20;
// [Asm]   r13 -- r16;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r13;
// [Asm]   r33 -- r35;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r38;
// [Asm]   r16 -- r18;
// [Asm]   r6 -- r20;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r2 -- r40;
// [Asm]   r7 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r28;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r29;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r36;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r4 -- r36;
// [Asm]   r7 -- r41;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r6 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r12 -- r16;
// [Asm]   r7 -- r16;
// [Asm]   r6 -- r38;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r35;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r7 -- r12;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r1 -- r24;
// [Asm]   r1 -- r42;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r39;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r38;
// [Asm]   r5 -- r41;
// [Asm]   r4 -- r41;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r6 -- r36;
// [Asm]   r1 -- r37;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r43;
// [Asm]   r7 -- r40;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r32;
// [Asm]   r29 -- r31;
// [Asm]   r5 -- r42;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r4 -- r40;
// [Asm]   r3 -- r18;
// [Asm]   r4 -- r42;
// [Asm]   r3 -- r34;
// [Asm]   r4 -- r35;
// [Asm]   r16 -- r17;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r6 -- r13;
// [Asm]   r7 -- r34;
// [Asm]   r2 -- r33;
// [Asm]   r4 -- r33;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r43;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r7 -- r10;
// [Asm]   r3 -- r40;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r6 -- r31;
// [Asm]   r3 -- r27;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r24;
// [Asm]   r7 -- r8;
// [Asm]   r16 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r16 -- r22;
// [Asm]   r6 -- r32;
// [Asm]   r5 -- r34;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r29 -- r32;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r4 -- r37;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r16 -- r19;
// [Asm]   r1 -- r32;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r25 -- r26;
// [Asm]   r6 -- r16;
// [Asm]   r7 -- r30;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r40;
// [Asm]   r6 -- r24;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r6 -- r8;
// [Asm]   r33 -- r34;
// [Asm]   r6 -- r34;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r7 -- r33;
// [Asm]   r5 -- r37;
// [Asm]   r6 -- r28;
// [Asm]   r6 -- r42;
// [Asm]   r7 -- r11;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r41;
// [Asm]   r6 -- r17;
// [Asm]   r7 -- r39;
// [Asm]   r7 -- r43;
// [Asm]   r9 -- r16;
// [Asm]   r7 -- r31;
// [Asm]   r4 -- r39;
// [Asm]   r3 -- r36;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r43;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r5 -- r40;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   comment = "0:v26-> 1:v2-> 2:v5-> 3:zero-> 4:v7-> 5:v4-> 6:v6-> 7:v3-> 8:v27-> 9:a5-> 16:a0-> 10:a4-> 11:a2-> 12:a1-> 13:a3-> 17:a6-> 18:a7-> 19:t0-> 20:t1-> 21:t2-> 22:t3-> 23:t4-> 15:v13-> 24:v15-> 25:v16-> 26:v17-> 27:v46-> 28:v47-> 29:v19-> 30:v42-> 31:v43-> 32:v20-> 33:v21-> 34:v39-> 35:v40-> 36:v23-> 37:v35-> 38:v36-> 39:v24-> 40:v34-> 41:v8-> 42:v53-> 43:v11-> 14:v10"
// [Asm]   comment = "v26<-a0;v36<-a0;v21<-a1;v17<-a1;v6<-s4;v53<-a1;v7<-s2;v19<-a0;v40<-a0;v3<-s5;v27<-a0;v4<-s3;v23<-a0;v15<-a0;v13<-a0;v20<-a1;v11<-a0;v43<-a1;v24<-a0;v35<-a0;v46<-a0;v2<-s0;v34<-a1;v47<-a0;v8<-a0;v39<-a0;v10<-a0;v42<-a1;v16<-a0;v5<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of go_loop.4502"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v26, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   addi v27, v26, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v27, 0(v3) ->   sw a0, 0(s5)
// [Asm] subst   j .go_loop.4502_2 ->   j .go_loop.4502_2
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(s1)
// [Asm] subst   sw zero, 0(v3) ->   sw zero, 0(s5)
// [Asm] subst   j .go_loop.4502_2 ->   j .go_loop.4502_2
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s5, a1
// [Asm] subst   mv v4, a2 ->   mv s3, a2
// [Asm] subst   mv v5, a3 ->   mv s1, a3
// [Asm] subst   mv v6, a4 ->   mv s4, a4
// [Asm] subst   mv v7, a5 ->   mv s2, a5
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(s1)
// [Asm] subst   j .go_loop.4502_2 ->   j .go_loop.4502_2
// [Asm] subst   lw v13, 0(v6) ->   lw a0, 0(s4)
// [Asm] subst   sw v13, 0(v4) ->   sw a0, 0(s3)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v3 ->   mv a1, s5
// [Asm] subst   mv a2, v6 ->   mv a2, s4
// [Asm] subst   call move_perm1_forward.4503 ->   call move_perm1_forward.4503
// [Asm] subst   lw v16, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   lw v17, 0(v4) ->   lw a1, 0(s3)
// [Asm] subst   slliw v46, v16, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v47, v6, v46 ->   add a0, s4, a0
// [Asm] subst   sw v17, 0(v47) ->   sw a1, 0(a0)
// [Asm] subst   lw v19, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   slliw v42, v19, 2 ->   slliw a1, a0, 2
// [Asm] subst   add v43, v7, v42 ->   add a1, s2, a1
// [Asm] subst   lw v20, 0(v43) ->   lw a1, 0(a1)
// [Asm] subst   addi v21, v20, -1 ->   addi a1, a1, -1
// [Asm] subst   slliw v39, v19, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v40, v7, v39 ->   add a0, s2, a0
// [Asm] subst   sw v21, 0(v40) ->   sw a1, 0(a0)
// [Asm] subst   lw v23, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   slliw v35, v23, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v36, v7, v35 ->   add a0, s2, a0
// [Asm] subst   lw v24, 0(v36) ->   lw a0, 0(a0)
// [Asm] subst   li v34, 1 ->   li a1, 1
// [Asm] subst   bge v24, v34, .go_loop.4502_7 ->   bge a0, a1, .go_loop.4502_7
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v8, 0(v5) ->   lw a0, 0(s1)
// [Asm] subst   li v53, 1 ->   li a1, 1
// [Asm] subst   bne v8, v53, .go_loop.4502_4 ->   bne a0, a1, .go_loop.4502_4
// [Asm] subst   lw v11, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   beq v11, v2, .go_loop.4502_5 ->   beq a0, s0, .go_loop.4502_5
// [Asm] pre_assigned_registers: FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b2, bpref=$b.0) -> v6, Insn(iref=%15) -> v24, Insn(iref=%9) -> v11, Insn(iref=%16) -> v25, Insn(iref=%8) -> v20, Insn(iref=%10) -> v12, Insn(iref=%14) -> v23, BlockParam(bref=b14, bpref=$b.0) -> v14, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%5) -> v17, Insn(iref=%0) -> v7, Insn(iref=%19) -> v28, Insn(iref=%4) -> v16, Insn(iref=%18) -> v27, Insn(iref=%13) -> v22, BlockParam(bref=b11, bpref=$b.0) -> v10, Insn(iref=%7) -> v19, BlockParam(bref=b5, bpref=$b.0) -> v32, Insn(iref=%22) -> v31, BlockParam(bref=b6, bpref=$b.0) -> v15, Insn(iref=%17) -> v26, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%2) -> v9, Insn(iref=%1) -> v8, Insn(iref=%20) -> v29, Insn(iref=%11) -> v13, Self(fref=f4) -> v0, Insn(iref=%21) -> v30, Insn(iref=%6) -> v18, Mem(fref=f4, mref=m0) -> v5, Insn(iref=%12) -> v21
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b11, bpref=$b.0), Insn(iref=%10)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v32]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [v5, v46, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v5, v10, zero, v4, v47, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v10, v21, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v5, v10, zero, v23, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v24, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v5, v10, zero, v4, v41, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v5, v10, zero, v42, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v25, v5, v10, zero, v4, v6, s11, v39, v3]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v40, v25, v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v5, v10, zero, v27, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v5, v10, zero, v29, v4, v6, s11, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v5, v10, zero, v29, v4, v6, s11, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v5, v10, zero, v29, v35, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v5, zero, v4, v6, s11, v31, v3]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: [v31]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v4, v14, v6, s11, zero, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v11, v5, v10, zero, v4, v6, s11, v52, v3]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v18, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [zero, v19, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v32]
// [Asm] move_origin: [zero]
// [Asm] defined: v32 is X
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v4, v6, v15, s11, zero, v3]
// [Asm] move_origin: [v14]
// [Asm] defined: v15 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of do_flip.4500"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r33 [label="a1", color=blue];
// [Asm]   r9 [label="v47 ← a0", color=green];
// [Asm]   r26 [label="v52 ← a6", color=green];
// [Asm]   r6 [label="v6 ← a4", color=green];
// [Asm]   r13 [label="v41 ← a0", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="v18 ← a0", color=green];
// [Asm]   r35 [label="v7 ← a0", color=green];
// [Asm]   r7 [label="s11", color=blue];
// [Asm]   r10 [label="v21 ← a0", color=green];
// [Asm]   r8 [label="v3 ← a5", color=green];
// [Asm]   r5 [label="v4 ← a3", color=green];
// [Asm]   r36 [label="v15 ← a0", color=green];
// [Asm]   r32 [label="a2", color=blue];
// [Asm]   r24 [label="v14 ← a0", color=green];
// [Asm]   r15 [label="v25 ← a0", color=green];
// [Asm]   r31 [label="v2 ← a0", color=green];
// [Asm]   r17 [label="v40 ← a6", color=green];
// [Asm]   r12 [label="v24 ← a0", color=green];
// [Asm]   r20 [label="v29 ← a6", color=green];
// [Asm]   r23 [label="v31 ← a0", color=green];
// [Asm]   r3 [label="v10 ← a2", color=green];
// [Asm]   r27 [label="v12 ← a0", color=green];
// [Asm]   r1 [label="v46 ← a0", color=green];
// [Asm]   r28 [label="v16 ← a0", color=green];
// [Asm]   r11 [label="v23 ← a0", color=green];
// [Asm]   r34 [label="v32 ← a0", color=green];
// [Asm]   r22 [label="v35 ← a0", color=green];
// [Asm]   r14 [label="v42 ← a0", color=green];
// [Asm]   r30 [label="v19 ← a0", color=green];
// [Asm]   r25 [label="v11 ← a0", color=green];
// [Asm]   r2 [label="v5 ← a1", color=green];
// [Asm]   r16 [label="v39 ← a6", color=green];
// [Asm]   r18 [label="v27 ← a0", color=green];
// [Asm]   r19 [label="v28 ← a0", color=green];
// [Asm]   r21 [label="v34 ← a0", color=green];
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r19 -- r20;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r8 -- r31;
// [Asm]   r5 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r6 -- r36;
// [Asm]   r3 -- r15;
// [Asm]   r6 -- r35;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r8 -- r36;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r29;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r7 -- r27;
// [Asm]   r7 -- r35;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r35;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r5 -- r31;
// [Asm]   r4 -- r21;
// [Asm]   r3 -- r8;
// [Asm]   r8 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r25;
// [Asm]   r5 -- r35;
// [Asm]   r20 -- r22;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r12;
// [Asm]   r8 -- r23;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r8 -- r29;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r22;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r8 -- r11;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r8 -- r32;
// [Asm]   r1 -- r5;
// [Asm]   r6 -- r23;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r8 -- r30;
// [Asm]   r5 -- r36;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r29;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r5 -- r23;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r6 -- r30;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r5 -- r19;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r25 -- r26;
// [Asm]   r7 -- r30;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r20;
// [Asm]   r6 -- r26;
// [Asm]   r8 -- r25;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r7 -- r28;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r8 -- r28;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r7 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r15 -- r17;
// [Asm]   r5 -- r28;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r9;
// [Asm]   r8 -- r15;
// [Asm]   r6 -- r28;
// [Asm]   r7 -- r15;
// [Asm]   r8 -- r18;
// [Asm]   r8 -- r35;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r36;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r4 -- r36;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r7 -- r31;
// [Asm]   r5 -- r25;
// [Asm]   r8 -- r26;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r31 -- r32;
// [Asm]   r7 -- r16;
// [Asm]   r31 -- r33;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r23;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r7 -- r12;
// [Asm]   r5 -- r30;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   r2 -- r27;
// [Asm]   comment = "0:a0-> 1:v46-> 2:v5-> 3:v10-> 4:zero-> 5:v4-> 6:v6-> 7:s11-> 8:v3-> 9:v47-> 10:v21-> 11:v23-> 12:v24-> 13:v41-> 14:v42-> 15:v25-> 16:v39-> 17:v40-> 18:v27-> 19:v28-> 20:v29-> 21:v34-> 22:v35-> 25:v11-> 26:v52-> 27:v12-> 23:v31-> 28:v16-> 29:v18-> 30:v19-> 35:v7-> 36:v15-> 24:v14-> 31:v2-> 32:a2-> 33:a1-> 34:v32"
// [Asm]   comment = "v47<-a0;v52<-a6;v6<-a4;v41<-a0;v18<-a0;v7<-a0;v21<-a0;v3<-a5;v4<-a3;v15<-a0;v14<-a0;v25<-a0;v2<-a0;v40<-a6;v24<-a0;v29<-a6;v31<-a0;v10<-a2;v12<-a0;v46<-a0;v16<-a0;v23<-a0;v32<-a0;v35<-a0;v42<-a0;v19<-a0;v11<-a0;v5<-a1;v39<-a6;v27<-a0;v28<-a0;v34<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of do_flip.4500"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   slliw v46, v10, 2 ->   slliw a0, a2, 2
// [Asm] subst   add v47, v3, v46 ->   add a0, a5, a0
// [Asm] subst   lw v21, 0(v47) ->   lw a0, 0(a0)
// [Asm] subst   sw v21, 0(v5) ->   sw a0, 0(a1)
// [Asm] subst   lw v23, 0(v6) ->   lw a0, 0(a4)
// [Asm] subst   sub v24, v23, v10 ->   sub a0, a0, a2
// [Asm] subst   slliw v41, v24, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v42, v3, v41 ->   add a0, a5, a0
// [Asm] subst   lw v25, 0(v42) ->   lw a0, 0(a0)
// [Asm] subst   slliw v39, v10, 2 ->   slliw a6, a2, 2
// [Asm] subst   add v40, v3, v39 ->   add a6, a5, a6
// [Asm] subst   sw v25, 0(v40) ->   sw a0, 0(a6)
// [Asm] subst   lw v27, 0(v6) ->   lw a0, 0(a4)
// [Asm] subst   sub v28, v27, v10 ->   sub a0, a0, a2
// [Asm] subst   lw v29, 0(v5) ->   lw a6, 0(a1)
// [Asm] subst   slliw v34, v28, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v35, v3, v34 ->   add a0, a5, a0
// [Asm] subst   sw v29, 0(v35) ->   sw a6, 0(a0)
// [Asm] subst   addi v31, v10, 1 ->   addi a0, a2, 1
// [Asm] subst   mv v10, v31 ->   mv a2, a0
// [Asm] subst   j .do_flip.4500_11 ->   j .do_flip.4500_11
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   lw v11, 0(v6) ->   lw a0, 0(a4)
// [Asm] subst   li v52, 2 ->   li a6, 2
// [Asm] subst   div v12, v11, v52 ->   div a0, a0, a6
// [Asm] subst   blt v12, v10, .do_flip.4500_13 ->   blt a0, a2, .do_flip.4500_13
// [Asm] subst   addi v5, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a1, -8
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a1)
// [Asm] subst   lw v16, 0(v3) ->   lw a0, 0(a5)
// [Asm] subst   sw v16, 0(v6) ->   sw a0, 0(a4)
// [Asm] subst   lw v18, 0(v4) ->   lw a0, 0(a3)
// [Asm] subst   addi v19, v18, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v19, 0(v4) ->   sw a0, 0(a3)
// [Asm] subst   j .do_flip.4500_2 ->   j .do_flip.4500_2
// [Asm] subst   mv v3, a1 ->   mv a5, a1
// [Asm] subst   mv v4, a2 ->   mv a3, a2
// [Asm] subst   mv v6, v2 ->   mv a4, a0
// [Asm] subst   mv v10, zero ->   mv a2, zero
// [Asm] subst   mv v32, zero ->   mv a0, zero
// [Asm] subst   lw v7, 0(v6) ->   lw a0, 0(a4)
// [Asm] subst   beq v7, zero, .do_flip.4500_3 ->   beq a0, zero, .do_flip.4500_3
// [Asm] pre_assigned_registers: FnParam(fref=f8, fpref=$f.2) -> v4, FnParam(fref=f8, fpref=$f.3) -> v5, Insn(iref=%15) -> v21, FnParam(fref=f8, fpref=$f.0) -> v2, FnParam(fref=f8, fpref=$f.5) -> v7, FnParam(fref=f8, fpref=$f.1) -> v3, Insn(iref=%9) -> v16, Insn(iref=%16) -> v22, Insn(iref=%8) -> v15, Insn(iref=%10) -> v17, Insn(iref=%14) -> v20, Insn(iref=%5) -> v31, Insn(iref=%0) -> v8, Insn(iref=%19) -> v25, Insn(iref=%4) -> v30, Insn(iref=%3) -> v12, Insn(iref=%18) -> v24, BlockParam(bref=b11, bpref=$b.0) -> v10, Insn(iref=%7) -> v14, Insn(iref=%22) -> v27, Insn(iref=%17) -> v23, Insn(iref=%23) -> v28, Insn(iref=%2) -> v11, Insn(iref=%1) -> v9, Insn(iref=%20) -> v29, Insn(iref=%11) -> v18, FnParam(fref=f8, fpref=$f.4) -> v6, Insn(iref=%21) -> v26, Self(fref=f8) -> v0, Insn(iref=%6) -> v13, Insn(iref=%12) -> v19
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%18)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%2), FnParam(fref=f8, fpref=$f.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Bool(val=true)])
// [Asm] defs: [v26]
// [Asm] live_set: [v2, v5, zero, v26, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v2, v5, zero, v27, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v5, zero, v13, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v5, zero, a0, v7, v4, v6, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v5, zero, a0, v7, v4, a1, v6, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, v5, zero, a0, v7, v4, a2, a1, v6, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v5, zero, a0, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v2, v5, v16, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v5, v16, zero, v7, v4, v17, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v2, v5, v46, zero, v7, v4, v17, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v2, v5, zero, v7, v4, v47, v17, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v2, v5, zero, v7, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v2, v5, zero, v42, v7, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v2, v5, zero, v7, v19, v4, v6, v43, v3]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v2, v5, zero, v20, v7, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v2, v5, v21, zero, v7, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v2, v5, v21, zero, v7, v4, v6, v39, v3]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v2, v40, v5, v21, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v2, v5, zero, v23, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v2, v5, zero, v7, v35, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v2, v5, zero, v7, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v24, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v24, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v3, v11, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v2, v5, v53, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of go_loop.4504"];
// [Asm]   r0 [label="v26 ← a0", color=green];
// [Asm]   r38 [label="v24 ← a0", color=green];
// [Asm]   r33 [label="v39 ← a0", color=green];
// [Asm]   r9 [label="v13 ← a0", color=green];
// [Asm]   r26 [label="v46 ← a0", color=green];
// [Asm]   r6 [label="v6 ← s4", color=green];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r42 [label="v53 ← a1", color=green];
// [Asm]   r4 [label="v7 ← s2", color=green];
// [Asm]   r29 [label="v42 ← a1", color=green];
// [Asm]   r35 [label="v23 ← a0", color=green];
// [Asm]   r7 [label="v3 ← s5", color=green];
// [Asm]   r10 [label="a0", color=blue];
// [Asm]   r8 [label="v27 ← a0", color=green];
// [Asm]   r5 [label="v4 ← s3", color=green];
// [Asm]   r36 [label="v35 ← a0", color=green];
// [Asm]   r15 [label="a5", color=blue];
// [Asm]   r24 [label="v16 ← a0", color=green];
// [Asm]   r32 [label="v21 ← a1", color=green];
// [Asm]   r43 [label="v10 ← a0", color=green];
// [Asm]   r31 [label="v20 ← a1", color=green];
// [Asm]   r39 [label="v34 ← a1", color=green];
// [Asm]   r17 [label="a7", color=blue];
// [Asm]   r12 [label="a2", color=blue];
// [Asm]   r37 [label="v36 ← a0", color=green];
// [Asm]   r20 [label="t2", color=blue];
// [Asm]   r23 [label="v15 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v47 ← a0", color=green];
// [Asm]   r1 [label="v2 ← s0", color=green];
// [Asm]   r40 [label="v11 ← a0", color=green];
// [Asm]   r41 [label="v8 ← a0", color=green];
// [Asm]   r28 [label="v19 ← a0", color=green];
// [Asm]   r11 [label="a1", color=blue];
// [Asm]   r34 [label="v40 ← a0", color=green];
// [Asm]   r22 [label="t4", color=blue];
// [Asm]   r14 [label="a4", color=blue];
// [Asm]   r30 [label="v43 ← a1", color=green];
// [Asm]   r25 [label="v17 ← a1", color=green];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r16 [label="a6", color=blue];
// [Asm]   r18 [label="t0", color=blue];
// [Asm]   r19 [label="t1", color=blue];
// [Asm]   r21 [label="t3", color=blue];
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r2 -- r38;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r1 -- r26;
// [Asm]   r28 -- r32;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r6 -- r35;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r28 -- r30;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r29;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r37;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r27;
// [Asm]   r2 -- r41;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r7 -- r32;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r2 -- r34;
// [Asm]   r0 -- r6;
// [Asm]   r5 -- r31;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r5 -- r35;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r10 -- r18;
// [Asm]   r3 -- r39;
// [Asm]   r10 -- r12;
// [Asm]   r7 -- r38;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r5 -- r32;
// [Asm]   r10 -- r22;
// [Asm]   r1 -- r2;
// [Asm]   r41 -- r42;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r2 -- r36;
// [Asm]   r32 -- r34;
// [Asm]   r1 -- r41;
// [Asm]   r1 -- r38;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r6 -- r23;
// [Asm]   r1 -- r35;
// [Asm]   r0 -- r4;
// [Asm]   r7 -- r42;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r5 -- r36;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r7 -- r29;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r28 -- r31;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r3 -- r38;
// [Asm]   r2 -- r4;
// [Asm]   r6 -- r41;
// [Asm]   r1 -- r34;
// [Asm]   r7 -- r24;
// [Asm]   r6 -- r33;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r20;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r38;
// [Asm]   r6 -- r20;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r2 -- r40;
// [Asm]   r7 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r32 -- r33;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r29;
// [Asm]   r10 -- r15;
// [Asm]   r3 -- r29;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r36;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r4 -- r36;
// [Asm]   r7 -- r41;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r6 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r7 -- r16;
// [Asm]   r6 -- r38;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r35;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r12;
// [Asm]   r3 -- r23;
// [Asm]   r7 -- r14;
// [Asm]   r2 -- r27;
// [Asm]   r1 -- r24;
// [Asm]   r1 -- r42;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r39;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r38;
// [Asm]   r5 -- r41;
// [Asm]   r4 -- r41;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r6 -- r36;
// [Asm]   r1 -- r37;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r7 -- r40;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r10 -- r19;
// [Asm]   r6 -- r29;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r32;
// [Asm]   r5 -- r42;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r4 -- r40;
// [Asm]   r3 -- r18;
// [Asm]   r4 -- r42;
// [Asm]   r3 -- r34;
// [Asm]   r4 -- r35;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r6 -- r13;
// [Asm]   r7 -- r34;
// [Asm]   r2 -- r33;
// [Asm]   r4 -- r33;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r3 -- r40;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r6 -- r31;
// [Asm]   r28 -- r29;
// [Asm]   r3 -- r27;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r24;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r32;
// [Asm]   r5 -- r34;
// [Asm]   r10 -- r17;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r4 -- r37;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r25 -- r27;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r25 -- r26;
// [Asm]   r7 -- r30;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r26;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r40;
// [Asm]   r6 -- r24;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r7 -- r33;
// [Asm]   r5 -- r37;
// [Asm]   r6 -- r28;
// [Asm]   r6 -- r42;
// [Asm]   r7 -- r11;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r41;
// [Asm]   r6 -- r17;
// [Asm]   r7 -- r39;
// [Asm]   r3 -- r14;
// [Asm]   r7 -- r31;
// [Asm]   r4 -- r39;
// [Asm]   r3 -- r36;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r38 -- r39;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r21;
// [Asm]   r5 -- r40;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v26-> 1:v2-> 2:v5-> 3:zero-> 4:v7-> 5:v4-> 6:v6-> 7:v3-> 8:v27-> 9:v13-> 10:a0-> 11:a1-> 12:a2-> 13:a3-> 14:a4-> 15:a5-> 16:a6-> 17:a7-> 18:t0-> 19:t1-> 20:t2-> 21:t3-> 22:t4-> 23:v15-> 24:v16-> 25:v17-> 26:v46-> 27:v47-> 28:v19-> 29:v42-> 30:v43-> 31:v20-> 32:v21-> 33:v39-> 34:v40-> 35:v23-> 36:v35-> 37:v36-> 38:v24-> 39:v34-> 40:v11-> 41:v8-> 42:v53-> 43:v10"
// [Asm]   comment = "v26<-a0;v24<-a0;v39<-a0;v13<-a0;v46<-a0;v6<-s4;v53<-a1;v7<-s2;v42<-a1;v23<-a0;v3<-s5;v27<-a0;v4<-s3;v35<-a0;v16<-a0;v21<-a1;v10<-a0;v20<-a1;v34<-a1;v36<-a0;v15<-a0;v47<-a0;v2<-s0;v11<-a0;v8<-a0;v19<-a0;v40<-a0;v43<-a1;v17<-a1;v5<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of go_loop.4504"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v26, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   addi v27, v26, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v27, 0(v3) ->   sw a0, 0(s5)
// [Asm] subst   j .go_loop.4504_2 ->   j .go_loop.4504_2
// [Asm] subst   lw v13, 0(v6) ->   lw a0, 0(s4)
// [Asm] subst   sw v13, 0(v4) ->   sw a0, 0(s3)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v3 ->   mv a1, s5
// [Asm] subst   mv a2, v6 ->   mv a2, s4
// [Asm] subst   call move_perm1_forward.4505 ->   call move_perm1_forward.4505
// [Asm] subst   lw v16, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   lw v17, 0(v4) ->   lw a1, 0(s3)
// [Asm] subst   slliw v46, v16, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v47, v6, v46 ->   add a0, s4, a0
// [Asm] subst   sw v17, 0(v47) ->   sw a1, 0(a0)
// [Asm] subst   lw v19, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   slliw v42, v19, 2 ->   slliw a1, a0, 2
// [Asm] subst   add v43, v7, v42 ->   add a1, s2, a1
// [Asm] subst   lw v20, 0(v43) ->   lw a1, 0(a1)
// [Asm] subst   addi v21, v20, -1 ->   addi a1, a1, -1
// [Asm] subst   slliw v39, v19, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v40, v7, v39 ->   add a0, s2, a0
// [Asm] subst   sw v21, 0(v40) ->   sw a1, 0(a0)
// [Asm] subst   lw v23, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   slliw v35, v23, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v36, v7, v35 ->   add a0, s2, a0
// [Asm] subst   lw v24, 0(v36) ->   lw a0, 0(a0)
// [Asm] subst   li v34, 1 ->   li a1, 1
// [Asm] subst   bge v24, v34, .go_loop.4504_7 ->   bge a0, a1, .go_loop.4504_7
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v11, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   beq v11, v2, .go_loop.4504_5 ->   beq a0, s0, .go_loop.4504_5
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s5, a1
// [Asm] subst   mv v4, a2 ->   mv s3, a2
// [Asm] subst   mv v5, a3 ->   mv s1, a3
// [Asm] subst   mv v6, a4 ->   mv s4, a4
// [Asm] subst   mv v7, a5 ->   mv s2, a5
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(s1)
// [Asm] subst   sw zero, 0(v3) ->   sw zero, 0(s5)
// [Asm] subst   j .go_loop.4504_2 ->   j .go_loop.4504_2
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(s1)
// [Asm] subst   j .go_loop.4504_2 ->   j .go_loop.4504_2
// [Asm] subst   lw v8, 0(v5) ->   lw a0, 0(s1)
// [Asm] subst   li v53, 1 ->   li a1, 1
// [Asm] subst   bne v8, v53, .go_loop.4504_4 ->   bne a0, a1, .go_loop.4504_4
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v40, Insn(iref=%41) -> v46, Insn(iref=%33) -> v74, Insn(iref=%63) -> v33, Insn(iref=%8) -> v24, Insn(iref=%10) -> v27, Insn(iref=%27) -> v68, Mem(fref=f9, mref=m12) -> v3, Insn(iref=%39) -> v80, Insn(iref=%59) -> v29, Insn(iref=%4) -> v20, Insn(iref=%56) -> v60, Insn(iref=%49) -> v53, Insn(iref=%42) -> v47, Insn(iref=%26) -> v67, Insn(iref=%31) -> v72, Mem(fref=f9, mref=m4) -> v4, Insn(iref=%64) -> v34, Insn(iref=%38) -> v79, Insn(iref=%16) -> v41, Insn(iref=%53) -> v57, Mem(fref=f9, mref=m7) -> v15, Insn(iref=%54) -> v58, Insn(iref=%60) -> v30, Insn(iref=%5) -> v21, Insn(iref=%19) -> v44, Insn(iref=%13) -> v38, Mem(fref=f9, mref=m5) -> v12, Insn(iref=%7) -> v23, Insn(iref=%55) -> v59, Mem(fref=f9, mref=m1) -> v9, Insn(iref=%48) -> v52, Insn(iref=%23) -> v65, Insn(iref=%20) -> v62, Mem(fref=f9, mref=m8) -> v5, Insn(iref=%34) -> v75, Insn(iref=%36) -> v77, BlockParam(bref=b2, bpref=$b.0) -> v25, Mem(fref=f9, mref=m11) -> v11, Self(fref=f9) -> v0, Mem(fref=f9, mref=m9) -> v6, Mem(fref=f9, mref=m13) -> v8, Insn(iref=%50) -> v54, Insn(iref=%14) -> v39, Insn(iref=%51) -> v55, Mem(fref=f9, mref=m2) -> v13, Insn(iref=%52) -> v56, Insn(iref=%44) -> v48, Insn(iref=%32) -> v73, Insn(iref=%58) -> v28, Insn(iref=%1) -> v17, Insn(iref=%11) -> v36, Mem(fref=f9, mref=m0) -> v7, Insn(iref=%57) -> v61, Mem(fref=f9, mref=m6) -> v2, Insn(iref=%6) -> v22, Insn(iref=%35) -> v76, Insn(iref=%62) -> v32, Insn(iref=%46) -> v50, Insn(iref=%28) -> v69, Insn(iref=%9) -> v26, Insn(iref=%24) -> v66, Mem(fref=f9, mref=m10) -> v10, Insn(iref=%37) -> v78, Insn(iref=%45) -> v49, Insn(iref=%29) -> v70, BlockParam(bref=b8, bpref=$b.0) -> v35, Insn(iref=%47) -> v51, Insn(iref=%0) -> v16, Insn(iref=%61) -> v31, Insn(iref=%3) -> v19, Insn(iref=%18) -> v43, Insn(iref=%22) -> v64, Insn(iref=%17) -> v42, Insn(iref=%2) -> v18, Insn(iref=%30) -> v71, Mem(fref=f9, mref=m3) -> v14, Insn(iref=%21) -> v63, Insn(iref=%40) -> v45, Insn(iref=%12) -> v37
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%17), Insn(iref=%18)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%9)])
// [Asm] defs: [v62]
// [Asm] live_set: [v25, v62, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v64]
// [Asm] live_set: [v25, v14, v13, v7, v12, s11, v9, v64, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v25, v14, v13, v7, v65, v12, s11, v9, v64, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: [v66]
// [Asm] live_set: [v25, v66, v14, v13, v7, v65, v12, s11, v9, v64, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v66 is X
// [Asm] defs: [v97]
// [Asm] live_set: [v25, v66, v14, v13, v7, v65, v12, s11, v9, v64, zero, v97, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v97 is X
// [Asm] defs: [v67]
// [Asm] live_set: [v25, v66, v14, v13, v67, v7, v65, v12, s11, v9, v64, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: [v95]
// [Asm] live_set: [v25, v66, v14, v13, v67, v7, v95, v65, v12, s11, v9, v64, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v95 is X
// [Asm] defs: [v68]
// [Asm] live_set: [v25, v66, v14, v13, v7, v65, v12, s11, v9, v64, zero, v68, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: [v69]
// [Asm] live_set: [v25, v14, v69, v13, v7, v65, v12, s11, v9, v64, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: [v92]
// [Asm] live_set: [v25, v14, v69, v13, v7, v92, v65, v12, s11, v9, v64, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v92 is X
// [Asm] defs: [v70]
// [Asm] live_set: [v25, v14, v13, v7, v65, v12, s11, v9, v64, zero, v4, v70, v2]
// [Asm] move_origin: []
// [Asm] defined: v70 is X
// [Asm] defs: [v90]
// [Asm] live_set: [v25, v14, v13, v7, v65, v12, s11, v9, v64, zero, v4, v90, v70, v2]
// [Asm] move_origin: []
// [Asm] defined: v90 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v25, v14, v71, v13, v7, v65, v12, s11, v9, v64, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v25, v14, v13, v7, v12, s11, v9, v64, v72, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v25, v14, v13, v7, v12, s11, v9, v73, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v73 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v25, v14, v13, v7, v12, v9, zero, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v25, v14, v13, v7, v12, s11, v9, zero, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v87]
// [Asm] live_set: [v25, v14, v87, v13, v7, v12, s11, v9, zero, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v87 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, v13, v7, v12, s11, v9, zero, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v25, v14, v10, v13, v7, v12, v9, zero, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v25, v14, v10, v13, v7, v12, s11, v9, zero, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, v10, v13, v7, v12, s11, v9, zero, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v25, v14, v10, v13, v7, v12, s11, v9, zero, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [v83]
// [Asm] live_set: [v25, v14, v10, v13, v7, v12, s11, v9, zero, v4, v6, v83, v2]
// [Asm] move_origin: []
// [Asm] defined: v83 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v14, v10, v13, a0, v7, v12, s11, v9, zero, v4, v6, v2]
// [Asm] move_origin: [v83]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v14, v10, v13, a0, v7, a1, v12, s11, v9, zero, v4, v6, v2]
// [Asm] move_origin: [v25]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v14, v13, a0, v7, a2, a1, v12, s11, v9, zero, v4, v6, v2]
// [Asm] move_origin: [v10]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v14, v13, a0, v7, a2, a1, v12, s11, a3, v9, zero, v4, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v25, v14, v13, a0, v7, a2, a1, v12, s11, a3, v9, zero, a4, v4, v2]
// [Asm] move_origin: [v7]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v25, v14, a5, v13, a0, v7, a2, a1, v12, s11, a3, v9, zero, a4, v4, v2]
// [Asm] move_origin: [v13]
// [Asm] defined: a5 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v14, zero, v13, a0, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v77]
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v77 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v78]
// [Asm] live_set: [v25, v14, zero, v13, v78, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v78 is X
// [Asm] defs: [v79]
// [Asm] live_set: [v25, v14, zero, v13, v79, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: [v25]
// [Asm] defs: []
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v45]
// [Asm] live_set: [v25, v14, v13, v7, v12, s11, v9, zero, v45, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v25, v14, v46, v13, v7, v12, s11, v9, zero, v45, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v25, v14, v46, v13, v7, v12, s11, v9, zero, v45, v4, v47, v2]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v119]
// [Asm] live_set: [v25, v14, v46, v13, v119, v7, v12, s11, v9, zero, v45, v4, v47, v2]
// [Asm] move_origin: []
// [Asm] defined: v119 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v25, v14, v46, v13, v7, v12, s11, v9, v48, zero, v45, v4, v47, v2]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [v117]
// [Asm] live_set: [v25, v14, v46, v13, v7, v12, s11, v9, v48, zero, v45, v4, v47, v117, v2]
// [Asm] move_origin: []
// [Asm] defined: v117 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v25, v14, v46, v49, v13, v7, v12, s11, v9, zero, v45, v4, v47, v2]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v25, v14, v46, v13, v7, v12, s11, v9, zero, v50, v45, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [v114]
// [Asm] live_set: [v25, v14, v46, v13, v7, v114, v12, s11, v9, zero, v50, v45, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v114 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v25, v14, v46, v13, v7, v12, s11, v9, v51, zero, v45, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: [v112]
// [Asm] live_set: [v25, v14, v46, v13, v7, v12, s11, v9, v51, v112, zero, v45, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v112 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v25, v14, v46, v13, v7, v12, s11, v52, v9, zero, v45, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v25, v14, v53, v13, v7, v12, s11, v9, zero, v45, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v25, v14, v13, v7, v12, s11, v9, zero, v4, v54, v2]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v25, v14, v13, v7, v12, v9, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v25, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v109]
// [Asm] live_set: [v11, v25, v14, v13, v7, v12, s11, v9, v109, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v109 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v25, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v11, v25, v14, v13, v7, v12, v9, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v11, v25, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v25, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v25, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v105]
// [Asm] live_set: [v3, v11, v25, v14, v13, v7, v12, s11, v9, zero, v105, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v105 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v11, v25, v14, v13, a0, v7, v12, s11, v9, zero, v4, v2]
// [Asm] move_origin: [v105]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v11, v25, v14, v13, a0, v7, a1, v12, s11, v9, zero, v4, v2]
// [Asm] move_origin: [v25]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v11, v14, v13, a0, v7, a2, a1, v12, s11, v9, zero, v4, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v14, v13, a0, v7, a2, a1, v12, s11, a3, v9, zero, v4, v2]
// [Asm] move_origin: [v11]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v25, v14, v13, a0, v7, a2, a1, v12, s11, a3, v9, zero, a4, v4, v2]
// [Asm] move_origin: [v7]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v25, v14, a5, v13, a0, v7, a2, a1, v12, s11, a3, v9, zero, a4, v4, v2]
// [Asm] move_origin: [v13]
// [Asm] defined: a5 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v14, zero, v13, a0, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v58]
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v58 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v59]
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, v59, s11, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v60, v2]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: [v25]
// [Asm] defs: []
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v35]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [s11, v12, v28]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [s11, v28, v29]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v28, v29, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v28, v29, v8]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v29, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v31, v8]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v32, v31]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v32, v31]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v31, a0]
// [Asm] move_origin: [v32]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v31, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v33]
// [Asm] live_set: [v31]
// [Asm] move_origin: [a0]
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v31]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v31]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v31]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v34]
// [Asm] live_set: [v34]
// [Asm] move_origin: [a0]
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v34]
// [Asm] move_origin: []
// [Asm] defs: [v35]
// [Asm] live_set: [v35]
// [Asm] move_origin: [v34]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, v13, v7, s11, v12, v9, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v14, v13, a0, v7, s11, v12, v9, zero, v4, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [v130]
// [Asm] live_set: [v25, v14, v13, a0, v7, s11, v12, v9, v130, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v130 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v14, v13, a0, v7, a1, s11, v12, v9, zero, v4, v2]
// [Asm] move_origin: [v130]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v14, v13, a0, v7, a2, a1, s11, v12, v9, zero, v4, v2]
// [Asm] move_origin: [v7]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v14, v13, a0, v7, a2, a1, s11, v12, a3, v9, zero, v4, v2]
// [Asm] move_origin: [v9]
// [Asm] defined: a3 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v14, zero, v13, a0, v7, v4, v12, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v36]
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v14, zero, v13, a0, v7, v4, v12, s11, v9, v2]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v14, zero, v13, a0, v7, v4, a1, v12, s11, v9, v2]
// [Asm] move_origin: [v13]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v14, zero, v13, a0, v7, v4, v12, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v37]
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v39, v2]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v25, v14, v5, zero, v13, v7, v4, v12, v9, v39, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v25, v14, v5, zero, v13, v7, v4, s11, v12, v9, v39, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, v5, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v25, v14, v5, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v14, zero, v13, a0, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v14, zero, v13, a0, v7, v4, a1, s11, v12, v9, v2]
// [Asm] move_origin: [v9]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v14, zero, v13, a0, v7, v4, a2, a1, s11, v12, v9, v2]
// [Asm] move_origin: [v14]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v14, zero, v13, a0, v7, v4, v12, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v41]
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v42]
// [Asm] live_set: [v25, v14, zero, v13, v42, v7, v4, v12, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v25, v14, zero, v13, v42, v7, v4, v43, v12, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v7, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [v149]
// [Asm] live_set: [zero, a0, v7, s11, v149]
// [Asm] move_origin: []
// [Asm] defined: v149 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v7, a1, s11]
// [Asm] move_origin: [v149]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v7, a2, a1, s11]
// [Asm] move_origin: [v7]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v7, s11]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v7, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13, v7, v9]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v13, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v13, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v13, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v13, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v13, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v13, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v13, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v13, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v13, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v13, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero, v13, v7, v9]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v14, zero, v13, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero, v13, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v14, zero, v13, v7, v4, v9]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v14, zero, v13, v7, v4, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero, v13, v7, v4, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v14, zero, v13, v7, v4, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v14, zero, v13, v7, v4, v12, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero, v13, v7, v4, v12, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v14, zero, v13, v7, v4, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v14, zero, v13, v7, v4, v12, v15, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v14, zero, v13, v7, v4, s11, v12, v15, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v142]
// [Asm] live_set: [v14, v142, zero, v13, v7, v4, s11, v12, v15, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v142 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero, v13, v7, v4, s11, v12, v15, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: [v15]
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v25, v14, zero, v13, v26, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v139]
// [Asm] live_set: [v25, v14, zero, v13, v26, v7, v4, s11, v12, v139, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v139 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.4496"];
// [Asm]   r0 [label="v62 ← a0", color=green];
// [Asm]   r46 [label="v46 ← a1", color=green];
// [Asm]   r33 [label="a4", color=blue];
// [Asm]   r59 [label="v11 ← a3", color=green];
// [Asm]   r76 [label="v37 ← a0", color=green];
// [Asm]   r9 [label="v4 ← s6", color=green];
// [Asm]   r26 [label="v87 ← a0", color=green];
// [Asm]   r86 [label="v26 ← a0", color=green];
// [Asm]   r44 [label="v79 ← a0", color=green];
// [Asm]   r53 [label="v114 ← a3", color=green];
// [Asm]   r56 [label="v52 ← a2", color=green];
// [Asm]   r10 [label="v2 ← s7", color=green];
// [Asm]   r5 [label="v12 ← s4", color=green];
// [Asm]   r54 [label="v51 ← a2", color=green];
// [Asm]   r24 [label="v73 ← a0", color=green];
// [Asm]   r43 [label="v78 ← a0", color=green];
// [Asm]   r80 [label="v42 ← a0", color=green];
// [Asm]   r31 [label="a2", color=blue];
// [Asm]   r39 [label="t2", color=blue];
// [Asm]   r17 [label="v68 ← a3", color=green];
// [Asm]   r52 [label="v50 ← a2", color=green];
// [Asm]   r65 [label="v60 ← a0", color=green];
// [Asm]   r79 [label="v41 ← a0", color=green];
// [Asm]   r20 [label="v70 ← a2", color=green];
// [Asm]   r61 [label="v3 ← a2", color=green];
// [Asm]   r23 [label="v72 ← a1", color=green];
// [Asm]   r3 [label="v13 ← s2", color=green];
// [Asm]   r82 [label="v149 ← a1", color=green];
// [Asm]   r67 [label="v29 ← a2", color=green];
// [Asm]   r77 [label="v39 ← a0", color=green];
// [Asm]   r27 [label="v10 ← a2", color=green];
// [Asm]   r75 [label="v36 ← a0", color=green];
// [Asm]   r62 [label="v105 ← a0", color=green];
// [Asm]   r40 [label="t3", color=blue];
// [Asm]   r11 [label="v64 ← a0", color=green];
// [Asm]   r58 [label="v54 ← a0", color=green];
// [Asm]   r34 [label="a5", color=blue];
// [Asm]   r83 [label="v17 ← a0", color=green];
// [Asm]   r14 [label="v97 ← a3", color=green];
// [Asm]   r51 [label="v49 ← a3", color=green];
// [Asm]   r78 [label="v5 ← a1", color=green];
// [Asm]   r55 [label="v112 ← a3", color=green];
// [Asm]   r16 [label="v95 ← a4", color=green];
// [Asm]   r21 [label="v90 ← a3", color=green];
// [Asm]   r60 [label="v109 ← a0", color=green];
// [Asm]   r73 [label="v35 ← a0", color=green];
// [Asm]   r38 [label="t1", color=blue];
// [Asm]   r72 [label="v34 ← a0", color=green];
// [Asm]   r87 [label="v139 ← a1", color=green];
// [Asm]   r85 [label="v142 ← a1", color=green];
// [Asm]   r47 [label="v47 ← a2", color=green];
// [Asm]   r6 [label="s11", color=blue];
// [Asm]   r13 [label="v66 ← a2", color=green];
// [Asm]   r42 [label="v77 ← a0", color=green];
// [Asm]   r4 [label="v7 ← s3", color=green];
// [Asm]   r29 [label="a0", color=blue];
// [Asm]   r35 [label="a6", color=blue];
// [Asm]   r7 [label="v9 ← s5", color=green];
// [Asm]   r64 [label="v59 ← a0", color=green];
// [Asm]   r8 [label="zero", color=blue];
// [Asm]   r36 [label="a7", color=blue];
// [Asm]   r66 [label="v28 ← a0", color=green];
// [Asm]   r32 [label="a3", color=blue];
// [Asm]   r15 [label="v67 ← a3", color=green];
// [Asm]   r49 [label="v48 ← a3", color=green];
// [Asm]   r57 [label="v53 ← a1", color=green];
// [Asm]   r74 [label="v130 ← a1", color=green];
// [Asm]   r68 [label="v8 ← a1", color=green];
// [Asm]   r70 [label="v32 ← a0", color=green];
// [Asm]   r12 [label="v65 ← a1", color=green];
// [Asm]   r48 [label="v119 ← a3", color=green];
// [Asm]   r37 [label="t0", color=blue];
// [Asm]   r1 [label="v25 ← s0", color=green];
// [Asm]   r28 [label="v83 ← a0", color=green];
// [Asm]   r41 [label="t4", color=blue];
// [Asm]   r71 [label="v33 ← a0", color=green];
// [Asm]   r69 [label="v31 ← s0", color=green];
// [Asm]   r22 [label="v71 ← a2", color=green];
// [Asm]   r84 [label="v15 ← a0", color=green];
// [Asm]   r50 [label="v117 ← a4", color=green];
// [Asm]   r30 [label="a1", color=blue];
// [Asm]   r45 [label="v45 ← a0", color=green];
// [Asm]   r25 [label="v6 ← a3", color=green];
// [Asm]   r63 [label="v58 ← a0", color=green];
// [Asm]   r2 [label="v14 ← s1", color=green];
// [Asm]   r18 [label="v69 ← a2", color=green];
// [Asm]   r19 [label="v92 ← a3", color=green];
// [Asm]   r81 [label="v43 ← a1", color=green];
// [Asm]   r10 -- r64;
// [Asm]   r2 -- r38;
// [Asm]   r2 -- r78;
// [Asm]   r6 -- r48;
// [Asm]   r10 -- r53;
// [Asm]   r36 -- r69;
// [Asm]   r8 -- r36;
// [Asm]   r6 -- r68;
// [Asm]   r4 -- r44;
// [Asm]   r30 -- r61;
// [Asm]   r3 -- r9;
// [Asm]   r9 -- r78;
// [Asm]   r7 -- r78;
// [Asm]   r4 -- r48;
// [Asm]   r5 -- r65;
// [Asm]   r3 -- r86;
// [Asm]   r2 -- r51;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r62;
// [Asm]   r2 -- r41;
// [Asm]   r7 -- r32;
// [Asm]   r9 -- r14;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r48;
// [Asm]   r46 -- r56;
// [Asm]   r9 -- r62;
// [Asm]   r5 -- r35;
// [Asm]   r61 -- r62;
// [Asm]   r25 -- r29;
// [Asm]   r8 -- r16;
// [Asm]   r2 -- r48;
// [Asm]   r10 -- r18;
// [Asm]   r4 -- r83;
// [Asm]   r29 -- r33;
// [Asm]   r5 -- r32;
// [Asm]   r29 -- r40;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r51;
// [Asm]   r32 -- r34;
// [Asm]   r1 -- r35;
// [Asm]   r6 -- r56;
// [Asm]   r9 -- r39;
// [Asm]   r6 -- r25;
// [Asm]   r59 -- r61;
// [Asm]   r7 -- r44;
// [Asm]   r6 -- r62;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r55;
// [Asm]   r29 -- r30;
// [Asm]   r30 -- r59;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r80 -- r81;
// [Asm]   r6 -- r46;
// [Asm]   r9 -- r76;
// [Asm]   r9 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r42;
// [Asm]   r9 -- r84;
// [Asm]   r35 -- r69;
// [Asm]   r7 -- r75;
// [Asm]   r5 -- r74;
// [Asm]   r10 -- r81;
// [Asm]   r9 -- r11;
// [Asm]   r3 -- r65;
// [Asm]   r2 -- r14;
// [Asm]   r47 -- r51;
// [Asm]   r46 -- r53;
// [Asm]   r9 -- r63;
// [Asm]   r9 -- r24;
// [Asm]   r10 -- r15;
// [Asm]   r8 -- r35;
// [Asm]   r8 -- r18;
// [Asm]   r9 -- r36;
// [Asm]   r7 -- r36;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r60;
// [Asm]   r4 -- r63;
// [Asm]   r12 -- r16;
// [Asm]   r39 -- r69;
// [Asm]   r6 -- r38;
// [Asm]   r12 -- r17;
// [Asm]   r9 -- r46;
// [Asm]   r10 -- r32;
// [Asm]   r3 -- r23;
// [Asm]   r7 -- r46;
// [Asm]   r9 -- r21;
// [Asm]   r1 -- r24;
// [Asm]   r2 -- r58;
// [Asm]   r5 -- r12;
// [Asm]   r10 -- r62;
// [Asm]   r10 -- r79;
// [Asm]   r2 -- r45;
// [Asm]   r9 -- r25;
// [Asm]   r4 -- r41;
// [Asm]   r5 -- r63;
// [Asm]   r2 -- r15;
// [Asm]   r66 -- r68;
// [Asm]   r5 -- r8;
// [Asm]   r69 -- r70;
// [Asm]   r3 -- r56;
// [Asm]   r7 -- r56;
// [Asm]   r6 -- r66;
// [Asm]   r7 -- r77;
// [Asm]   r1 -- r10;
// [Asm]   r4 -- r54;
// [Asm]   r10 -- r19;
// [Asm]   r3 -- r32;
// [Asm]   r6 -- r54;
// [Asm]   r29 -- r31;
// [Asm]   r1 -- r17;
// [Asm]   r9 -- r45;
// [Asm]   r9 -- r31;
// [Asm]   r4 -- r78;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r9 -- r41;
// [Asm]   r6 -- r77;
// [Asm]   r4 -- r35;
// [Asm]   r41 -- r69;
// [Asm]   r1 -- r31;
// [Asm]   r10 -- r56;
// [Asm]   r1 -- r87;
// [Asm]   r31 -- r69;
// [Asm]   r5 -- r86;
// [Asm]   r4 -- r86;
// [Asm]   r2 -- r46;
// [Asm]   r7 -- r63;
// [Asm]   r6 -- r18;
// [Asm]   r8 -- r78;
// [Asm]   r4 -- r28;
// [Asm]   r3 -- r40;
// [Asm]   r9 -- r59;
// [Asm]   r9 -- r87;
// [Asm]   r3 -- r27;
// [Asm]   r5 -- r80;
// [Asm]   r8 -- r29;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r11;
// [Asm]   r10 -- r25;
// [Asm]   r3 -- r7;
// [Asm]   r45 -- r47;
// [Asm]   r4 -- r49;
// [Asm]   r30 -- r33;
// [Asm]   r6 -- r32;
// [Asm]   r10 -- r17;
// [Asm]   r67 -- r68;
// [Asm]   r9 -- r60;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r9 -- r29;
// [Asm]   r46 -- r47;
// [Asm]   r4 -- r79;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r60;
// [Asm]   r25 -- r26;
// [Asm]   r6 -- r16;
// [Asm]   r5 -- r87;
// [Asm]   r4 -- r30;
// [Asm]   r10 -- r27;
// [Asm]   r1 -- r65;
// [Asm]   r1 -- r39;
// [Asm]   r9 -- r44;
// [Asm]   r2 -- r63;
// [Asm]   r8 -- r54;
// [Asm]   r7 -- r37;
// [Asm]   r2 -- r57;
// [Asm]   r4 -- r11;
// [Asm]   r9 -- r38;
// [Asm]   r3 -- r84;
// [Asm]   r8 -- r52;
// [Asm]   r7 -- r33;
// [Asm]   r10 -- r23;
// [Asm]   r3 -- r55;
// [Asm]   r6 -- r82;
// [Asm]   r9 -- r65;
// [Asm]   r9 -- r16;
// [Asm]   r4 -- r39;
// [Asm]   r9 -- r19;
// [Asm]   r7 -- r50;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r43;
// [Asm]   r9 -- r54;
// [Asm]   r5 -- r76;
// [Asm]   r10 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r3 -- r44;
// [Asm]   r7 -- r51;
// [Asm]   r8 -- r31;
// [Asm]   r6 -- r81;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r8 -- r51;
// [Asm]   r4 -- r34;
// [Asm]   r10 -- r61;
// [Asm]   r1 -- r30;
// [Asm]   r47 -- r50;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r81;
// [Asm]   r5 -- r85;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r84;
// [Asm]   r37 -- r69;
// [Asm]   r1 -- r45;
// [Asm]   r5 -- r29;
// [Asm]   r1 -- r52;
// [Asm]   r11 -- r18;
// [Asm]   r10 -- r40;
// [Asm]   r30 -- r34;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r8 -- r61;
// [Asm]   r34 -- r69;
// [Asm]   r8 -- r24;
// [Asm]   r8 -- r75;
// [Asm]   r2 -- r25;
// [Asm]   r6 -- r60;
// [Asm]   r10 -- r38;
// [Asm]   r10 -- r12;
// [Asm]   r1 -- r77;
// [Asm]   r10 -- r31;
// [Asm]   r45 -- r48;
// [Asm]   r4 -- r56;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r25;
// [Asm]   r9 -- r74;
// [Asm]   r5 -- r55;
// [Asm]   r3 -- r49;
// [Asm]   r2 -- r36;
// [Asm]   r1 -- r80;
// [Asm]   r6 -- r55;
// [Asm]   r12 -- r21;
// [Asm]   r6 -- r23;
// [Asm]   r7 -- r42;
// [Asm]   r4 -- r14;
// [Asm]   r3 -- r46;
// [Asm]   r7 -- r65;
// [Asm]   r46 -- r50;
// [Asm]   r45 -- r56;
// [Asm]   r3 -- r45;
// [Asm]   r13 -- r15;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r43;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r34;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r6 -- r33;
// [Asm]   r8 -- r9;
// [Asm]   r46 -- r51;
// [Asm]   r2 -- r65;
// [Asm]   r2 -- r80;
// [Asm]   r10 -- r29;
// [Asm]   r6 -- r22;
// [Asm]   r10 -- r51;
// [Asm]   r8 -- r64;
// [Asm]   r2 -- r44;
// [Asm]   r3 -- r57;
// [Asm]   r2 -- r40;
// [Asm]   r6 -- r27;
// [Asm]   r4 -- r80;
// [Asm]   r12 -- r20;
// [Asm]   r4 -- r15;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r32 -- r33;
// [Asm]   r10 -- r43;
// [Asm]   r1 -- r81;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r57;
// [Asm]   r7 -- r85;
// [Asm]   r6 -- r87;
// [Asm]   r25 -- r31;
// [Asm]   r10 -- r46;
// [Asm]   r7 -- r41;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r7 -- r57;
// [Asm]   r7 -- r16;
// [Asm]   r9 -- r48;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r12;
// [Asm]   r20 -- r21;
// [Asm]   r7 -- r14;
// [Asm]   r1 -- r54;
// [Asm]   r9 -- r81;
// [Asm]   r8 -- r60;
// [Asm]   r2 -- r39;
// [Asm]   r46 -- r49;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r87;
// [Asm]   r4 -- r38;
// [Asm]   r1 -- r12;
// [Asm]   r8 -- r84;
// [Asm]   r6 -- r47;
// [Asm]   r29 -- r69;
// [Asm]   r7 -- r40;
// [Asm]   r27 -- r29;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r18;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r1 -- r20;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r40;
// [Asm]   r10 -- r58;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r2 -- r74;
// [Asm]   r9 -- r18;
// [Asm]   r1 -- r46;
// [Asm]   r29 -- r74;
// [Asm]   r10 -- r49;
// [Asm]   r7 -- r34;
// [Asm]   r7 -- r55;
// [Asm]   r10 -- r37;
// [Asm]   r4 -- r43;
// [Asm]   r8 -- r37;
// [Asm]   r5 -- r53;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r47;
// [Asm]   r3 -- r80;
// [Asm]   r1 -- r27;
// [Asm]   r2 -- r79;
// [Asm]   r8 -- r39;
// [Asm]   r7 -- r61;
// [Asm]   r4 -- r50;
// [Asm]   r8 -- r22;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r50;
// [Asm]   r1 -- r49;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r10 -- r55;
// [Asm]   r3 -- r58;
// [Asm]   r7 -- r64;
// [Asm]   r2 -- r87;
// [Asm]   r6 -- r58;
// [Asm]   r45 -- r55;
// [Asm]   r1 -- r58;
// [Asm]   r4 -- r24;
// [Asm]   r6 -- r15;
// [Asm]   r9 -- r35;
// [Asm]   r33 -- r69;
// [Asm]   r9 -- r15;
// [Asm]   r66 -- r67;
// [Asm]   r6 -- r44;
// [Asm]   r5 -- r77;
// [Asm]   r12 -- r15;
// [Asm]   r25 -- r27;
// [Asm]   r4 -- r59;
// [Asm]   r7 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r6 -- r79;
// [Asm]   r6 -- r51;
// [Asm]   r1 -- r78;
// [Asm]   r5 -- r52;
// [Asm]   r5 -- r84;
// [Asm]   r9 -- r42;
// [Asm]   r5 -- r44;
// [Asm]   r45 -- r46;
// [Asm]   r3 -- r28;
// [Asm]   r8 -- r38;
// [Asm]   r7 -- r9;
// [Asm]   r8 -- r65;
// [Asm]   r10 -- r34;
// [Asm]   r6 -- r40;
// [Asm]   r4 -- r60;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r5 -- r64;
// [Asm]   r6 -- r34;
// [Asm]   r8 -- r28;
// [Asm]   r45 -- r53;
// [Asm]   r9 -- r80;
// [Asm]   r10 -- r50;
// [Asm]   r46 -- r54;
// [Asm]   r77 -- r78;
// [Asm]   r18 -- r19;
// [Asm]   r5 -- r46;
// [Asm]   r8 -- r13;
// [Asm]   r10 -- r84;
// [Asm]   r2 -- r56;
// [Asm]   r8 -- r85;
// [Asm]   r3 -- r64;
// [Asm]   r10 -- r52;
// [Asm]   r6 -- r42;
// [Asm]   r47 -- r49;
// [Asm]   r10 -- r39;
// [Asm]   r45 -- r51;
// [Asm]   r3 -- r81;
// [Asm]   r3 -- r75;
// [Asm]   r7 -- r58;
// [Asm]   r38 -- r69;
// [Asm]   r7 -- r31;
// [Asm]   r4 -- r77;
// [Asm]   r4 -- r17;
// [Asm]   r10 -- r80;
// [Asm]   r1 -- r36;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r24;
// [Asm]   r8 -- r46;
// [Asm]   r3 -- r63;
// [Asm]   r5 -- r40;
// [Asm]   r10 -- r14;
// [Asm]   r2 -- r31;
// [Asm]   r3 -- r52;
// [Asm]   r9 -- r53;
// [Asm]   r1 -- r26;
// [Asm]   r6 -- r75;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r4 -- r51;
// [Asm]   r3 -- r53;
// [Asm]   r2 -- r49;
// [Asm]   r7 -- r25;
// [Asm]   r3 -- r62;
// [Asm]   r4 -- r64;
// [Asm]   r29 -- r41;
// [Asm]   r6 -- r84;
// [Asm]   r3 -- r11;
// [Asm]   r9 -- r26;
// [Asm]   r27 -- r28;
// [Asm]   r2 -- r7;
// [Asm]   r32 -- r69;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r4 -- r57;
// [Asm]   r1 -- r50;
// [Asm]   r11 -- r19;
// [Asm]   r6 -- r86;
// [Asm]   r8 -- r34;
// [Asm]   r9 -- r56;
// [Asm]   r3 -- r8;
// [Asm]   r3 -- r85;
// [Asm]   r1 -- r9;
// [Asm]   r9 -- r75;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r48;
// [Asm]   r1 -- r64;
// [Asm]   r3 -- r74;
// [Asm]   r7 -- r79;
// [Asm]   r59 -- r60;
// [Asm]   r3 -- r39;
// [Asm]   r10 -- r33;
// [Asm]   r69 -- r71;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r59;
// [Asm]   r5 -- r58;
// [Asm]   r5 -- r54;
// [Asm]   r8 -- r23;
// [Asm]   r5 -- r60;
// [Asm]   r10 -- r22;
// [Asm]   r8 -- r59;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r51;
// [Asm]   r3 -- r17;
// [Asm]   r11 -- r15;
// [Asm]   r6 -- r50;
// [Asm]   r1 -- r41;
// [Asm]   r1 -- r38;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r8 -- r32;
// [Asm]   r1 -- r5;
// [Asm]   r5 -- r36;
// [Asm]   r2 -- r86;
// [Asm]   r4 -- r13;
// [Asm]   r29 -- r61;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r76;
// [Asm]   r4 -- r62;
// [Asm]   r6 -- r41;
// [Asm]   r1 -- r75;
// [Asm]   r9 -- r40;
// [Asm]   r2 -- r84;
// [Asm]   r4 -- r81;
// [Asm]   r7 -- r20;
// [Asm]   r13 -- r16;
// [Asm]   r9 -- r61;
// [Asm]   r8 -- r76;
// [Asm]   r6 -- r53;
// [Asm]   r11 -- r23;
// [Asm]   r8 -- r25;
// [Asm]   r5 -- r38;
// [Asm]   r6 -- r59;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r29 -- r82;
// [Asm]   r8 -- r81;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r4 -- r55;
// [Asm]   r8 -- r62;
// [Asm]   r7 -- r19;
// [Asm]   r1 -- r79;
// [Asm]   r13 -- r14;
// [Asm]   r12 -- r22;
// [Asm]   r3 -- r29;
// [Asm]   r10 -- r57;
// [Asm]   r5 -- r81;
// [Asm]   r4 -- r36;
// [Asm]   r6 -- r39;
// [Asm]   r2 -- r75;
// [Asm]   r5 -- r25;
// [Asm]   r10 -- r36;
// [Asm]   r9 -- r58;
// [Asm]   r6 -- r74;
// [Asm]   r31 -- r33;
// [Asm]   r4 -- r74;
// [Asm]   r4 -- r10;
// [Asm]   r2 -- r27;
// [Asm]   r1 -- r42;
// [Asm]   r6 -- r52;
// [Asm]   r10 -- r86;
// [Asm]   r86 -- r87;
// [Asm]   r25 -- r28;
// [Asm]   r2 -- r62;
// [Asm]   r6 -- r36;
// [Asm]   r10 -- r60;
// [Asm]   r1 -- r37;
// [Asm]   r4 -- r58;
// [Asm]   r1 -- r19;
// [Asm]   r10 -- r13;
// [Asm]   r5 -- r42;
// [Asm]   r6 -- r63;
// [Asm]   r2 -- r16;
// [Asm]   r10 -- r47;
// [Asm]   r1 -- r62;
// [Asm]   r8 -- r79;
// [Asm]   r2 -- r59;
// [Asm]   r2 -- r54;
// [Asm]   r4 -- r33;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r30;
// [Asm]   r9 -- r28;
// [Asm]   r8 -- r77;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r10;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r10 -- r75;
// [Asm]   r8 -- r63;
// [Asm]   r4 -- r84;
// [Asm]   r1 -- r6;
// [Asm]   r10 -- r35;
// [Asm]   r7 -- r54;
// [Asm]   r2 -- r23;
// [Asm]   r9 -- r47;
// [Asm]   r8 -- r82;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r52;
// [Asm]   r6 -- r11;
// [Asm]   r29 -- r32;
// [Asm]   r4 -- r5;
// [Asm]   r9 -- r57;
// [Asm]   r8 -- r56;
// [Asm]   r6 -- r49;
// [Asm]   r5 -- r48;
// [Asm]   r1 -- r53;
// [Asm]   r8 -- r19;
// [Asm]   r5 -- r79;
// [Asm]   r8 -- r43;
// [Asm]   r3 -- r87;
// [Asm]   r25 -- r30;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r47;
// [Asm]   r29 -- r59;
// [Asm]   r10 -- r41;
// [Asm]   r2 -- r55;
// [Asm]   r6 -- r12;
// [Asm]   r7 -- r81;
// [Asm]   r6 -- r24;
// [Asm]   r9 -- r51;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r6 -- r37;
// [Asm]   r10 -- r28;
// [Asm]   r9 -- r34;
// [Asm]   r10 -- r63;
// [Asm]   r7 -- r60;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r24;
// [Asm]   r9 -- r33;
// [Asm]   r0 -- r8;
// [Asm]   r6 -- r28;
// [Asm]   r1 -- r59;
// [Asm]   r4 -- r85;
// [Asm]   r1 -- r74;
// [Asm]   r6 -- r67;
// [Asm]   r7 -- r11;
// [Asm]   r7 -- r47;
// [Asm]   r9 -- r37;
// [Asm]   r7 -- r39;
// [Asm]   r4 -- r47;
// [Asm]   r7 -- r43;
// [Asm]   r8 -- r58;
// [Asm]   r9 -- r32;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r14;
// [Asm]   r31 -- r32;
// [Asm]   r3 -- r54;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r30;
// [Asm]   r49 -- r50;
// [Asm]   r4 -- r52;
// [Asm]   r9 -- r50;
// [Asm]   r11 -- r21;
// [Asm]   r2 -- r64;
// [Asm]   r4 -- r19;
// [Asm]   r52 -- r53;
// [Asm]   r68 -- r69;
// [Asm]   r4 -- r53;
// [Asm]   r2 -- r32;
// [Asm]   r4 -- r75;
// [Asm]   r6 -- r35;
// [Asm]   r9 -- r86;
// [Asm]   r1 -- r86;
// [Asm]   r1 -- r57;
// [Asm]   r9 -- r79;
// [Asm]   r11 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r59;
// [Asm]   r2 -- r43;
// [Asm]   r45 -- r54;
// [Asm]   r5 -- r18;
// [Asm]   r5 -- r47;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r84 -- r85;
// [Asm]   r9 -- r49;
// [Asm]   r7 -- r27;
// [Asm]   r6 -- r85;
// [Asm]   r2 -- r34;
// [Asm]   r8 -- r45;
// [Asm]   r5 -- r31;
// [Asm]   r5 -- r62;
// [Asm]   r3 -- r78;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r57;
// [Asm]   r6 -- r80;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r45;
// [Asm]   r0 -- r9;
// [Asm]   r9 -- r23;
// [Asm]   r4 -- r65;
// [Asm]   r5 -- r78;
// [Asm]   r7 -- r38;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r46 -- r52;
// [Asm]   r8 -- r48;
// [Asm]   r6 -- r83;
// [Asm]   r45 -- r52;
// [Asm]   r46 -- r55;
// [Asm]   r10 -- r42;
// [Asm]   r0 -- r10;
// [Asm]   r6 -- r64;
// [Asm]   r7 -- r80;
// [Asm]   r5 -- r66;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r65;
// [Asm]   r8 -- r86;
// [Asm]   r8 -- r30;
// [Asm]   r10 -- r59;
// [Asm]   r6 -- r76;
// [Asm]   r7 -- r76;
// [Asm]   r3 -- r19;
// [Asm]   r7 -- r29;
// [Asm]   r11 -- r20;
// [Asm]   r45 -- r57;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r38;
// [Asm]   r1 -- r47;
// [Asm]   r47 -- r48;
// [Asm]   r30 -- r32;
// [Asm]   r11 -- r16;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r2 -- r52;
// [Asm]   r11 -- r12;
// [Asm]   r1 -- r13;
// [Asm]   r9 -- r64;
// [Asm]   r10 -- r48;
// [Asm]   r7 -- r74;
// [Asm]   r11 -- r22;
// [Asm]   r7 -- r48;
// [Asm]   r7 -- r49;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r47;
// [Asm]   r6 -- r20;
// [Asm]   r9 -- r52;
// [Asm]   r45 -- r50;
// [Asm]   r3 -- r50;
// [Asm]   r7 -- r17;
// [Asm]   r8 -- r41;
// [Asm]   r9 -- r85;
// [Asm]   r8 -- r53;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r4 -- r32;
// [Asm]   r1 -- r29;
// [Asm]   r5 -- r45;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r2 -- r77;
// [Asm]   r10 -- r85;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r25;
// [Asm]   r5 -- r56;
// [Asm]   r5 -- r61;
// [Asm]   r1 -- r61;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r82;
// [Asm]   r8 -- r83;
// [Asm]   r8 -- r26;
// [Asm]   r10 -- r54;
// [Asm]   r7 -- r87;
// [Asm]   r10 -- r65;
// [Asm]   r2 -- r35;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r59 -- r62;
// [Asm]   r9 -- r13;
// [Asm]   r8 -- r50;
// [Asm]   r1 -- r76;
// [Asm]   r2 -- r20;
// [Asm]   r31 -- r59;
// [Asm]   r8 -- r57;
// [Asm]   r5 -- r41;
// [Asm]   r7 -- r21;
// [Asm]   r9 -- r27;
// [Asm]   r3 -- r43;
// [Asm]   r9 -- r77;
// [Asm]   r2 -- r85;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r56;
// [Asm]   r3 -- r60;
// [Asm]   r3 -- r79;
// [Asm]   r1 -- r63;
// [Asm]   r6 -- r29;
// [Asm]   r7 -- r53;
// [Asm]   r5 -- r49;
// [Asm]   r4 -- r27;
// [Asm]   r10 -- r77;
// [Asm]   r4 -- r42;
// [Asm]   r29 -- r36;
// [Asm]   r12 -- r19;
// [Asm]   r27 -- r30;
// [Asm]   r46 -- r48;
// [Asm]   r4 -- r21;
// [Asm]   r29 -- r38;
// [Asm]   r2 -- r76;
// [Asm]   r6 -- r13;
// [Asm]   r3 -- r76;
// [Asm]   r2 -- r33;
// [Asm]   r8 -- r17;
// [Asm]   r54 -- r55;
// [Asm]   r3 -- r4;
// [Asm]   r5 -- r75;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r10 -- r74;
// [Asm]   r2 -- r8;
// [Asm]   r40 -- r69;
// [Asm]   r6 -- r31;
// [Asm]   r6 -- r78;
// [Asm]   r8 -- r44;
// [Asm]   r8 -- r80;
// [Asm]   r10 -- r30;
// [Asm]   r6 -- r45;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r1 -- r44;
// [Asm]   r3 -- r61;
// [Asm]   r31 -- r34;
// [Asm]   r7 -- r8;
// [Asm]   r8 -- r87;
// [Asm]   r6 -- r61;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r34;
// [Asm]   r2 -- r53;
// [Asm]   r2 -- r61;
// [Asm]   r29 -- r35;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r10 -- r87;
// [Asm]   r30 -- r69;
// [Asm]   r11 -- r17;
// [Asm]   r5 -- r20;
// [Asm]   r4 -- r37;
// [Asm]   r7 -- r45;
// [Asm]   r45 -- r49;
// [Asm]   r2 -- r18;
// [Asm]   r10 -- r78;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r10 -- r76;
// [Asm]   r8 -- r55;
// [Asm]   r7 -- r86;
// [Asm]   r7 -- r30;
// [Asm]   r8 -- r33;
// [Asm]   r6 -- r26;
// [Asm]   r5 -- r16;
// [Asm]   r8 -- r49;
// [Asm]   r3 -- r77;
// [Asm]   r33 -- r34;
// [Asm]   r9 -- r22;
// [Asm]   r4 -- r46;
// [Asm]   r4 -- r45;
// [Asm]   r5 -- r37;
// [Asm]   r8 -- r74;
// [Asm]   r29 -- r37;
// [Asm]   r8 -- r40;
// [Asm]   r9 -- r43;
// [Asm]   r10 -- r44;
// [Asm]   r29 -- r39;
// [Asm]   r3 -- r41;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r9 -- r55;
// [Asm]   r29 -- r34;
// [Asm]   r3 -- r59;
// [Asm]   r5 -- r27;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r4 -- r61;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v62-> 1:v25-> 2:v14-> 3:v13-> 4:v7-> 5:v12-> 6:s11-> 7:v9-> 8:zero-> 9:v4-> 10:v2-> 11:v64-> 12:v65-> 13:v66-> 14:v97-> 15:v67-> 16:v95-> 17:v68-> 18:v69-> 19:v92-> 20:v70-> 21:v90-> 22:v71-> 23:v72-> 24:v73-> 25:v6-> 26:v87-> 27:v10-> 28:v83-> 29:a0-> 30:a1-> 31:a2-> 32:a3-> 33:a4-> 34:a5-> 59:v11-> 61:v3-> 62:v105-> 35:a6-> 36:a7-> 37:t0-> 38:t1-> 39:t2-> 40:t3-> 69:v31-> 41:t4-> 60:v109-> 74:v130-> 42:v77-> 43:v78-> 44:v79-> 45:v45-> 46:v46-> 47:v47-> 48:v119-> 49:v48-> 50:v117-> 51:v49-> 52:v50-> 53:v114-> 54:v51-> 55:v112-> 56:v52-> 57:v53-> 58:v54-> 63:v58-> 64:v59-> 65:v60-> 75:v36-> 76:v37-> 77:v39-> 78:v5-> 79:v41-> 80:v42-> 81:v43-> 86:v26-> 87:v139-> 84:v15-> 85:v142-> 82:v149-> 83:v17-> 66:v28-> 68:v8-> 67:v29-> 70:v32-> 71:v33-> 72:v34-> 73:v35"
// [Asm]   comment = "v62<-a0;v46<-a1;v11<-a3;v37<-a0;v4<-s6;v87<-a0;v26<-a0;v79<-a0;v114<-a3;v52<-a2;v2<-s7;v12<-s4;v51<-a2;v73<-a0;v78<-a0;v42<-a0;v68<-a3;v50<-a2;v60<-a0;v41<-a0;v70<-a2;v3<-a2;v72<-a1;v13<-s2;v149<-a1;v29<-a2;v39<-a0;v10<-a2;v36<-a0;v105<-a0;v64<-a0;v54<-a0;v17<-a0;v97<-a3;v49<-a3;v5<-a1;v112<-a3;v95<-a4;v90<-a3;v109<-a0;v35<-a0;v34<-a0;v139<-a1;v142<-a1;v47<-a2;v66<-a2;v77<-a0;v7<-s3;v9<-s5;v59<-a0;v28<-a0;v67<-a3;v48<-a3;v53<-a1;v130<-a1;v8<-a1;v32<-a0;v65<-a1;v119<-a3;v25<-s0;v83<-a0;v33<-a0;v31<-s0;v71<-a2;v15<-a0;v117<-a4;v45<-a0;v6<-a3;v58<-a0;v14<-s1;v69<-a2;v92<-a3;v43<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.4496"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v62, 0(v14) ->   lw a0, 0(s1)
// [Asm] subst   sw v62, 0(v4) ->   sw a0, 0(s6)
// [Asm] subst   lw v64, 0(v12) ->   lw a0, 0(s4)
// [Asm] subst   lw v65, 0(v14) ->   lw a1, 0(s1)
// [Asm] subst   lw v66, 0(v2) ->   lw a2, 0(s7)
// [Asm] subst   li v97, 2 ->   li a3, 2
// [Asm] subst   div v67, v66, v97 ->   div a3, a2, a3
// [Asm] subst   li v95, 2 ->   li a4, 2
// [Asm] subst   mul v68, v67, v95 ->   mul a3, a3, a4
// [Asm] subst   sub v69, v66, v68 ->   sub a2, a2, a3
// [Asm] subst   li v92, 2 ->   li a3, 2
// [Asm] subst   mul v70, v69, v92 ->   mul a2, a2, a3
// [Asm] subst   li v90, 1 ->   li a3, 1
// [Asm] subst   sub v71, v90, v70 ->   sub a2, a3, a2
// [Asm] subst   mul v72, v65, v71 ->   mul a1, a1, a2
// [Asm] subst   add v73, v64, v72 ->   add a0, a0, a1
// [Asm] subst   sw v73, 0(v12) ->   sw a0, 0(s4)
// [Asm] subst   addi v6, s11, -4 ->   addi a3, s11, -4
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a3, -8
// [Asm] subst   li v87, 1 ->   li a0, 1
// [Asm] subst   sw v87, 0(v6) ->   sw a0, 0(a3)
// [Asm] subst   addi v10, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi s11, v10, -8 ->   andi s11, a2, -8
// [Asm] subst   sw zero, 0(v10) ->   sw zero, 0(a2)
// [Asm] subst   li v83, 9 ->   li a0, 9
// [Asm] subst   mv a1, v25 ->   mv a1, s0
// [Asm] subst   mv a4, v7 ->   mv a4, s3
// [Asm] subst   mv a5, v13 ->   mv a5, s2
// [Asm] subst   call go_loop.4502 ->   call go_loop.4502
// [Asm] subst   lw v78, 0(v2) ->   lw a0, 0(s7)
// [Asm] subst   addi v79, v78, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v79, 0(v2) ->   sw a0, 0(s7)
// [Asm] subst   j .main.4496_2 ->   j .main.4496_2
// [Asm] subst   lw v45, 0(v12) ->   lw a0, 0(s4)
// [Asm] subst   lw v46, 0(v14) ->   lw a1, 0(s1)
// [Asm] subst   lw v47, 0(v2) ->   lw a2, 0(s7)
// [Asm] subst   li v119, 2 ->   li a3, 2
// [Asm] subst   div v48, v47, v119 ->   div a3, a2, a3
// [Asm] subst   li v117, 2 ->   li a4, 2
// [Asm] subst   mul v49, v48, v117 ->   mul a3, a3, a4
// [Asm] subst   sub v50, v47, v49 ->   sub a2, a2, a3
// [Asm] subst   li v114, 2 ->   li a3, 2
// [Asm] subst   mul v51, v50, v114 ->   mul a2, a2, a3
// [Asm] subst   li v112, 1 ->   li a3, 1
// [Asm] subst   sub v52, v112, v51 ->   sub a2, a3, a2
// [Asm] subst   mul v53, v46, v52 ->   mul a1, a1, a2
// [Asm] subst   add v54, v45, v53 ->   add a0, a0, a1
// [Asm] subst   sw v54, 0(v12) ->   sw a0, 0(s4)
// [Asm] subst   addi v11, s11, -4 ->   addi a3, s11, -4
// [Asm] subst   andi s11, v11, -8 ->   andi s11, a3, -8
// [Asm] subst   li v109, 1 ->   li a0, 1
// [Asm] subst   sw v109, 0(v11) ->   sw a0, 0(a3)
// [Asm] subst   addi v3, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a2, -8
// [Asm] subst   sw zero, 0(v3) ->   sw zero, 0(a2)
// [Asm] subst   li v105, 9 ->   li a0, 9
// [Asm] subst   mv a1, v25 ->   mv a1, s0
// [Asm] subst   mv a4, v7 ->   mv a4, s3
// [Asm] subst   mv a5, v13 ->   mv a5, s2
// [Asm] subst   call go_loop.4504 ->   call go_loop.4504
// [Asm] subst   lw v59, 0(v2) ->   lw a0, 0(s7)
// [Asm] subst   addi v60, v59, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v60, 0(v2) ->   sw a0, 0(s7)
// [Asm] subst   j .main.4496_2 ->   j .main.4496_2
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v28, 0(v4) ->   lw a0, 0(s6)
// [Asm] subst   lw v29, 0(v12) ->   lw a2, 0(s4)
// [Asm] subst   addi v8, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v8, -8 ->   andi s11, a1, -8
// [Asm] subst   sw v28, 0(v8) ->   sw a0, 0(a1)
// [Asm] subst   sw v29, 4(v8) ->   sw a2, 4(a1)
// [Asm] subst   lw v31, 0(v8) ->   lw s0, 0(a1)
// [Asm] subst   lw v32, 4(v8) ->   lw a0, 4(a1)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v31 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v130, 9 ->   li a1, 9
// [Asm] subst   mv a2, v7 ->   mv a2, s3
// [Asm] subst   mv a3, v9 ->   mv a3, s5
// [Asm] subst   call copy_perm.4498 ->   call copy_perm.4498
// [Asm] subst   mv a0, v25 ->   mv a0, s0
// [Asm] subst   mv a1, v13 ->   mv a1, s2
// [Asm] subst   call init_count.4499 ->   call init_count.4499
// [Asm] subst   sw zero, 0(v14) ->   sw zero, 0(s1)
// [Asm] subst   lw v39, 0(v9) ->   lw a0, 0(s5)
// [Asm] subst   addi v5, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a1, -8
// [Asm] subst   sw v39, 0(v5) ->   sw a0, 0(a1)
// [Asm] subst   mv a0, v5 ->   mv a0, a1
// [Asm] subst   mv a1, v9 ->   mv a1, s5
// [Asm] subst   mv a2, v14 ->   mv a2, s1
// [Asm] subst   call do_flip.4500 ->   call do_flip.4500
// [Asm] subst   lw v42, 0(v4) ->   lw a0, 0(s6)
// [Asm] subst   lw v43, 0(v14) ->   lw a1, 0(s1)
// [Asm] subst   blt v43, v42, .main.4496_6 ->   blt a1, a0, .main.4496_6
// [Asm] subst   addi v7, s11, -36 ->   addi s3, s11, -36
// [Asm] subst   andi s11, v7, -8 ->   andi s11, s3, -8
// [Asm] subst   sw zero, 0(v7) ->   sw zero, 0(s3)
// [Asm] subst   sw zero, 4(v7) ->   sw zero, 4(s3)
// [Asm] subst   sw zero, 8(v7) ->   sw zero, 8(s3)
// [Asm] subst   sw zero, 12(v7) ->   sw zero, 12(s3)
// [Asm] subst   sw zero, 16(v7) ->   sw zero, 16(s3)
// [Asm] subst   sw zero, 20(v7) ->   sw zero, 20(s3)
// [Asm] subst   sw zero, 24(v7) ->   sw zero, 24(s3)
// [Asm] subst   sw zero, 28(v7) ->   sw zero, 28(s3)
// [Asm] subst   sw zero, 32(v7) ->   sw zero, 32(s3)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v149, 9 ->   li a1, 9
// [Asm] subst   mv a2, v7 ->   mv a2, s3
// [Asm] subst   call init_arr.4497 ->   call init_arr.4497
// [Asm] subst   addi v9, s11, -36 ->   addi s5, s11, -36
// [Asm] subst   andi s11, v9, -8 ->   andi s11, s5, -8
// [Asm] subst   sw zero, 0(v9) ->   sw zero, 0(s5)
// [Asm] subst   sw zero, 4(v9) ->   sw zero, 4(s5)
// [Asm] subst   sw zero, 8(v9) ->   sw zero, 8(s5)
// [Asm] subst   sw zero, 12(v9) ->   sw zero, 12(s5)
// [Asm] subst   sw zero, 16(v9) ->   sw zero, 16(s5)
// [Asm] subst   sw zero, 20(v9) ->   sw zero, 20(s5)
// [Asm] subst   sw zero, 24(v9) ->   sw zero, 24(s5)
// [Asm] subst   sw zero, 28(v9) ->   sw zero, 28(s5)
// [Asm] subst   sw zero, 32(v9) ->   sw zero, 32(s5)
// [Asm] subst   addi v13, s11, -36 ->   addi s2, s11, -36
// [Asm] subst   andi s11, v13, -8 ->   andi s11, s2, -8
// [Asm] subst   sw zero, 0(v13) ->   sw zero, 0(s2)
// [Asm] subst   sw zero, 4(v13) ->   sw zero, 4(s2)
// [Asm] subst   sw zero, 8(v13) ->   sw zero, 8(s2)
// [Asm] subst   sw zero, 12(v13) ->   sw zero, 12(s2)
// [Asm] subst   sw zero, 16(v13) ->   sw zero, 16(s2)
// [Asm] subst   sw zero, 20(v13) ->   sw zero, 20(s2)
// [Asm] subst   sw zero, 24(v13) ->   sw zero, 24(s2)
// [Asm] subst   sw zero, 28(v13) ->   sw zero, 28(s2)
// [Asm] subst   sw zero, 32(v13) ->   sw zero, 32(s2)
// [Asm] subst   addi v14, s11, -4 ->   addi s1, s11, -4
// [Asm] subst   andi s11, v14, -8 ->   andi s11, s1, -8
// [Asm] subst   sw zero, 0(v14) ->   sw zero, 0(s1)
// [Asm] subst   addi v4, s11, -4 ->   addi s6, s11, -4
// [Asm] subst   andi s11, v4, -8 ->   andi s11, s6, -8
// [Asm] subst   sw zero, 0(v4) ->   sw zero, 0(s6)
// [Asm] subst   addi v12, s11, -4 ->   addi s4, s11, -4
// [Asm] subst   andi s11, v12, -8 ->   andi s11, s4, -8
// [Asm] subst   sw zero, 0(v12) ->   sw zero, 0(s4)
// [Asm] subst   addi v2, s11, -4 ->   addi s7, s11, -4
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s7, -8
// [Asm] subst   sw zero, 0(v2) ->   sw zero, 0(s7)
// [Asm] subst   addi v15, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi s11, v15, -8 ->   andi s11, a0, -8
// [Asm] subst   li v142, 9 ->   li a1, 9
// [Asm] subst   sw v142, 0(v15) ->   sw a1, 0(a0)
// [Asm] subst   mv v25, v15 ->   mv s0, a0
// [Asm] subst   lw v26, 0(v25) ->   lw a0, 0(s0)
// [Asm] subst   li v139, 1 ->   li a1, 1
// [Asm] subst   blt v26, v139, .main.4496_4 ->   blt a0, a1, .main.4496_4
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v10, FnParam(fref=f0, fpref=$f.1) -> v3, BlockParam(bref=b2, bpref=$b.0) -> v5, FnParam(fref=f0, fpref=$f.2) -> v4, BlockParam(bref=b5, bpref=$b.0) -> v8, Self(fref=f0) -> v0, Insn(iref=%2) -> v9, Insn(iref=%1) -> v7, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v6
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b2, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v5, v12, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v4, v5, zero, v13, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v4, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v10]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [zero]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init_arr.4497"];
// [Asm]   r0 [label="v12 ← a0", color=green];
// [Asm]   r5 [label="v13 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r2 [label="v5 ← a2", color=green];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r6 [label="v10 ← a0", color=green];
// [Asm]   r4 [label="v3 ← a3", color=green];
// [Asm]   r1 [label="v4 ← a1", color=green];
// [Asm]   r11 [label="v6 ← a0", color=green];
// [Asm]   r7 [label="v8 ← a0", color=green];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r12 [label="a0", color=blue];
// [Asm]   r8 [label="v2 ← a0", color=green];
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r8 -- r10;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r9;
// [Asm]   r3 -- r8;
// [Asm]   comment = "0:v12-> 1:v4-> 2:v5-> 3:zero-> 4:v3-> 5:v13-> 11:v6-> 6:v10-> 8:v2-> 9:a2-> 10:a1-> 7:v8-> 12:a0"
// [Asm]   comment = "v12<-a0;v13<-a0;v5<-a2;v10<-a0;v3<-a3;v4<-a1;v6<-a0;v8<-a0;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init_arr.4497"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v12, v5, 2 ->   slliw a0, a2, 2
// [Asm] subst   add v13, v4, v12 ->   add a0, a1, a0
// [Asm] subst   sw v5, 0(v13) ->   sw a2, 0(a0)
// [Asm] subst   addi v10, v5, 1 ->   addi a0, a2, 1
// [Asm] subst   mv v5, v10 ->   mv a2, a0
// [Asm] subst   j .init_arr.4497_2 ->   j .init_arr.4497_2
// [Asm] subst   mv v8, zero ->   mv a0, zero
// [Asm] subst   mv v3, a1 ->   mv a3, a1
// [Asm] subst   mv v4, a2 ->   mv a1, a2
// [Asm] subst   mv v5, v2 ->   mv a2, a0
// [Asm] subst   addi v6, v3, -1 ->   addi a0, a3, -1
// [Asm] subst   blt v6, v5, .init_arr.4497_4 ->   blt a0, a2, .init_arr.4497_4
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v11, BlockParam(bref=b2, bpref=$b.0) -> v6, FnParam(fref=f1, fpref=$f.1) -> v3, FnParam(fref=f1, fpref=$f.0) -> v2, FnParam(fref=f1, fpref=$f.2) -> v4, BlockParam(bref=b5, bpref=$b.0) -> v9, FnParam(fref=f1, fpref=$f.3) -> v5, Insn(iref=%2) -> v10, Insn(iref=%1) -> v8, Self(fref=f1) -> v0, Insn(iref=%0) -> v7, Insn(iref=%4) -> v12
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b2, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v4, v6, v17, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, v10, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v5, v10, zero, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v5, v12, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: [v12]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of copy_perm.4498"];
// [Asm]   r0 [label="v9 ← a0", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="v6 ← a0", color=green];
// [Asm]   r6 [label="v3 ← a1", color=green];
// [Asm]   r13 [label="v17 ← a4", color=green];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r11 [label="v7 ← a4", color=green];
// [Asm]   r7 [label="v4 ← a2", color=green];
// [Asm]   r10 [label="a0", color=blue];
// [Asm]   r14 [label="v10 ← a4", color=green];
// [Asm]   r8 [label="v5 ← a3", color=green];
// [Asm]   r5 [label="zero", color=blue];
// [Asm]   r15 [label="v14 ← a5", color=green];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r16 [label="v15 ← a5", color=green];
// [Asm]   r17 [label="v12 ← a0", color=green];
// [Asm]   r12 [label="v16 ← a4", color=green];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r6 -- r11;
// [Asm]   r6 -- r15;
// [Asm]   r14 -- r16;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r8;
// [Asm]   r9 -- r15;
// [Asm]   r1 -- r4;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r6 -- r16;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r8 -- r12;
// [Asm]   r6 -- r8;
// [Asm]   r9 -- r14;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r6;
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r8 -- r16;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r9;
// [Asm]   r8 -- r15;
// [Asm]   r7 -- r15;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r11;
// [Asm]   r1 -- r2;
// [Asm]   r6 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r7;
// [Asm]   r9 -- r16;
// [Asm]   r5 -- r14;
// [Asm]   r8 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r7 -- r16;
// [Asm]   r1 -- r5;
// [Asm]   r8 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r7 -- r14;
// [Asm]   r14 -- r15;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v9-> 1:v2-> 2:a2-> 6:v3-> 4:a3-> 7:v4-> 5:zero-> 8:v5-> 9:v6-> 11:v7-> 12:v16-> 13:v17-> 14:v10-> 15:v14-> 16:v15-> 17:v12-> 3:a1-> 10:a0"
// [Asm]   comment = "v9<-a0;v6<-a0;v3<-a1;v17<-a4;v2<-a0;v7<-a4;v4<-a2;v10<-a4;v5<-a3;v14<-a5;v15<-a5;v12<-a0;v16<-a4;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of copy_perm.4498"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v9, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v7, v3, -1 ->   addi a4, a1, -1
// [Asm] subst   blt v7, v6, .copy_perm.4498_4 ->   blt a4, a0, .copy_perm.4498_4
// [Asm] subst   slliw v16, v6, 2 ->   slliw a4, a0, 2
// [Asm] subst   add v17, v4, v16 ->   add a4, a2, a4
// [Asm] subst   lw v10, 0(v17) ->   lw a4, 0(a4)
// [Asm] subst   slliw v14, v6, 2 ->   slliw a5, a0, 2
// [Asm] subst   add v15, v5, v14 ->   add a5, a3, a5
// [Asm] subst   sw v10, 0(v15) ->   sw a4, 0(a5)
// [Asm] subst   addi v12, v6, 1 ->   addi a0, a0, 1
// [Asm] subst   j .copy_perm.4498_2 ->   j .copy_perm.4498_2
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v9, Insn(iref=%3) -> v8, FnParam(fref=f5, fpref=$f.0) -> v2, Self(fref=f5) -> v0, Insn(iref=%7) -> v11, FnParam(fref=f5, fpref=$f.2) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v12, Insn(iref=%2) -> v7, Insn(iref=%1) -> v6, Insn(iref=%5) -> v10, Insn(iref=%0) -> v5, FnParam(fref=f5, fpref=$f.1) -> v3
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f5, fpref=$f.0), Insn(iref=%1)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v8, v2, v4, v16, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v8, v2, v4, v17, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v8, v2, v4, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v8, v4, v14, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v8, v4, v15, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of move_perm1_forward.4503"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="t1", color=blue];
// [Asm]   r23 [label="t4", color=blue];
// [Asm]   r3 [label="v2 ← a3", color=green];
// [Asm]   r9 [label="v9 ← a4", color=green];
// [Asm]   r26 [label="v6 ← a0", color=green];
// [Asm]   r6 [label="v3 ← a1", color=green];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="v4 ← a2", color=green];
// [Asm]   r1 [label="v12 ← a0", color=green];
// [Asm]   r11 [label="v15 ← a3", color=green];
// [Asm]   r7 [label="v16 ← a4", color=green];
// [Asm]   r10 [label="v14 ← a3", color=green];
// [Asm]   r22 [label="t3", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="v17 ← a4", color=green];
// [Asm]   r5 [label="zero", color=blue];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r24 [label="v11 ← a0", color=green];
// [Asm]   r25 [label="v5 ← a0", color=green];
// [Asm]   r2 [label="v8 ← a0", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="t0", color=blue];
// [Asm]   r21 [label="t2", color=blue];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r0 -- r15;
// [Asm]   r0 -- r13;
// [Asm]   r5 -- r21;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r5;
// [Asm]   r5 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r20;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r0 -- r17;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r18;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r5 -- r19;
// [Asm]   r0 -- r21;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r3 -- r26;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r0 -- r19;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r6;
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r25;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r9;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r20;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r15;
// [Asm]   r0 -- r18;
// [Asm]   r5 -- r12;
// [Asm]   r6 -- r25;
// [Asm]   comment = "0:a0-> 4:v4-> 5:zero-> 6:v3-> 2:v8-> 3:v2-> 7:v16-> 8:v17-> 9:v9-> 10:v14-> 11:v15-> 12:a1-> 13:a2-> 25:v5-> 26:v6-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:t0-> 20:t1-> 21:t2-> 22:t3-> 23:t4-> 24:v11-> 1:v12"
// [Asm]   comment = "v2<-a3;v9<-a4;v6<-a0;v3<-a1;v4<-a2;v12<-a0;v15<-a3;v16<-a4;v14<-a3;v17<-a4;v11<-a0;v5<-a0;v8<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of move_perm1_forward.4503"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v12, zero ->   mv a0, zero
// [Asm] subst   j .move_perm1_forward.4503_3 ->   j .move_perm1_forward.4503_3
// [Asm] subst   addi v8, v2, 1 ->   addi a0, a3, 1
// [Asm] subst   slliw v16, v8, 2 ->   slliw a4, a0, 2
// [Asm] subst   add v17, v4, v16 ->   add a4, a2, a4
// [Asm] subst   lw v9, 0(v17) ->   lw a4, 0(a4)
// [Asm] subst   slliw v14, v2, 2 ->   slliw a3, a3, 2
// [Asm] subst   add v15, v4, v14 ->   add a3, a2, a3
// [Asm] subst   sw v9, 0(v15) ->   sw a4, 0(a3)
// [Asm] subst   call move_perm1_forward.4503 ->   call move_perm1_forward.4503
// [Asm] subst   mv v12, zero ->   mv a0, zero
// [Asm] subst   mv v2, a0 ->   mv a3, a0
// [Asm] subst   lw v5, 0(v3) ->   lw a0, 0(a1)
// [Asm] subst   addi v6, v5, -1 ->   addi a0, a0, -1
// [Asm] subst   blt v6, v2, .move_perm1_forward.4503_2 ->   blt a0, a3, .move_perm1_forward.4503_2
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v7, Insn(iref=%7) -> v10, BlockParam(bref=b3, bpref=$b.0) -> v13, Insn(iref=%2) -> v6, Insn(iref=%9) -> v12, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v5, Insn(iref=%8) -> v11, Self(fref=f2) -> v0, Insn(iref=%6) -> v9, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%5) -> v8, Insn(iref=%0) -> v4
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=1)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v2, v4, v21, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v7, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v6, v17, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v2, v6, v18, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v2, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init_count.4499"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="t1", color=blue];
// [Asm]   r23 [label="t4", color=blue];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v17 ← a3", color=green];
// [Asm]   r6 [label="v21 ← a3", color=green];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r11 [label="v9 ← a2", color=green];
// [Asm]   r7 [label="v6 ← a2", color=green];
// [Asm]   r10 [label="v18 ← a3", color=green];
// [Asm]   r22 [label="t3", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="v7 ← a3", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r24 [label="v12 ← a0", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r25 [label="v13 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="t0", color=blue];
// [Asm]   r21 [label="t2", color=blue];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="v10 ← a2", color=green];
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r13;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r14;
// [Asm]   r3 -- r9;
// [Asm]   r0 -- r21;
// [Asm]   r3 -- r11;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r3 -- r24;
// [Asm]   r7 -- r9;
// [Asm]   r3 -- r18;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r10;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r3 -- r14;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r8;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r20;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r0 -- r18;
// [Asm]   comment = "0:a0-> 2:a1-> 3:zero-> 1:v2-> 4:v3-> 5:v4-> 6:v21-> 7:v6-> 8:v7-> 9:v17-> 10:v18-> 11:v9-> 12:v10-> 13:a2-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:t0-> 20:t1-> 21:t2-> 22:t3-> 23:t4-> 24:v12-> 25:v13"
// [Asm]   comment = "v17<-a3;v21<-a3;v3<-a1;v2<-a0;v9<-a2;v6<-a2;v18<-a3;v7<-a3;v4<-a2;v12<-a0;v13<-a0;v10<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init_count.4499"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v4, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   li v21, 1 ->   li a3, 1
// [Asm] subst   beq v4, v21, .init_count.4499_1 ->   beq a2, a3, .init_count.4499_1
// [Asm] subst   lw v6, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   addi v7, v6, -1 ->   addi a3, a2, -1
// [Asm] subst   slliw v17, v7, 2 ->   slliw a3, a3, 2
// [Asm] subst   add v18, v3, v17 ->   add a3, a1, a3
// [Asm] subst   sw v6, 0(v18) ->   sw a2, 0(a3)
// [Asm] subst   lw v9, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   addi v10, v9, -1 ->   addi a2, a2, -1
// [Asm] subst   sw v10, 0(v2) ->   sw a2, 0(a0)
// [Asm] subst   call init_count.4499 ->   call init_count.4499
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   j .init_count.4499_3 ->   j .init_count.4499_3
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v8, FnParam(fref=f7, fpref=$f.1) -> v3, Insn(iref=%7) -> v11, FnParam(fref=f7, fpref=$f.2) -> v4, Self(fref=f7) -> v0, FnParam(fref=f7, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v12, Insn(iref=%2) -> v7, Insn(iref=%1) -> v6, Insn(iref=%5) -> v10, Insn(iref=%0) -> v5, Insn(iref=%4) -> v9
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f7, fpref=$f.0), Insn(iref=%1)])
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v8, v2, v4, v16, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v8, v2, v4, v17, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v8, v2, v4, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v8, v4, v14, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v8, v4, v15, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v12 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of move_perm1_forward.4505"];
// [Asm]   r0 [label="v12 ← a0", color=green];
// [Asm]   r20 [label="t1", color=blue];
// [Asm]   r23 [label="t4", color=blue];
// [Asm]   r3 [label="v4 ← a2", color=green];
// [Asm]   r9 [label="v14 ← a3", color=green];
// [Asm]   r26 [label="v6 ← a0", color=green];
// [Asm]   r6 [label="v16 ← a4", color=green];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="v8 ← a0", color=green];
// [Asm]   r11 [label="a0", color=blue];
// [Asm]   r7 [label="v17 ← a4", color=green];
// [Asm]   r10 [label="v15 ← a3", color=green];
// [Asm]   r22 [label="t3", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="v9 ← a4", color=green];
// [Asm]   r5 [label="v3 ← a1", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r24 [label="v11 ← a0", color=green];
// [Asm]   r25 [label="v5 ← a0", color=green];
// [Asm]   r2 [label="v2 ← a3", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="t0", color=blue];
// [Asm]   r21 [label="t2", color=blue];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r16;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r20;
// [Asm]   r11 -- r23;
// [Asm]   r11 -- r22;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r11 -- r18;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r5 -- r11;
// [Asm]   r3 -- r5;
// [Asm]   r11 -- r19;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r13;
// [Asm]   r11 -- r13;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r26;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r11 -- r15;
// [Asm]   r5 -- r25;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r11 -- r21;
// [Asm]   r4 -- r19;
// [Asm]   comment = "0:v12-> 1:v8-> 2:v2-> 3:v4-> 4:zero-> 5:v3-> 6:v16-> 7:v17-> 8:v9-> 9:v14-> 10:v15-> 25:v5-> 26:v6-> 11:a0-> 12:a1-> 13:a2-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:t0-> 20:t1-> 21:t2-> 22:t3-> 23:t4-> 24:v11"
// [Asm]   comment = "v12<-a0;v4<-a2;v14<-a3;v6<-a0;v16<-a4;v8<-a0;v17<-a4;v15<-a3;v9<-a4;v3<-a1;v11<-a0;v5<-a0;v2<-a3;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of move_perm1_forward.4505"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv a3, a0
// [Asm] subst   lw v5, 0(v3) ->   lw a0, 0(a1)
// [Asm] subst   addi v6, v5, -1 ->   addi a0, a0, -1
// [Asm] subst   blt v6, v2, .move_perm1_forward.4505_2 ->   blt a0, a3, .move_perm1_forward.4505_2
// [Asm] subst   addi v8, v2, 1 ->   addi a0, a3, 1
// [Asm] subst   slliw v16, v8, 2 ->   slliw a4, a0, 2
// [Asm] subst   add v17, v4, v16 ->   add a4, a2, a4
// [Asm] subst   lw v9, 0(v17) ->   lw a4, 0(a4)
// [Asm] subst   slliw v14, v2, 2 ->   slliw a3, a3, 2
// [Asm] subst   add v15, v4, v14 ->   add a3, a2, a3
// [Asm] subst   sw v9, 0(v15) ->   sw a4, 0(a3)
// [Asm] subst   call move_perm1_forward.4505 ->   call move_perm1_forward.4505
// [Asm] subst   mv v12, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v12, zero ->   mv a0, zero
// [Asm] subst   j .move_perm1_forward.4505_3 ->   j .move_perm1_forward.4505_3
// [Asm] pre_assigned_registers: Self(fref=f20) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.4496 ->   call main.4496
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] do_flip.4500:
// [Asm] # block info: defs: [v3, v4, v6, v2], uses: [a2, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v4, v6, s11, zero, v3]
// [Asm] # block parameters: []
// [Asm] .do_flip.4500_0:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v7], uses: [v6, zero, v7], upward_exposed: [v6, zero], params_defs: [v6]
// [Asm] # live_in: [v4, v6, s11, zero, v3], live_out: [v4, v6, s11, zero, v3]
// [Asm] # block parameters: [v6]
// [Asm] .do_flip.4500_2:
// [Asm]   lw v7, 0(v6)  # live: [zero, v7, v4, v6, s11, v3]
// [Asm] # control
// [Asm]   beq v7, zero, .do_flip.4500_3  # live: [v4, v6, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v5, s11], uses: [v5, s11, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [v4, v6, s11, zero, v3], live_out: [v5, zero, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .do_flip.4500_4:
// [Asm]   addi v5, s11, -4  # live: [v5, zero, v4, v6, v3]
// [Asm]   andi s11, v5, -8  # live: [v5, zero, v4, v6, s11, v3]
// [Asm]   sw zero, 0(v5)  # live: [v4, v5, v6, s11, zero, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, zero, v4, v6, s11, v3], live_out: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .do_flip.4500_9:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v11, v52, v12], uses: [v11, v6, v52, v12, v10], upward_exposed: [v6, v10], params_defs: [v10]
// [Asm] # live_in: [v5, v10, zero, v4, v6, s11, v3], live_out: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] # block parameters: [v10]
// [Asm] .do_flip.4500_11:
// [Asm]   lw v11, 0(v6)  # live: [v11, v5, v10, zero, v4, v6, s11, v3]
// [Asm]   li v52, 2  # live: [v11, v5, v10, zero, v4, v6, s11, v52, v3]
// [Asm]   div v12, v11, v52  # live: [v5, v10, zero, v4, v6, s11, v12, v3]
// [Asm] # control
// [Asm]   blt v12, v10, .do_flip.4500_13  # live: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v25, v46, v21, v10, v42, v41, v24, v28, v31, v39, v29, v27, v23, v35, v47, v34, v40], uses: [v40, v25, v46, v5, v21, v10, v42, v41, v24, v28, v31, v39, v29, v23, v27, v35, v47, v6, v34, v3], upward_exposed: [v5, v6, v10, v3], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v4, v6, s11, v3], live_out: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .do_flip.4500_12:
// [Asm]   slliw v46, v10, 2  # live: [v5, v46, v10, zero, v4, v6, s11, v3]
// [Asm]   add v47, v3, v46  # live: [v5, v10, zero, v4, v47, v6, s11, v3]
// [Asm]   lw v21, 0(v47)  # live: [v5, v10, v21, zero, v4, v6, s11, v3]
// [Asm]   sw v21, 0(v5)  # live: [v5, v10, zero, v4, v6, s11, v3]
// [Asm]   lw v23, 0(v6)  # live: [v5, v10, zero, v23, v4, v6, s11, v3]
// [Asm]   sub v24, v23, v10  # live: [v5, v10, zero, v4, v6, s11, v24, v3]
// [Asm]   slliw v41, v24, 2  # live: [v5, v10, zero, v4, v41, v6, s11, v3]
// [Asm]   add v42, v3, v41  # live: [v5, v10, zero, v42, v4, v6, s11, v3]
// [Asm]   lw v25, 0(v42)  # live: [v25, v5, v10, zero, v4, v6, s11, v3]
// [Asm]   slliw v39, v10, 2  # live: [v25, v5, v10, zero, v4, v6, s11, v39, v3]
// [Asm]   add v40, v3, v39  # live: [v40, v25, v5, v10, zero, v4, v6, s11, v3]
// [Asm]   sw v25, 0(v40)  # live: [v5, v10, zero, v4, v6, s11, v3]
// [Asm]   lw v27, 0(v6)  # live: [v5, v10, zero, v27, v4, v6, s11, v3]
// [Asm]   sub v28, v27, v10  # live: [v5, v10, zero, v4, v6, s11, v28, v3]
// [Asm]   lw v29, 0(v5)  # live: [v5, v10, zero, v29, v4, v6, s11, v28, v3]
// [Asm]   slliw v34, v28, 2  # live: [v5, v10, zero, v29, v4, v6, s11, v34, v3]
// [Asm]   add v35, v3, v34  # live: [v5, v10, zero, v29, v35, v4, v6, s11, v3]
// [Asm]   sw v29, 0(v35)  # live: [v5, v10, zero, v4, v6, s11, v3]
// [Asm]   addi v31, v10, 1  # live: [v5, zero, v4, v6, s11, v31, v3]
// [Asm] # control
// [Asm]   mv v10, v31  # live: [v5, v10, zero, v4, v6, s11, v3]
// [Asm]   j .do_flip.4500_11  # live: [v5, v10, zero, v4, v6, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v32], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v32]
// [Asm] # block parameters: []
// [Asm] .do_flip.4500_3:
// [Asm] # control
// [Asm]   mv v32, zero  # live: [v32]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v32, a0], upward_exposed: [v32], params_defs: [v32]
// [Asm] # live_in: [v32], live_out: []
// [Asm] # block parameters: [v32]
// [Asm] .do_flip.4500_5:
// [Asm] # control
// [Asm]   mv a0, v32  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v4, v6, s11, zero, v3], live_out: [v14, zero, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .do_flip.4500_13:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v4, v14, v6, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [v14], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14, zero, v4, v6, s11, v3], live_out: [zero, v4, v6, v15, s11, v3]
// [Asm] # block parameters: [v14]
// [Asm] .do_flip.4500_14:
// [Asm] # control
// [Asm]   mv v15, v14  # live: [v4, v6, v15, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v19, v16, v18], uses: [v16, v18, v19, v4, v6, v3], upward_exposed: [v4, v6, v3], params_defs: [v15]
// [Asm] # live_in: [zero, v4, v6, v15, s11, v3], live_out: [v4, v6, s11, zero, v3]
// [Asm] # block parameters: [v15]
// [Asm] .do_flip.4500_6:
// [Asm]   lw v16, 0(v3)  # live: [v16, zero, v4, v6, s11, v3]
// [Asm]   sw v16, 0(v6)  # live: [zero, v4, v6, s11, v3]
// [Asm]   lw v18, 0(v4)  # live: [v18, zero, v4, v6, s11, v3]
// [Asm]   addi v19, v18, 1  # live: [zero, v19, v4, v6, s11, v3]
// [Asm]   sw v19, 0(v4)  # live: [v4, v6, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v6  # live: [v4, v6, s11, zero, v3]
// [Asm]   j .do_flip.4500_2  # live: [v4, v6, s11, zero, v3]
// [Asm] 
// [Asm] # leaf false
// [Asm] move_perm1_forward.4505:
// [Asm] # block info: defs: [v3, v4, v5, v6, v2], uses: [v2, v5, a0, a2, a1, v6, v3], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v3, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.4505_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm]   lw v5, 0(v3)  # live: [v2, v4, v5, zero, v3]
// [Asm]   addi v6, v5, -1  # live: [v2, v4, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v6, v2, .move_perm1_forward.4505_2  # live: [v2, v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v16, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v3, v16, v14, a0, zero, v8, v4, a2, a1, v17, v15, v9, v2], upward_exposed: [v3, v4, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v4, zero, v3], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.4505_1:
// [Asm]   addi v8, v2, 1  # live: [v8, v2, v4, zero, v3]
// [Asm]   slliw v16, v8, 2  # live: [v8, v2, v4, v16, zero, v3]
// [Asm]   add v17, v4, v16  # live: [v8, v2, v4, v17, zero, v3]
// [Asm]   lw v9, 0(v17)  # live: [v8, v2, v4, zero, v9, v3]
// [Asm]   slliw v14, v2, 2  # live: [v8, v4, v14, zero, v9, v3]
// [Asm]   add v15, v4, v14  # live: [v8, v4, v15, zero, v9, v3]
// [Asm]   sw v9, 0(v15)  # live: [v8, v4, zero, v3]
// [Asm]   # save_ctx2  # live: [v8, v4, zero, v3]
// [Asm]   mv a0, v8  # live: [v4, zero, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, zero, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, zero, a0]
// [Asm]   call move_perm1_forward.4505  # live: [zero, a0]
// [Asm]   mv v11, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v12, zero  # live: [v12]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v12, a0], upward_exposed: [v12], params_defs: [v12]
// [Asm] # live_in: [v12], live_out: []
// [Asm] # block parameters: [v12]
// [Asm] .move_perm1_forward.4505_3:
// [Asm] # control
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.4505_2:
// [Asm] # control
// [Asm]   mv v12, zero  # live: [v12]
// [Asm]   j .move_perm1_forward.4505_3  # live: [v12]
// [Asm] 
// [Asm] # leaf true
// [Asm] init_arr.4497:
// [Asm] # block info: defs: [v3, v4, v5, v2], uses: [a2, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .init_arr.4497_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v6, v5, v3], upward_exposed: [v5, v3], params_defs: [v5]
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: [v5]
// [Asm] .init_arr.4497_2:
// [Asm]   addi v6, v3, -1  # live: [v4, v5, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v6, v5, .init_arr.4497_4  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v5, v12, v10, v13], uses: [v4, v5, v12, v10, v13], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .init_arr.4497_3:
// [Asm]   slliw v12, v5, 2  # live: [v4, v5, v12, zero, v3]
// [Asm]   add v13, v4, v12  # live: [v4, v5, zero, v13, v3]
// [Asm]   sw v5, 0(v13)  # live: [v4, v5, zero, v3]
// [Asm]   addi v10, v5, 1  # live: [v4, v10, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v10  # live: [v4, v5, zero, v3]
// [Asm]   j .init_arr.4497_2  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .init_arr.4497_4:
// [Asm] # control
// [Asm]   mv v8, zero  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v8], upward_exposed: [v8], params_defs: [v8]
// [Asm] # live_in: [v8], live_out: []
// [Asm] # block parameters: [v8]
// [Asm] .init_arr.4497_5:
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] go_loop.4504:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [a2, a1, a3, a5, a0, a4], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.4504_0:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v53, v8], uses: [v5, v53, v8], upward_exposed: [v5], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.4504_2:
// [Asm]   lw v8, 0(v5)  # live: [v2, v5, zero, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   li v53, 1  # live: [v2, v5, v53, zero, v7, v8, v4, v6, v3]
// [Asm]   bne v8, v53, .go_loop.4504_4  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [v2, v11, v3], upward_exposed: [v2, v3], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .go_loop.4504_3:
// [Asm]   lw v11, 0(v3)  # live: [v3, v11, v5, zero, v7, v4, v6, v2]
// [Asm] # control
// [Asm]   beq v11, v2, .go_loop.4504_5  # live: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v13, v42, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, v19, a6, v47, ft5, ft10, v34, ft7, ft4, v46, ft9, v21, a5, fa4, a0, v36, ft2, a2, v43, v17, a3, v24, v39, ft8, t3, fa7, a7, t0, fa5, fa3, v23, ft3, v35, fa0, t4, t2, v15, v40], uses: [v40, v16, v46, v21, v13, a0, v42, v7, v36, a2, a1, v43, v17, v24, v39, zero, v20, v23, v35, v19, v47, v4, v6, v34, v3], upward_exposed: [v7, v4, v6, zero, v3], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.4504_6:
// [Asm]   lw v13, 0(v6)  # live: [v2, v5, zero, v13, v7, v4, v6, v3]
// [Asm]   sw v13, 0(v4)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   # save_ctx2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   mv a0, zero  # live: [v2, v5, zero, a0, v7, v4, v6, v3]
// [Asm]   mv a1, v3  # live: [v2, v5, zero, a0, v7, v4, a1, v6, v3]
// [Asm]   mv a2, v6  # live: [v2, v5, zero, a0, v7, v4, a2, a1, v6, v3]
// [Asm]   call move_perm1_forward.4505  # live: [v2, v5, zero, a0, v7, v4, v6, v3]
// [Asm]   mv v15, a0  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   # restore_ctx2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   lw v16, 0(v3)  # live: [v2, v5, v16, zero, v7, v4, v6, v3]
// [Asm]   lw v17, 0(v4)  # live: [v2, v5, v16, zero, v7, v4, v17, v6, v3]
// [Asm]   slliw v46, v16, 2  # live: [v2, v5, v46, zero, v7, v4, v17, v6, v3]
// [Asm]   add v47, v6, v46  # live: [v2, v5, zero, v7, v4, v47, v17, v6, v3]
// [Asm]   sw v17, 0(v47)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   lw v19, 0(v3)  # live: [v2, v5, zero, v7, v19, v4, v6, v3]
// [Asm]   slliw v42, v19, 2  # live: [v2, v5, zero, v42, v7, v19, v4, v6, v3]
// [Asm]   add v43, v7, v42  # live: [v2, v5, zero, v7, v19, v4, v6, v43, v3]
// [Asm]   lw v20, 0(v43)  # live: [v2, v5, zero, v20, v7, v19, v4, v6, v3]
// [Asm]   addi v21, v20, -1  # live: [v2, v5, v21, zero, v7, v19, v4, v6, v3]
// [Asm]   slliw v39, v19, 2  # live: [v2, v5, v21, zero, v7, v4, v6, v39, v3]
// [Asm]   add v40, v7, v39  # live: [v2, v40, v5, v21, zero, v7, v4, v6, v3]
// [Asm]   sw v21, 0(v40)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   lw v23, 0(v3)  # live: [v2, v5, zero, v23, v7, v4, v6, v3]
// [Asm]   slliw v35, v23, 2  # live: [v2, v5, zero, v7, v35, v4, v6, v3]
// [Asm]   add v36, v7, v35  # live: [v2, v5, zero, v7, v36, v4, v6, v3]
// [Asm]   lw v24, 0(v36)  # live: [v2, v5, zero, v7, v4, v6, v24, v3]
// [Asm] # control
// [Asm]   li v34, 1  # live: [v2, v5, zero, v7, v4, v6, v24, v34, v3]
// [Asm]   bge v24, v34, .go_loop.4504_7  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v26, v27], uses: [v26, v27, v3], upward_exposed: [v3], params_defs: []
// [Asm] # live_in: [v3, v5, zero, v7, v4, v6, v2], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.4504_8:
// [Asm]   lw v26, 0(v3)  # live: [v2, v5, zero, v26, v7, v4, v6, v3]
// [Asm]   addi v27, v26, 1  # live: [v2, v5, zero, v27, v7, v4, v6, v3]
// [Asm]   sw v27, 0(v3)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   j .go_loop.4504_2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .go_loop.4504_4:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .go_loop.4504_11:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [], uses: [v5, zero, v3], upward_exposed: [v5, zero, v3], params_defs: []
// [Asm] # live_in: [v3, v5, zero, v7, v4, v6, v2], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.4504_5:
// [Asm]   sw zero, 0(v5)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   sw zero, 0(v3)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   j .go_loop.4504_2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v5, zero], upward_exposed: [v5, zero], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.4504_7:
// [Asm]   sw zero, 0(v5)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   j .go_loop.4504_2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # leaf false
// [Asm] main.4496:
// [Asm] # block info: defs: [v25, t1, v14, v13, v7, ft0, ft1, a1, s11, v12, fa1, v149, v142, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v2], uses: [v14, a0, v13, v7, a2, a1, s11, v12, v9, v149, v142, zero, v4, v15, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] # block parameters: []
// [Asm] .main.4496_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   addi v7, s11, -36  # live: [zero, v7]
// [Asm]   andi s11, v7, -8  # live: [zero, v7, s11]
// [Asm]   sw zero, 0(v7)  # live: [zero, v7, s11]
// [Asm]   sw zero, 4(v7)  # live: [zero, v7, s11]
// [Asm]   sw zero, 8(v7)  # live: [zero, v7, s11]
// [Asm]   sw zero, 12(v7)  # live: [zero, v7, s11]
// [Asm]   sw zero, 16(v7)  # live: [zero, v7, s11]
// [Asm]   sw zero, 20(v7)  # live: [zero, v7, s11]
// [Asm]   sw zero, 24(v7)  # live: [zero, v7, s11]
// [Asm]   sw zero, 28(v7)  # live: [zero, v7, s11]
// [Asm]   sw zero, 32(v7)  # live: [zero, v7, s11]
// [Asm]   # save_ctx2  # live: [zero, v7, s11]
// [Asm]   mv a0, zero  # live: [zero, a0, v7, s11]
// [Asm]   li v149, 9  # live: [zero, a0, v7, s11, v149]
// [Asm]   mv a1, v149  # live: [zero, a0, v7, a1, s11]
// [Asm]   mv a2, v7  # live: [zero, a0, v7, a2, a1, s11]
// [Asm]   call init_arr.4497  # live: [zero, a0, v7, s11]
// [Asm]   mv v17, a0  # live: [zero, v7, s11]
// [Asm]   # restore_ctx2  # live: [zero, v7, s11]
// [Asm]   addi v9, s11, -36  # live: [zero, v7, v9]
// [Asm]   andi s11, v9, -8  # live: [zero, v7, s11, v9]
// [Asm]   sw zero, 0(v9)  # live: [zero, v7, s11, v9]
// [Asm]   sw zero, 4(v9)  # live: [zero, v7, s11, v9]
// [Asm]   sw zero, 8(v9)  # live: [zero, v7, s11, v9]
// [Asm]   sw zero, 12(v9)  # live: [zero, v7, s11, v9]
// [Asm]   sw zero, 16(v9)  # live: [zero, v7, s11, v9]
// [Asm]   sw zero, 20(v9)  # live: [zero, v7, s11, v9]
// [Asm]   sw zero, 24(v9)  # live: [zero, v7, s11, v9]
// [Asm]   sw zero, 28(v9)  # live: [zero, v7, s11, v9]
// [Asm]   sw zero, 32(v9)  # live: [zero, v7, s11, v9]
// [Asm]   addi v13, s11, -36  # live: [zero, v13, v7, v9]
// [Asm]   andi s11, v13, -8  # live: [zero, v13, v7, s11, v9]
// [Asm]   sw zero, 0(v13)  # live: [zero, v13, v7, s11, v9]
// [Asm]   sw zero, 4(v13)  # live: [zero, v13, v7, s11, v9]
// [Asm]   sw zero, 8(v13)  # live: [zero, v13, v7, s11, v9]
// [Asm]   sw zero, 12(v13)  # live: [zero, v13, v7, s11, v9]
// [Asm]   sw zero, 16(v13)  # live: [zero, v13, v7, s11, v9]
// [Asm]   sw zero, 20(v13)  # live: [zero, v13, v7, s11, v9]
// [Asm]   sw zero, 24(v13)  # live: [zero, v13, v7, s11, v9]
// [Asm]   sw zero, 28(v13)  # live: [zero, v13, v7, s11, v9]
// [Asm]   sw zero, 32(v13)  # live: [zero, v13, v7, s11, v9]
// [Asm]   addi v14, s11, -4  # live: [v14, zero, v13, v7, v9]
// [Asm]   andi s11, v14, -8  # live: [v14, zero, v13, v7, s11, v9]
// [Asm]   sw zero, 0(v14)  # live: [v14, zero, v13, v7, s11, v9]
// [Asm]   addi v4, s11, -4  # live: [v14, zero, v13, v7, v4, v9]
// [Asm]   andi s11, v4, -8  # live: [v14, zero, v13, v7, v4, s11, v9]
// [Asm]   sw zero, 0(v4)  # live: [v14, zero, v13, v7, v4, s11, v9]
// [Asm]   addi v12, s11, -4  # live: [v14, zero, v13, v7, v4, v12, v9]
// [Asm]   andi s11, v12, -8  # live: [v14, zero, v13, v7, v4, v12, s11, v9]
// [Asm]   sw zero, 0(v12)  # live: [v14, zero, v13, v7, v4, v12, s11, v9]
// [Asm]   addi v2, s11, -4  # live: [v14, zero, v13, v7, v4, v12, v9, v2]
// [Asm]   andi s11, v2, -8  # live: [v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm]   sw zero, 0(v2)  # live: [v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm]   addi v15, s11, -4  # live: [v14, zero, v13, v7, v4, v12, v15, v9, v2]
// [Asm]   andi s11, v15, -8  # live: [v14, zero, v13, v7, v4, s11, v12, v15, v9, v2]
// [Asm]   li v142, 9  # live: [v14, v142, zero, v13, v7, v4, s11, v12, v15, v9, v2]
// [Asm]   sw v142, 0(v15)  # live: [v14, zero, v13, v7, v4, s11, v12, v15, v9, v2]
// [Asm] # control
// [Asm]   mv v25, v15  # live: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v139, v26], uses: [v25, v139, v26], upward_exposed: [v25], params_defs: [v25]
// [Asm] # live_in: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2], live_out: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] # block parameters: [v25]
// [Asm] .main.4496_2:
// [Asm]   lw v26, 0(v25)  # live: [v25, v14, zero, v13, v26, v7, v4, s11, v12, v9, v2]
// [Asm] # control
// [Asm]   li v139, 1  # live: [v25, v14, zero, v13, v26, v7, v4, s11, v12, v139, v9, v2]
// [Asm]   blt v26, v139, .main.4496_4  # live: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v42, ft0, ft1, v41, a1, s11, fa1, v130, fa2, ft6, a4, fa6, a6, ft10, ft5, ft7, ft4, v5, ft9, a5, a0, fa4, v36, ft2, a2, v37, v43, a3, v39, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v25, v14, v5, a0, v13, v42, v7, a2, a1, v43, s11, a3, v9, v39, v130, zero, v4], upward_exposed: [v25, v14, zero, v13, v7, v4, s11, v9], params_defs: []
// [Asm] # live_in: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2], live_out: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm] # block parameters: []
// [Asm] .main.4496_3:
// [Asm]   # save_ctx2  # live: [v25, v14, v13, v7, s11, v12, v9, zero, v4, v2]
// [Asm]   mv a0, zero  # live: [v25, v14, v13, a0, v7, s11, v12, v9, zero, v4, v2]
// [Asm]   li v130, 9  # live: [v25, v14, v13, a0, v7, s11, v12, v9, v130, zero, v4, v2]
// [Asm]   mv a1, v130  # live: [v25, v14, v13, a0, v7, a1, s11, v12, v9, zero, v4, v2]
// [Asm]   mv a2, v7  # live: [v25, v14, v13, a0, v7, a2, a1, s11, v12, v9, zero, v4, v2]
// [Asm]   mv a3, v9  # live: [v25, v14, v13, a0, v7, a2, a1, s11, v12, a3, v9, zero, v4, v2]
// [Asm]   call copy_perm.4498  # live: [v25, v14, zero, v13, a0, v7, v4, v12, s11, v9, v2]
// [Asm]   mv v36, a0  # live: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm]   # restore_ctx2  # live: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm]   # save_ctx2  # live: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm]   mv a0, v25  # live: [v25, v14, zero, v13, a0, v7, v4, v12, s11, v9, v2]
// [Asm]   mv a1, v13  # live: [v25, v14, zero, v13, a0, v7, v4, a1, v12, s11, v9, v2]
// [Asm]   call init_count.4499  # live: [v25, v14, zero, v13, a0, v7, v4, v12, s11, v9, v2]
// [Asm]   mv v37, a0  # live: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm]   # restore_ctx2  # live: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm]   sw zero, 0(v14)  # live: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm]   lw v39, 0(v9)  # live: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v39, v2]
// [Asm]   addi v5, s11, -4  # live: [v25, v14, v5, zero, v13, v7, v4, v12, v9, v39, v2]
// [Asm]   andi s11, v5, -8  # live: [v25, v14, v5, zero, v13, v7, v4, s11, v12, v9, v39, v2]
// [Asm]   sw v39, 0(v5)  # live: [v25, v14, v5, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm]   # save_ctx2  # live: [v25, v14, v5, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm]   mv a0, v5  # live: [v25, v14, zero, v13, a0, v7, v4, s11, v12, v9, v2]
// [Asm]   mv a1, v9  # live: [v25, v14, zero, v13, a0, v7, v4, a1, s11, v12, v9, v2]
// [Asm]   mv a2, v14  # live: [v25, v14, zero, v13, a0, v7, v4, a2, a1, s11, v12, v9, v2]
// [Asm]   call do_flip.4500  # live: [v25, v14, zero, v13, a0, v7, v4, v12, s11, v9, v2]
// [Asm]   mv v41, a0  # live: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm]   # restore_ctx2  # live: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm]   lw v42, 0(v4)  # live: [v25, v14, zero, v13, v42, v7, v4, v12, s11, v9, v2]
// [Asm]   lw v43, 0(v14)  # live: [v25, v14, zero, v13, v42, v7, v4, v43, v12, s11, v9, v2]
// [Asm] # control
// [Asm]   blt v43, v42, .main.4496_6  # live: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v79, v67, v95, a1, s11, v64, fa1, v73, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, v62, ft4, v87, v10, ft9, fa4, v92, ft2, a3, a7, fa7, fa3, v68, ft3, t2, t1, v69, ft0, ft1, v97, v90, ft7, v66, v71, a5, a0, v78, v65, a2, ft8, t3, v72, t0, fa5, v77, fa0, t4, v70, v83], uses: [v25, v69, v14, v13, v79, v67, v7, v95, a1, s11, v12, v64, v73, v97, zero, a4, v4, v90, v6, v62, v66, v71, v87, v10, a5, a0, v78, v92, v65, a2, a3, v72, v68, v70, v83, v2], upward_exposed: [v25, v14, zero, v13, v7, v4, v12, s11, v2], params_defs: []
// [Asm] # live_in: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2], live_out: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] # block parameters: []
// [Asm] .main.4496_5:
// [Asm]   lw v62, 0(v14)  # live: [v25, v62, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm]   sw v62, 0(v4)  # live: [v25, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm]   lw v64, 0(v12)  # live: [v25, v14, v13, v7, v12, s11, v9, v64, zero, v4, v2]
// [Asm]   lw v65, 0(v14)  # live: [v25, v14, v13, v7, v65, v12, s11, v9, v64, zero, v4, v2]
// [Asm]   lw v66, 0(v2)  # live: [v25, v66, v14, v13, v7, v65, v12, s11, v9, v64, zero, v4, v2]
// [Asm]   li v97, 2  # live: [v25, v66, v14, v13, v7, v65, v12, s11, v9, v64, zero, v97, v4, v2]
// [Asm]   div v67, v66, v97  # live: [v25, v66, v14, v13, v67, v7, v65, v12, s11, v9, v64, zero, v4, v2]
// [Asm]   li v95, 2  # live: [v25, v66, v14, v13, v67, v7, v95, v65, v12, s11, v9, v64, zero, v4, v2]
// [Asm]   mul v68, v67, v95  # live: [v25, v66, v14, v13, v7, v65, v12, s11, v9, v64, zero, v68, v4, v2]
// [Asm]   sub v69, v66, v68  # live: [v25, v14, v69, v13, v7, v65, v12, s11, v9, v64, zero, v4, v2]
// [Asm]   li v92, 2  # live: [v25, v14, v69, v13, v7, v92, v65, v12, s11, v9, v64, zero, v4, v2]
// [Asm]   mul v70, v69, v92  # live: [v25, v14, v13, v7, v65, v12, s11, v9, v64, zero, v4, v70, v2]
// [Asm]   li v90, 1  # live: [v25, v14, v13, v7, v65, v12, s11, v9, v64, zero, v4, v90, v70, v2]
// [Asm]   sub v71, v90, v70  # live: [v25, v14, v71, v13, v7, v65, v12, s11, v9, v64, zero, v4, v2]
// [Asm]   mul v72, v65, v71  # live: [v25, v14, v13, v7, v12, s11, v9, v64, v72, zero, v4, v2]
// [Asm]   add v73, v64, v72  # live: [v25, v14, v13, v7, v12, s11, v9, v73, zero, v4, v2]
// [Asm]   sw v73, 0(v12)  # live: [v25, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm]   addi v6, s11, -4  # live: [v25, v14, v13, v7, v12, v9, zero, v4, v6, v2]
// [Asm]   andi s11, v6, -8  # live: [v25, v14, v13, v7, v12, s11, v9, zero, v4, v6, v2]
// [Asm]   li v87, 1  # live: [v25, v14, v87, v13, v7, v12, s11, v9, zero, v4, v6, v2]
// [Asm]   sw v87, 0(v6)  # live: [v25, v14, v13, v7, v12, s11, v9, zero, v4, v6, v2]
// [Asm]   addi v10, s11, -4  # live: [v25, v14, v10, v13, v7, v12, v9, zero, v4, v6, v2]
// [Asm]   andi s11, v10, -8  # live: [v25, v14, v10, v13, v7, v12, s11, v9, zero, v4, v6, v2]
// [Asm]   sw zero, 0(v10)  # live: [v25, v14, v10, v13, v7, v12, s11, v9, zero, v4, v6, v2]
// [Asm]   # save_ctx2  # live: [v25, v14, v10, v13, v7, v12, s11, v9, zero, v4, v6, v2]
// [Asm]   li v83, 9  # live: [v25, v14, v10, v13, v7, v12, s11, v9, zero, v4, v6, v83, v2]
// [Asm]   mv a0, v83  # live: [v25, v14, v10, v13, a0, v7, v12, s11, v9, zero, v4, v6, v2]
// [Asm]   mv a1, v25  # live: [v25, v14, v10, v13, a0, v7, a1, v12, s11, v9, zero, v4, v6, v2]
// [Asm]   mv a2, v10  # live: [v25, v14, v13, a0, v7, a2, a1, v12, s11, v9, zero, v4, v6, v2]
// [Asm]   mv a3, v6  # live: [v25, v14, v13, a0, v7, a2, a1, v12, s11, a3, v9, zero, v4, v2]
// [Asm]   mv a4, v7  # live: [v25, v14, v13, a0, v7, a2, a1, v12, s11, a3, v9, zero, a4, v4, v2]
// [Asm]   mv a5, v13  # live: [v25, v14, a5, v13, a0, v7, a2, a1, v12, s11, a3, v9, zero, a4, v4, v2]
// [Asm]   call go_loop.4502  # live: [v25, v14, zero, v13, a0, v7, v4, s11, v12, v9, v2]
// [Asm]   mv v77, a0  # live: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm]   # restore_ctx2  # live: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm]   lw v78, 0(v2)  # live: [v25, v14, zero, v13, v78, v7, v4, s11, v12, v9, v2]
// [Asm]   addi v79, v78, 1  # live: [v25, v14, zero, v13, v79, v7, v4, s11, v12, v9, v2]
// [Asm]   sw v79, 0(v2)  # live: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] # control
// [Asm]   mv v25, v25  # live: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm]   j .main.4496_2  # live: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v32, ft0, ft1, a1, s11, v28, fa1, v33, fa2, v29, ft6, a4, fa6, v8, a6, ft10, ft5, v34, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v31, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, v35, t4, t2], uses: [v29, a0, v8, v4, v32, v12, s11, v28, v31, v34], upward_exposed: [v4, v12, s11], params_defs: []
// [Asm] # live_in: [v4, v12, s11], live_out: [v35]
// [Asm] # block parameters: []
// [Asm] .main.4496_4:
// [Asm]   lw v28, 0(v4)  # live: [s11, v12, v28]
// [Asm]   lw v29, 0(v12)  # live: [s11, v28, v29]
// [Asm]   addi v8, s11, -8  # live: [v28, v29, v8]
// [Asm]   andi s11, v8, -8  # live: [v28, v29, v8]
// [Asm]   sw v28, 0(v8)  # live: [v29, v8]
// [Asm]   sw v29, 4(v8)  # live: [v8]
// [Asm]   lw v31, 0(v8)  # live: [v31, v8]
// [Asm]   lw v32, 4(v8)  # live: [v32, v31]
// [Asm]   # save_ctx2  # live: [v32, v31]
// [Asm]   mv a0, v32  # live: [v31, a0]
// [Asm]   call minimbt_print_int  # live: [v31, a0]
// [Asm]   mv v33, a0  # live: [v31]
// [Asm]   # restore_ctx2  # live: [v31]
// [Asm]   # save_ctx2  # live: [v31]
// [Asm]   mv a0, v31  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v34, a0  # live: [v34]
// [Asm]   # restore_ctx2  # live: [v34]
// [Asm] # control
// [Asm]   mv v35, v34  # live: [v35]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v35], upward_exposed: [v35], params_defs: [v35]
// [Asm] # live_in: [v35], live_out: []
// [Asm] # block parameters: [v35]
// [Asm] .main.4496_8:
// [Asm] # control
// [Asm]   mv a0, v35  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v58, a1, s11, fa1, v60, v51, fa2, ft6, v50, a4, fa6, a6, ft5, ft10, v59, v117, v54, ft4, ft9, v49, fa4, v119, ft2, a3, v52, a7, fa7, v48, fa3, ft3, v45, t2, v3, t1, ft0, ft1, v109, v105, v47, ft7, v11, v46, v53, a5, a0, a2, v114, ft8, t3, t0, v112, fa5, fa0, t4], uses: [v2, v25, v14, v13, v7, a1, v12, s11, v60, v51, v109, zero, v50, a4, v105, v47, v59, v117, v54, v11, v46, v53, v49, a5, a0, v119, v114, a2, v52, a3, v112, v48, v45, v3], upward_exposed: [v25, v14, zero, v13, v7, v12, s11, v2], params_defs: []
// [Asm] # live_in: [v25, v14, zero, v13, v7, v4, v12, s11, v9, v2], live_out: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] # block parameters: []
// [Asm] .main.4496_6:
// [Asm]   lw v45, 0(v12)  # live: [v25, v14, v13, v7, v12, s11, v9, zero, v45, v4, v2]
// [Asm]   lw v46, 0(v14)  # live: [v25, v14, v46, v13, v7, v12, s11, v9, zero, v45, v4, v2]
// [Asm]   lw v47, 0(v2)  # live: [v25, v14, v46, v13, v7, v12, s11, v9, zero, v45, v4, v47, v2]
// [Asm]   li v119, 2  # live: [v25, v14, v46, v13, v119, v7, v12, s11, v9, zero, v45, v4, v47, v2]
// [Asm]   div v48, v47, v119  # live: [v25, v14, v46, v13, v7, v12, s11, v9, v48, zero, v45, v4, v47, v2]
// [Asm]   li v117, 2  # live: [v25, v14, v46, v13, v7, v12, s11, v9, v48, zero, v45, v4, v47, v117, v2]
// [Asm]   mul v49, v48, v117  # live: [v25, v14, v46, v49, v13, v7, v12, s11, v9, zero, v45, v4, v47, v2]
// [Asm]   sub v50, v47, v49  # live: [v25, v14, v46, v13, v7, v12, s11, v9, zero, v50, v45, v4, v2]
// [Asm]   li v114, 2  # live: [v25, v14, v46, v13, v7, v114, v12, s11, v9, zero, v50, v45, v4, v2]
// [Asm]   mul v51, v50, v114  # live: [v25, v14, v46, v13, v7, v12, s11, v9, v51, zero, v45, v4, v2]
// [Asm]   li v112, 1  # live: [v25, v14, v46, v13, v7, v12, s11, v9, v51, v112, zero, v45, v4, v2]
// [Asm]   sub v52, v112, v51  # live: [v25, v14, v46, v13, v7, v12, s11, v52, v9, zero, v45, v4, v2]
// [Asm]   mul v53, v46, v52  # live: [v25, v14, v53, v13, v7, v12, s11, v9, zero, v45, v4, v2]
// [Asm]   add v54, v45, v53  # live: [v25, v14, v13, v7, v12, s11, v9, zero, v4, v54, v2]
// [Asm]   sw v54, 0(v12)  # live: [v25, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm]   addi v11, s11, -4  # live: [v11, v25, v14, v13, v7, v12, v9, zero, v4, v2]
// [Asm]   andi s11, v11, -8  # live: [v11, v25, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm]   li v109, 1  # live: [v11, v25, v14, v13, v7, v12, s11, v9, v109, zero, v4, v2]
// [Asm]   sw v109, 0(v11)  # live: [v11, v25, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm]   addi v3, s11, -4  # live: [v3, v11, v25, v14, v13, v7, v12, v9, zero, v4, v2]
// [Asm]   andi s11, v3, -8  # live: [v3, v11, v25, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm]   sw zero, 0(v3)  # live: [v3, v11, v25, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm]   # save_ctx2  # live: [v3, v11, v25, v14, v13, v7, v12, s11, v9, zero, v4, v2]
// [Asm]   li v105, 9  # live: [v3, v11, v25, v14, v13, v7, v12, s11, v9, zero, v105, v4, v2]
// [Asm]   mv a0, v105  # live: [v3, v11, v25, v14, v13, a0, v7, v12, s11, v9, zero, v4, v2]
// [Asm]   mv a1, v25  # live: [v3, v11, v25, v14, v13, a0, v7, a1, v12, s11, v9, zero, v4, v2]
// [Asm]   mv a2, v3  # live: [v25, v11, v14, v13, a0, v7, a2, a1, v12, s11, v9, zero, v4, v2]
// [Asm]   mv a3, v11  # live: [v25, v14, v13, a0, v7, a2, a1, v12, s11, a3, v9, zero, v4, v2]
// [Asm]   mv a4, v7  # live: [v25, v14, v13, a0, v7, a2, a1, v12, s11, a3, v9, zero, a4, v4, v2]
// [Asm]   mv a5, v13  # live: [v25, v14, a5, v13, a0, v7, a2, a1, v12, s11, a3, v9, zero, a4, v4, v2]
// [Asm]   call go_loop.4504  # live: [v25, v14, zero, v13, a0, v7, v4, s11, v12, v9, v2]
// [Asm]   mv v58, a0  # live: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm]   # restore_ctx2  # live: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm]   lw v59, 0(v2)  # live: [v25, v14, zero, v13, v7, v4, v59, s11, v12, v9, v2]
// [Asm]   addi v60, v59, 1  # live: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v60, v2]
// [Asm]   sw v60, 0(v2)  # live: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] # control
// [Asm]   mv v25, v25  # live: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm]   j .main.4496_2  # live: [v25, v14, zero, v13, v7, v4, s11, v12, v9, v2]
// [Asm] 
// [Asm] # leaf true
// [Asm] copy_perm.4498:
// [Asm] # block info: defs: [v3, v4, v5, v6, v2], uses: [a2, a1, a3, a0, v2], upward_exposed: [a2, a1, a3, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, zero], live_out: [v4, v6, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .copy_perm.4498_0:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v7], uses: [v7, v6, v3], upward_exposed: [v6, v3], params_defs: [v6]
// [Asm] # live_in: [v4, v6, v5, zero, v3], live_out: [v4, v6, v5, zero, v3]
// [Asm] # block parameters: [v6]
// [Asm] .copy_perm.4498_2:
// [Asm]   addi v7, v3, -1  # live: [v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   blt v7, v6, .copy_perm.4498_4  # live: [v4, v6, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v16, v14, v10, v17, v6, v12, v15], uses: [v16, v5, v14, v10, v4, v6, v17, v15, v12], upward_exposed: [v4, v6, v5], params_defs: []
// [Asm] # live_in: [v4, v6, v5, zero, v3], live_out: [v4, v6, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .copy_perm.4498_3:
// [Asm]   slliw v16, v6, 2  # live: [v5, v16, zero, v4, v6, v3]
// [Asm]   add v17, v4, v16  # live: [v5, zero, v4, v6, v17, v3]
// [Asm]   lw v10, 0(v17)  # live: [v5, v10, zero, v4, v6, v3]
// [Asm]   slliw v14, v6, 2  # live: [v5, v14, v10, zero, v4, v6, v3]
// [Asm]   add v15, v5, v14  # live: [v5, v10, zero, v4, v6, v15, v3]
// [Asm]   sw v10, 0(v15)  # live: [v4, v5, v6, zero, v3]
// [Asm]   addi v12, v6, 1  # live: [v4, v5, v12, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v12  # live: [v4, v6, v5, zero, v3]
// [Asm]   j .copy_perm.4498_2  # live: [v4, v6, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v9]
// [Asm] # block parameters: []
// [Asm] .copy_perm.4498_4:
// [Asm] # control
// [Asm]   mv v9, zero  # live: [v9]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v9, a0], upward_exposed: [v9], params_defs: [v9]
// [Asm] # live_in: [v9], live_out: []
// [Asm] # block parameters: [v9]
// [Asm] .copy_perm.4498_5:
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] go_loop.4502:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [a2, a1, a3, a5, a0, a4], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.4502_0:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v53, v8], uses: [v5, v53, v8], upward_exposed: [v5], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.4502_2:
// [Asm]   lw v8, 0(v5)  # live: [v2, v5, zero, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   li v53, 1  # live: [v2, v5, v53, zero, v7, v8, v4, v6, v3]
// [Asm]   bne v8, v53, .go_loop.4502_4  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [v2, v11, v3], upward_exposed: [v2, v3], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .go_loop.4502_3:
// [Asm]   lw v11, 0(v3)  # live: [v3, v11, v5, zero, v7, v4, v6, v2]
// [Asm] # control
// [Asm]   beq v11, v2, .go_loop.4502_5  # live: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v13, v42, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, v19, a6, v47, ft5, ft10, v34, ft7, ft4, v46, ft9, v21, a5, fa4, a0, v36, ft2, a2, v43, v17, a3, v24, v39, ft8, t3, fa7, a7, t0, fa5, fa3, v23, ft3, v35, fa0, t4, t2, v15, v40], uses: [v40, v16, v46, v21, v13, a0, v42, v7, v36, a2, a1, v43, v17, v24, v39, zero, v20, v23, v35, v19, v47, v4, v6, v34, v3], upward_exposed: [v7, v4, v6, zero, v3], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.4502_6:
// [Asm]   lw v13, 0(v6)  # live: [v2, v5, zero, v13, v7, v4, v6, v3]
// [Asm]   sw v13, 0(v4)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   # save_ctx2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   mv a0, zero  # live: [v2, v5, zero, a0, v7, v4, v6, v3]
// [Asm]   mv a1, v3  # live: [v2, v5, zero, a0, v7, v4, a1, v6, v3]
// [Asm]   mv a2, v6  # live: [v2, v5, zero, a0, v7, v4, a2, a1, v6, v3]
// [Asm]   call move_perm1_forward.4503  # live: [v2, v5, zero, a0, v7, v4, v6, v3]
// [Asm]   mv v15, a0  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   # restore_ctx2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   lw v16, 0(v3)  # live: [v2, v5, v16, zero, v7, v4, v6, v3]
// [Asm]   lw v17, 0(v4)  # live: [v2, v5, v16, zero, v7, v4, v17, v6, v3]
// [Asm]   slliw v46, v16, 2  # live: [v2, v5, v46, zero, v7, v4, v17, v6, v3]
// [Asm]   add v47, v6, v46  # live: [v2, v5, zero, v7, v4, v47, v17, v6, v3]
// [Asm]   sw v17, 0(v47)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   lw v19, 0(v3)  # live: [v2, v5, zero, v7, v19, v4, v6, v3]
// [Asm]   slliw v42, v19, 2  # live: [v2, v5, zero, v42, v7, v19, v4, v6, v3]
// [Asm]   add v43, v7, v42  # live: [v2, v5, zero, v7, v19, v4, v6, v43, v3]
// [Asm]   lw v20, 0(v43)  # live: [v2, v5, zero, v20, v7, v19, v4, v6, v3]
// [Asm]   addi v21, v20, -1  # live: [v2, v5, v21, zero, v7, v19, v4, v6, v3]
// [Asm]   slliw v39, v19, 2  # live: [v2, v5, v21, zero, v7, v4, v6, v39, v3]
// [Asm]   add v40, v7, v39  # live: [v2, v40, v5, v21, zero, v7, v4, v6, v3]
// [Asm]   sw v21, 0(v40)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   lw v23, 0(v3)  # live: [v2, v5, zero, v23, v7, v4, v6, v3]
// [Asm]   slliw v35, v23, 2  # live: [v2, v5, zero, v7, v35, v4, v6, v3]
// [Asm]   add v36, v7, v35  # live: [v2, v5, zero, v7, v36, v4, v6, v3]
// [Asm]   lw v24, 0(v36)  # live: [v2, v5, zero, v7, v4, v6, v24, v3]
// [Asm] # control
// [Asm]   li v34, 1  # live: [v2, v5, zero, v7, v4, v6, v24, v34, v3]
// [Asm]   bge v24, v34, .go_loop.4502_7  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v26, v27], uses: [v26, v27, v3], upward_exposed: [v3], params_defs: []
// [Asm] # live_in: [v3, v5, zero, v7, v4, v6, v2], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.4502_8:
// [Asm]   lw v26, 0(v3)  # live: [v2, v5, zero, v26, v7, v4, v6, v3]
// [Asm]   addi v27, v26, 1  # live: [v2, v5, zero, v27, v7, v4, v6, v3]
// [Asm]   sw v27, 0(v3)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   j .go_loop.4502_2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .go_loop.4502_4:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .go_loop.4502_11:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [], uses: [v5, zero, v3], upward_exposed: [v5, zero, v3], params_defs: []
// [Asm] # live_in: [v3, v5, zero, v7, v4, v6, v2], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.4502_5:
// [Asm]   sw zero, 0(v5)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   sw zero, 0(v3)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   j .go_loop.4502_2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v5, zero], upward_exposed: [v5, zero], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop.4502_7:
// [Asm]   sw zero, 0(v5)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   j .go_loop.4502_2  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # leaf false
// [Asm] init_count.4499:
// [Asm] # block info: defs: [v3, v4, v21, v2], uses: [v4, a1, v21, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v3, zero, v2]
// [Asm] # block parameters: []
// [Asm] .init_count.4499_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm]   lw v4, 0(v2)  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   li v21, 1  # live: [v2, v4, v21, zero, v3]
// [Asm]   beq v4, v21, .init_count.4499_1  # live: [v2, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, v7, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, v10, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v2, v18, v10, a0, zero, v7, v6, v17, a1, v9, v3], upward_exposed: [v3, zero, v2], params_defs: []
// [Asm] # live_in: [v2, zero, v3], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .init_count.4499_2:
// [Asm]   lw v6, 0(v2)  # live: [v2, v6, zero, v3]
// [Asm]   addi v7, v6, -1  # live: [v2, v7, v6, zero, v3]
// [Asm]   slliw v17, v7, 2  # live: [v2, v6, v17, zero, v3]
// [Asm]   add v18, v3, v17  # live: [v2, v6, v18, zero, v3]
// [Asm]   sw v6, 0(v18)  # live: [v2, zero, v3]
// [Asm]   lw v9, 0(v2)  # live: [v2, zero, v9, v3]
// [Asm]   addi v10, v9, -1  # live: [v2, v10, zero, v3]
// [Asm]   sw v10, 0(v2)  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [zero, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, zero, a0]
// [Asm]   call init_count.4499  # live: [zero, a0]
// [Asm]   mv v12, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .init_count.4499_3:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .init_count.4499_1:
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v13]
// [Asm]   j .init_count.4499_3  # live: [v13]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.4496  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] move_perm1_forward.4503:
// [Asm] # block info: defs: [v3, v4, v5, v6, v2], uses: [v2, v5, a0, a2, a1, v6, v3], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v3, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.4503_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm]   lw v5, 0(v3)  # live: [v2, v4, v5, zero, v3]
// [Asm]   addi v6, v5, -1  # live: [v2, v4, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v6, v2, .move_perm1_forward.4503_2  # live: [v2, v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v16, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v3, v16, v14, a0, zero, v8, v4, a2, a1, v17, v15, v9, v2], upward_exposed: [v3, v4, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v4, zero, v3], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.4503_1:
// [Asm]   addi v8, v2, 1  # live: [v8, v2, v4, zero, v3]
// [Asm]   slliw v16, v8, 2  # live: [v8, v2, v4, v16, zero, v3]
// [Asm]   add v17, v4, v16  # live: [v8, v2, v4, v17, zero, v3]
// [Asm]   lw v9, 0(v17)  # live: [v8, v2, v4, zero, v9, v3]
// [Asm]   slliw v14, v2, 2  # live: [v8, v4, v14, zero, v9, v3]
// [Asm]   add v15, v4, v14  # live: [v8, v4, v15, zero, v9, v3]
// [Asm]   sw v9, 0(v15)  # live: [v8, v4, zero, v3]
// [Asm]   # save_ctx2  # live: [v8, v4, zero, v3]
// [Asm]   mv a0, v8  # live: [v4, zero, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, zero, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, zero, a0]
// [Asm]   call move_perm1_forward.4503  # live: [zero, a0]
// [Asm]   mv v11, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v12, zero  # live: [v12]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v12, a0], upward_exposed: [v12], params_defs: [v12]
// [Asm] # live_in: [v12], live_out: []
// [Asm] # block parameters: [v12]
// [Asm] .move_perm1_forward.4503_3:
// [Asm] # control
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.4503_2:
// [Asm] # control
// [Asm]   mv v12, zero  # live: [v12]
// [Asm]   j .move_perm1_forward.4503_3  # live: [v12]
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("fannkuch", Tuple([Int, Int])), args: [("n", Int)], body: LetRec({name: ("gen_perm1", Array(Int)), args: [("len", Int)], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))}, Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("gen_perm1", Array(Int)), args: [("len", Int)], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))}, Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr")))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))
// [Knf] build_knf: App(Var("init_arr"), [Int(0)])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))))
// [Knf] build_knf: App(Var("gen_perm1"), [Var("n")])
// [Knf] build_knf: Var("gen_perm1")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))
// [Knf] build_knf: Array(Int(1), Var("n"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))
// [Knf] build_knf: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i")))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm1"), Var("i"))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("copy_perm")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))
// [Knf] build_knf: App(Var("copy_perm"), [Int(0)])
// [Knf] build_knf: Var("copy_perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)
// [Knf] build_knf: If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit)
// [Knf] build_knf: If(Eq(Get(Var("r"), Int(0)), Int(1)), Unit, Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), [])))
// [Knf] build_knf: Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))
// [Knf] build_knf: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("init_count"), [])
// [Knf] build_knf: Var("init_count")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))
// [Knf] build_knf: App(Var("init_count"), [])
// [Knf] build_knf: Var("init_count")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))
// [Knf] build_knf: Put(Var("flips"), Int(0), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))
// [Knf] build_knf: Array(Int(1), Get(Var("perm"), Int(0)))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("perm"), Int(0))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))
// [Knf] build_knf: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)
// [Knf] build_knf: If(Eq(Get(Var("k"), Int(0)), Int(0)), Unit, Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Put(Var("t"), Int(0), Get(Var("perm"), Var("i")))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm"), Var("i"))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0)))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("t"), Int(0))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("flip_loop")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))))
// [Knf] build_knf: App(Var("flip_loop"), [Int(0)])
// [Knf] build_knf: Var("flip_loop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))
// [Knf] build_knf: Put(Var("k"), Int(0), Get(Var("perm"), Int(0)))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm"), Int(0))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))
// [Knf] build_knf: Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("do_flip"), [Var("k")])
// [Knf] build_knf: Var("do_flip")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))
// [Knf] build_knf: App(Var("do_flip"), [Var("k")])
// [Knf] build_knf: Var("do_flip")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))
// [Knf] build_knf: If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit)
// [Knf] build_knf: Get(Var("max_flips"), Int(0))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0)))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))
// [Knf] build_knf: Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int)))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("check_sum"), Int(0))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int))
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))
// [Knf] build_knf: Array(Int(1), Bool(true))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))
// [Knf] build_knf: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)
// [Knf] build_knf: Get(Var("go"), Int(0))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), []))
// [Knf] build_knf: If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))))))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit))
// [Knf] build_knf: Put(Var("go"), Int(0), Bool(false))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)
// [Knf] build_knf: Put(Var("r"), Int(0), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))
// [Knf] build_knf: Put(Var("t"), Int(0), Get(Var("perm1"), Int(0)))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm1"), Int(0))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit))
// [Knf] build_knf: Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)
// [Knf] build_knf: App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("move_perm1_forward")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))
// [Knf] build_knf: App(Var("move_perm1_forward"), [Int(0)])
// [Knf] build_knf: Var("move_perm1_forward")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))
// [Knf] build_knf: Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0)))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("t"), Int(0))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))
// [Knf] build_knf: Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("count"), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)
// [Knf] build_knf: If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("count"), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Put(Var("go"), Int(0), Bool(false))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("go_loop"), [])
// [Knf] build_knf: Var("go_loop")
// [Knf] build_knf: Unit
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))
// [Knf] build_knf: App(Var("go_loop"), [])
// [Knf] build_knf: Var("go_loop")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))
// [Knf] build_knf: Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("compute"), [Var("r")])
// [Knf] build_knf: Var("compute")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))
// [Knf] build_knf: App(Var("compute"), [Var("r")])
// [Knf] build_knf: Var("compute")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])
// [Knf] build_knf: Get(Var("max_flips"), Int(0))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("check_sum"), Int(0))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))}, App(Var("main"), []))
// [Knf] build_knf: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))
// [Knf] build_knf: App(Var("fannkuch"), [Int(9)])
// [Knf] build_knf: Var("fannkuch")
// [Knf] build_knf: Int(9)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")]))
// [Knf] build_knf: App(Var("print_int"), [Var("check_sum")])
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: App(Var("print_int"), [Var("max_flips")])
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%3)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f0, fpref=$f.0)]) already set
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%4)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f1, fpref=$f.0)]) already set
// [Core] b1 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%13)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f3, fpref=$f.0)]) already set
// [Core] b3 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b4 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0)]) already set
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f4, fpref=$f.0)]) already set
// [Core] b1 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b7 control: Jump(target=b2, args=[]) already set
// [Core] b8 control: Jump(target=b2, args=[]) already set
// [Core] b6 control: Panic -> Branch(cond=Insn(iref=%19), t=b7, t_args=[], f=b8, f_args=[])
// [Core] b5 control: Jump(target=b2, args=[]) already set
// [Core] b9 control: Panic -> Jump(target=b10, args=[BlockParam(bref=b9, bpref=$b.0)])
// [Core] b3 control: Panic -> Branch(cond=Insn(iref=%3), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b10 control: Panic -> Jump(target=b11, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Core] b4 control: Panic -> Jump(target=b11, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b11 control: Panic -> Return(args=[BlockParam(bref=b11, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[]) already set
// [Core] b1 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b7 control: Jump(target=b2, args=[]) already set
// [Core] b8 control: Jump(target=b2, args=[]) already set
// [Core] b6 control: Panic -> Branch(cond=Insn(iref=%19), t=b7, t_args=[], f=b8, f_args=[])
// [Core] b5 control: Jump(target=b2, args=[]) already set
// [Core] b9 control: Panic -> Jump(target=b10, args=[BlockParam(bref=b9, bpref=$b.0)])
// [Core] b3 control: Panic -> Branch(cond=Insn(iref=%3), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b10 control: Panic -> Jump(target=b11, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Core] b4 control: Panic -> Jump(target=b11, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b11 control: Panic -> Return(args=[BlockParam(bref=b11, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[]) already set
// [Core] b5 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0)]) already set
// [Core] b6 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0)]) already set
// [Core] b3 control: Panic -> Branch(cond=Insn(iref=%19), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b7 control: Panic -> Jump(target=b8, args=[BlockParam(bref=b7, bpref=$b.0)])
// [Core] b4 control: Panic -> Jump(target=b8, args=[Insn(iref=%64)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%10), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b8 control: Panic -> Return(args=[BlockParam(bref=b8, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[Mem(fref=f9, mref=m7)]) already set
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main] beta reduce perm1.2348 = arr.3574
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl do_flip.4500
// [Main]   .type do_flip.4500, @function
// [Main] # leaf true
// [Main] do_flip.4500:
// [Main] .do_flip.4500_0:
// [Main]   mv a5, a1
// [Main]   mv a3, a2
// [Main]   mv a4, a0
// [Main] 
// [Main] .do_flip.4500_2:
// [Main]   lw a0, 0(a4)
// [Main]   beq a0, zero, .do_flip.4500_3
// [Main] 
// [Main] .do_flip.4500_4:
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw zero, 0(a1)
// [Main] 
// [Main] .do_flip.4500_9:
// [Main]   mv a2, zero
// [Main] 
// [Main] .do_flip.4500_11:
// [Main]   lw a0, 0(a4)
// [Main]   li a6, 2
// [Main]   div a0, a0, a6
// [Main]   blt a0, a2, .do_flip.4500_13
// [Main] 
// [Main] .do_flip.4500_12:
// [Main]   slliw a0, a2, 2
// [Main]   add a0, a5, a0
// [Main]   lw a0, 0(a0)
// [Main]   sw a0, 0(a1)
// [Main]   lw a0, 0(a4)
// [Main]   sub a0, a0, a2
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a5, a0
// [Main]   lw a0, 0(a0)
// [Main]   slliw a6, a2, 2
// [Main]   add a6, a5, a6
// [Main]   sw a0, 0(a6)
// [Main]   lw a0, 0(a4)
// [Main]   sub a0, a0, a2
// [Main]   lw a6, 0(a1)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a5, a0
// [Main]   sw a6, 0(a0)
// [Main]   addi a0, a2, 1
// [Main]   mv a2, a0
// [Main]   j .do_flip.4500_11
// [Main] 
// [Main] .do_flip.4500_3:
// [Main]   mv a0, zero
// [Main] 
// [Main] .do_flip.4500_5:
// [Main]   ret
// [Main] 
// [Main] .do_flip.4500_13:
// [Main]   mv a0, zero
// [Main] 
// [Main] .do_flip.4500_14:
// [Main] 
// [Main] .do_flip.4500_6:
// [Main]   lw a0, 0(a5)
// [Main]   sw a0, 0(a4)
// [Main]   lw a0, 0(a3)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(a3)
// [Main]   j .do_flip.4500_2
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl move_perm1_forward.4505
// [Main]   .type move_perm1_forward.4505, @function
// [Main] # leaf false
// [Main] move_perm1_forward.4505:
// [Main] .move_perm1_forward.4505_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a3, a0
// [Main]   lw a0, 0(a1)
// [Main]   addi a0, a0, -1
// [Main]   blt a0, a3, .move_perm1_forward.4505_2
// [Main] 
// [Main] .move_perm1_forward.4505_1:
// [Main]   addi a0, a3, 1
// [Main]   slliw a4, a0, 2
// [Main]   add a4, a2, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a3, a3, 2
// [Main]   add a3, a2, a3
// [Main]   sw a4, 0(a3)
// [Main]   call move_perm1_forward.4505
// [Main]   mv a0, zero
// [Main] 
// [Main] .move_perm1_forward.4505_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .move_perm1_forward.4505_2:
// [Main]   mv a0, zero
// [Main]   j .move_perm1_forward.4505_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_arr.4497
// [Main]   .type init_arr.4497, @function
// [Main] # leaf true
// [Main] init_arr.4497:
// [Main] .init_arr.4497_0:
// [Main]   mv a3, a1
// [Main]   mv a1, a2
// [Main]   mv a2, a0
// [Main] 
// [Main] .init_arr.4497_2:
// [Main]   addi a0, a3, -1
// [Main]   blt a0, a2, .init_arr.4497_4
// [Main] 
// [Main] .init_arr.4497_3:
// [Main]   slliw a0, a2, 2
// [Main]   add a0, a1, a0
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a2, 1
// [Main]   mv a2, a0
// [Main]   j .init_arr.4497_2
// [Main] 
// [Main] .init_arr.4497_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .init_arr.4497_5:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl go_loop.4504
// [Main]   .type go_loop.4504, @function
// [Main] # leaf false
// [Main] go_loop.4504:
// [Main] .go_loop.4504_0:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv s0, a0
// [Main]   mv s5, a1
// [Main]   mv s3, a2
// [Main]   mv s1, a3
// [Main]   mv s4, a4
// [Main]   mv s2, a5
// [Main] 
// [Main] .go_loop.4504_2:
// [Main]   lw a0, 0(s1)
// [Main]   li a1, 1
// [Main]   bne a0, a1, .go_loop.4504_4
// [Main] 
// [Main] .go_loop.4504_3:
// [Main]   lw a0, 0(s5)
// [Main]   beq a0, s0, .go_loop.4504_5
// [Main] 
// [Main] .go_loop.4504_6:
// [Main]   lw a0, 0(s4)
// [Main]   sw a0, 0(s3)
// [Main]   mv a0, zero
// [Main]   mv a1, s5
// [Main]   mv a2, s4
// [Main]   call move_perm1_forward.4505
// [Main]   lw a0, 0(s5)
// [Main]   lw a1, 0(s3)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s5)
// [Main]   slliw a1, a0, 2
// [Main]   add a1, s2, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s2, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s5)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s2, a0
// [Main]   lw a0, 0(a0)
// [Main]   li a1, 1
// [Main]   bge a0, a1, .go_loop.4504_7
// [Main] 
// [Main] .go_loop.4504_8:
// [Main]   lw a0, 0(s5)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s5)
// [Main]   j .go_loop.4504_2
// [Main] 
// [Main] .go_loop.4504_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .go_loop.4504_11:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .go_loop.4504_5:
// [Main]   sw zero, 0(s1)
// [Main]   sw zero, 0(s5)
// [Main]   j .go_loop.4504_2
// [Main] 
// [Main] .go_loop.4504_7:
// [Main]   sw zero, 0(s1)
// [Main]   j .go_loop.4504_2
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.4496
// [Main]   .type main.4496, @function
// [Main] # leaf false
// [Main] main.4496:
// [Main] .main.4496_0:
// [Main]   addi sp, sp, -80
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   addi s3, s11, -36
// [Main]   andi s11, s3, -8
// [Main]   sw zero, 0(s3)
// [Main]   sw zero, 4(s3)
// [Main]   sw zero, 8(s3)
// [Main]   sw zero, 12(s3)
// [Main]   sw zero, 16(s3)
// [Main]   sw zero, 20(s3)
// [Main]   sw zero, 24(s3)
// [Main]   sw zero, 28(s3)
// [Main]   sw zero, 32(s3)
// [Main]   mv a0, zero
// [Main]   li a1, 9
// [Main]   mv a2, s3
// [Main]   call init_arr.4497
// [Main]   addi s5, s11, -36
// [Main]   andi s11, s5, -8
// [Main]   sw zero, 0(s5)
// [Main]   sw zero, 4(s5)
// [Main]   sw zero, 8(s5)
// [Main]   sw zero, 12(s5)
// [Main]   sw zero, 16(s5)
// [Main]   sw zero, 20(s5)
// [Main]   sw zero, 24(s5)
// [Main]   sw zero, 28(s5)
// [Main]   sw zero, 32(s5)
// [Main]   addi s2, s11, -36
// [Main]   andi s11, s2, -8
// [Main]   sw zero, 0(s2)
// [Main]   sw zero, 4(s2)
// [Main]   sw zero, 8(s2)
// [Main]   sw zero, 12(s2)
// [Main]   sw zero, 16(s2)
// [Main]   sw zero, 20(s2)
// [Main]   sw zero, 24(s2)
// [Main]   sw zero, 28(s2)
// [Main]   sw zero, 32(s2)
// [Main]   addi s1, s11, -4
// [Main]   andi s11, s1, -8
// [Main]   sw zero, 0(s1)
// [Main]   addi s6, s11, -4
// [Main]   andi s11, s6, -8
// [Main]   sw zero, 0(s6)
// [Main]   addi s4, s11, -4
// [Main]   andi s11, s4, -8
// [Main]   sw zero, 0(s4)
// [Main]   addi s7, s11, -4
// [Main]   andi s11, s7, -8
// [Main]   sw zero, 0(s7)
// [Main]   addi a0, s11, -4
// [Main]   andi s11, a0, -8
// [Main]   li a1, 9
// [Main]   sw a1, 0(a0)
// [Main]   mv s0, a0
// [Main] 
// [Main] .main.4496_2:
// [Main]   lw a0, 0(s0)
// [Main]   li a1, 1
// [Main]   blt a0, a1, .main.4496_4
// [Main] 
// [Main] .main.4496_3:
// [Main]   mv a0, zero
// [Main]   li a1, 9
// [Main]   mv a2, s3
// [Main]   mv a3, s5
// [Main]   call copy_perm.4498
// [Main]   mv a0, s0
// [Main]   mv a1, s2
// [Main]   call init_count.4499
// [Main]   sw zero, 0(s1)
// [Main]   lw a0, 0(s5)
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw a0, 0(a1)
// [Main]   mv a0, a1
// [Main]   mv a1, s5
// [Main]   mv a2, s1
// [Main]   call do_flip.4500
// [Main]   lw a0, 0(s6)
// [Main]   lw a1, 0(s1)
// [Main]   blt a1, a0, .main.4496_6
// [Main] 
// [Main] .main.4496_5:
// [Main]   lw a0, 0(s1)
// [Main]   sw a0, 0(s6)
// [Main]   lw a0, 0(s4)
// [Main]   lw a1, 0(s1)
// [Main]   lw a2, 0(s7)
// [Main]   li a3, 2
// [Main]   div a3, a2, a3
// [Main]   li a4, 2
// [Main]   mul a3, a3, a4
// [Main]   sub a2, a2, a3
// [Main]   li a3, 2
// [Main]   mul a2, a2, a3
// [Main]   li a3, 1
// [Main]   sub a2, a3, a2
// [Main]   mul a1, a1, a2
// [Main]   add a0, a0, a1
// [Main]   sw a0, 0(s4)
// [Main]   addi a3, s11, -4
// [Main]   andi s11, a3, -8
// [Main]   li a0, 1
// [Main]   sw a0, 0(a3)
// [Main]   addi a2, s11, -4
// [Main]   andi s11, a2, -8
// [Main]   sw zero, 0(a2)
// [Main]   li a0, 9
// [Main]   mv a1, s0
// [Main]   mv a4, s3
// [Main]   mv a5, s2
// [Main]   call go_loop.4502
// [Main]   lw a0, 0(s7)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s7)
// [Main]   j .main.4496_2
// [Main] 
// [Main] .main.4496_4:
// [Main]   lw a0, 0(s6)
// [Main]   lw a2, 0(s4)
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   sw a0, 0(a1)
// [Main]   sw a2, 4(a1)
// [Main]   lw s0, 0(a1)
// [Main]   lw a0, 4(a1)
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .main.4496_8:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   addi sp, sp, 80
// [Main]   ret
// [Main] 
// [Main] .main.4496_6:
// [Main]   lw a0, 0(s4)
// [Main]   lw a1, 0(s1)
// [Main]   lw a2, 0(s7)
// [Main]   li a3, 2
// [Main]   div a3, a2, a3
// [Main]   li a4, 2
// [Main]   mul a3, a3, a4
// [Main]   sub a2, a2, a3
// [Main]   li a3, 2
// [Main]   mul a2, a2, a3
// [Main]   li a3, 1
// [Main]   sub a2, a3, a2
// [Main]   mul a1, a1, a2
// [Main]   add a0, a0, a1
// [Main]   sw a0, 0(s4)
// [Main]   addi a3, s11, -4
// [Main]   andi s11, a3, -8
// [Main]   li a0, 1
// [Main]   sw a0, 0(a3)
// [Main]   addi a2, s11, -4
// [Main]   andi s11, a2, -8
// [Main]   sw zero, 0(a2)
// [Main]   li a0, 9
// [Main]   mv a1, s0
// [Main]   mv a4, s3
// [Main]   mv a5, s2
// [Main]   call go_loop.4504
// [Main]   lw a0, 0(s7)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s7)
// [Main]   j .main.4496_2
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl copy_perm.4498
// [Main]   .type copy_perm.4498, @function
// [Main] # leaf true
// [Main] copy_perm.4498:
// [Main] .copy_perm.4498_0:
// [Main] 
// [Main] .copy_perm.4498_2:
// [Main]   addi a4, a1, -1
// [Main]   blt a4, a0, .copy_perm.4498_4
// [Main] 
// [Main] .copy_perm.4498_3:
// [Main]   slliw a4, a0, 2
// [Main]   add a4, a2, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a5, a0, 2
// [Main]   add a5, a3, a5
// [Main]   sw a4, 0(a5)
// [Main]   addi a0, a0, 1
// [Main]   j .copy_perm.4498_2
// [Main] 
// [Main] .copy_perm.4498_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .copy_perm.4498_5:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl go_loop.4502
// [Main]   .type go_loop.4502, @function
// [Main] # leaf false
// [Main] go_loop.4502:
// [Main] .go_loop.4502_0:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv s0, a0
// [Main]   mv s5, a1
// [Main]   mv s3, a2
// [Main]   mv s1, a3
// [Main]   mv s4, a4
// [Main]   mv s2, a5
// [Main] 
// [Main] .go_loop.4502_2:
// [Main]   lw a0, 0(s1)
// [Main]   li a1, 1
// [Main]   bne a0, a1, .go_loop.4502_4
// [Main] 
// [Main] .go_loop.4502_3:
// [Main]   lw a0, 0(s5)
// [Main]   beq a0, s0, .go_loop.4502_5
// [Main] 
// [Main] .go_loop.4502_6:
// [Main]   lw a0, 0(s4)
// [Main]   sw a0, 0(s3)
// [Main]   mv a0, zero
// [Main]   mv a1, s5
// [Main]   mv a2, s4
// [Main]   call move_perm1_forward.4503
// [Main]   lw a0, 0(s5)
// [Main]   lw a1, 0(s3)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s5)
// [Main]   slliw a1, a0, 2
// [Main]   add a1, s2, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s2, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s5)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s2, a0
// [Main]   lw a0, 0(a0)
// [Main]   li a1, 1
// [Main]   bge a0, a1, .go_loop.4502_7
// [Main] 
// [Main] .go_loop.4502_8:
// [Main]   lw a0, 0(s5)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s5)
// [Main]   j .go_loop.4502_2
// [Main] 
// [Main] .go_loop.4502_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .go_loop.4502_11:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .go_loop.4502_5:
// [Main]   sw zero, 0(s1)
// [Main]   sw zero, 0(s5)
// [Main]   j .go_loop.4502_2
// [Main] 
// [Main] .go_loop.4502_7:
// [Main]   sw zero, 0(s1)
// [Main]   j .go_loop.4502_2
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_count.4499
// [Main]   .type init_count.4499, @function
// [Main] # leaf false
// [Main] init_count.4499:
// [Main] .init_count.4499_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a2, 0(a0)
// [Main]   li a3, 1
// [Main]   beq a2, a3, .init_count.4499_1
// [Main] 
// [Main] .init_count.4499_2:
// [Main]   lw a2, 0(a0)
// [Main]   addi a3, a2, -1
// [Main]   slliw a3, a3, 2
// [Main]   add a3, a1, a3
// [Main]   sw a2, 0(a3)
// [Main]   lw a2, 0(a0)
// [Main]   addi a2, a2, -1
// [Main]   sw a2, 0(a0)
// [Main]   call init_count.4499
// [Main]   mv a0, zero
// [Main] 
// [Main] .init_count.4499_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .init_count.4499_1:
// [Main]   mv a0, zero
// [Main]   j .init_count.4499_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.4496
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl move_perm1_forward.4503
// [Main]   .type move_perm1_forward.4503, @function
// [Main] # leaf false
// [Main] move_perm1_forward.4503:
// [Main] .move_perm1_forward.4503_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a3, a0
// [Main]   lw a0, 0(a1)
// [Main]   addi a0, a0, -1
// [Main]   blt a0, a3, .move_perm1_forward.4503_2
// [Main] 
// [Main] .move_perm1_forward.4503_1:
// [Main]   addi a0, a3, 1
// [Main]   slliw a4, a0, 2
// [Main]   add a4, a2, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a3, a3, 2
// [Main]   add a3, a2, a3
// [Main]   sw a4, 0(a3)
// [Main]   call move_perm1_forward.4503
// [Main]   mv a0, zero
// [Main] 
// [Main] .move_perm1_forward.4503_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .move_perm1_forward.4503_2:
// [Main]   mv a0, zero
// [Main]   j .move_perm1_forward.4503_3
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function go_loop.4502
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=FnParam(fref=f6, fpref=$f.3), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.3) -> $$f.3
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Jump(target=b2, args=[])
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=FnParam(fref=f6, fpref=$f.3), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.3) -> $$f.3
// [Wasm] Lowering control Jump(target=b2, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%21), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32), val=Insn(iref=%22))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Jump(target=b2, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.4), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.2), index=0, width=@32), val=Insn(iref=%6))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[Int32(val=0), FnParam(fref=f6, fpref=$f.1), FnParam(fref=f6, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.4) -> $$f.4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f6, fpref=$f.4), offset=Insn(iref=%9), width=@32), val=Insn(iref=%10))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f6, fpref=$f.5), offset=Insn(iref=%12), width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%14), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f6, fpref=$f.5), offset=Insn(iref=%12), width=@32), val=Insn(iref=%15))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f6, fpref=$f.5), offset=Insn(iref=%17), width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Branch(cond=Insn(iref=%19), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%2), FnParam(fref=f6, fpref=$f.0)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b11, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Lowering control Jump(target=b11, args=[Unit])
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=FnParam(fref=f6, fpref=$f.3), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Bool(val=true)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b1, args=[])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Lowered function go_loop.4502 to wasm
// [Wasm] Lowering function do_flip.4500
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f4, fpref=$f.1), offset=BlockParam(bref=b11, bpref=$b.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f4, mref=m0), index=0, width=@32), val=Insn(iref=%12))
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%14), BlockParam(bref=b11, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f4, fpref=$f.1), offset=Insn(iref=%15), width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f4, fpref=$f.1), offset=BlockParam(bref=b11, bpref=$b.0), width=@32), val=Insn(iref=%16))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%18), BlockParam(bref=b11, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f4, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f4, fpref=$f.1), offset=Insn(iref=%19), width=@32), val=Insn(iref=%20))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b11, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Jump(target=b11, args=[Insn(iref=%22)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f4, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), index=0, width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f4, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f4, fpref=$f.2), index=0, width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b14, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Lowering control Jump(target=b14, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%9), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b11, bpref=$b.0), Insn(iref=%10)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Branch(cond=Insn(iref=%11), t=b12, t_args=[], f=b13, f_args=[])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b10, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering control Jump(target=b9, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b1, args=[FnParam(fref=f4, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function do_flip.4500 to wasm
// [Wasm] Lowering function go_loop.4504
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=FnParam(fref=f8, fpref=$f.3), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.3) -> $$f.3
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f8, fpref=$f.1), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Jump(target=b2, args=[])
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=FnParam(fref=f8, fpref=$f.3), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.3) -> $$f.3
// [Wasm] Lowering control Jump(target=b2, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f8, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%21), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f8, fpref=$f.1), index=0, width=@32), val=Insn(iref=%22))
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Jump(target=b2, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f8, fpref=$f.4), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f8, fpref=$f.2), index=0, width=@32), val=Insn(iref=%6))
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Call(ty=Unit, f=f7, args=[Int32(val=0), FnParam(fref=f8, fpref=$f.1), FnParam(fref=f8, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.4) -> $$f.4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f8, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f8, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f8, fpref=$f.4), offset=Insn(iref=%9), width=@32), val=Insn(iref=%10))
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f8, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f8, fpref=$f.5), offset=Insn(iref=%12), width=@32))
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%14), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f8, fpref=$f.5), offset=Insn(iref=%12), width=@32), val=Insn(iref=%15))
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f8, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f8, fpref=$f.5), offset=Insn(iref=%17), width=@32))
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Branch(cond=Insn(iref=%19), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f8, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%2), FnParam(fref=f8, fpref=$f.0)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b11, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Lowering control Jump(target=b11, args=[Unit])
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=FnParam(fref=f8, fpref=$f.3), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Bool(val=true)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b1, args=[])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Lowered function go_loop.4504 to wasm
// [Wasm] Lowering function main.4496
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m3), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m3) -> $f9.m3
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m4), index=0, width=@32), val=Insn(iref=%20))
// [Wasm] Get Local name Mem(fref=f9, mref=m4) -> $f9.m4
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m5), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m3), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m3) -> $f9.m3
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m6), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m6) -> $f9.m6
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%24), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%26), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%24), Insn(iref=%27)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%28), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=1), Insn(iref=%29)])
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%23), Insn(iref=%30)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%22), Insn(iref=%31)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m5), index=0, width=@32), val=Insn(iref=%32))
// [Wasm] Get Local name Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m9, fills=[Init(val=Bool(val=true))])
// [Wasm] Get Local name Mem(fref=f9, mref=m9) -> $f9.m9
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m10, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m10) -> $f9.m10
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[Int32(val=9), BlockParam(bref=b2, bpref=$b.0), Mem(fref=f9, mref=m10), Mem(fref=f9, mref=m9), Mem(fref=f9, mref=m0), Mem(fref=f9, mref=m2)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Mem(fref=f9, mref=m10) -> $f9.m10
// [Wasm] Get Local name Mem(fref=f9, mref=m9) -> $f9.m9
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Get Local name Mem(fref=f9, mref=m2) -> $f9.m2
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m6), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m6) -> $f9.m6
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%37), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m6), index=0, width=@32), val=Insn(iref=%38))
// [Wasm] Get Local name Mem(fref=f9, mref=m6) -> $f9.m6
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m5), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m3), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m3) -> $f9.m3
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m6), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m6) -> $f9.m6
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%42), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%44), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%42), Insn(iref=%45)])
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%46), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=1), Insn(iref=%47)])
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%41), Insn(iref=%48)])
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%40), Insn(iref=%49)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m5), index=0, width=@32), val=Insn(iref=%50))
// [Wasm] Get Local name Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m11, fills=[Init(val=Bool(val=true))])
// [Wasm] Get Local name Mem(fref=f9, mref=m11) -> $f9.m11
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m12, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m12) -> $f9.m12
// [Wasm] Lowering insn Call(ty=Unit, f=f8, args=[Int32(val=9), BlockParam(bref=b2, bpref=$b.0), Mem(fref=f9, mref=m12), Mem(fref=f9, mref=m11), Mem(fref=f9, mref=m0), Mem(fref=f9, mref=m2)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Mem(fref=f9, mref=m12) -> $f9.m12
// [Wasm] Get Local name Mem(fref=f9, mref=m11) -> $f9.m11
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Get Local name Mem(fref=f9, mref=m2) -> $f9.m2
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m6), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m6) -> $f9.m6
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%55), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m6), index=0, width=@32), val=Insn(iref=%56))
// [Wasm] Get Local name Mem(fref=f9, mref=m6) -> $f9.m6
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[Int32(val=0), Int32(val=9), Mem(fref=f9, mref=m0), Mem(fref=f9, mref=m1)])
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[BlockParam(bref=b2, bpref=$b.0), Mem(fref=f9, mref=m2)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Mem(fref=f9, mref=m2) -> $f9.m2
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m3), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name Mem(fref=f9, mref=m3) -> $f9.m3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m1), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m8, fills=[Init(val=Insn(iref=%14))])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Mem(fref=f9, mref=m8) -> $f9.m8
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Mem(fref=f9, mref=m8), Mem(fref=f9, mref=m1), Mem(fref=f9, mref=m3)])
// [Wasm] Get Local name Mem(fref=f9, mref=m8) -> $f9.m8
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Get Local name Mem(fref=f9, mref=m3) -> $f9.m3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m4), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m4) -> $f9.m4
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m3), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m3) -> $f9.m3
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%17), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Branch(cond=Insn(iref=%19), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Return(args=[BlockParam(bref=b8, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m4), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m4) -> $f9.m4
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m5), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m13, fills=[Field(index=0, val=Insn(iref=%58)), Field(index=1, val=Insn(iref=%59))])
// [Wasm] Get Local name Mem(fref=f9, mref=m13) -> $f9.m13
// [Wasm] Get Local name Mem(fref=f9, mref=m13) -> $f9.m13
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Get Local name Mem(fref=f9, mref=m13) -> $f9.m13
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m13), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Mem(fref=f9, mref=m13) -> $f9.m13
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m13), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Mem(fref=f9, mref=m13) -> $f9.m13
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%62)])
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%61)])
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Lowering control Jump(target=b8, args=[Insn(iref=%64)])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Branch(cond=Insn(iref=%10), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[Int32(val=0), Int32(val=9), Mem(fref=f9, mref=m0)])
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m2) -> $f9.m2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m3, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m3) -> $f9.m3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m4, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m4) -> $f9.m4
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m5, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m6, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m6) -> $f9.m6
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m7, fills=[Init(val=Int32(val=9))])
// [Wasm] Get Local name Mem(fref=f9, mref=m7) -> $f9.m7
// [Wasm] Lowering control Jump(target=b1, args=[Mem(fref=f9, mref=m7)])
// [Wasm] Get Local name Mem(fref=f9, mref=m7) -> $f9.m7
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Mem(fref=f9, mref=m11) -> $f9.m11
// [Wasm] Local Mem(fref=f9, mref=m9) -> $f9.m9
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Mem(fref=f9, mref=m13) -> $f9.m13
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%50) -> $%50
// [Wasm] Local Mem(fref=f9, mref=m12) -> $f9.m12
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Mem(fref=f9, mref=m2) -> $f9.m2
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local Insn(iref=%56) -> $%56
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%58) -> $%58
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Local Mem(fref=f9, mref=m6) -> $f9.m6
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%62) -> $%62
// [Wasm] Local Mem(fref=f9, mref=m4) -> $f9.m4
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Mem(fref=f9, mref=m10) -> $f9.m10
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local Mem(fref=f9, mref=m7) -> $f9.m7
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%61) -> $%61
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Local Insn(iref=%55) -> $%55
// [Wasm] Local Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Mem(fref=f9, mref=m8) -> $f9.m8
// [Wasm] Local Mem(fref=f9, mref=m3) -> $f9.m3
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Lowered function main.4496 to wasm
// [Wasm] Lowering function init_arr.4497
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.2), offset=BlockParam(bref=b2, bpref=$b.0), width=@32), val=BlockParam(bref=b2, bpref=$b.0))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f0, fpref=$f.1), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b2, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b1, args=[FnParam(fref=f0, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function init_arr.4497 to wasm
// [Wasm] Lowering function copy_perm.4498
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f1, fpref=$f.2), offset=BlockParam(bref=b2, bpref=$b.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f1, fpref=$f.3), offset=BlockParam(bref=b2, bpref=$b.0), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f1, fpref=$f.1), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b2, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b1, args=[FnParam(fref=f1, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function copy_perm.4498 to wasm
// [Wasm] Lowering function move_perm1_forward.4503
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f5, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f5, fpref=$f.2), offset=Insn(iref=%3), width=@32))
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f5, fpref=$f.2), offset=FnParam(fref=f5, fpref=$f.0), width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[Insn(iref=%3), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f5, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f5, fpref=$f.0), Insn(iref=%1)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function move_perm1_forward.4503 to wasm
// [Wasm] Lowering function init_count.4499
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%2), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.1), offset=Insn(iref=%3), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%6), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.0), index=0, width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function init_count.4499 to wasm
// [Wasm] Lowering function move_perm1_forward.4505
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f7, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f7, fpref=$f.2), offset=Insn(iref=%3), width=@32))
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f7, fpref=$f.2), offset=FnParam(fref=f7, fpref=$f.0), width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Call(ty=Unit, f=f7, args=[Insn(iref=%3), FnParam(fref=f7, fpref=$f.1), FnParam(fref=f7, fpref=$f.2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.2) -> $$f.2
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f7, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f7, fpref=$f.0), Insn(iref=%1)])
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function move_perm1_forward.4505 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f9, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] func_tre: fannkuch.1 false
// [KnfOpt] func_tre: gen_perm1.3 false
// [KnfOpt] func_tre: init_arr.7 true
// [KnfOpt] func_tre: compute.35 true
// [KnfOpt] func_tre: copy_perm.40 true
// [KnfOpt] func_tre: init_count.50 false
// [KnfOpt] func_tre: do_flip.76 true
// [KnfOpt] func_tre: flip_loop.84 true
// [KnfOpt] func_tre: go_loop.154 true
// [KnfOpt] func_tre: move_perm1_forward.169 false
// [KnfOpt] func_tre: main.223 false
// [KnfOpt] freq: {fannkuch.1: Once, gen_perm1.3: Once, init_arr.7: Once, init_arr.229: Many(2), compute.35: Once, compute.367: Many(2), copy_perm.372: Once, copy_perm.374: Many(2), init_count.384: Many(2), do_flip.410: Once, do_flip.412: Many(2), flip_loop.420: Once, flip_loop.422: Many(2), go_loop.492: Once, go_loop.493: Many(2), move_perm1_forward.510: Many(2), main.223: Once}
// [KnfOpt] Knf inline Some(init_arr) let _15: Unit = Unit
// [KnfOpt] Var(arr.6)
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Knf inline Some(flip_loop) let _445: Unit = Unit
// [KnfOpt] let _446: Int = Int(0)
// [KnfOpt] let _447: Int = Int(0)
// [KnfOpt] let _448: Int = Get perm.18[_447]
// [KnfOpt] let _449: Unit = Put k.413[_446] = _448
// [KnfOpt] let _450: Int = Int(0)
// [KnfOpt] let _451: Int = Int(0)
// [KnfOpt] let _452: Int = Get flips.23[_451]
// [KnfOpt] let _453: Int = Int(1)
// [KnfOpt] let _454: Int = Add(_452, _453)
// [KnfOpt] let _455: Unit = Put flips.23[_450] = _454
// [KnfOpt] Jump(do_flip.412, [k.413, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Knf inline Some(go_loop) let _550: Unit = Unit
// [KnfOpt] let _551: Int = Int(0)
// [KnfOpt] let _552: Int = Int(0)
// [KnfOpt] let _553: Int = Get nperm.32[_552]
// [KnfOpt] let _554: Int = Int(1)
// [KnfOpt] let _555: Int = Add(_553, _554)
// [KnfOpt] let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt] Jump(compute.367, [r.368, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Knf inline Some(go_loop) let _550: Unit = Unit
// [KnfOpt] let _551: Int = Int(0)
// [KnfOpt] let _552: Int = Int(0)
// [KnfOpt] let _553: Int = Get nperm.32[_552]
// [KnfOpt] let _554: Int = Int(1)
// [KnfOpt] let _555: Int = Add(_553, _554)
// [KnfOpt] let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt] Jump(compute.367, [r.368, ])
// [KnfOpt] Knf inline Some(do_flip) let _456: Unit = Unit
// [KnfOpt] let _457: Int = Int(0)
// [KnfOpt] let _458: Int = Get max_flips.26[_457]
// [KnfOpt] let _459: Int = Int(0)
// [KnfOpt] let _460: Int = Get flips.23[_459]
// [KnfOpt] if (_458 <= _460) then {
// [KnfOpt]   let _462: Int = Int(0)
// [KnfOpt]   let _463: Int = Int(0)
// [KnfOpt]   let _464: Int = Get flips.23[_463]
// [KnfOpt]   let _461: Unit = Put max_flips.26[_462] = _464
// [KnfOpt]   let _465: Int = Int(0)
// [KnfOpt]   let _466: Int = Int(0)
// [KnfOpt]   let _467: Int = Get check_sum.29[_466]
// [KnfOpt]   let _468: Int = Int(0)
// [KnfOpt]   let _469: Int = Get flips.23[_468]
// [KnfOpt]   let _470: Int = Int(1)
// [KnfOpt]   let _471: Int = Int(0)
// [KnfOpt]   let _472: Int = Get nperm.32[_471]
// [KnfOpt]   let _473: Int = Int(0)
// [KnfOpt]   let _474: Int = Get nperm.32[_473]
// [KnfOpt]   let _475: Int = Int(2)
// [KnfOpt]   let _476: Int = Div(_474, _475)
// [KnfOpt]   let _477: Int = Int(2)
// [KnfOpt]   let _478: Int = Mul(_476, _477)
// [KnfOpt]   let _479: Int = Sub(_472, _478)
// [KnfOpt]   let _480: Int = Int(2)
// [KnfOpt]   let _481: Int = Mul(_479, _480)
// [KnfOpt]   let _482: Int = Sub(_470, _481)
// [KnfOpt]   let _483: Int = Mul(_469, _482)
// [KnfOpt]   let _484: Int = Add(_467, _483)
// [KnfOpt]   let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]   let _486: Int = Int(1)
// [KnfOpt]   let _487: Bool = Bool(true)
// [KnfOpt]   let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]   let _489: Int = Int(1)
// [KnfOpt]   let _490: Int = Int(0)
// [KnfOpt]   let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]   let rec go_loop.492: Unit = () {
// [KnfOpt]     let join go_loop.493: Unit = () {
// [KnfOpt]       let _494: Int = Int(0)
// [KnfOpt]       let _495: Bool = Get go.488[_494]
// [KnfOpt]       let _496: Bool = Bool(true)
// [KnfOpt]       if (_495 == _496) then {
// [KnfOpt]         let _497: Int = Int(0)
// [KnfOpt]         let _498: Int = Get r.368[_497]
// [KnfOpt]         if (_498 == n.2) then {
// [KnfOpt]           let _500: Int = Int(0)
// [KnfOpt]           let _501: Bool = Bool(false)
// [KnfOpt]           let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]           let _503: Int = Int(0)
// [KnfOpt]           let _504: Int = Int(0)
// [KnfOpt]           let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]           let _499: Unit = Unit
// [KnfOpt]           Jump(go_loop.493, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _506: Int = Int(0)
// [KnfOpt]           let _507: Int = Int(0)
// [KnfOpt]           let _508: Int = Get perm1.16[_507]
// [KnfOpt]           let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]           let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]             let _512: Int = Int(0)
// [KnfOpt]             let _513: Int = Get r.368[_512]
// [KnfOpt]             let _514: Int = Int(1)
// [KnfOpt]             let _515: Int = Sub(_513, _514)
// [KnfOpt]             if (i.511 <= _515) then {
// [KnfOpt]               let _516: Int = Int(1)
// [KnfOpt]               let _517: Int = Add(i.511, _516)
// [KnfOpt]               let _518: Int = Get perm1.16[_517]
// [KnfOpt]               let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]               let _520: Int = Int(1)
// [KnfOpt]               let _521: Int = Add(i.511, _520)
// [KnfOpt]               let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _523: Int = Int(0)
// [KnfOpt]           let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]           let _525: Int = Int(0)
// [KnfOpt]           let _526: Int = Get r.368[_525]
// [KnfOpt]           let _527: Int = Int(0)
// [KnfOpt]           let _528: Int = Get t.491[_527]
// [KnfOpt]           let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]           let _530: Int = Int(0)
// [KnfOpt]           let _531: Int = Get r.368[_530]
// [KnfOpt]           let _532: Int = Int(0)
// [KnfOpt]           let _533: Int = Get r.368[_532]
// [KnfOpt]           let _534: Int = Get count.20[_533]
// [KnfOpt]           let _535: Int = Int(1)
// [KnfOpt]           let _536: Int = Sub(_534, _535)
// [KnfOpt]           let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]           let _538: Int = Int(1)
// [KnfOpt]           let _539: Int = Int(0)
// [KnfOpt]           let _540: Int = Get r.368[_539]
// [KnfOpt]           let _541: Int = Get count.20[_540]
// [KnfOpt]           if (_538 <= _541) then {
// [KnfOpt]             let _543: Int = Int(0)
// [KnfOpt]             let _544: Bool = Bool(false)
// [KnfOpt]             let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _545: Int = Int(0)
// [KnfOpt]             let _546: Int = Int(0)
// [KnfOpt]             let _547: Int = Get r.368[_546]
// [KnfOpt]             let _548: Int = Int(1)
// [KnfOpt]             let _549: Int = Add(_547, _548)
// [KnfOpt]             let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.493, [])
// [KnfOpt]   }
// [KnfOpt]   let join go_loop.586: Unit = () {
// [KnfOpt]     let _587: Int = Int(0)
// [KnfOpt]     let _588: Bool = Get go.488[_587]
// [KnfOpt]     let _589: Bool = Bool(true)
// [KnfOpt]     if (_588 == _589) then {
// [KnfOpt]       let _590: Int = Int(0)
// [KnfOpt]       let _591: Int = Get r.368[_590]
// [KnfOpt]       if (_591 == n.2) then {
// [KnfOpt]         let _593: Int = Int(0)
// [KnfOpt]         let _594: Bool = Bool(false)
// [KnfOpt]         let _595: Unit = Put go.488[_593] = _594
// [KnfOpt]         let _596: Int = Int(0)
// [KnfOpt]         let _597: Int = Int(0)
// [KnfOpt]         let _598: Unit = Put r.368[_596] = _597
// [KnfOpt]         let _592: Unit = Unit
// [KnfOpt]         Jump(go_loop.586, [])
// [KnfOpt]       } else {
// [KnfOpt]         let _599: Int = Int(0)
// [KnfOpt]         let _600: Int = Int(0)
// [KnfOpt]         let _601: Int = Get perm1.16[_600]
// [KnfOpt]         let _602: Unit = Put t.491[_599] = _601
// [KnfOpt]         let rec move_perm1_forward.603: Unit = (i.604: Int) {
// [KnfOpt]           let _605: Int = Int(0)
// [KnfOpt]           let _606: Int = Get r.368[_605]
// [KnfOpt]           let _607: Int = Int(1)
// [KnfOpt]           let _608: Int = Sub(_606, _607)
// [KnfOpt]           if (i.604 <= _608) then {
// [KnfOpt]             let _609: Int = Int(1)
// [KnfOpt]             let _610: Int = Add(i.604, _609)
// [KnfOpt]             let _611: Int = Get perm1.16[_610]
// [KnfOpt]             let _612: Unit = Put perm1.16[i.604] = _611
// [KnfOpt]             let _613: Int = Int(1)
// [KnfOpt]             let _614: Int = Add(i.604, _613)
// [KnfOpt]             let _615: Unit = Apply(move_perm1_forward.603, [_614, ])
// [KnfOpt]             Unit
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         let _616: Int = Int(0)
// [KnfOpt]         let _617: Unit = Apply(move_perm1_forward.603, [_616, ])
// [KnfOpt]         let _618: Int = Int(0)
// [KnfOpt]         let _619: Int = Get r.368[_618]
// [KnfOpt]         let _620: Int = Int(0)
// [KnfOpt]         let _621: Int = Get t.491[_620]
// [KnfOpt]         let _622: Unit = Put perm1.16[_619] = _621
// [KnfOpt]         let _623: Int = Int(0)
// [KnfOpt]         let _624: Int = Get r.368[_623]
// [KnfOpt]         let _625: Int = Int(0)
// [KnfOpt]         let _626: Int = Get r.368[_625]
// [KnfOpt]         let _627: Int = Get count.20[_626]
// [KnfOpt]         let _628: Int = Int(1)
// [KnfOpt]         let _629: Int = Sub(_627, _628)
// [KnfOpt]         let _630: Unit = Put count.20[_624] = _629
// [KnfOpt]         let _631: Int = Int(1)
// [KnfOpt]         let _632: Int = Int(0)
// [KnfOpt]         let _633: Int = Get r.368[_632]
// [KnfOpt]         let _634: Int = Get count.20[_633]
// [KnfOpt]         if (_631 <= _634) then {
// [KnfOpt]           let _636: Int = Int(0)
// [KnfOpt]           let _637: Bool = Bool(false)
// [KnfOpt]           let _635: Unit = Put go.488[_636] = _637
// [KnfOpt]           let _592: Unit = Unit
// [KnfOpt]           Jump(go_loop.586, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _638: Int = Int(0)
// [KnfOpt]           let _639: Int = Int(0)
// [KnfOpt]           let _640: Int = Get r.368[_639]
// [KnfOpt]           let _641: Int = Int(1)
// [KnfOpt]           let _642: Int = Add(_640, _641)
// [KnfOpt]           let _635: Unit = Put r.368[_638] = _642
// [KnfOpt]           let _592: Unit = Unit
// [KnfOpt]           Jump(go_loop.586, [])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]     } else {
// [KnfOpt]       let _550: Unit = Unit
// [KnfOpt]       let _551: Int = Int(0)
// [KnfOpt]       let _552: Int = Int(0)
// [KnfOpt]       let _553: Int = Get nperm.32[_552]
// [KnfOpt]       let _554: Int = Int(1)
// [KnfOpt]       let _555: Int = Add(_553, _554)
// [KnfOpt]       let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]       Jump(compute.367, [r.368, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(go_loop.586, [])
// [KnfOpt] } else {
// [KnfOpt]   let _461: Unit = Unit
// [KnfOpt]   let _465: Int = Int(0)
// [KnfOpt]   let _466: Int = Int(0)
// [KnfOpt]   let _467: Int = Get check_sum.29[_466]
// [KnfOpt]   let _468: Int = Int(0)
// [KnfOpt]   let _469: Int = Get flips.23[_468]
// [KnfOpt]   let _470: Int = Int(1)
// [KnfOpt]   let _471: Int = Int(0)
// [KnfOpt]   let _472: Int = Get nperm.32[_471]
// [KnfOpt]   let _473: Int = Int(0)
// [KnfOpt]   let _474: Int = Get nperm.32[_473]
// [KnfOpt]   let _475: Int = Int(2)
// [KnfOpt]   let _476: Int = Div(_474, _475)
// [KnfOpt]   let _477: Int = Int(2)
// [KnfOpt]   let _478: Int = Mul(_476, _477)
// [KnfOpt]   let _479: Int = Sub(_472, _478)
// [KnfOpt]   let _480: Int = Int(2)
// [KnfOpt]   let _481: Int = Mul(_479, _480)
// [KnfOpt]   let _482: Int = Sub(_470, _481)
// [KnfOpt]   let _483: Int = Mul(_469, _482)
// [KnfOpt]   let _484: Int = Add(_467, _483)
// [KnfOpt]   let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]   let _486: Int = Int(1)
// [KnfOpt]   let _487: Bool = Bool(true)
// [KnfOpt]   let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]   let _489: Int = Int(1)
// [KnfOpt]   let _490: Int = Int(0)
// [KnfOpt]   let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]   let rec go_loop.492: Unit = () {
// [KnfOpt]     let join go_loop.493: Unit = () {
// [KnfOpt]       let _494: Int = Int(0)
// [KnfOpt]       let _495: Bool = Get go.488[_494]
// [KnfOpt]       let _496: Bool = Bool(true)
// [KnfOpt]       if (_495 == _496) then {
// [KnfOpt]         let _497: Int = Int(0)
// [KnfOpt]         let _498: Int = Get r.368[_497]
// [KnfOpt]         if (_498 == n.2) then {
// [KnfOpt]           let _500: Int = Int(0)
// [KnfOpt]           let _501: Bool = Bool(false)
// [KnfOpt]           let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]           let _503: Int = Int(0)
// [KnfOpt]           let _504: Int = Int(0)
// [KnfOpt]           let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]           let _499: Unit = Unit
// [KnfOpt]           Jump(go_loop.493, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _506: Int = Int(0)
// [KnfOpt]           let _507: Int = Int(0)
// [KnfOpt]           let _508: Int = Get perm1.16[_507]
// [KnfOpt]           let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]           let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]             let _512: Int = Int(0)
// [KnfOpt]             let _513: Int = Get r.368[_512]
// [KnfOpt]             let _514: Int = Int(1)
// [KnfOpt]             let _515: Int = Sub(_513, _514)
// [KnfOpt]             if (i.511 <= _515) then {
// [KnfOpt]               let _516: Int = Int(1)
// [KnfOpt]               let _517: Int = Add(i.511, _516)
// [KnfOpt]               let _518: Int = Get perm1.16[_517]
// [KnfOpt]               let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]               let _520: Int = Int(1)
// [KnfOpt]               let _521: Int = Add(i.511, _520)
// [KnfOpt]               let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _523: Int = Int(0)
// [KnfOpt]           let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]           let _525: Int = Int(0)
// [KnfOpt]           let _526: Int = Get r.368[_525]
// [KnfOpt]           let _527: Int = Int(0)
// [KnfOpt]           let _528: Int = Get t.491[_527]
// [KnfOpt]           let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]           let _530: Int = Int(0)
// [KnfOpt]           let _531: Int = Get r.368[_530]
// [KnfOpt]           let _532: Int = Int(0)
// [KnfOpt]           let _533: Int = Get r.368[_532]
// [KnfOpt]           let _534: Int = Get count.20[_533]
// [KnfOpt]           let _535: Int = Int(1)
// [KnfOpt]           let _536: Int = Sub(_534, _535)
// [KnfOpt]           let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]           let _538: Int = Int(1)
// [KnfOpt]           let _539: Int = Int(0)
// [KnfOpt]           let _540: Int = Get r.368[_539]
// [KnfOpt]           let _541: Int = Get count.20[_540]
// [KnfOpt]           if (_538 <= _541) then {
// [KnfOpt]             let _543: Int = Int(0)
// [KnfOpt]             let _544: Bool = Bool(false)
// [KnfOpt]             let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _545: Int = Int(0)
// [KnfOpt]             let _546: Int = Int(0)
// [KnfOpt]             let _547: Int = Get r.368[_546]
// [KnfOpt]             let _548: Int = Int(1)
// [KnfOpt]             let _549: Int = Add(_547, _548)
// [KnfOpt]             let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.493, [])
// [KnfOpt]   }
// [KnfOpt]   let join go_loop.643: Unit = () {
// [KnfOpt]     let _644: Int = Int(0)
// [KnfOpt]     let _645: Bool = Get go.488[_644]
// [KnfOpt]     let _646: Bool = Bool(true)
// [KnfOpt]     if (_645 == _646) then {
// [KnfOpt]       let _647: Int = Int(0)
// [KnfOpt]       let _648: Int = Get r.368[_647]
// [KnfOpt]       if (_648 == n.2) then {
// [KnfOpt]         let _650: Int = Int(0)
// [KnfOpt]         let _651: Bool = Bool(false)
// [KnfOpt]         let _652: Unit = Put go.488[_650] = _651
// [KnfOpt]         let _653: Int = Int(0)
// [KnfOpt]         let _654: Int = Int(0)
// [KnfOpt]         let _655: Unit = Put r.368[_653] = _654
// [KnfOpt]         let _649: Unit = Unit
// [KnfOpt]         Jump(go_loop.643, [])
// [KnfOpt]       } else {
// [KnfOpt]         let _656: Int = Int(0)
// [KnfOpt]         let _657: Int = Int(0)
// [KnfOpt]         let _658: Int = Get perm1.16[_657]
// [KnfOpt]         let _659: Unit = Put t.491[_656] = _658
// [KnfOpt]         let rec move_perm1_forward.660: Unit = (i.661: Int) {
// [KnfOpt]           let _662: Int = Int(0)
// [KnfOpt]           let _663: Int = Get r.368[_662]
// [KnfOpt]           let _664: Int = Int(1)
// [KnfOpt]           let _665: Int = Sub(_663, _664)
// [KnfOpt]           if (i.661 <= _665) then {
// [KnfOpt]             let _666: Int = Int(1)
// [KnfOpt]             let _667: Int = Add(i.661, _666)
// [KnfOpt]             let _668: Int = Get perm1.16[_667]
// [KnfOpt]             let _669: Unit = Put perm1.16[i.661] = _668
// [KnfOpt]             let _670: Int = Int(1)
// [KnfOpt]             let _671: Int = Add(i.661, _670)
// [KnfOpt]             let _672: Unit = Apply(move_perm1_forward.660, [_671, ])
// [KnfOpt]             Unit
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         let _673: Int = Int(0)
// [KnfOpt]         let _674: Unit = Apply(move_perm1_forward.660, [_673, ])
// [KnfOpt]         let _675: Int = Int(0)
// [KnfOpt]         let _676: Int = Get r.368[_675]
// [KnfOpt]         let _677: Int = Int(0)
// [KnfOpt]         let _678: Int = Get t.491[_677]
// [KnfOpt]         let _679: Unit = Put perm1.16[_676] = _678
// [KnfOpt]         let _680: Int = Int(0)
// [KnfOpt]         let _681: Int = Get r.368[_680]
// [KnfOpt]         let _682: Int = Int(0)
// [KnfOpt]         let _683: Int = Get r.368[_682]
// [KnfOpt]         let _684: Int = Get count.20[_683]
// [KnfOpt]         let _685: Int = Int(1)
// [KnfOpt]         let _686: Int = Sub(_684, _685)
// [KnfOpt]         let _687: Unit = Put count.20[_681] = _686
// [KnfOpt]         let _688: Int = Int(1)
// [KnfOpt]         let _689: Int = Int(0)
// [KnfOpt]         let _690: Int = Get r.368[_689]
// [KnfOpt]         let _691: Int = Get count.20[_690]
// [KnfOpt]         if (_688 <= _691) then {
// [KnfOpt]           let _693: Int = Int(0)
// [KnfOpt]           let _694: Bool = Bool(false)
// [KnfOpt]           let _692: Unit = Put go.488[_693] = _694
// [KnfOpt]           let _649: Unit = Unit
// [KnfOpt]           Jump(go_loop.643, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _695: Int = Int(0)
// [KnfOpt]           let _696: Int = Int(0)
// [KnfOpt]           let _697: Int = Get r.368[_696]
// [KnfOpt]           let _698: Int = Int(1)
// [KnfOpt]           let _699: Int = Add(_697, _698)
// [KnfOpt]           let _692: Unit = Put r.368[_695] = _699
// [KnfOpt]           let _649: Unit = Unit
// [KnfOpt]           Jump(go_loop.643, [])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]     } else {
// [KnfOpt]       let _550: Unit = Unit
// [KnfOpt]       let _551: Int = Int(0)
// [KnfOpt]       let _552: Int = Int(0)
// [KnfOpt]       let _553: Int = Get nperm.32[_552]
// [KnfOpt]       let _554: Int = Int(1)
// [KnfOpt]       let _555: Int = Add(_553, _554)
// [KnfOpt]       let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]       Jump(compute.367, [r.368, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(go_loop.643, [])
// [KnfOpt] }
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Knf inline Some(go_loop) let _550: Unit = Unit
// [KnfOpt] let _551: Int = Int(0)
// [KnfOpt] let _552: Int = Int(0)
// [KnfOpt] let _553: Int = Get nperm.32[_552]
// [KnfOpt] let _554: Int = Int(1)
// [KnfOpt] let _555: Int = Add(_553, _554)
// [KnfOpt] let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt] Jump(compute.367, [r.368, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Knf inline Some(go_loop) let _550: Unit = Unit
// [KnfOpt] let _551: Int = Int(0)
// [KnfOpt] let _552: Int = Int(0)
// [KnfOpt] let _553: Int = Get nperm.32[_552]
// [KnfOpt] let _554: Int = Int(1)
// [KnfOpt] let _555: Int = Add(_553, _554)
// [KnfOpt] let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt] Jump(compute.367, [r.368, ])
// [KnfOpt] Knf inline Some(copy_perm) let _383: Unit = Unit
// [KnfOpt] let rec init_count.384: Unit = () {
// [KnfOpt]   let _385: Int = Int(0)
// [KnfOpt]   let _386: Int = Get r.368[_385]
// [KnfOpt]   let _387: Int = Int(1)
// [KnfOpt]   if (_386 == _387) then {
// [KnfOpt]     let _388: Unit = Unit
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _389: Int = Int(0)
// [KnfOpt]     let _390: Int = Get r.368[_389]
// [KnfOpt]     let _391: Int = Int(1)
// [KnfOpt]     let _392: Int = Sub(_390, _391)
// [KnfOpt]     let _393: Int = Int(0)
// [KnfOpt]     let _394: Int = Get r.368[_393]
// [KnfOpt]     let _395: Unit = Put count.20[_392] = _394
// [KnfOpt]     let _396: Int = Int(0)
// [KnfOpt]     let _397: Int = Int(0)
// [KnfOpt]     let _398: Int = Get r.368[_397]
// [KnfOpt]     let _399: Int = Int(1)
// [KnfOpt]     let _400: Int = Sub(_398, _399)
// [KnfOpt]     let _401: Unit = Put r.368[_396] = _400
// [KnfOpt]     let _388: Unit = Apply(init_count.384, [])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _402: Unit = Apply(init_count.384, [])
// [KnfOpt] let _403: Int = Int(0)
// [KnfOpt] let _404: Int = Int(0)
// [KnfOpt] let _405: Unit = Put flips.23[_403] = _404
// [KnfOpt] let _406: Int = Int(1)
// [KnfOpt] let _407: Int = Int(0)
// [KnfOpt] let _408: Int = Get perm.18[_407]
// [KnfOpt] let k.409: Array(Int) = ExtApply(minimbt_create_array, [_406, _408, ])
// [KnfOpt] let rec do_flip.410: Unit = (k.411: Array(Int)) {
// [KnfOpt]   let join do_flip.412: Unit = (k.413: Array(Int)) {
// [KnfOpt]     let _414: Int = Int(0)
// [KnfOpt]     let _415: Int = Get k.413[_414]
// [KnfOpt]     let _416: Int = Int(0)
// [KnfOpt]     if (_415 == _416) then {
// [KnfOpt]       Unit
// [KnfOpt]     } else {
// [KnfOpt]       let _417: Int = Int(1)
// [KnfOpt]       let _418: Int = Int(0)
// [KnfOpt]       let t.419: Array(Int) = ExtApply(minimbt_create_array, [_417, _418, ])
// [KnfOpt]       let rec flip_loop.420: Unit = (i.421: Int) {
// [KnfOpt]         let join flip_loop.422: Unit = (i.423: Int) {
// [KnfOpt]           let _424: Int = Int(0)
// [KnfOpt]           let _425: Int = Get k.413[_424]
// [KnfOpt]           let _426: Int = Int(2)
// [KnfOpt]           let _427: Int = Div(_425, _426)
// [KnfOpt]           if (i.423 <= _427) then {
// [KnfOpt]             let _428: Int = Int(0)
// [KnfOpt]             let _429: Int = Get perm.18[i.423]
// [KnfOpt]             let _430: Unit = Put t.419[_428] = _429
// [KnfOpt]             let _431: Int = Int(0)
// [KnfOpt]             let _432: Int = Get k.413[_431]
// [KnfOpt]             let _433: Int = Sub(_432, i.423)
// [KnfOpt]             let _434: Int = Get perm.18[_433]
// [KnfOpt]             let _435: Unit = Put perm.18[i.423] = _434
// [KnfOpt]             let _436: Int = Int(0)
// [KnfOpt]             let _437: Int = Get k.413[_436]
// [KnfOpt]             let _438: Int = Sub(_437, i.423)
// [KnfOpt]             let _439: Int = Int(0)
// [KnfOpt]             let _440: Int = Get t.419[_439]
// [KnfOpt]             let _441: Unit = Put perm.18[_438] = _440
// [KnfOpt]             let _442: Int = Int(1)
// [KnfOpt]             let _443: Int = Add(i.423, _442)
// [KnfOpt]             Jump(flip_loop.422, [_443, ])
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(flip_loop.422, [i.421, ])
// [KnfOpt]       }
// [KnfOpt]       let _444: Int = Int(0)
// [KnfOpt]       let join flip_loop.564: Unit = (i.565: Int) {
// [KnfOpt]         let _566: Int = Int(0)
// [KnfOpt]         let _567: Int = Get k.413[_566]
// [KnfOpt]         let _568: Int = Int(2)
// [KnfOpt]         let _569: Int = Div(_567, _568)
// [KnfOpt]         if (i.565 <= _569) then {
// [KnfOpt]           let _570: Int = Int(0)
// [KnfOpt]           let _571: Int = Get perm.18[i.565]
// [KnfOpt]           let _572: Unit = Put t.419[_570] = _571
// [KnfOpt]           let _573: Int = Int(0)
// [KnfOpt]           let _574: Int = Get k.413[_573]
// [KnfOpt]           let _575: Int = Sub(_574, i.565)
// [KnfOpt]           let _576: Int = Get perm.18[_575]
// [KnfOpt]           let _577: Unit = Put perm.18[i.565] = _576
// [KnfOpt]           let _578: Int = Int(0)
// [KnfOpt]           let _579: Int = Get k.413[_578]
// [KnfOpt]           let _580: Int = Sub(_579, i.565)
// [KnfOpt]           let _581: Int = Int(0)
// [KnfOpt]           let _582: Int = Get t.419[_581]
// [KnfOpt]           let _583: Unit = Put perm.18[_580] = _582
// [KnfOpt]           let _584: Int = Int(1)
// [KnfOpt]           let _585: Int = Add(i.565, _584)
// [KnfOpt]           Jump(flip_loop.564, [_585, ])
// [KnfOpt]         } else {
// [KnfOpt]           let _445: Unit = Unit
// [KnfOpt]           let _446: Int = Int(0)
// [KnfOpt]           let _447: Int = Int(0)
// [KnfOpt]           let _448: Int = Get perm.18[_447]
// [KnfOpt]           let _449: Unit = Put k.413[_446] = _448
// [KnfOpt]           let _450: Int = Int(0)
// [KnfOpt]           let _451: Int = Int(0)
// [KnfOpt]           let _452: Int = Get flips.23[_451]
// [KnfOpt]           let _453: Int = Int(1)
// [KnfOpt]           let _454: Int = Add(_452, _453)
// [KnfOpt]           let _455: Unit = Put flips.23[_450] = _454
// [KnfOpt]           Jump(do_flip.412, [k.413, ])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(flip_loop.564, [_444, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(do_flip.412, [k.411, ])
// [KnfOpt] }
// [KnfOpt] let join do_flip.700: Unit = (k.701: Array(Int)) {
// [KnfOpt]   let _702: Int = Int(0)
// [KnfOpt]   let _703: Int = Get k.701[_702]
// [KnfOpt]   let _704: Int = Int(0)
// [KnfOpt]   if (_703 == _704) then {
// [KnfOpt]     let _456: Unit = Unit
// [KnfOpt]     let _457: Int = Int(0)
// [KnfOpt]     let _458: Int = Get max_flips.26[_457]
// [KnfOpt]     let _459: Int = Int(0)
// [KnfOpt]     let _460: Int = Get flips.23[_459]
// [KnfOpt]     if (_458 <= _460) then {
// [KnfOpt]       let _462: Int = Int(0)
// [KnfOpt]       let _463: Int = Int(0)
// [KnfOpt]       let _464: Int = Get flips.23[_463]
// [KnfOpt]       let _461: Unit = Put max_flips.26[_462] = _464
// [KnfOpt]       let _465: Int = Int(0)
// [KnfOpt]       let _466: Int = Int(0)
// [KnfOpt]       let _467: Int = Get check_sum.29[_466]
// [KnfOpt]       let _468: Int = Int(0)
// [KnfOpt]       let _469: Int = Get flips.23[_468]
// [KnfOpt]       let _470: Int = Int(1)
// [KnfOpt]       let _471: Int = Int(0)
// [KnfOpt]       let _472: Int = Get nperm.32[_471]
// [KnfOpt]       let _473: Int = Int(0)
// [KnfOpt]       let _474: Int = Get nperm.32[_473]
// [KnfOpt]       let _475: Int = Int(2)
// [KnfOpt]       let _476: Int = Div(_474, _475)
// [KnfOpt]       let _477: Int = Int(2)
// [KnfOpt]       let _478: Int = Mul(_476, _477)
// [KnfOpt]       let _479: Int = Sub(_472, _478)
// [KnfOpt]       let _480: Int = Int(2)
// [KnfOpt]       let _481: Int = Mul(_479, _480)
// [KnfOpt]       let _482: Int = Sub(_470, _481)
// [KnfOpt]       let _483: Int = Mul(_469, _482)
// [KnfOpt]       let _484: Int = Add(_467, _483)
// [KnfOpt]       let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]       let _486: Int = Int(1)
// [KnfOpt]       let _487: Bool = Bool(true)
// [KnfOpt]       let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]       let _489: Int = Int(1)
// [KnfOpt]       let _490: Int = Int(0)
// [KnfOpt]       let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]       let rec go_loop.492: Unit = () {
// [KnfOpt]         let join go_loop.493: Unit = () {
// [KnfOpt]           let _494: Int = Int(0)
// [KnfOpt]           let _495: Bool = Get go.488[_494]
// [KnfOpt]           let _496: Bool = Bool(true)
// [KnfOpt]           if (_495 == _496) then {
// [KnfOpt]             let _497: Int = Int(0)
// [KnfOpt]             let _498: Int = Get r.368[_497]
// [KnfOpt]             if (_498 == n.2) then {
// [KnfOpt]               let _500: Int = Int(0)
// [KnfOpt]               let _501: Bool = Bool(false)
// [KnfOpt]               let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]               let _503: Int = Int(0)
// [KnfOpt]               let _504: Int = Int(0)
// [KnfOpt]               let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]               let _499: Unit = Unit
// [KnfOpt]               Jump(go_loop.493, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _506: Int = Int(0)
// [KnfOpt]               let _507: Int = Int(0)
// [KnfOpt]               let _508: Int = Get perm1.16[_507]
// [KnfOpt]               let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]               let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]                 let _512: Int = Int(0)
// [KnfOpt]                 let _513: Int = Get r.368[_512]
// [KnfOpt]                 let _514: Int = Int(1)
// [KnfOpt]                 let _515: Int = Sub(_513, _514)
// [KnfOpt]                 if (i.511 <= _515) then {
// [KnfOpt]                   let _516: Int = Int(1)
// [KnfOpt]                   let _517: Int = Add(i.511, _516)
// [KnfOpt]                   let _518: Int = Get perm1.16[_517]
// [KnfOpt]                   let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]                   let _520: Int = Int(1)
// [KnfOpt]                   let _521: Int = Add(i.511, _520)
// [KnfOpt]                   let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]                   Unit
// [KnfOpt]                 } else {
// [KnfOpt]                   Unit
// [KnfOpt]                 }
// [KnfOpt]               }
// [KnfOpt]               let _523: Int = Int(0)
// [KnfOpt]               let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]               let _525: Int = Int(0)
// [KnfOpt]               let _526: Int = Get r.368[_525]
// [KnfOpt]               let _527: Int = Int(0)
// [KnfOpt]               let _528: Int = Get t.491[_527]
// [KnfOpt]               let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]               let _530: Int = Int(0)
// [KnfOpt]               let _531: Int = Get r.368[_530]
// [KnfOpt]               let _532: Int = Int(0)
// [KnfOpt]               let _533: Int = Get r.368[_532]
// [KnfOpt]               let _534: Int = Get count.20[_533]
// [KnfOpt]               let _535: Int = Int(1)
// [KnfOpt]               let _536: Int = Sub(_534, _535)
// [KnfOpt]               let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]               let _538: Int = Int(1)
// [KnfOpt]               let _539: Int = Int(0)
// [KnfOpt]               let _540: Int = Get r.368[_539]
// [KnfOpt]               let _541: Int = Get count.20[_540]
// [KnfOpt]               if (_538 <= _541) then {
// [KnfOpt]                 let _543: Int = Int(0)
// [KnfOpt]                 let _544: Bool = Bool(false)
// [KnfOpt]                 let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]                 let _499: Unit = Unit
// [KnfOpt]                 Jump(go_loop.493, [])
// [KnfOpt]               } else {
// [KnfOpt]                 let _545: Int = Int(0)
// [KnfOpt]                 let _546: Int = Int(0)
// [KnfOpt]                 let _547: Int = Get r.368[_546]
// [KnfOpt]                 let _548: Int = Int(1)
// [KnfOpt]                 let _549: Int = Add(_547, _548)
// [KnfOpt]                 let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]                 let _499: Unit = Unit
// [KnfOpt]                 Jump(go_loop.493, [])
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(go_loop.493, [])
// [KnfOpt]       }
// [KnfOpt]       let join go_loop.705: Unit = () {
// [KnfOpt]         let _706: Int = Int(0)
// [KnfOpt]         let _707: Bool = Get go.488[_706]
// [KnfOpt]         let _708: Bool = Bool(true)
// [KnfOpt]         if (_707 == _708) then {
// [KnfOpt]           let _709: Int = Int(0)
// [KnfOpt]           let _710: Int = Get r.368[_709]
// [KnfOpt]           if (_710 == n.2) then {
// [KnfOpt]             let _712: Int = Int(0)
// [KnfOpt]             let _713: Bool = Bool(false)
// [KnfOpt]             let _714: Unit = Put go.488[_712] = _713
// [KnfOpt]             let _715: Int = Int(0)
// [KnfOpt]             let _716: Int = Int(0)
// [KnfOpt]             let _717: Unit = Put r.368[_715] = _716
// [KnfOpt]             let _711: Unit = Unit
// [KnfOpt]             Jump(go_loop.705, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _718: Int = Int(0)
// [KnfOpt]             let _719: Int = Int(0)
// [KnfOpt]             let _720: Int = Get perm1.16[_719]
// [KnfOpt]             let _721: Unit = Put t.491[_718] = _720
// [KnfOpt]             let rec move_perm1_forward.722: Unit = (i.723: Int) {
// [KnfOpt]               let _724: Int = Int(0)
// [KnfOpt]               let _725: Int = Get r.368[_724]
// [KnfOpt]               let _726: Int = Int(1)
// [KnfOpt]               let _727: Int = Sub(_725, _726)
// [KnfOpt]               if (i.723 <= _727) then {
// [KnfOpt]                 let _728: Int = Int(1)
// [KnfOpt]                 let _729: Int = Add(i.723, _728)
// [KnfOpt]                 let _730: Int = Get perm1.16[_729]
// [KnfOpt]                 let _731: Unit = Put perm1.16[i.723] = _730
// [KnfOpt]                 let _732: Int = Int(1)
// [KnfOpt]                 let _733: Int = Add(i.723, _732)
// [KnfOpt]                 let _734: Unit = Apply(move_perm1_forward.722, [_733, ])
// [KnfOpt]                 Unit
// [KnfOpt]               } else {
// [KnfOpt]                 Unit
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]             let _735: Int = Int(0)
// [KnfOpt]             let _736: Unit = Apply(move_perm1_forward.722, [_735, ])
// [KnfOpt]             let _737: Int = Int(0)
// [KnfOpt]             let _738: Int = Get r.368[_737]
// [KnfOpt]             let _739: Int = Int(0)
// [KnfOpt]             let _740: Int = Get t.491[_739]
// [KnfOpt]             let _741: Unit = Put perm1.16[_738] = _740
// [KnfOpt]             let _742: Int = Int(0)
// [KnfOpt]             let _743: Int = Get r.368[_742]
// [KnfOpt]             let _744: Int = Int(0)
// [KnfOpt]             let _745: Int = Get r.368[_744]
// [KnfOpt]             let _746: Int = Get count.20[_745]
// [KnfOpt]             let _747: Int = Int(1)
// [KnfOpt]             let _748: Int = Sub(_746, _747)
// [KnfOpt]             let _749: Unit = Put count.20[_743] = _748
// [KnfOpt]             let _750: Int = Int(1)
// [KnfOpt]             let _751: Int = Int(0)
// [KnfOpt]             let _752: Int = Get r.368[_751]
// [KnfOpt]             let _753: Int = Get count.20[_752]
// [KnfOpt]             if (_750 <= _753) then {
// [KnfOpt]               let _755: Int = Int(0)
// [KnfOpt]               let _756: Bool = Bool(false)
// [KnfOpt]               let _754: Unit = Put go.488[_755] = _756
// [KnfOpt]               let _711: Unit = Unit
// [KnfOpt]               Jump(go_loop.705, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _757: Int = Int(0)
// [KnfOpt]               let _758: Int = Int(0)
// [KnfOpt]               let _759: Int = Get r.368[_758]
// [KnfOpt]               let _760: Int = Int(1)
// [KnfOpt]               let _761: Int = Add(_759, _760)
// [KnfOpt]               let _754: Unit = Put r.368[_757] = _761
// [KnfOpt]               let _711: Unit = Unit
// [KnfOpt]               Jump(go_loop.705, [])
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]         } else {
// [KnfOpt]           let _550: Unit = Unit
// [KnfOpt]           let _551: Int = Int(0)
// [KnfOpt]           let _552: Int = Int(0)
// [KnfOpt]           let _553: Int = Get nperm.32[_552]
// [KnfOpt]           let _554: Int = Int(1)
// [KnfOpt]           let _555: Int = Add(_553, _554)
// [KnfOpt]           let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]           Jump(compute.367, [r.368, ])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(go_loop.705, [])
// [KnfOpt]     } else {
// [KnfOpt]       let _461: Unit = Unit
// [KnfOpt]       let _465: Int = Int(0)
// [KnfOpt]       let _466: Int = Int(0)
// [KnfOpt]       let _467: Int = Get check_sum.29[_466]
// [KnfOpt]       let _468: Int = Int(0)
// [KnfOpt]       let _469: Int = Get flips.23[_468]
// [KnfOpt]       let _470: Int = Int(1)
// [KnfOpt]       let _471: Int = Int(0)
// [KnfOpt]       let _472: Int = Get nperm.32[_471]
// [KnfOpt]       let _473: Int = Int(0)
// [KnfOpt]       let _474: Int = Get nperm.32[_473]
// [KnfOpt]       let _475: Int = Int(2)
// [KnfOpt]       let _476: Int = Div(_474, _475)
// [KnfOpt]       let _477: Int = Int(2)
// [KnfOpt]       let _478: Int = Mul(_476, _477)
// [KnfOpt]       let _479: Int = Sub(_472, _478)
// [KnfOpt]       let _480: Int = Int(2)
// [KnfOpt]       let _481: Int = Mul(_479, _480)
// [KnfOpt]       let _482: Int = Sub(_470, _481)
// [KnfOpt]       let _483: Int = Mul(_469, _482)
// [KnfOpt]       let _484: Int = Add(_467, _483)
// [KnfOpt]       let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]       let _486: Int = Int(1)
// [KnfOpt]       let _487: Bool = Bool(true)
// [KnfOpt]       let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]       let _489: Int = Int(1)
// [KnfOpt]       let _490: Int = Int(0)
// [KnfOpt]       let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]       let rec go_loop.492: Unit = () {
// [KnfOpt]         let join go_loop.493: Unit = () {
// [KnfOpt]           let _494: Int = Int(0)
// [KnfOpt]           let _495: Bool = Get go.488[_494]
// [KnfOpt]           let _496: Bool = Bool(true)
// [KnfOpt]           if (_495 == _496) then {
// [KnfOpt]             let _497: Int = Int(0)
// [KnfOpt]             let _498: Int = Get r.368[_497]
// [KnfOpt]             if (_498 == n.2) then {
// [KnfOpt]               let _500: Int = Int(0)
// [KnfOpt]               let _501: Bool = Bool(false)
// [KnfOpt]               let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]               let _503: Int = Int(0)
// [KnfOpt]               let _504: Int = Int(0)
// [KnfOpt]               let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]               let _499: Unit = Unit
// [KnfOpt]               Jump(go_loop.493, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _506: Int = Int(0)
// [KnfOpt]               let _507: Int = Int(0)
// [KnfOpt]               let _508: Int = Get perm1.16[_507]
// [KnfOpt]               let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]               let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]                 let _512: Int = Int(0)
// [KnfOpt]                 let _513: Int = Get r.368[_512]
// [KnfOpt]                 let _514: Int = Int(1)
// [KnfOpt]                 let _515: Int = Sub(_513, _514)
// [KnfOpt]                 if (i.511 <= _515) then {
// [KnfOpt]                   let _516: Int = Int(1)
// [KnfOpt]                   let _517: Int = Add(i.511, _516)
// [KnfOpt]                   let _518: Int = Get perm1.16[_517]
// [KnfOpt]                   let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]                   let _520: Int = Int(1)
// [KnfOpt]                   let _521: Int = Add(i.511, _520)
// [KnfOpt]                   let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]                   Unit
// [KnfOpt]                 } else {
// [KnfOpt]                   Unit
// [KnfOpt]                 }
// [KnfOpt]               }
// [KnfOpt]               let _523: Int = Int(0)
// [KnfOpt]               let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]               let _525: Int = Int(0)
// [KnfOpt]               let _526: Int = Get r.368[_525]
// [KnfOpt]               let _527: Int = Int(0)
// [KnfOpt]               let _528: Int = Get t.491[_527]
// [KnfOpt]               let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]               let _530: Int = Int(0)
// [KnfOpt]               let _531: Int = Get r.368[_530]
// [KnfOpt]               let _532: Int = Int(0)
// [KnfOpt]               let _533: Int = Get r.368[_532]
// [KnfOpt]               let _534: Int = Get count.20[_533]
// [KnfOpt]               let _535: Int = Int(1)
// [KnfOpt]               let _536: Int = Sub(_534, _535)
// [KnfOpt]               let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]               let _538: Int = Int(1)
// [KnfOpt]               let _539: Int = Int(0)
// [KnfOpt]               let _540: Int = Get r.368[_539]
// [KnfOpt]               let _541: Int = Get count.20[_540]
// [KnfOpt]               if (_538 <= _541) then {
// [KnfOpt]                 let _543: Int = Int(0)
// [KnfOpt]                 let _544: Bool = Bool(false)
// [KnfOpt]                 let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]                 let _499: Unit = Unit
// [KnfOpt]                 Jump(go_loop.493, [])
// [KnfOpt]               } else {
// [KnfOpt]                 let _545: Int = Int(0)
// [KnfOpt]                 let _546: Int = Int(0)
// [KnfOpt]                 let _547: Int = Get r.368[_546]
// [KnfOpt]                 let _548: Int = Int(1)
// [KnfOpt]                 let _549: Int = Add(_547, _548)
// [KnfOpt]                 let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]                 let _499: Unit = Unit
// [KnfOpt]                 Jump(go_loop.493, [])
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(go_loop.493, [])
// [KnfOpt]       }
// [KnfOpt]       let join go_loop.762: Unit = () {
// [KnfOpt]         let _763: Int = Int(0)
// [KnfOpt]         let _764: Bool = Get go.488[_763]
// [KnfOpt]         let _765: Bool = Bool(true)
// [KnfOpt]         if (_764 == _765) then {
// [KnfOpt]           let _766: Int = Int(0)
// [KnfOpt]           let _767: Int = Get r.368[_766]
// [KnfOpt]           if (_767 == n.2) then {
// [KnfOpt]             let _769: Int = Int(0)
// [KnfOpt]             let _770: Bool = Bool(false)
// [KnfOpt]             let _771: Unit = Put go.488[_769] = _770
// [KnfOpt]             let _772: Int = Int(0)
// [KnfOpt]             let _773: Int = Int(0)
// [KnfOpt]             let _774: Unit = Put r.368[_772] = _773
// [KnfOpt]             let _768: Unit = Unit
// [KnfOpt]             Jump(go_loop.762, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _775: Int = Int(0)
// [KnfOpt]             let _776: Int = Int(0)
// [KnfOpt]             let _777: Int = Get perm1.16[_776]
// [KnfOpt]             let _778: Unit = Put t.491[_775] = _777
// [KnfOpt]             let rec move_perm1_forward.779: Unit = (i.780: Int) {
// [KnfOpt]               let _781: Int = Int(0)
// [KnfOpt]               let _782: Int = Get r.368[_781]
// [KnfOpt]               let _783: Int = Int(1)
// [KnfOpt]               let _784: Int = Sub(_782, _783)
// [KnfOpt]               if (i.780 <= _784) then {
// [KnfOpt]                 let _785: Int = Int(1)
// [KnfOpt]                 let _786: Int = Add(i.780, _785)
// [KnfOpt]                 let _787: Int = Get perm1.16[_786]
// [KnfOpt]                 let _788: Unit = Put perm1.16[i.780] = _787
// [KnfOpt]                 let _789: Int = Int(1)
// [KnfOpt]                 let _790: Int = Add(i.780, _789)
// [KnfOpt]                 let _791: Unit = Apply(move_perm1_forward.779, [_790, ])
// [KnfOpt]                 Unit
// [KnfOpt]               } else {
// [KnfOpt]                 Unit
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]             let _792: Int = Int(0)
// [KnfOpt]             let _793: Unit = Apply(move_perm1_forward.779, [_792, ])
// [KnfOpt]             let _794: Int = Int(0)
// [KnfOpt]             let _795: Int = Get r.368[_794]
// [KnfOpt]             let _796: Int = Int(0)
// [KnfOpt]             let _797: Int = Get t.491[_796]
// [KnfOpt]             let _798: Unit = Put perm1.16[_795] = _797
// [KnfOpt]             let _799: Int = Int(0)
// [KnfOpt]             let _800: Int = Get r.368[_799]
// [KnfOpt]             let _801: Int = Int(0)
// [KnfOpt]             let _802: Int = Get r.368[_801]
// [KnfOpt]             let _803: Int = Get count.20[_802]
// [KnfOpt]             let _804: Int = Int(1)
// [KnfOpt]             let _805: Int = Sub(_803, _804)
// [KnfOpt]             let _806: Unit = Put count.20[_800] = _805
// [KnfOpt]             let _807: Int = Int(1)
// [KnfOpt]             let _808: Int = Int(0)
// [KnfOpt]             let _809: Int = Get r.368[_808]
// [KnfOpt]             let _810: Int = Get count.20[_809]
// [KnfOpt]             if (_807 <= _810) then {
// [KnfOpt]               let _812: Int = Int(0)
// [KnfOpt]               let _813: Bool = Bool(false)
// [KnfOpt]               let _811: Unit = Put go.488[_812] = _813
// [KnfOpt]               let _768: Unit = Unit
// [KnfOpt]               Jump(go_loop.762, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _814: Int = Int(0)
// [KnfOpt]               let _815: Int = Int(0)
// [KnfOpt]               let _816: Int = Get r.368[_815]
// [KnfOpt]               let _817: Int = Int(1)
// [KnfOpt]               let _818: Int = Add(_816, _817)
// [KnfOpt]               let _811: Unit = Put r.368[_814] = _818
// [KnfOpt]               let _768: Unit = Unit
// [KnfOpt]               Jump(go_loop.762, [])
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]         } else {
// [KnfOpt]           let _550: Unit = Unit
// [KnfOpt]           let _551: Int = Int(0)
// [KnfOpt]           let _552: Int = Int(0)
// [KnfOpt]           let _553: Int = Get nperm.32[_552]
// [KnfOpt]           let _554: Int = Int(1)
// [KnfOpt]           let _555: Int = Add(_553, _554)
// [KnfOpt]           let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]           Jump(compute.367, [r.368, ])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(go_loop.762, [])
// [KnfOpt]     }
// [KnfOpt]   } else {
// [KnfOpt]     let _819: Int = Int(1)
// [KnfOpt]     let _820: Int = Int(0)
// [KnfOpt]     let t.821: Array(Int) = ExtApply(minimbt_create_array, [_819, _820, ])
// [KnfOpt]     let rec flip_loop.822: Unit = (i.823: Int) {
// [KnfOpt]       let join flip_loop.824: Unit = (i.825: Int) {
// [KnfOpt]         let _826: Int = Int(0)
// [KnfOpt]         let _827: Int = Get k.701[_826]
// [KnfOpt]         let _828: Int = Int(2)
// [KnfOpt]         let _829: Int = Div(_827, _828)
// [KnfOpt]         if (i.825 <= _829) then {
// [KnfOpt]           let _830: Int = Int(0)
// [KnfOpt]           let _831: Int = Get perm.18[i.825]
// [KnfOpt]           let _832: Unit = Put t.821[_830] = _831
// [KnfOpt]           let _833: Int = Int(0)
// [KnfOpt]           let _834: Int = Get k.701[_833]
// [KnfOpt]           let _835: Int = Sub(_834, i.825)
// [KnfOpt]           let _836: Int = Get perm.18[_835]
// [KnfOpt]           let _837: Unit = Put perm.18[i.825] = _836
// [KnfOpt]           let _838: Int = Int(0)
// [KnfOpt]           let _839: Int = Get k.701[_838]
// [KnfOpt]           let _840: Int = Sub(_839, i.825)
// [KnfOpt]           let _841: Int = Int(0)
// [KnfOpt]           let _842: Int = Get t.821[_841]
// [KnfOpt]           let _843: Unit = Put perm.18[_840] = _842
// [KnfOpt]           let _844: Int = Int(1)
// [KnfOpt]           let _845: Int = Add(i.825, _844)
// [KnfOpt]           Jump(flip_loop.824, [_845, ])
// [KnfOpt]         } else {
// [KnfOpt]           Unit
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(flip_loop.824, [i.823, ])
// [KnfOpt]     }
// [KnfOpt]     let _846: Int = Int(0)
// [KnfOpt]     let _847: Unit = Apply(flip_loop.822, [_846, ])
// [KnfOpt]     let _848: Int = Int(0)
// [KnfOpt]     let _849: Int = Int(0)
// [KnfOpt]     let _850: Int = Get perm.18[_849]
// [KnfOpt]     let _851: Unit = Put k.701[_848] = _850
// [KnfOpt]     let _852: Int = Int(0)
// [KnfOpt]     let _853: Int = Int(0)
// [KnfOpt]     let _854: Int = Get flips.23[_853]
// [KnfOpt]     let _855: Int = Int(1)
// [KnfOpt]     let _856: Int = Add(_854, _855)
// [KnfOpt]     let _857: Unit = Put flips.23[_852] = _856
// [KnfOpt]     Jump(do_flip.700, [k.701, ])
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Jump(do_flip.700, [k.409, ])
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Knf inline Some(flip_loop) let _445: Unit = Unit
// [KnfOpt] let _446: Int = Int(0)
// [KnfOpt] let _447: Int = Int(0)
// [KnfOpt] let _448: Int = Get perm.18[_447]
// [KnfOpt] let _449: Unit = Put k.413[_446] = _448
// [KnfOpt] let _450: Int = Int(0)
// [KnfOpt] let _451: Int = Int(0)
// [KnfOpt] let _452: Int = Get flips.23[_451]
// [KnfOpt] let _453: Int = Int(1)
// [KnfOpt] let _454: Int = Add(_452, _453)
// [KnfOpt] let _455: Unit = Put flips.23[_450] = _454
// [KnfOpt] Jump(do_flip.412, [k.413, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Knf inline Some(go_loop) let _550: Unit = Unit
// [KnfOpt] let _551: Int = Int(0)
// [KnfOpt] let _552: Int = Int(0)
// [KnfOpt] let _553: Int = Get nperm.32[_552]
// [KnfOpt] let _554: Int = Int(1)
// [KnfOpt] let _555: Int = Add(_553, _554)
// [KnfOpt] let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt] Jump(compute.367, [r.368, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Knf inline Some(go_loop) let _550: Unit = Unit
// [KnfOpt] let _551: Int = Int(0)
// [KnfOpt] let _552: Int = Int(0)
// [KnfOpt] let _553: Int = Get nperm.32[_552]
// [KnfOpt] let _554: Int = Int(1)
// [KnfOpt] let _555: Int = Add(_553, _554)
// [KnfOpt] let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt] Jump(compute.367, [r.368, ])
// [KnfOpt] Knf inline Some(do_flip) let _456: Unit = Unit
// [KnfOpt] let _457: Int = Int(0)
// [KnfOpt] let _458: Int = Get max_flips.26[_457]
// [KnfOpt] let _459: Int = Int(0)
// [KnfOpt] let _460: Int = Get flips.23[_459]
// [KnfOpt] if (_458 <= _460) then {
// [KnfOpt]   let _462: Int = Int(0)
// [KnfOpt]   let _463: Int = Int(0)
// [KnfOpt]   let _464: Int = Get flips.23[_463]
// [KnfOpt]   let _461: Unit = Put max_flips.26[_462] = _464
// [KnfOpt]   let _465: Int = Int(0)
// [KnfOpt]   let _466: Int = Int(0)
// [KnfOpt]   let _467: Int = Get check_sum.29[_466]
// [KnfOpt]   let _468: Int = Int(0)
// [KnfOpt]   let _469: Int = Get flips.23[_468]
// [KnfOpt]   let _470: Int = Int(1)
// [KnfOpt]   let _471: Int = Int(0)
// [KnfOpt]   let _472: Int = Get nperm.32[_471]
// [KnfOpt]   let _473: Int = Int(0)
// [KnfOpt]   let _474: Int = Get nperm.32[_473]
// [KnfOpt]   let _475: Int = Int(2)
// [KnfOpt]   let _476: Int = Div(_474, _475)
// [KnfOpt]   let _477: Int = Int(2)
// [KnfOpt]   let _478: Int = Mul(_476, _477)
// [KnfOpt]   let _479: Int = Sub(_472, _478)
// [KnfOpt]   let _480: Int = Int(2)
// [KnfOpt]   let _481: Int = Mul(_479, _480)
// [KnfOpt]   let _482: Int = Sub(_470, _481)
// [KnfOpt]   let _483: Int = Mul(_469, _482)
// [KnfOpt]   let _484: Int = Add(_467, _483)
// [KnfOpt]   let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]   let _486: Int = Int(1)
// [KnfOpt]   let _487: Bool = Bool(true)
// [KnfOpt]   let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]   let _489: Int = Int(1)
// [KnfOpt]   let _490: Int = Int(0)
// [KnfOpt]   let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]   let rec go_loop.492: Unit = () {
// [KnfOpt]     let join go_loop.493: Unit = () {
// [KnfOpt]       let _494: Int = Int(0)
// [KnfOpt]       let _495: Bool = Get go.488[_494]
// [KnfOpt]       let _496: Bool = Bool(true)
// [KnfOpt]       if (_495 == _496) then {
// [KnfOpt]         let _497: Int = Int(0)
// [KnfOpt]         let _498: Int = Get r.368[_497]
// [KnfOpt]         if (_498 == n.2) then {
// [KnfOpt]           let _500: Int = Int(0)
// [KnfOpt]           let _501: Bool = Bool(false)
// [KnfOpt]           let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]           let _503: Int = Int(0)
// [KnfOpt]           let _504: Int = Int(0)
// [KnfOpt]           let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]           let _499: Unit = Unit
// [KnfOpt]           Jump(go_loop.493, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _506: Int = Int(0)
// [KnfOpt]           let _507: Int = Int(0)
// [KnfOpt]           let _508: Int = Get perm1.16[_507]
// [KnfOpt]           let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]           let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]             let _512: Int = Int(0)
// [KnfOpt]             let _513: Int = Get r.368[_512]
// [KnfOpt]             let _514: Int = Int(1)
// [KnfOpt]             let _515: Int = Sub(_513, _514)
// [KnfOpt]             if (i.511 <= _515) then {
// [KnfOpt]               let _516: Int = Int(1)
// [KnfOpt]               let _517: Int = Add(i.511, _516)
// [KnfOpt]               let _518: Int = Get perm1.16[_517]
// [KnfOpt]               let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]               let _520: Int = Int(1)
// [KnfOpt]               let _521: Int = Add(i.511, _520)
// [KnfOpt]               let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _523: Int = Int(0)
// [KnfOpt]           let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]           let _525: Int = Int(0)
// [KnfOpt]           let _526: Int = Get r.368[_525]
// [KnfOpt]           let _527: Int = Int(0)
// [KnfOpt]           let _528: Int = Get t.491[_527]
// [KnfOpt]           let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]           let _530: Int = Int(0)
// [KnfOpt]           let _531: Int = Get r.368[_530]
// [KnfOpt]           let _532: Int = Int(0)
// [KnfOpt]           let _533: Int = Get r.368[_532]
// [KnfOpt]           let _534: Int = Get count.20[_533]
// [KnfOpt]           let _535: Int = Int(1)
// [KnfOpt]           let _536: Int = Sub(_534, _535)
// [KnfOpt]           let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]           let _538: Int = Int(1)
// [KnfOpt]           let _539: Int = Int(0)
// [KnfOpt]           let _540: Int = Get r.368[_539]
// [KnfOpt]           let _541: Int = Get count.20[_540]
// [KnfOpt]           if (_538 <= _541) then {
// [KnfOpt]             let _543: Int = Int(0)
// [KnfOpt]             let _544: Bool = Bool(false)
// [KnfOpt]             let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _545: Int = Int(0)
// [KnfOpt]             let _546: Int = Int(0)
// [KnfOpt]             let _547: Int = Get r.368[_546]
// [KnfOpt]             let _548: Int = Int(1)
// [KnfOpt]             let _549: Int = Add(_547, _548)
// [KnfOpt]             let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.493, [])
// [KnfOpt]   }
// [KnfOpt]   let join go_loop.888: Unit = () {
// [KnfOpt]     let _889: Int = Int(0)
// [KnfOpt]     let _890: Bool = Get go.488[_889]
// [KnfOpt]     let _891: Bool = Bool(true)
// [KnfOpt]     if (_890 == _891) then {
// [KnfOpt]       let _892: Int = Int(0)
// [KnfOpt]       let _893: Int = Get r.368[_892]
// [KnfOpt]       if (_893 == n.2) then {
// [KnfOpt]         let _895: Int = Int(0)
// [KnfOpt]         let _896: Bool = Bool(false)
// [KnfOpt]         let _897: Unit = Put go.488[_895] = _896
// [KnfOpt]         let _898: Int = Int(0)
// [KnfOpt]         let _899: Int = Int(0)
// [KnfOpt]         let _900: Unit = Put r.368[_898] = _899
// [KnfOpt]         let _894: Unit = Unit
// [KnfOpt]         Jump(go_loop.888, [])
// [KnfOpt]       } else {
// [KnfOpt]         let _901: Int = Int(0)
// [KnfOpt]         let _902: Int = Int(0)
// [KnfOpt]         let _903: Int = Get perm1.16[_902]
// [KnfOpt]         let _904: Unit = Put t.491[_901] = _903
// [KnfOpt]         let rec move_perm1_forward.905: Unit = (i.906: Int) {
// [KnfOpt]           let _907: Int = Int(0)
// [KnfOpt]           let _908: Int = Get r.368[_907]
// [KnfOpt]           let _909: Int = Int(1)
// [KnfOpt]           let _910: Int = Sub(_908, _909)
// [KnfOpt]           if (i.906 <= _910) then {
// [KnfOpt]             let _911: Int = Int(1)
// [KnfOpt]             let _912: Int = Add(i.906, _911)
// [KnfOpt]             let _913: Int = Get perm1.16[_912]
// [KnfOpt]             let _914: Unit = Put perm1.16[i.906] = _913
// [KnfOpt]             let _915: Int = Int(1)
// [KnfOpt]             let _916: Int = Add(i.906, _915)
// [KnfOpt]             let _917: Unit = Apply(move_perm1_forward.905, [_916, ])
// [KnfOpt]             Unit
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         let _918: Int = Int(0)
// [KnfOpt]         let _919: Unit = Apply(move_perm1_forward.905, [_918, ])
// [KnfOpt]         let _920: Int = Int(0)
// [KnfOpt]         let _921: Int = Get r.368[_920]
// [KnfOpt]         let _922: Int = Int(0)
// [KnfOpt]         let _923: Int = Get t.491[_922]
// [KnfOpt]         let _924: Unit = Put perm1.16[_921] = _923
// [KnfOpt]         let _925: Int = Int(0)
// [KnfOpt]         let _926: Int = Get r.368[_925]
// [KnfOpt]         let _927: Int = Int(0)
// [KnfOpt]         let _928: Int = Get r.368[_927]
// [KnfOpt]         let _929: Int = Get count.20[_928]
// [KnfOpt]         let _930: Int = Int(1)
// [KnfOpt]         let _931: Int = Sub(_929, _930)
// [KnfOpt]         let _932: Unit = Put count.20[_926] = _931
// [KnfOpt]         let _933: Int = Int(1)
// [KnfOpt]         let _934: Int = Int(0)
// [KnfOpt]         let _935: Int = Get r.368[_934]
// [KnfOpt]         let _936: Int = Get count.20[_935]
// [KnfOpt]         if (_933 <= _936) then {
// [KnfOpt]           let _938: Int = Int(0)
// [KnfOpt]           let _939: Bool = Bool(false)
// [KnfOpt]           let _937: Unit = Put go.488[_938] = _939
// [KnfOpt]           let _894: Unit = Unit
// [KnfOpt]           Jump(go_loop.888, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _940: Int = Int(0)
// [KnfOpt]           let _941: Int = Int(0)
// [KnfOpt]           let _942: Int = Get r.368[_941]
// [KnfOpt]           let _943: Int = Int(1)
// [KnfOpt]           let _944: Int = Add(_942, _943)
// [KnfOpt]           let _937: Unit = Put r.368[_940] = _944
// [KnfOpt]           let _894: Unit = Unit
// [KnfOpt]           Jump(go_loop.888, [])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]     } else {
// [KnfOpt]       let _550: Unit = Unit
// [KnfOpt]       let _551: Int = Int(0)
// [KnfOpt]       let _552: Int = Int(0)
// [KnfOpt]       let _553: Int = Get nperm.32[_552]
// [KnfOpt]       let _554: Int = Int(1)
// [KnfOpt]       let _555: Int = Add(_553, _554)
// [KnfOpt]       let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]       Jump(compute.367, [r.368, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(go_loop.888, [])
// [KnfOpt] } else {
// [KnfOpt]   let _461: Unit = Unit
// [KnfOpt]   let _465: Int = Int(0)
// [KnfOpt]   let _466: Int = Int(0)
// [KnfOpt]   let _467: Int = Get check_sum.29[_466]
// [KnfOpt]   let _468: Int = Int(0)
// [KnfOpt]   let _469: Int = Get flips.23[_468]
// [KnfOpt]   let _470: Int = Int(1)
// [KnfOpt]   let _471: Int = Int(0)
// [KnfOpt]   let _472: Int = Get nperm.32[_471]
// [KnfOpt]   let _473: Int = Int(0)
// [KnfOpt]   let _474: Int = Get nperm.32[_473]
// [KnfOpt]   let _475: Int = Int(2)
// [KnfOpt]   let _476: Int = Div(_474, _475)
// [KnfOpt]   let _477: Int = Int(2)
// [KnfOpt]   let _478: Int = Mul(_476, _477)
// [KnfOpt]   let _479: Int = Sub(_472, _478)
// [KnfOpt]   let _480: Int = Int(2)
// [KnfOpt]   let _481: Int = Mul(_479, _480)
// [KnfOpt]   let _482: Int = Sub(_470, _481)
// [KnfOpt]   let _483: Int = Mul(_469, _482)
// [KnfOpt]   let _484: Int = Add(_467, _483)
// [KnfOpt]   let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]   let _486: Int = Int(1)
// [KnfOpt]   let _487: Bool = Bool(true)
// [KnfOpt]   let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]   let _489: Int = Int(1)
// [KnfOpt]   let _490: Int = Int(0)
// [KnfOpt]   let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]   let rec go_loop.492: Unit = () {
// [KnfOpt]     let join go_loop.493: Unit = () {
// [KnfOpt]       let _494: Int = Int(0)
// [KnfOpt]       let _495: Bool = Get go.488[_494]
// [KnfOpt]       let _496: Bool = Bool(true)
// [KnfOpt]       if (_495 == _496) then {
// [KnfOpt]         let _497: Int = Int(0)
// [KnfOpt]         let _498: Int = Get r.368[_497]
// [KnfOpt]         if (_498 == n.2) then {
// [KnfOpt]           let _500: Int = Int(0)
// [KnfOpt]           let _501: Bool = Bool(false)
// [KnfOpt]           let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]           let _503: Int = Int(0)
// [KnfOpt]           let _504: Int = Int(0)
// [KnfOpt]           let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]           let _499: Unit = Unit
// [KnfOpt]           Jump(go_loop.493, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _506: Int = Int(0)
// [KnfOpt]           let _507: Int = Int(0)
// [KnfOpt]           let _508: Int = Get perm1.16[_507]
// [KnfOpt]           let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]           let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]             let _512: Int = Int(0)
// [KnfOpt]             let _513: Int = Get r.368[_512]
// [KnfOpt]             let _514: Int = Int(1)
// [KnfOpt]             let _515: Int = Sub(_513, _514)
// [KnfOpt]             if (i.511 <= _515) then {
// [KnfOpt]               let _516: Int = Int(1)
// [KnfOpt]               let _517: Int = Add(i.511, _516)
// [KnfOpt]               let _518: Int = Get perm1.16[_517]
// [KnfOpt]               let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]               let _520: Int = Int(1)
// [KnfOpt]               let _521: Int = Add(i.511, _520)
// [KnfOpt]               let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _523: Int = Int(0)
// [KnfOpt]           let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]           let _525: Int = Int(0)
// [KnfOpt]           let _526: Int = Get r.368[_525]
// [KnfOpt]           let _527: Int = Int(0)
// [KnfOpt]           let _528: Int = Get t.491[_527]
// [KnfOpt]           let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]           let _530: Int = Int(0)
// [KnfOpt]           let _531: Int = Get r.368[_530]
// [KnfOpt]           let _532: Int = Int(0)
// [KnfOpt]           let _533: Int = Get r.368[_532]
// [KnfOpt]           let _534: Int = Get count.20[_533]
// [KnfOpt]           let _535: Int = Int(1)
// [KnfOpt]           let _536: Int = Sub(_534, _535)
// [KnfOpt]           let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]           let _538: Int = Int(1)
// [KnfOpt]           let _539: Int = Int(0)
// [KnfOpt]           let _540: Int = Get r.368[_539]
// [KnfOpt]           let _541: Int = Get count.20[_540]
// [KnfOpt]           if (_538 <= _541) then {
// [KnfOpt]             let _543: Int = Int(0)
// [KnfOpt]             let _544: Bool = Bool(false)
// [KnfOpt]             let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _545: Int = Int(0)
// [KnfOpt]             let _546: Int = Int(0)
// [KnfOpt]             let _547: Int = Get r.368[_546]
// [KnfOpt]             let _548: Int = Int(1)
// [KnfOpt]             let _549: Int = Add(_547, _548)
// [KnfOpt]             let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.493, [])
// [KnfOpt]   }
// [KnfOpt]   let join go_loop.945: Unit = () {
// [KnfOpt]     let _946: Int = Int(0)
// [KnfOpt]     let _947: Bool = Get go.488[_946]
// [KnfOpt]     let _948: Bool = Bool(true)
// [KnfOpt]     if (_947 == _948) then {
// [KnfOpt]       let _949: Int = Int(0)
// [KnfOpt]       let _950: Int = Get r.368[_949]
// [KnfOpt]       if (_950 == n.2) then {
// [KnfOpt]         let _952: Int = Int(0)
// [KnfOpt]         let _953: Bool = Bool(false)
// [KnfOpt]         let _954: Unit = Put go.488[_952] = _953
// [KnfOpt]         let _955: Int = Int(0)
// [KnfOpt]         let _956: Int = Int(0)
// [KnfOpt]         let _957: Unit = Put r.368[_955] = _956
// [KnfOpt]         let _951: Unit = Unit
// [KnfOpt]         Jump(go_loop.945, [])
// [KnfOpt]       } else {
// [KnfOpt]         let _958: Int = Int(0)
// [KnfOpt]         let _959: Int = Int(0)
// [KnfOpt]         let _960: Int = Get perm1.16[_959]
// [KnfOpt]         let _961: Unit = Put t.491[_958] = _960
// [KnfOpt]         let rec move_perm1_forward.962: Unit = (i.963: Int) {
// [KnfOpt]           let _964: Int = Int(0)
// [KnfOpt]           let _965: Int = Get r.368[_964]
// [KnfOpt]           let _966: Int = Int(1)
// [KnfOpt]           let _967: Int = Sub(_965, _966)
// [KnfOpt]           if (i.963 <= _967) then {
// [KnfOpt]             let _968: Int = Int(1)
// [KnfOpt]             let _969: Int = Add(i.963, _968)
// [KnfOpt]             let _970: Int = Get perm1.16[_969]
// [KnfOpt]             let _971: Unit = Put perm1.16[i.963] = _970
// [KnfOpt]             let _972: Int = Int(1)
// [KnfOpt]             let _973: Int = Add(i.963, _972)
// [KnfOpt]             let _974: Unit = Apply(move_perm1_forward.962, [_973, ])
// [KnfOpt]             Unit
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         let _975: Int = Int(0)
// [KnfOpt]         let _976: Unit = Apply(move_perm1_forward.962, [_975, ])
// [KnfOpt]         let _977: Int = Int(0)
// [KnfOpt]         let _978: Int = Get r.368[_977]
// [KnfOpt]         let _979: Int = Int(0)
// [KnfOpt]         let _980: Int = Get t.491[_979]
// [KnfOpt]         let _981: Unit = Put perm1.16[_978] = _980
// [KnfOpt]         let _982: Int = Int(0)
// [KnfOpt]         let _983: Int = Get r.368[_982]
// [KnfOpt]         let _984: Int = Int(0)
// [KnfOpt]         let _985: Int = Get r.368[_984]
// [KnfOpt]         let _986: Int = Get count.20[_985]
// [KnfOpt]         let _987: Int = Int(1)
// [KnfOpt]         let _988: Int = Sub(_986, _987)
// [KnfOpt]         let _989: Unit = Put count.20[_983] = _988
// [KnfOpt]         let _990: Int = Int(1)
// [KnfOpt]         let _991: Int = Int(0)
// [KnfOpt]         let _992: Int = Get r.368[_991]
// [KnfOpt]         let _993: Int = Get count.20[_992]
// [KnfOpt]         if (_990 <= _993) then {
// [KnfOpt]           let _995: Int = Int(0)
// [KnfOpt]           let _996: Bool = Bool(false)
// [KnfOpt]           let _994: Unit = Put go.488[_995] = _996
// [KnfOpt]           let _951: Unit = Unit
// [KnfOpt]           Jump(go_loop.945, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _997: Int = Int(0)
// [KnfOpt]           let _998: Int = Int(0)
// [KnfOpt]           let _999: Int = Get r.368[_998]
// [KnfOpt]           let _1000: Int = Int(1)
// [KnfOpt]           let _1001: Int = Add(_999, _1000)
// [KnfOpt]           let _994: Unit = Put r.368[_997] = _1001
// [KnfOpt]           let _951: Unit = Unit
// [KnfOpt]           Jump(go_loop.945, [])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]     } else {
// [KnfOpt]       let _550: Unit = Unit
// [KnfOpt]       let _551: Int = Int(0)
// [KnfOpt]       let _552: Int = Int(0)
// [KnfOpt]       let _553: Int = Get nperm.32[_552]
// [KnfOpt]       let _554: Int = Int(1)
// [KnfOpt]       let _555: Int = Add(_553, _554)
// [KnfOpt]       let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]       Jump(compute.367, [r.368, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(go_loop.945, [])
// [KnfOpt] }
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Knf inline Some(go_loop) let _550: Unit = Unit
// [KnfOpt] let _551: Int = Int(0)
// [KnfOpt] let _552: Int = Int(0)
// [KnfOpt] let _553: Int = Get nperm.32[_552]
// [KnfOpt] let _554: Int = Int(1)
// [KnfOpt] let _555: Int = Add(_553, _554)
// [KnfOpt] let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt] Jump(compute.367, [r.368, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Knf inline Some(go_loop) let _550: Unit = Unit
// [KnfOpt] let _551: Int = Int(0)
// [KnfOpt] let _552: Int = Int(0)
// [KnfOpt] let _553: Int = Get nperm.32[_552]
// [KnfOpt] let _554: Int = Int(1)
// [KnfOpt] let _555: Int = Add(_553, _554)
// [KnfOpt] let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt] Jump(compute.367, [r.368, ])
// [KnfOpt] Knf inline Some(compute) let _218: Unit = Unit
// [KnfOpt] let _219: Int = Int(0)
// [KnfOpt] let _220: Int = Get max_flips.26[_219]
// [KnfOpt] let _221: Int = Int(0)
// [KnfOpt] let _222: Int = Get check_sum.29[_221]
// [KnfOpt] Tuple([_220, _222, ])
// [KnfOpt] Knf inline Some(gen_perm1) let perm1.16: Array(Int) = Unit
// [KnfOpt] let _17: Int = Int(0)
// [KnfOpt] let perm.18: Array(Int) = ExtApply(minimbt_create_array, [n.2, _17, ])
// [KnfOpt] let _19: Int = Int(0)
// [KnfOpt] let count.20: Array(Int) = ExtApply(minimbt_create_array, [n.2, _19, ])
// [KnfOpt] let _21: Int = Int(1)
// [KnfOpt] let _22: Int = Int(0)
// [KnfOpt] let flips.23: Array(Int) = ExtApply(minimbt_create_array, [_21, _22, ])
// [KnfOpt] let _24: Int = Int(1)
// [KnfOpt] let _25: Int = Int(0)
// [KnfOpt] let max_flips.26: Array(Int) = ExtApply(minimbt_create_array, [_24, _25, ])
// [KnfOpt] let _27: Int = Int(1)
// [KnfOpt] let _28: Int = Int(0)
// [KnfOpt] let check_sum.29: Array(Int) = ExtApply(minimbt_create_array, [_27, _28, ])
// [KnfOpt] let _30: Int = Int(1)
// [KnfOpt] let _31: Int = Int(0)
// [KnfOpt] let nperm.32: Array(Int) = ExtApply(minimbt_create_array, [_30, _31, ])
// [KnfOpt] let _33: Int = Int(1)
// [KnfOpt] let r.34: Array(Int) = ExtApply(minimbt_create_array, [_33, n.2, ])
// [KnfOpt] let rec compute.35: Unit = (r.36: Array(Int)) {
// [KnfOpt]   let join compute.367: Unit = (r.368: Array(Int)) {
// [KnfOpt]     let _369: Int = Int(1)
// [KnfOpt]     let _370: Int = Int(0)
// [KnfOpt]     let _371: Int = Get r.368[_370]
// [KnfOpt]     if (_369 <= _371) then {
// [KnfOpt]       let rec copy_perm.372: Unit = (i.373: Int) {
// [KnfOpt]         let join copy_perm.374: Unit = (i.375: Int) {
// [KnfOpt]           let _376: Int = Int(1)
// [KnfOpt]           let _377: Int = Sub(n.2, _376)
// [KnfOpt]           if (i.375 <= _377) then {
// [KnfOpt]             let _378: Int = Get perm1.16[i.375]
// [KnfOpt]             let _379: Unit = Put perm.18[i.375] = _378
// [KnfOpt]             let _380: Int = Int(1)
// [KnfOpt]             let _381: Int = Add(i.375, _380)
// [KnfOpt]             Jump(copy_perm.374, [_381, ])
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(copy_perm.374, [i.373, ])
// [KnfOpt]       }
// [KnfOpt]       let _382: Int = Int(0)
// [KnfOpt]       let join copy_perm.858: Unit = (i.859: Int) {
// [KnfOpt]         let _860: Int = Int(1)
// [KnfOpt]         let _861: Int = Sub(n.2, _860)
// [KnfOpt]         if (i.859 <= _861) then {
// [KnfOpt]           let _862: Int = Get perm1.16[i.859]
// [KnfOpt]           let _863: Unit = Put perm.18[i.859] = _862
// [KnfOpt]           let _864: Int = Int(1)
// [KnfOpt]           let _865: Int = Add(i.859, _864)
// [KnfOpt]           Jump(copy_perm.858, [_865, ])
// [KnfOpt]         } else {
// [KnfOpt]           let _383: Unit = Unit
// [KnfOpt]           let rec init_count.384: Unit = () {
// [KnfOpt]             let _385: Int = Int(0)
// [KnfOpt]             let _386: Int = Get r.368[_385]
// [KnfOpt]             let _387: Int = Int(1)
// [KnfOpt]             if (_386 == _387) then {
// [KnfOpt]               let _388: Unit = Unit
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               let _389: Int = Int(0)
// [KnfOpt]               let _390: Int = Get r.368[_389]
// [KnfOpt]               let _391: Int = Int(1)
// [KnfOpt]               let _392: Int = Sub(_390, _391)
// [KnfOpt]               let _393: Int = Int(0)
// [KnfOpt]               let _394: Int = Get r.368[_393]
// [KnfOpt]               let _395: Unit = Put count.20[_392] = _394
// [KnfOpt]               let _396: Int = Int(0)
// [KnfOpt]               let _397: Int = Int(0)
// [KnfOpt]               let _398: Int = Get r.368[_397]
// [KnfOpt]               let _399: Int = Int(1)
// [KnfOpt]               let _400: Int = Sub(_398, _399)
// [KnfOpt]               let _401: Unit = Put r.368[_396] = _400
// [KnfOpt]               let _388: Unit = Apply(init_count.384, [])
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _402: Unit = Apply(init_count.384, [])
// [KnfOpt]           let _403: Int = Int(0)
// [KnfOpt]           let _404: Int = Int(0)
// [KnfOpt]           let _405: Unit = Put flips.23[_403] = _404
// [KnfOpt]           let _406: Int = Int(1)
// [KnfOpt]           let _407: Int = Int(0)
// [KnfOpt]           let _408: Int = Get perm.18[_407]
// [KnfOpt]           let k.409: Array(Int) = ExtApply(minimbt_create_array, [_406, _408, ])
// [KnfOpt]           let rec do_flip.410: Unit = (k.411: Array(Int)) {
// [KnfOpt]             let join do_flip.412: Unit = (k.413: Array(Int)) {
// [KnfOpt]               let _414: Int = Int(0)
// [KnfOpt]               let _415: Int = Get k.413[_414]
// [KnfOpt]               let _416: Int = Int(0)
// [KnfOpt]               if (_415 == _416) then {
// [KnfOpt]                 Unit
// [KnfOpt]               } else {
// [KnfOpt]                 let _417: Int = Int(1)
// [KnfOpt]                 let _418: Int = Int(0)
// [KnfOpt]                 let t.419: Array(Int) = ExtApply(minimbt_create_array, [_417, _418, ])
// [KnfOpt]                 let rec flip_loop.420: Unit = (i.421: Int) {
// [KnfOpt]                   let join flip_loop.422: Unit = (i.423: Int) {
// [KnfOpt]                     let _424: Int = Int(0)
// [KnfOpt]                     let _425: Int = Get k.413[_424]
// [KnfOpt]                     let _426: Int = Int(2)
// [KnfOpt]                     let _427: Int = Div(_425, _426)
// [KnfOpt]                     if (i.423 <= _427) then {
// [KnfOpt]                       let _428: Int = Int(0)
// [KnfOpt]                       let _429: Int = Get perm.18[i.423]
// [KnfOpt]                       let _430: Unit = Put t.419[_428] = _429
// [KnfOpt]                       let _431: Int = Int(0)
// [KnfOpt]                       let _432: Int = Get k.413[_431]
// [KnfOpt]                       let _433: Int = Sub(_432, i.423)
// [KnfOpt]                       let _434: Int = Get perm.18[_433]
// [KnfOpt]                       let _435: Unit = Put perm.18[i.423] = _434
// [KnfOpt]                       let _436: Int = Int(0)
// [KnfOpt]                       let _437: Int = Get k.413[_436]
// [KnfOpt]                       let _438: Int = Sub(_437, i.423)
// [KnfOpt]                       let _439: Int = Int(0)
// [KnfOpt]                       let _440: Int = Get t.419[_439]
// [KnfOpt]                       let _441: Unit = Put perm.18[_438] = _440
// [KnfOpt]                       let _442: Int = Int(1)
// [KnfOpt]                       let _443: Int = Add(i.423, _442)
// [KnfOpt]                       Jump(flip_loop.422, [_443, ])
// [KnfOpt]                     } else {
// [KnfOpt]                       Unit
// [KnfOpt]                     }
// [KnfOpt]                   }
// [KnfOpt]                   Jump(flip_loop.422, [i.421, ])
// [KnfOpt]                 }
// [KnfOpt]                 let _444: Int = Int(0)
// [KnfOpt]                 let join flip_loop.866: Unit = (i.867: Int) {
// [KnfOpt]                   let _868: Int = Int(0)
// [KnfOpt]                   let _869: Int = Get k.413[_868]
// [KnfOpt]                   let _870: Int = Int(2)
// [KnfOpt]                   let _871: Int = Div(_869, _870)
// [KnfOpt]                   if (i.867 <= _871) then {
// [KnfOpt]                     let _872: Int = Int(0)
// [KnfOpt]                     let _873: Int = Get perm.18[i.867]
// [KnfOpt]                     let _874: Unit = Put t.419[_872] = _873
// [KnfOpt]                     let _875: Int = Int(0)
// [KnfOpt]                     let _876: Int = Get k.413[_875]
// [KnfOpt]                     let _877: Int = Sub(_876, i.867)
// [KnfOpt]                     let _878: Int = Get perm.18[_877]
// [KnfOpt]                     let _879: Unit = Put perm.18[i.867] = _878
// [KnfOpt]                     let _880: Int = Int(0)
// [KnfOpt]                     let _881: Int = Get k.413[_880]
// [KnfOpt]                     let _882: Int = Sub(_881, i.867)
// [KnfOpt]                     let _883: Int = Int(0)
// [KnfOpt]                     let _884: Int = Get t.419[_883]
// [KnfOpt]                     let _885: Unit = Put perm.18[_882] = _884
// [KnfOpt]                     let _886: Int = Int(1)
// [KnfOpt]                     let _887: Int = Add(i.867, _886)
// [KnfOpt]                     Jump(flip_loop.866, [_887, ])
// [KnfOpt]                   } else {
// [KnfOpt]                     let _445: Unit = Unit
// [KnfOpt]                     let _446: Int = Int(0)
// [KnfOpt]                     let _447: Int = Int(0)
// [KnfOpt]                     let _448: Int = Get perm.18[_447]
// [KnfOpt]                     let _449: Unit = Put k.413[_446] = _448
// [KnfOpt]                     let _450: Int = Int(0)
// [KnfOpt]                     let _451: Int = Int(0)
// [KnfOpt]                     let _452: Int = Get flips.23[_451]
// [KnfOpt]                     let _453: Int = Int(1)
// [KnfOpt]                     let _454: Int = Add(_452, _453)
// [KnfOpt]                     let _455: Unit = Put flips.23[_450] = _454
// [KnfOpt]                     Jump(do_flip.412, [k.413, ])
// [KnfOpt]                   }
// [KnfOpt]                 }
// [KnfOpt]                 Jump(flip_loop.866, [_444, ])
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]             Jump(do_flip.412, [k.411, ])
// [KnfOpt]           }
// [KnfOpt]           let join do_flip.1002: Unit = (k.1003: Array(Int)) {
// [KnfOpt]             let _1004: Int = Int(0)
// [KnfOpt]             let _1005: Int = Get k.1003[_1004]
// [KnfOpt]             let _1006: Int = Int(0)
// [KnfOpt]             if (_1005 == _1006) then {
// [KnfOpt]               let _456: Unit = Unit
// [KnfOpt]               let _457: Int = Int(0)
// [KnfOpt]               let _458: Int = Get max_flips.26[_457]
// [KnfOpt]               let _459: Int = Int(0)
// [KnfOpt]               let _460: Int = Get flips.23[_459]
// [KnfOpt]               if (_458 <= _460) then {
// [KnfOpt]                 let _462: Int = Int(0)
// [KnfOpt]                 let _463: Int = Int(0)
// [KnfOpt]                 let _464: Int = Get flips.23[_463]
// [KnfOpt]                 let _461: Unit = Put max_flips.26[_462] = _464
// [KnfOpt]                 let _465: Int = Int(0)
// [KnfOpt]                 let _466: Int = Int(0)
// [KnfOpt]                 let _467: Int = Get check_sum.29[_466]
// [KnfOpt]                 let _468: Int = Int(0)
// [KnfOpt]                 let _469: Int = Get flips.23[_468]
// [KnfOpt]                 let _470: Int = Int(1)
// [KnfOpt]                 let _471: Int = Int(0)
// [KnfOpt]                 let _472: Int = Get nperm.32[_471]
// [KnfOpt]                 let _473: Int = Int(0)
// [KnfOpt]                 let _474: Int = Get nperm.32[_473]
// [KnfOpt]                 let _475: Int = Int(2)
// [KnfOpt]                 let _476: Int = Div(_474, _475)
// [KnfOpt]                 let _477: Int = Int(2)
// [KnfOpt]                 let _478: Int = Mul(_476, _477)
// [KnfOpt]                 let _479: Int = Sub(_472, _478)
// [KnfOpt]                 let _480: Int = Int(2)
// [KnfOpt]                 let _481: Int = Mul(_479, _480)
// [KnfOpt]                 let _482: Int = Sub(_470, _481)
// [KnfOpt]                 let _483: Int = Mul(_469, _482)
// [KnfOpt]                 let _484: Int = Add(_467, _483)
// [KnfOpt]                 let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]                 let _486: Int = Int(1)
// [KnfOpt]                 let _487: Bool = Bool(true)
// [KnfOpt]                 let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]                 let _489: Int = Int(1)
// [KnfOpt]                 let _490: Int = Int(0)
// [KnfOpt]                 let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]                 let rec go_loop.492: Unit = () {
// [KnfOpt]                   let join go_loop.493: Unit = () {
// [KnfOpt]                     let _494: Int = Int(0)
// [KnfOpt]                     let _495: Bool = Get go.488[_494]
// [KnfOpt]                     let _496: Bool = Bool(true)
// [KnfOpt]                     if (_495 == _496) then {
// [KnfOpt]                       let _497: Int = Int(0)
// [KnfOpt]                       let _498: Int = Get r.368[_497]
// [KnfOpt]                       if (_498 == n.2) then {
// [KnfOpt]                         let _500: Int = Int(0)
// [KnfOpt]                         let _501: Bool = Bool(false)
// [KnfOpt]                         let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]                         let _503: Int = Int(0)
// [KnfOpt]                         let _504: Int = Int(0)
// [KnfOpt]                         let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]                         let _499: Unit = Unit
// [KnfOpt]                         Jump(go_loop.493, [])
// [KnfOpt]                       } else {
// [KnfOpt]                         let _506: Int = Int(0)
// [KnfOpt]                         let _507: Int = Int(0)
// [KnfOpt]                         let _508: Int = Get perm1.16[_507]
// [KnfOpt]                         let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]                         let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]                           let _512: Int = Int(0)
// [KnfOpt]                           let _513: Int = Get r.368[_512]
// [KnfOpt]                           let _514: Int = Int(1)
// [KnfOpt]                           let _515: Int = Sub(_513, _514)
// [KnfOpt]                           if (i.511 <= _515) then {
// [KnfOpt]                             let _516: Int = Int(1)
// [KnfOpt]                             let _517: Int = Add(i.511, _516)
// [KnfOpt]                             let _518: Int = Get perm1.16[_517]
// [KnfOpt]                             let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]                             let _520: Int = Int(1)
// [KnfOpt]                             let _521: Int = Add(i.511, _520)
// [KnfOpt]                             let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]                             Unit
// [KnfOpt]                           } else {
// [KnfOpt]                             Unit
// [KnfOpt]                           }
// [KnfOpt]                         }
// [KnfOpt]                         let _523: Int = Int(0)
// [KnfOpt]                         let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]                         let _525: Int = Int(0)
// [KnfOpt]                         let _526: Int = Get r.368[_525]
// [KnfOpt]                         let _527: Int = Int(0)
// [KnfOpt]                         let _528: Int = Get t.491[_527]
// [KnfOpt]                         let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]                         let _530: Int = Int(0)
// [KnfOpt]                         let _531: Int = Get r.368[_530]
// [KnfOpt]                         let _532: Int = Int(0)
// [KnfOpt]                         let _533: Int = Get r.368[_532]
// [KnfOpt]                         let _534: Int = Get count.20[_533]
// [KnfOpt]                         let _535: Int = Int(1)
// [KnfOpt]                         let _536: Int = Sub(_534, _535)
// [KnfOpt]                         let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]                         let _538: Int = Int(1)
// [KnfOpt]                         let _539: Int = Int(0)
// [KnfOpt]                         let _540: Int = Get r.368[_539]
// [KnfOpt]                         let _541: Int = Get count.20[_540]
// [KnfOpt]                         if (_538 <= _541) then {
// [KnfOpt]                           let _543: Int = Int(0)
// [KnfOpt]                           let _544: Bool = Bool(false)
// [KnfOpt]                           let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]                           let _499: Unit = Unit
// [KnfOpt]                           Jump(go_loop.493, [])
// [KnfOpt]                         } else {
// [KnfOpt]                           let _545: Int = Int(0)
// [KnfOpt]                           let _546: Int = Int(0)
// [KnfOpt]                           let _547: Int = Get r.368[_546]
// [KnfOpt]                           let _548: Int = Int(1)
// [KnfOpt]                           let _549: Int = Add(_547, _548)
// [KnfOpt]                           let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]                           let _499: Unit = Unit
// [KnfOpt]                           Jump(go_loop.493, [])
// [KnfOpt]                         }
// [KnfOpt]                       }
// [KnfOpt]                     } else {
// [KnfOpt]                       Unit
// [KnfOpt]                     }
// [KnfOpt]                   }
// [KnfOpt]                   Jump(go_loop.493, [])
// [KnfOpt]                 }
// [KnfOpt]                 let join go_loop.1007: Unit = () {
// [KnfOpt]                   let _1008: Int = Int(0)
// [KnfOpt]                   let _1009: Bool = Get go.488[_1008]
// [KnfOpt]                   let _1010: Bool = Bool(true)
// [KnfOpt]                   if (_1009 == _1010) then {
// [KnfOpt]                     let _1011: Int = Int(0)
// [KnfOpt]                     let _1012: Int = Get r.368[_1011]
// [KnfOpt]                     if (_1012 == n.2) then {
// [KnfOpt]                       let _1014: Int = Int(0)
// [KnfOpt]                       let _1015: Bool = Bool(false)
// [KnfOpt]                       let _1016: Unit = Put go.488[_1014] = _1015
// [KnfOpt]                       let _1017: Int = Int(0)
// [KnfOpt]                       let _1018: Int = Int(0)
// [KnfOpt]                       let _1019: Unit = Put r.368[_1017] = _1018
// [KnfOpt]                       let _1013: Unit = Unit
// [KnfOpt]                       Jump(go_loop.1007, [])
// [KnfOpt]                     } else {
// [KnfOpt]                       let _1020: Int = Int(0)
// [KnfOpt]                       let _1021: Int = Int(0)
// [KnfOpt]                       let _1022: Int = Get perm1.16[_1021]
// [KnfOpt]                       let _1023: Unit = Put t.491[_1020] = _1022
// [KnfOpt]                       let rec move_perm1_forward.1024: Unit = (i.1025: Int) {
// [KnfOpt]                         let _1026: Int = Int(0)
// [KnfOpt]                         let _1027: Int = Get r.368[_1026]
// [KnfOpt]                         let _1028: Int = Int(1)
// [KnfOpt]                         let _1029: Int = Sub(_1027, _1028)
// [KnfOpt]                         if (i.1025 <= _1029) then {
// [KnfOpt]                           let _1030: Int = Int(1)
// [KnfOpt]                           let _1031: Int = Add(i.1025, _1030)
// [KnfOpt]                           let _1032: Int = Get perm1.16[_1031]
// [KnfOpt]                           let _1033: Unit = Put perm1.16[i.1025] = _1032
// [KnfOpt]                           let _1034: Int = Int(1)
// [KnfOpt]                           let _1035: Int = Add(i.1025, _1034)
// [KnfOpt]                           let _1036: Unit = Apply(move_perm1_forward.1024, [_1035, ])
// [KnfOpt]                           Unit
// [KnfOpt]                         } else {
// [KnfOpt]                           Unit
// [KnfOpt]                         }
// [KnfOpt]                       }
// [KnfOpt]                       let _1037: Int = Int(0)
// [KnfOpt]                       let _1038: Unit = Apply(move_perm1_forward.1024, [_1037, ])
// [KnfOpt]                       let _1039: Int = Int(0)
// [KnfOpt]                       let _1040: Int = Get r.368[_1039]
// [KnfOpt]                       let _1041: Int = Int(0)
// [KnfOpt]                       let _1042: Int = Get t.491[_1041]
// [KnfOpt]                       let _1043: Unit = Put perm1.16[_1040] = _1042
// [KnfOpt]                       let _1044: Int = Int(0)
// [KnfOpt]                       let _1045: Int = Get r.368[_1044]
// [KnfOpt]                       let _1046: Int = Int(0)
// [KnfOpt]                       let _1047: Int = Get r.368[_1046]
// [KnfOpt]                       let _1048: Int = Get count.20[_1047]
// [KnfOpt]                       let _1049: Int = Int(1)
// [KnfOpt]                       let _1050: Int = Sub(_1048, _1049)
// [KnfOpt]                       let _1051: Unit = Put count.20[_1045] = _1050
// [KnfOpt]                       let _1052: Int = Int(1)
// [KnfOpt]                       let _1053: Int = Int(0)
// [KnfOpt]                       let _1054: Int = Get r.368[_1053]
// [KnfOpt]                       let _1055: Int = Get count.20[_1054]
// [KnfOpt]                       if (_1052 <= _1055) then {
// [KnfOpt]                         let _1057: Int = Int(0)
// [KnfOpt]                         let _1058: Bool = Bool(false)
// [KnfOpt]                         let _1056: Unit = Put go.488[_1057] = _1058
// [KnfOpt]                         let _1013: Unit = Unit
// [KnfOpt]                         Jump(go_loop.1007, [])
// [KnfOpt]                       } else {
// [KnfOpt]                         let _1059: Int = Int(0)
// [KnfOpt]                         let _1060: Int = Int(0)
// [KnfOpt]                         let _1061: Int = Get r.368[_1060]
// [KnfOpt]                         let _1062: Int = Int(1)
// [KnfOpt]                         let _1063: Int = Add(_1061, _1062)
// [KnfOpt]                         let _1056: Unit = Put r.368[_1059] = _1063
// [KnfOpt]                         let _1013: Unit = Unit
// [KnfOpt]                         Jump(go_loop.1007, [])
// [KnfOpt]                       }
// [KnfOpt]                     }
// [KnfOpt]                   } else {
// [KnfOpt]                     let _550: Unit = Unit
// [KnfOpt]                     let _551: Int = Int(0)
// [KnfOpt]                     let _552: Int = Int(0)
// [KnfOpt]                     let _553: Int = Get nperm.32[_552]
// [KnfOpt]                     let _554: Int = Int(1)
// [KnfOpt]                     let _555: Int = Add(_553, _554)
// [KnfOpt]                     let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]                     Jump(compute.367, [r.368, ])
// [KnfOpt]                   }
// [KnfOpt]                 }
// [KnfOpt]                 Jump(go_loop.1007, [])
// [KnfOpt]               } else {
// [KnfOpt]                 let _461: Unit = Unit
// [KnfOpt]                 let _465: Int = Int(0)
// [KnfOpt]                 let _466: Int = Int(0)
// [KnfOpt]                 let _467: Int = Get check_sum.29[_466]
// [KnfOpt]                 let _468: Int = Int(0)
// [KnfOpt]                 let _469: Int = Get flips.23[_468]
// [KnfOpt]                 let _470: Int = Int(1)
// [KnfOpt]                 let _471: Int = Int(0)
// [KnfOpt]                 let _472: Int = Get nperm.32[_471]
// [KnfOpt]                 let _473: Int = Int(0)
// [KnfOpt]                 let _474: Int = Get nperm.32[_473]
// [KnfOpt]                 let _475: Int = Int(2)
// [KnfOpt]                 let _476: Int = Div(_474, _475)
// [KnfOpt]                 let _477: Int = Int(2)
// [KnfOpt]                 let _478: Int = Mul(_476, _477)
// [KnfOpt]                 let _479: Int = Sub(_472, _478)
// [KnfOpt]                 let _480: Int = Int(2)
// [KnfOpt]                 let _481: Int = Mul(_479, _480)
// [KnfOpt]                 let _482: Int = Sub(_470, _481)
// [KnfOpt]                 let _483: Int = Mul(_469, _482)
// [KnfOpt]                 let _484: Int = Add(_467, _483)
// [KnfOpt]                 let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]                 let _486: Int = Int(1)
// [KnfOpt]                 let _487: Bool = Bool(true)
// [KnfOpt]                 let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]                 let _489: Int = Int(1)
// [KnfOpt]                 let _490: Int = Int(0)
// [KnfOpt]                 let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]                 let rec go_loop.492: Unit = () {
// [KnfOpt]                   let join go_loop.493: Unit = () {
// [KnfOpt]                     let _494: Int = Int(0)
// [KnfOpt]                     let _495: Bool = Get go.488[_494]
// [KnfOpt]                     let _496: Bool = Bool(true)
// [KnfOpt]                     if (_495 == _496) then {
// [KnfOpt]                       let _497: Int = Int(0)
// [KnfOpt]                       let _498: Int = Get r.368[_497]
// [KnfOpt]                       if (_498 == n.2) then {
// [KnfOpt]                         let _500: Int = Int(0)
// [KnfOpt]                         let _501: Bool = Bool(false)
// [KnfOpt]                         let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]                         let _503: Int = Int(0)
// [KnfOpt]                         let _504: Int = Int(0)
// [KnfOpt]                         let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]                         let _499: Unit = Unit
// [KnfOpt]                         Jump(go_loop.493, [])
// [KnfOpt]                       } else {
// [KnfOpt]                         let _506: Int = Int(0)
// [KnfOpt]                         let _507: Int = Int(0)
// [KnfOpt]                         let _508: Int = Get perm1.16[_507]
// [KnfOpt]                         let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]                         let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]                           let _512: Int = Int(0)
// [KnfOpt]                           let _513: Int = Get r.368[_512]
// [KnfOpt]                           let _514: Int = Int(1)
// [KnfOpt]                           let _515: Int = Sub(_513, _514)
// [KnfOpt]                           if (i.511 <= _515) then {
// [KnfOpt]                             let _516: Int = Int(1)
// [KnfOpt]                             let _517: Int = Add(i.511, _516)
// [KnfOpt]                             let _518: Int = Get perm1.16[_517]
// [KnfOpt]                             let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]                             let _520: Int = Int(1)
// [KnfOpt]                             let _521: Int = Add(i.511, _520)
// [KnfOpt]                             let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]                             Unit
// [KnfOpt]                           } else {
// [KnfOpt]                             Unit
// [KnfOpt]                           }
// [KnfOpt]                         }
// [KnfOpt]                         let _523: Int = Int(0)
// [KnfOpt]                         let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]                         let _525: Int = Int(0)
// [KnfOpt]                         let _526: Int = Get r.368[_525]
// [KnfOpt]                         let _527: Int = Int(0)
// [KnfOpt]                         let _528: Int = Get t.491[_527]
// [KnfOpt]                         let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]                         let _530: Int = Int(0)
// [KnfOpt]                         let _531: Int = Get r.368[_530]
// [KnfOpt]                         let _532: Int = Int(0)
// [KnfOpt]                         let _533: Int = Get r.368[_532]
// [KnfOpt]                         let _534: Int = Get count.20[_533]
// [KnfOpt]                         let _535: Int = Int(1)
// [KnfOpt]                         let _536: Int = Sub(_534, _535)
// [KnfOpt]                         let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]                         let _538: Int = Int(1)
// [KnfOpt]                         let _539: Int = Int(0)
// [KnfOpt]                         let _540: Int = Get r.368[_539]
// [KnfOpt]                         let _541: Int = Get count.20[_540]
// [KnfOpt]                         if (_538 <= _541) then {
// [KnfOpt]                           let _543: Int = Int(0)
// [KnfOpt]                           let _544: Bool = Bool(false)
// [KnfOpt]                           let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]                           let _499: Unit = Unit
// [KnfOpt]                           Jump(go_loop.493, [])
// [KnfOpt]                         } else {
// [KnfOpt]                           let _545: Int = Int(0)
// [KnfOpt]                           let _546: Int = Int(0)
// [KnfOpt]                           let _547: Int = Get r.368[_546]
// [KnfOpt]                           let _548: Int = Int(1)
// [KnfOpt]                           let _549: Int = Add(_547, _548)
// [KnfOpt]                           let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]                           let _499: Unit = Unit
// [KnfOpt]                           Jump(go_loop.493, [])
// [KnfOpt]                         }
// [KnfOpt]                       }
// [KnfOpt]                     } else {
// [KnfOpt]                       Unit
// [KnfOpt]                     }
// [KnfOpt]                   }
// [KnfOpt]                   Jump(go_loop.493, [])
// [KnfOpt]                 }
// [KnfOpt]                 let join go_loop.1064: Unit = () {
// [KnfOpt]                   let _1065: Int = Int(0)
// [KnfOpt]                   let _1066: Bool = Get go.488[_1065]
// [KnfOpt]                   let _1067: Bool = Bool(true)
// [KnfOpt]                   if (_1066 == _1067) then {
// [KnfOpt]                     let _1068: Int = Int(0)
// [KnfOpt]                     let _1069: Int = Get r.368[_1068]
// [KnfOpt]                     if (_1069 == n.2) then {
// [KnfOpt]                       let _1071: Int = Int(0)
// [KnfOpt]                       let _1072: Bool = Bool(false)
// [KnfOpt]                       let _1073: Unit = Put go.488[_1071] = _1072
// [KnfOpt]                       let _1074: Int = Int(0)
// [KnfOpt]                       let _1075: Int = Int(0)
// [KnfOpt]                       let _1076: Unit = Put r.368[_1074] = _1075
// [KnfOpt]                       let _1070: Unit = Unit
// [KnfOpt]                       Jump(go_loop.1064, [])
// [KnfOpt]                     } else {
// [KnfOpt]                       let _1077: Int = Int(0)
// [KnfOpt]                       let _1078: Int = Int(0)
// [KnfOpt]                       let _1079: Int = Get perm1.16[_1078]
// [KnfOpt]                       let _1080: Unit = Put t.491[_1077] = _1079
// [KnfOpt]                       let rec move_perm1_forward.1081: Unit = (i.1082: Int) {
// [KnfOpt]                         let _1083: Int = Int(0)
// [KnfOpt]                         let _1084: Int = Get r.368[_1083]
// [KnfOpt]                         let _1085: Int = Int(1)
// [KnfOpt]                         let _1086: Int = Sub(_1084, _1085)
// [KnfOpt]                         if (i.1082 <= _1086) then {
// [KnfOpt]                           let _1087: Int = Int(1)
// [KnfOpt]                           let _1088: Int = Add(i.1082, _1087)
// [KnfOpt]                           let _1089: Int = Get perm1.16[_1088]
// [KnfOpt]                           let _1090: Unit = Put perm1.16[i.1082] = _1089
// [KnfOpt]                           let _1091: Int = Int(1)
// [KnfOpt]                           let _1092: Int = Add(i.1082, _1091)
// [KnfOpt]                           let _1093: Unit = Apply(move_perm1_forward.1081, [_1092, ])
// [KnfOpt]                           Unit
// [KnfOpt]                         } else {
// [KnfOpt]                           Unit
// [KnfOpt]                         }
// [KnfOpt]                       }
// [KnfOpt]                       let _1094: Int = Int(0)
// [KnfOpt]                       let _1095: Unit = Apply(move_perm1_forward.1081, [_1094, ])
// [KnfOpt]                       let _1096: Int = Int(0)
// [KnfOpt]                       let _1097: Int = Get r.368[_1096]
// [KnfOpt]                       let _1098: Int = Int(0)
// [KnfOpt]                       let _1099: Int = Get t.491[_1098]
// [KnfOpt]                       let _1100: Unit = Put perm1.16[_1097] = _1099
// [KnfOpt]                       let _1101: Int = Int(0)
// [KnfOpt]                       let _1102: Int = Get r.368[_1101]
// [KnfOpt]                       let _1103: Int = Int(0)
// [KnfOpt]                       let _1104: Int = Get r.368[_1103]
// [KnfOpt]                       let _1105: Int = Get count.20[_1104]
// [KnfOpt]                       let _1106: Int = Int(1)
// [KnfOpt]                       let _1107: Int = Sub(_1105, _1106)
// [KnfOpt]                       let _1108: Unit = Put count.20[_1102] = _1107
// [KnfOpt]                       let _1109: Int = Int(1)
// [KnfOpt]                       let _1110: Int = Int(0)
// [KnfOpt]                       let _1111: Int = Get r.368[_1110]
// [KnfOpt]                       let _1112: Int = Get count.20[_1111]
// [KnfOpt]                       if (_1109 <= _1112) then {
// [KnfOpt]                         let _1114: Int = Int(0)
// [KnfOpt]                         let _1115: Bool = Bool(false)
// [KnfOpt]                         let _1113: Unit = Put go.488[_1114] = _1115
// [KnfOpt]                         let _1070: Unit = Unit
// [KnfOpt]                         Jump(go_loop.1064, [])
// [KnfOpt]                       } else {
// [KnfOpt]                         let _1116: Int = Int(0)
// [KnfOpt]                         let _1117: Int = Int(0)
// [KnfOpt]                         let _1118: Int = Get r.368[_1117]
// [KnfOpt]                         let _1119: Int = Int(1)
// [KnfOpt]                         let _1120: Int = Add(_1118, _1119)
// [KnfOpt]                         let _1113: Unit = Put r.368[_1116] = _1120
// [KnfOpt]                         let _1070: Unit = Unit
// [KnfOpt]                         Jump(go_loop.1064, [])
// [KnfOpt]                       }
// [KnfOpt]                     }
// [KnfOpt]                   } else {
// [KnfOpt]                     let _550: Unit = Unit
// [KnfOpt]                     let _551: Int = Int(0)
// [KnfOpt]                     let _552: Int = Int(0)
// [KnfOpt]                     let _553: Int = Get nperm.32[_552]
// [KnfOpt]                     let _554: Int = Int(1)
// [KnfOpt]                     let _555: Int = Add(_553, _554)
// [KnfOpt]                     let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]                     Jump(compute.367, [r.368, ])
// [KnfOpt]                   }
// [KnfOpt]                 }
// [KnfOpt]                 Jump(go_loop.1064, [])
// [KnfOpt]               }
// [KnfOpt]             } else {
// [KnfOpt]               let _1121: Int = Int(1)
// [KnfOpt]               let _1122: Int = Int(0)
// [KnfOpt]               let t.1123: Array(Int) = ExtApply(minimbt_create_array, [_1121, _1122, ])
// [KnfOpt]               let rec flip_loop.1124: Unit = (i.1125: Int) {
// [KnfOpt]                 let join flip_loop.1126: Unit = (i.1127: Int) {
// [KnfOpt]                   let _1128: Int = Int(0)
// [KnfOpt]                   let _1129: Int = Get k.1003[_1128]
// [KnfOpt]                   let _1130: Int = Int(2)
// [KnfOpt]                   let _1131: Int = Div(_1129, _1130)
// [KnfOpt]                   if (i.1127 <= _1131) then {
// [KnfOpt]                     let _1132: Int = Int(0)
// [KnfOpt]                     let _1133: Int = Get perm.18[i.1127]
// [KnfOpt]                     let _1134: Unit = Put t.1123[_1132] = _1133
// [KnfOpt]                     let _1135: Int = Int(0)
// [KnfOpt]                     let _1136: Int = Get k.1003[_1135]
// [KnfOpt]                     let _1137: Int = Sub(_1136, i.1127)
// [KnfOpt]                     let _1138: Int = Get perm.18[_1137]
// [KnfOpt]                     let _1139: Unit = Put perm.18[i.1127] = _1138
// [KnfOpt]                     let _1140: Int = Int(0)
// [KnfOpt]                     let _1141: Int = Get k.1003[_1140]
// [KnfOpt]                     let _1142: Int = Sub(_1141, i.1127)
// [KnfOpt]                     let _1143: Int = Int(0)
// [KnfOpt]                     let _1144: Int = Get t.1123[_1143]
// [KnfOpt]                     let _1145: Unit = Put perm.18[_1142] = _1144
// [KnfOpt]                     let _1146: Int = Int(1)
// [KnfOpt]                     let _1147: Int = Add(i.1127, _1146)
// [KnfOpt]                     Jump(flip_loop.1126, [_1147, ])
// [KnfOpt]                   } else {
// [KnfOpt]                     Unit
// [KnfOpt]                   }
// [KnfOpt]                 }
// [KnfOpt]                 Jump(flip_loop.1126, [i.1125, ])
// [KnfOpt]               }
// [KnfOpt]               let _1148: Int = Int(0)
// [KnfOpt]               let _1149: Unit = Apply(flip_loop.1124, [_1148, ])
// [KnfOpt]               let _1150: Int = Int(0)
// [KnfOpt]               let _1151: Int = Int(0)
// [KnfOpt]               let _1152: Int = Get perm.18[_1151]
// [KnfOpt]               let _1153: Unit = Put k.1003[_1150] = _1152
// [KnfOpt]               let _1154: Int = Int(0)
// [KnfOpt]               let _1155: Int = Int(0)
// [KnfOpt]               let _1156: Int = Get flips.23[_1155]
// [KnfOpt]               let _1157: Int = Int(1)
// [KnfOpt]               let _1158: Int = Add(_1156, _1157)
// [KnfOpt]               let _1159: Unit = Put flips.23[_1154] = _1158
// [KnfOpt]               Jump(do_flip.1002, [k.1003, ])
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           Jump(do_flip.1002, [k.409, ])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(copy_perm.858, [_382, ])
// [KnfOpt]     } else {
// [KnfOpt]       Unit
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(compute.367, [r.36, ])
// [KnfOpt] }
// [KnfOpt] let join compute.1160: Unit = (r.1161: Array(Int)) {
// [KnfOpt]   let _1162: Int = Int(1)
// [KnfOpt]   let _1163: Int = Int(0)
// [KnfOpt]   let _1164: Int = Get r.1161[_1163]
// [KnfOpt]   if (_1162 <= _1164) then {
// [KnfOpt]     let rec copy_perm.1165: Unit = (i.1166: Int) {
// [KnfOpt]       let join copy_perm.1167: Unit = (i.1168: Int) {
// [KnfOpt]         let _1169: Int = Int(1)
// [KnfOpt]         let _1170: Int = Sub(n.2, _1169)
// [KnfOpt]         if (i.1168 <= _1170) then {
// [KnfOpt]           let _1171: Int = Get perm1.16[i.1168]
// [KnfOpt]           let _1172: Unit = Put perm.18[i.1168] = _1171
// [KnfOpt]           let _1173: Int = Int(1)
// [KnfOpt]           let _1174: Int = Add(i.1168, _1173)
// [KnfOpt]           Jump(copy_perm.1167, [_1174, ])
// [KnfOpt]         } else {
// [KnfOpt]           Unit
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(copy_perm.1167, [i.1166, ])
// [KnfOpt]     }
// [KnfOpt]     let _1175: Int = Int(0)
// [KnfOpt]     let _1176: Unit = Apply(copy_perm.1165, [_1175, ])
// [KnfOpt]     let rec init_count.1177: Unit = () {
// [KnfOpt]       let _1178: Int = Int(0)
// [KnfOpt]       let _1179: Int = Get r.1161[_1178]
// [KnfOpt]       let _1180: Int = Int(1)
// [KnfOpt]       if (_1179 == _1180) then {
// [KnfOpt]         let _1181: Unit = Unit
// [KnfOpt]         Unit
// [KnfOpt]       } else {
// [KnfOpt]         let _1182: Int = Int(0)
// [KnfOpt]         let _1183: Int = Get r.1161[_1182]
// [KnfOpt]         let _1184: Int = Int(1)
// [KnfOpt]         let _1185: Int = Sub(_1183, _1184)
// [KnfOpt]         let _1186: Int = Int(0)
// [KnfOpt]         let _1187: Int = Get r.1161[_1186]
// [KnfOpt]         let _1188: Unit = Put count.20[_1185] = _1187
// [KnfOpt]         let _1189: Int = Int(0)
// [KnfOpt]         let _1190: Int = Int(0)
// [KnfOpt]         let _1191: Int = Get r.1161[_1190]
// [KnfOpt]         let _1192: Int = Int(1)
// [KnfOpt]         let _1193: Int = Sub(_1191, _1192)
// [KnfOpt]         let _1194: Unit = Put r.1161[_1189] = _1193
// [KnfOpt]         let _1181: Unit = Apply(init_count.1177, [])
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     let _1195: Unit = Apply(init_count.1177, [])
// [KnfOpt]     let _1196: Int = Int(0)
// [KnfOpt]     let _1197: Int = Int(0)
// [KnfOpt]     let _1198: Unit = Put flips.23[_1196] = _1197
// [KnfOpt]     let _1199: Int = Int(1)
// [KnfOpt]     let _1200: Int = Int(0)
// [KnfOpt]     let _1201: Int = Get perm.18[_1200]
// [KnfOpt]     let k.1202: Array(Int) = ExtApply(minimbt_create_array, [_1199, _1201, ])
// [KnfOpt]     let rec do_flip.1203: Unit = (k.1204: Array(Int)) {
// [KnfOpt]       let join do_flip.1205: Unit = (k.1206: Array(Int)) {
// [KnfOpt]         let _1207: Int = Int(0)
// [KnfOpt]         let _1208: Int = Get k.1206[_1207]
// [KnfOpt]         let _1209: Int = Int(0)
// [KnfOpt]         if (_1208 == _1209) then {
// [KnfOpt]           Unit
// [KnfOpt]         } else {
// [KnfOpt]           let _1210: Int = Int(1)
// [KnfOpt]           let _1211: Int = Int(0)
// [KnfOpt]           let t.1212: Array(Int) = ExtApply(minimbt_create_array, [_1210, _1211, ])
// [KnfOpt]           let rec flip_loop.1213: Unit = (i.1214: Int) {
// [KnfOpt]             let join flip_loop.1215: Unit = (i.1216: Int) {
// [KnfOpt]               let _1217: Int = Int(0)
// [KnfOpt]               let _1218: Int = Get k.1206[_1217]
// [KnfOpt]               let _1219: Int = Int(2)
// [KnfOpt]               let _1220: Int = Div(_1218, _1219)
// [KnfOpt]               if (i.1216 <= _1220) then {
// [KnfOpt]                 let _1221: Int = Int(0)
// [KnfOpt]                 let _1222: Int = Get perm.18[i.1216]
// [KnfOpt]                 let _1223: Unit = Put t.1212[_1221] = _1222
// [KnfOpt]                 let _1224: Int = Int(0)
// [KnfOpt]                 let _1225: Int = Get k.1206[_1224]
// [KnfOpt]                 let _1226: Int = Sub(_1225, i.1216)
// [KnfOpt]                 let _1227: Int = Get perm.18[_1226]
// [KnfOpt]                 let _1228: Unit = Put perm.18[i.1216] = _1227
// [KnfOpt]                 let _1229: Int = Int(0)
// [KnfOpt]                 let _1230: Int = Get k.1206[_1229]
// [KnfOpt]                 let _1231: Int = Sub(_1230, i.1216)
// [KnfOpt]                 let _1232: Int = Int(0)
// [KnfOpt]                 let _1233: Int = Get t.1212[_1232]
// [KnfOpt]                 let _1234: Unit = Put perm.18[_1231] = _1233
// [KnfOpt]                 let _1235: Int = Int(1)
// [KnfOpt]                 let _1236: Int = Add(i.1216, _1235)
// [KnfOpt]                 Jump(flip_loop.1215, [_1236, ])
// [KnfOpt]               } else {
// [KnfOpt]                 Unit
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]             Jump(flip_loop.1215, [i.1214, ])
// [KnfOpt]           }
// [KnfOpt]           let _1237: Int = Int(0)
// [KnfOpt]           let _1238: Unit = Apply(flip_loop.1213, [_1237, ])
// [KnfOpt]           let _1239: Int = Int(0)
// [KnfOpt]           let _1240: Int = Int(0)
// [KnfOpt]           let _1241: Int = Get perm.18[_1240]
// [KnfOpt]           let _1242: Unit = Put k.1206[_1239] = _1241
// [KnfOpt]           let _1243: Int = Int(0)
// [KnfOpt]           let _1244: Int = Int(0)
// [KnfOpt]           let _1245: Int = Get flips.23[_1244]
// [KnfOpt]           let _1246: Int = Int(1)
// [KnfOpt]           let _1247: Int = Add(_1245, _1246)
// [KnfOpt]           let _1248: Unit = Put flips.23[_1243] = _1247
// [KnfOpt]           Jump(do_flip.1205, [k.1206, ])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(do_flip.1205, [k.1204, ])
// [KnfOpt]     }
// [KnfOpt]     let _1249: Unit = Apply(do_flip.1203, [k.1202, ])
// [KnfOpt]     let _1250: Int = Int(0)
// [KnfOpt]     let _1251: Int = Get max_flips.26[_1250]
// [KnfOpt]     let _1252: Int = Int(0)
// [KnfOpt]     let _1253: Int = Get flips.23[_1252]
// [KnfOpt]     if (_1251 <= _1253) then {
// [KnfOpt]       let _1255: Int = Int(0)
// [KnfOpt]       let _1256: Int = Int(0)
// [KnfOpt]       let _1257: Int = Get flips.23[_1256]
// [KnfOpt]       let _1254: Unit = Put max_flips.26[_1255] = _1257
// [KnfOpt]       let _1258: Int = Int(0)
// [KnfOpt]       let _1259: Int = Int(0)
// [KnfOpt]       let _1260: Int = Get check_sum.29[_1259]
// [KnfOpt]       let _1261: Int = Int(0)
// [KnfOpt]       let _1262: Int = Get flips.23[_1261]
// [KnfOpt]       let _1263: Int = Int(1)
// [KnfOpt]       let _1264: Int = Int(0)
// [KnfOpt]       let _1265: Int = Get nperm.32[_1264]
// [KnfOpt]       let _1266: Int = Int(0)
// [KnfOpt]       let _1267: Int = Get nperm.32[_1266]
// [KnfOpt]       let _1268: Int = Int(2)
// [KnfOpt]       let _1269: Int = Div(_1267, _1268)
// [KnfOpt]       let _1270: Int = Int(2)
// [KnfOpt]       let _1271: Int = Mul(_1269, _1270)
// [KnfOpt]       let _1272: Int = Sub(_1265, _1271)
// [KnfOpt]       let _1273: Int = Int(2)
// [KnfOpt]       let _1274: Int = Mul(_1272, _1273)
// [KnfOpt]       let _1275: Int = Sub(_1263, _1274)
// [KnfOpt]       let _1276: Int = Mul(_1262, _1275)
// [KnfOpt]       let _1277: Int = Add(_1260, _1276)
// [KnfOpt]       let _1278: Unit = Put check_sum.29[_1258] = _1277
// [KnfOpt]       let _1279: Int = Int(1)
// [KnfOpt]       let _1280: Bool = Bool(true)
// [KnfOpt]       let go.1281: Array(Bool) = ExtApply(minimbt_create_array, [_1279, _1280, ])
// [KnfOpt]       let _1282: Int = Int(1)
// [KnfOpt]       let _1283: Int = Int(0)
// [KnfOpt]       let t.1284: Array(Int) = ExtApply(minimbt_create_array, [_1282, _1283, ])
// [KnfOpt]       let rec go_loop.1285: Unit = () {
// [KnfOpt]         let join go_loop.1286: Unit = () {
// [KnfOpt]           let _1287: Int = Int(0)
// [KnfOpt]           let _1288: Bool = Get go.1281[_1287]
// [KnfOpt]           let _1289: Bool = Bool(true)
// [KnfOpt]           if (_1288 == _1289) then {
// [KnfOpt]             let _1290: Int = Int(0)
// [KnfOpt]             let _1291: Int = Get r.1161[_1290]
// [KnfOpt]             if (_1291 == n.2) then {
// [KnfOpt]               let _1293: Int = Int(0)
// [KnfOpt]               let _1294: Bool = Bool(false)
// [KnfOpt]               let _1295: Unit = Put go.1281[_1293] = _1294
// [KnfOpt]               let _1296: Int = Int(0)
// [KnfOpt]               let _1297: Int = Int(0)
// [KnfOpt]               let _1298: Unit = Put r.1161[_1296] = _1297
// [KnfOpt]               let _1292: Unit = Unit
// [KnfOpt]               Jump(go_loop.1286, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _1299: Int = Int(0)
// [KnfOpt]               let _1300: Int = Int(0)
// [KnfOpt]               let _1301: Int = Get perm1.16[_1300]
// [KnfOpt]               let _1302: Unit = Put t.1284[_1299] = _1301
// [KnfOpt]               let rec move_perm1_forward.1303: Unit = (i.1304: Int) {
// [KnfOpt]                 let _1305: Int = Int(0)
// [KnfOpt]                 let _1306: Int = Get r.1161[_1305]
// [KnfOpt]                 let _1307: Int = Int(1)
// [KnfOpt]                 let _1308: Int = Sub(_1306, _1307)
// [KnfOpt]                 if (i.1304 <= _1308) then {
// [KnfOpt]                   let _1309: Int = Int(1)
// [KnfOpt]                   let _1310: Int = Add(i.1304, _1309)
// [KnfOpt]                   let _1311: Int = Get perm1.16[_1310]
// [KnfOpt]                   let _1312: Unit = Put perm1.16[i.1304] = _1311
// [KnfOpt]                   let _1313: Int = Int(1)
// [KnfOpt]                   let _1314: Int = Add(i.1304, _1313)
// [KnfOpt]                   let _1315: Unit = Apply(move_perm1_forward.1303, [_1314, ])
// [KnfOpt]                   Unit
// [KnfOpt]                 } else {
// [KnfOpt]                   Unit
// [KnfOpt]                 }
// [KnfOpt]               }
// [KnfOpt]               let _1316: Int = Int(0)
// [KnfOpt]               let _1317: Unit = Apply(move_perm1_forward.1303, [_1316, ])
// [KnfOpt]               let _1318: Int = Int(0)
// [KnfOpt]               let _1319: Int = Get r.1161[_1318]
// [KnfOpt]               let _1320: Int = Int(0)
// [KnfOpt]               let _1321: Int = Get t.1284[_1320]
// [KnfOpt]               let _1322: Unit = Put perm1.16[_1319] = _1321
// [KnfOpt]               let _1323: Int = Int(0)
// [KnfOpt]               let _1324: Int = Get r.1161[_1323]
// [KnfOpt]               let _1325: Int = Int(0)
// [KnfOpt]               let _1326: Int = Get r.1161[_1325]
// [KnfOpt]               let _1327: Int = Get count.20[_1326]
// [KnfOpt]               let _1328: Int = Int(1)
// [KnfOpt]               let _1329: Int = Sub(_1327, _1328)
// [KnfOpt]               let _1330: Unit = Put count.20[_1324] = _1329
// [KnfOpt]               let _1331: Int = Int(1)
// [KnfOpt]               let _1332: Int = Int(0)
// [KnfOpt]               let _1333: Int = Get r.1161[_1332]
// [KnfOpt]               let _1334: Int = Get count.20[_1333]
// [KnfOpt]               if (_1331 <= _1334) then {
// [KnfOpt]                 let _1336: Int = Int(0)
// [KnfOpt]                 let _1337: Bool = Bool(false)
// [KnfOpt]                 let _1335: Unit = Put go.1281[_1336] = _1337
// [KnfOpt]                 let _1292: Unit = Unit
// [KnfOpt]                 Jump(go_loop.1286, [])
// [KnfOpt]               } else {
// [KnfOpt]                 let _1338: Int = Int(0)
// [KnfOpt]                 let _1339: Int = Int(0)
// [KnfOpt]                 let _1340: Int = Get r.1161[_1339]
// [KnfOpt]                 let _1341: Int = Int(1)
// [KnfOpt]                 let _1342: Int = Add(_1340, _1341)
// [KnfOpt]                 let _1335: Unit = Put r.1161[_1338] = _1342
// [KnfOpt]                 let _1292: Unit = Unit
// [KnfOpt]                 Jump(go_loop.1286, [])
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(go_loop.1286, [])
// [KnfOpt]       }
// [KnfOpt]       let _1343: Unit = Apply(go_loop.1285, [])
// [KnfOpt]       let _1344: Int = Int(0)
// [KnfOpt]       let _1345: Int = Int(0)
// [KnfOpt]       let _1346: Int = Get nperm.32[_1345]
// [KnfOpt]       let _1347: Int = Int(1)
// [KnfOpt]       let _1348: Int = Add(_1346, _1347)
// [KnfOpt]       let _1349: Unit = Put nperm.32[_1344] = _1348
// [KnfOpt]       Jump(compute.1160, [r.1161, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _1254: Unit = Unit
// [KnfOpt]       let _1350: Int = Int(0)
// [KnfOpt]       let _1351: Int = Int(0)
// [KnfOpt]       let _1352: Int = Get check_sum.29[_1351]
// [KnfOpt]       let _1353: Int = Int(0)
// [KnfOpt]       let _1354: Int = Get flips.23[_1353]
// [KnfOpt]       let _1355: Int = Int(1)
// [KnfOpt]       let _1356: Int = Int(0)
// [KnfOpt]       let _1357: Int = Get nperm.32[_1356]
// [KnfOpt]       let _1358: Int = Int(0)
// [KnfOpt]       let _1359: Int = Get nperm.32[_1358]
// [KnfOpt]       let _1360: Int = Int(2)
// [KnfOpt]       let _1361: Int = Div(_1359, _1360)
// [KnfOpt]       let _1362: Int = Int(2)
// [KnfOpt]       let _1363: Int = Mul(_1361, _1362)
// [KnfOpt]       let _1364: Int = Sub(_1357, _1363)
// [KnfOpt]       let _1365: Int = Int(2)
// [KnfOpt]       let _1366: Int = Mul(_1364, _1365)
// [KnfOpt]       let _1367: Int = Sub(_1355, _1366)
// [KnfOpt]       let _1368: Int = Mul(_1354, _1367)
// [KnfOpt]       let _1369: Int = Add(_1352, _1368)
// [KnfOpt]       let _1370: Unit = Put check_sum.29[_1350] = _1369
// [KnfOpt]       let _1371: Int = Int(1)
// [KnfOpt]       let _1372: Bool = Bool(true)
// [KnfOpt]       let go.1373: Array(Bool) = ExtApply(minimbt_create_array, [_1371, _1372, ])
// [KnfOpt]       let _1374: Int = Int(1)
// [KnfOpt]       let _1375: Int = Int(0)
// [KnfOpt]       let t.1376: Array(Int) = ExtApply(minimbt_create_array, [_1374, _1375, ])
// [KnfOpt]       let rec go_loop.1377: Unit = () {
// [KnfOpt]         let join go_loop.1378: Unit = () {
// [KnfOpt]           let _1379: Int = Int(0)
// [KnfOpt]           let _1380: Bool = Get go.1373[_1379]
// [KnfOpt]           let _1381: Bool = Bool(true)
// [KnfOpt]           if (_1380 == _1381) then {
// [KnfOpt]             let _1382: Int = Int(0)
// [KnfOpt]             let _1383: Int = Get r.1161[_1382]
// [KnfOpt]             if (_1383 == n.2) then {
// [KnfOpt]               let _1385: Int = Int(0)
// [KnfOpt]               let _1386: Bool = Bool(false)
// [KnfOpt]               let _1387: Unit = Put go.1373[_1385] = _1386
// [KnfOpt]               let _1388: Int = Int(0)
// [KnfOpt]               let _1389: Int = Int(0)
// [KnfOpt]               let _1390: Unit = Put r.1161[_1388] = _1389
// [KnfOpt]               let _1384: Unit = Unit
// [KnfOpt]               Jump(go_loop.1378, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _1391: Int = Int(0)
// [KnfOpt]               let _1392: Int = Int(0)
// [KnfOpt]               let _1393: Int = Get perm1.16[_1392]
// [KnfOpt]               let _1394: Unit = Put t.1376[_1391] = _1393
// [KnfOpt]               let rec move_perm1_forward.1395: Unit = (i.1396: Int) {
// [KnfOpt]                 let _1397: Int = Int(0)
// [KnfOpt]                 let _1398: Int = Get r.1161[_1397]
// [KnfOpt]                 let _1399: Int = Int(1)
// [KnfOpt]                 let _1400: Int = Sub(_1398, _1399)
// [KnfOpt]                 if (i.1396 <= _1400) then {
// [KnfOpt]                   let _1401: Int = Int(1)
// [KnfOpt]                   let _1402: Int = Add(i.1396, _1401)
// [KnfOpt]                   let _1403: Int = Get perm1.16[_1402]
// [KnfOpt]                   let _1404: Unit = Put perm1.16[i.1396] = _1403
// [KnfOpt]                   let _1405: Int = Int(1)
// [KnfOpt]                   let _1406: Int = Add(i.1396, _1405)
// [KnfOpt]                   let _1407: Unit = Apply(move_perm1_forward.1395, [_1406, ])
// [KnfOpt]                   Unit
// [KnfOpt]                 } else {
// [KnfOpt]                   Unit
// [KnfOpt]                 }
// [KnfOpt]               }
// [KnfOpt]               let _1408: Int = Int(0)
// [KnfOpt]               let _1409: Unit = Apply(move_perm1_forward.1395, [_1408, ])
// [KnfOpt]               let _1410: Int = Int(0)
// [KnfOpt]               let _1411: Int = Get r.1161[_1410]
// [KnfOpt]               let _1412: Int = Int(0)
// [KnfOpt]               let _1413: Int = Get t.1376[_1412]
// [KnfOpt]               let _1414: Unit = Put perm1.16[_1411] = _1413
// [KnfOpt]               let _1415: Int = Int(0)
// [KnfOpt]               let _1416: Int = Get r.1161[_1415]
// [KnfOpt]               let _1417: Int = Int(0)
// [KnfOpt]               let _1418: Int = Get r.1161[_1417]
// [KnfOpt]               let _1419: Int = Get count.20[_1418]
// [KnfOpt]               let _1420: Int = Int(1)
// [KnfOpt]               let _1421: Int = Sub(_1419, _1420)
// [KnfOpt]               let _1422: Unit = Put count.20[_1416] = _1421
// [KnfOpt]               let _1423: Int = Int(1)
// [KnfOpt]               let _1424: Int = Int(0)
// [KnfOpt]               let _1425: Int = Get r.1161[_1424]
// [KnfOpt]               let _1426: Int = Get count.20[_1425]
// [KnfOpt]               if (_1423 <= _1426) then {
// [KnfOpt]                 let _1428: Int = Int(0)
// [KnfOpt]                 let _1429: Bool = Bool(false)
// [KnfOpt]                 let _1427: Unit = Put go.1373[_1428] = _1429
// [KnfOpt]                 let _1384: Unit = Unit
// [KnfOpt]                 Jump(go_loop.1378, [])
// [KnfOpt]               } else {
// [KnfOpt]                 let _1430: Int = Int(0)
// [KnfOpt]                 let _1431: Int = Int(0)
// [KnfOpt]                 let _1432: Int = Get r.1161[_1431]
// [KnfOpt]                 let _1433: Int = Int(1)
// [KnfOpt]                 let _1434: Int = Add(_1432, _1433)
// [KnfOpt]                 let _1427: Unit = Put r.1161[_1430] = _1434
// [KnfOpt]                 let _1384: Unit = Unit
// [KnfOpt]                 Jump(go_loop.1378, [])
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(go_loop.1378, [])
// [KnfOpt]       }
// [KnfOpt]       let _1435: Unit = Apply(go_loop.1377, [])
// [KnfOpt]       let _1436: Int = Int(0)
// [KnfOpt]       let _1437: Int = Int(0)
// [KnfOpt]       let _1438: Int = Get nperm.32[_1437]
// [KnfOpt]       let _1439: Int = Int(1)
// [KnfOpt]       let _1440: Int = Add(_1438, _1439)
// [KnfOpt]       let _1441: Unit = Put nperm.32[_1436] = _1440
// [KnfOpt]       Jump(compute.1160, [r.1161, ])
// [KnfOpt]     }
// [KnfOpt]   } else {
// [KnfOpt]     let _218: Unit = Unit
// [KnfOpt]     let _219: Int = Int(0)
// [KnfOpt]     let _220: Int = Get max_flips.26[_219]
// [KnfOpt]     let _221: Int = Int(0)
// [KnfOpt]     let _222: Int = Get check_sum.29[_221]
// [KnfOpt]     Tuple([_220, _222, ])
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Jump(compute.1160, [r.34, ])
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Knf inline Some(flip_loop) let _445: Unit = Unit
// [KnfOpt] let _446: Int = Int(0)
// [KnfOpt] let _447: Int = Int(0)
// [KnfOpt] let _448: Int = Get perm.18[_447]
// [KnfOpt] let _449: Unit = Put k.413[_446] = _448
// [KnfOpt] let _450: Int = Int(0)
// [KnfOpt] let _451: Int = Int(0)
// [KnfOpt] let _452: Int = Get flips.23[_451]
// [KnfOpt] let _453: Int = Int(1)
// [KnfOpt] let _454: Int = Add(_452, _453)
// [KnfOpt] let _455: Unit = Put flips.23[_450] = _454
// [KnfOpt] Jump(do_flip.412, [k.413, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Knf inline Some(go_loop) let _550: Unit = Unit
// [KnfOpt] let _551: Int = Int(0)
// [KnfOpt] let _552: Int = Int(0)
// [KnfOpt] let _553: Int = Get nperm.32[_552]
// [KnfOpt] let _554: Int = Int(1)
// [KnfOpt] let _555: Int = Add(_553, _554)
// [KnfOpt] let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt] Jump(compute.367, [r.368, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Knf inline Some(go_loop) let _550: Unit = Unit
// [KnfOpt] let _551: Int = Int(0)
// [KnfOpt] let _552: Int = Int(0)
// [KnfOpt] let _553: Int = Get nperm.32[_552]
// [KnfOpt] let _554: Int = Int(1)
// [KnfOpt] let _555: Int = Add(_553, _554)
// [KnfOpt] let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt] Jump(compute.367, [r.368, ])
// [KnfOpt] Knf inline Some(do_flip) let _456: Unit = Unit
// [KnfOpt] let _457: Int = Int(0)
// [KnfOpt] let _458: Int = Get max_flips.26[_457]
// [KnfOpt] let _459: Int = Int(0)
// [KnfOpt] let _460: Int = Get flips.23[_459]
// [KnfOpt] if (_458 <= _460) then {
// [KnfOpt]   let _462: Int = Int(0)
// [KnfOpt]   let _463: Int = Int(0)
// [KnfOpt]   let _464: Int = Get flips.23[_463]
// [KnfOpt]   let _461: Unit = Put max_flips.26[_462] = _464
// [KnfOpt]   let _465: Int = Int(0)
// [KnfOpt]   let _466: Int = Int(0)
// [KnfOpt]   let _467: Int = Get check_sum.29[_466]
// [KnfOpt]   let _468: Int = Int(0)
// [KnfOpt]   let _469: Int = Get flips.23[_468]
// [KnfOpt]   let _470: Int = Int(1)
// [KnfOpt]   let _471: Int = Int(0)
// [KnfOpt]   let _472: Int = Get nperm.32[_471]
// [KnfOpt]   let _473: Int = Int(0)
// [KnfOpt]   let _474: Int = Get nperm.32[_473]
// [KnfOpt]   let _475: Int = Int(2)
// [KnfOpt]   let _476: Int = Div(_474, _475)
// [KnfOpt]   let _477: Int = Int(2)
// [KnfOpt]   let _478: Int = Mul(_476, _477)
// [KnfOpt]   let _479: Int = Sub(_472, _478)
// [KnfOpt]   let _480: Int = Int(2)
// [KnfOpt]   let _481: Int = Mul(_479, _480)
// [KnfOpt]   let _482: Int = Sub(_470, _481)
// [KnfOpt]   let _483: Int = Mul(_469, _482)
// [KnfOpt]   let _484: Int = Add(_467, _483)
// [KnfOpt]   let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]   let _486: Int = Int(1)
// [KnfOpt]   let _487: Bool = Bool(true)
// [KnfOpt]   let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]   let _489: Int = Int(1)
// [KnfOpt]   let _490: Int = Int(0)
// [KnfOpt]   let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]   let rec go_loop.492: Unit = () {
// [KnfOpt]     let join go_loop.493: Unit = () {
// [KnfOpt]       let _494: Int = Int(0)
// [KnfOpt]       let _495: Bool = Get go.488[_494]
// [KnfOpt]       let _496: Bool = Bool(true)
// [KnfOpt]       if (_495 == _496) then {
// [KnfOpt]         let _497: Int = Int(0)
// [KnfOpt]         let _498: Int = Get r.368[_497]
// [KnfOpt]         if (_498 == n.2) then {
// [KnfOpt]           let _500: Int = Int(0)
// [KnfOpt]           let _501: Bool = Bool(false)
// [KnfOpt]           let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]           let _503: Int = Int(0)
// [KnfOpt]           let _504: Int = Int(0)
// [KnfOpt]           let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]           let _499: Unit = Unit
// [KnfOpt]           Jump(go_loop.493, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _506: Int = Int(0)
// [KnfOpt]           let _507: Int = Int(0)
// [KnfOpt]           let _508: Int = Get perm1.16[_507]
// [KnfOpt]           let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]           let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]             let _512: Int = Int(0)
// [KnfOpt]             let _513: Int = Get r.368[_512]
// [KnfOpt]             let _514: Int = Int(1)
// [KnfOpt]             let _515: Int = Sub(_513, _514)
// [KnfOpt]             if (i.511 <= _515) then {
// [KnfOpt]               let _516: Int = Int(1)
// [KnfOpt]               let _517: Int = Add(i.511, _516)
// [KnfOpt]               let _518: Int = Get perm1.16[_517]
// [KnfOpt]               let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]               let _520: Int = Int(1)
// [KnfOpt]               let _521: Int = Add(i.511, _520)
// [KnfOpt]               let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _523: Int = Int(0)
// [KnfOpt]           let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]           let _525: Int = Int(0)
// [KnfOpt]           let _526: Int = Get r.368[_525]
// [KnfOpt]           let _527: Int = Int(0)
// [KnfOpt]           let _528: Int = Get t.491[_527]
// [KnfOpt]           let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]           let _530: Int = Int(0)
// [KnfOpt]           let _531: Int = Get r.368[_530]
// [KnfOpt]           let _532: Int = Int(0)
// [KnfOpt]           let _533: Int = Get r.368[_532]
// [KnfOpt]           let _534: Int = Get count.20[_533]
// [KnfOpt]           let _535: Int = Int(1)
// [KnfOpt]           let _536: Int = Sub(_534, _535)
// [KnfOpt]           let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]           let _538: Int = Int(1)
// [KnfOpt]           let _539: Int = Int(0)
// [KnfOpt]           let _540: Int = Get r.368[_539]
// [KnfOpt]           let _541: Int = Get count.20[_540]
// [KnfOpt]           if (_538 <= _541) then {
// [KnfOpt]             let _543: Int = Int(0)
// [KnfOpt]             let _544: Bool = Bool(false)
// [KnfOpt]             let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _545: Int = Int(0)
// [KnfOpt]             let _546: Int = Int(0)
// [KnfOpt]             let _547: Int = Get r.368[_546]
// [KnfOpt]             let _548: Int = Int(1)
// [KnfOpt]             let _549: Int = Add(_547, _548)
// [KnfOpt]             let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.493, [])
// [KnfOpt]   }
// [KnfOpt]   let join go_loop.1477: Unit = () {
// [KnfOpt]     let _1478: Int = Int(0)
// [KnfOpt]     let _1479: Bool = Get go.488[_1478]
// [KnfOpt]     let _1480: Bool = Bool(true)
// [KnfOpt]     if (_1479 == _1480) then {
// [KnfOpt]       let _1481: Int = Int(0)
// [KnfOpt]       let _1482: Int = Get r.368[_1481]
// [KnfOpt]       if (_1482 == n.2) then {
// [KnfOpt]         let _1484: Int = Int(0)
// [KnfOpt]         let _1485: Bool = Bool(false)
// [KnfOpt]         let _1486: Unit = Put go.488[_1484] = _1485
// [KnfOpt]         let _1487: Int = Int(0)
// [KnfOpt]         let _1488: Int = Int(0)
// [KnfOpt]         let _1489: Unit = Put r.368[_1487] = _1488
// [KnfOpt]         let _1483: Unit = Unit
// [KnfOpt]         Jump(go_loop.1477, [])
// [KnfOpt]       } else {
// [KnfOpt]         let _1490: Int = Int(0)
// [KnfOpt]         let _1491: Int = Int(0)
// [KnfOpt]         let _1492: Int = Get perm1.16[_1491]
// [KnfOpt]         let _1493: Unit = Put t.491[_1490] = _1492
// [KnfOpt]         let rec move_perm1_forward.1494: Unit = (i.1495: Int) {
// [KnfOpt]           let _1496: Int = Int(0)
// [KnfOpt]           let _1497: Int = Get r.368[_1496]
// [KnfOpt]           let _1498: Int = Int(1)
// [KnfOpt]           let _1499: Int = Sub(_1497, _1498)
// [KnfOpt]           if (i.1495 <= _1499) then {
// [KnfOpt]             let _1500: Int = Int(1)
// [KnfOpt]             let _1501: Int = Add(i.1495, _1500)
// [KnfOpt]             let _1502: Int = Get perm1.16[_1501]
// [KnfOpt]             let _1503: Unit = Put perm1.16[i.1495] = _1502
// [KnfOpt]             let _1504: Int = Int(1)
// [KnfOpt]             let _1505: Int = Add(i.1495, _1504)
// [KnfOpt]             let _1506: Unit = Apply(move_perm1_forward.1494, [_1505, ])
// [KnfOpt]             Unit
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         let _1507: Int = Int(0)
// [KnfOpt]         let _1508: Unit = Apply(move_perm1_forward.1494, [_1507, ])
// [KnfOpt]         let _1509: Int = Int(0)
// [KnfOpt]         let _1510: Int = Get r.368[_1509]
// [KnfOpt]         let _1511: Int = Int(0)
// [KnfOpt]         let _1512: Int = Get t.491[_1511]
// [KnfOpt]         let _1513: Unit = Put perm1.16[_1510] = _1512
// [KnfOpt]         let _1514: Int = Int(0)
// [KnfOpt]         let _1515: Int = Get r.368[_1514]
// [KnfOpt]         let _1516: Int = Int(0)
// [KnfOpt]         let _1517: Int = Get r.368[_1516]
// [KnfOpt]         let _1518: Int = Get count.20[_1517]
// [KnfOpt]         let _1519: Int = Int(1)
// [KnfOpt]         let _1520: Int = Sub(_1518, _1519)
// [KnfOpt]         let _1521: Unit = Put count.20[_1515] = _1520
// [KnfOpt]         let _1522: Int = Int(1)
// [KnfOpt]         let _1523: Int = Int(0)
// [KnfOpt]         let _1524: Int = Get r.368[_1523]
// [KnfOpt]         let _1525: Int = Get count.20[_1524]
// [KnfOpt]         if (_1522 <= _1525) then {
// [KnfOpt]           let _1527: Int = Int(0)
// [KnfOpt]           let _1528: Bool = Bool(false)
// [KnfOpt]           let _1526: Unit = Put go.488[_1527] = _1528
// [KnfOpt]           let _1483: Unit = Unit
// [KnfOpt]           Jump(go_loop.1477, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _1529: Int = Int(0)
// [KnfOpt]           let _1530: Int = Int(0)
// [KnfOpt]           let _1531: Int = Get r.368[_1530]
// [KnfOpt]           let _1532: Int = Int(1)
// [KnfOpt]           let _1533: Int = Add(_1531, _1532)
// [KnfOpt]           let _1526: Unit = Put r.368[_1529] = _1533
// [KnfOpt]           let _1483: Unit = Unit
// [KnfOpt]           Jump(go_loop.1477, [])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]     } else {
// [KnfOpt]       let _550: Unit = Unit
// [KnfOpt]       let _551: Int = Int(0)
// [KnfOpt]       let _552: Int = Int(0)
// [KnfOpt]       let _553: Int = Get nperm.32[_552]
// [KnfOpt]       let _554: Int = Int(1)
// [KnfOpt]       let _555: Int = Add(_553, _554)
// [KnfOpt]       let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]       Jump(compute.367, [r.368, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(go_loop.1477, [])
// [KnfOpt] } else {
// [KnfOpt]   let _461: Unit = Unit
// [KnfOpt]   let _465: Int = Int(0)
// [KnfOpt]   let _466: Int = Int(0)
// [KnfOpt]   let _467: Int = Get check_sum.29[_466]
// [KnfOpt]   let _468: Int = Int(0)
// [KnfOpt]   let _469: Int = Get flips.23[_468]
// [KnfOpt]   let _470: Int = Int(1)
// [KnfOpt]   let _471: Int = Int(0)
// [KnfOpt]   let _472: Int = Get nperm.32[_471]
// [KnfOpt]   let _473: Int = Int(0)
// [KnfOpt]   let _474: Int = Get nperm.32[_473]
// [KnfOpt]   let _475: Int = Int(2)
// [KnfOpt]   let _476: Int = Div(_474, _475)
// [KnfOpt]   let _477: Int = Int(2)
// [KnfOpt]   let _478: Int = Mul(_476, _477)
// [KnfOpt]   let _479: Int = Sub(_472, _478)
// [KnfOpt]   let _480: Int = Int(2)
// [KnfOpt]   let _481: Int = Mul(_479, _480)
// [KnfOpt]   let _482: Int = Sub(_470, _481)
// [KnfOpt]   let _483: Int = Mul(_469, _482)
// [KnfOpt]   let _484: Int = Add(_467, _483)
// [KnfOpt]   let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]   let _486: Int = Int(1)
// [KnfOpt]   let _487: Bool = Bool(true)
// [KnfOpt]   let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]   let _489: Int = Int(1)
// [KnfOpt]   let _490: Int = Int(0)
// [KnfOpt]   let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]   let rec go_loop.492: Unit = () {
// [KnfOpt]     let join go_loop.493: Unit = () {
// [KnfOpt]       let _494: Int = Int(0)
// [KnfOpt]       let _495: Bool = Get go.488[_494]
// [KnfOpt]       let _496: Bool = Bool(true)
// [KnfOpt]       if (_495 == _496) then {
// [KnfOpt]         let _497: Int = Int(0)
// [KnfOpt]         let _498: Int = Get r.368[_497]
// [KnfOpt]         if (_498 == n.2) then {
// [KnfOpt]           let _500: Int = Int(0)
// [KnfOpt]           let _501: Bool = Bool(false)
// [KnfOpt]           let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]           let _503: Int = Int(0)
// [KnfOpt]           let _504: Int = Int(0)
// [KnfOpt]           let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]           let _499: Unit = Unit
// [KnfOpt]           Jump(go_loop.493, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _506: Int = Int(0)
// [KnfOpt]           let _507: Int = Int(0)
// [KnfOpt]           let _508: Int = Get perm1.16[_507]
// [KnfOpt]           let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]           let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]             let _512: Int = Int(0)
// [KnfOpt]             let _513: Int = Get r.368[_512]
// [KnfOpt]             let _514: Int = Int(1)
// [KnfOpt]             let _515: Int = Sub(_513, _514)
// [KnfOpt]             if (i.511 <= _515) then {
// [KnfOpt]               let _516: Int = Int(1)
// [KnfOpt]               let _517: Int = Add(i.511, _516)
// [KnfOpt]               let _518: Int = Get perm1.16[_517]
// [KnfOpt]               let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]               let _520: Int = Int(1)
// [KnfOpt]               let _521: Int = Add(i.511, _520)
// [KnfOpt]               let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _523: Int = Int(0)
// [KnfOpt]           let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]           let _525: Int = Int(0)
// [KnfOpt]           let _526: Int = Get r.368[_525]
// [KnfOpt]           let _527: Int = Int(0)
// [KnfOpt]           let _528: Int = Get t.491[_527]
// [KnfOpt]           let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]           let _530: Int = Int(0)
// [KnfOpt]           let _531: Int = Get r.368[_530]
// [KnfOpt]           let _532: Int = Int(0)
// [KnfOpt]           let _533: Int = Get r.368[_532]
// [KnfOpt]           let _534: Int = Get count.20[_533]
// [KnfOpt]           let _535: Int = Int(1)
// [KnfOpt]           let _536: Int = Sub(_534, _535)
// [KnfOpt]           let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]           let _538: Int = Int(1)
// [KnfOpt]           let _539: Int = Int(0)
// [KnfOpt]           let _540: Int = Get r.368[_539]
// [KnfOpt]           let _541: Int = Get count.20[_540]
// [KnfOpt]           if (_538 <= _541) then {
// [KnfOpt]             let _543: Int = Int(0)
// [KnfOpt]             let _544: Bool = Bool(false)
// [KnfOpt]             let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _545: Int = Int(0)
// [KnfOpt]             let _546: Int = Int(0)
// [KnfOpt]             let _547: Int = Get r.368[_546]
// [KnfOpt]             let _548: Int = Int(1)
// [KnfOpt]             let _549: Int = Add(_547, _548)
// [KnfOpt]             let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.493, [])
// [KnfOpt]   }
// [KnfOpt]   let join go_loop.1534: Unit = () {
// [KnfOpt]     let _1535: Int = Int(0)
// [KnfOpt]     let _1536: Bool = Get go.488[_1535]
// [KnfOpt]     let _1537: Bool = Bool(true)
// [KnfOpt]     if (_1536 == _1537) then {
// [KnfOpt]       let _1538: Int = Int(0)
// [KnfOpt]       let _1539: Int = Get r.368[_1538]
// [KnfOpt]       if (_1539 == n.2) then {
// [KnfOpt]         let _1541: Int = Int(0)
// [KnfOpt]         let _1542: Bool = Bool(false)
// [KnfOpt]         let _1543: Unit = Put go.488[_1541] = _1542
// [KnfOpt]         let _1544: Int = Int(0)
// [KnfOpt]         let _1545: Int = Int(0)
// [KnfOpt]         let _1546: Unit = Put r.368[_1544] = _1545
// [KnfOpt]         let _1540: Unit = Unit
// [KnfOpt]         Jump(go_loop.1534, [])
// [KnfOpt]       } else {
// [KnfOpt]         let _1547: Int = Int(0)
// [KnfOpt]         let _1548: Int = Int(0)
// [KnfOpt]         let _1549: Int = Get perm1.16[_1548]
// [KnfOpt]         let _1550: Unit = Put t.491[_1547] = _1549
// [KnfOpt]         let rec move_perm1_forward.1551: Unit = (i.1552: Int) {
// [KnfOpt]           let _1553: Int = Int(0)
// [KnfOpt]           let _1554: Int = Get r.368[_1553]
// [KnfOpt]           let _1555: Int = Int(1)
// [KnfOpt]           let _1556: Int = Sub(_1554, _1555)
// [KnfOpt]           if (i.1552 <= _1556) then {
// [KnfOpt]             let _1557: Int = Int(1)
// [KnfOpt]             let _1558: Int = Add(i.1552, _1557)
// [KnfOpt]             let _1559: Int = Get perm1.16[_1558]
// [KnfOpt]             let _1560: Unit = Put perm1.16[i.1552] = _1559
// [KnfOpt]             let _1561: Int = Int(1)
// [KnfOpt]             let _1562: Int = Add(i.1552, _1561)
// [KnfOpt]             let _1563: Unit = Apply(move_perm1_forward.1551, [_1562, ])
// [KnfOpt]             Unit
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         let _1564: Int = Int(0)
// [KnfOpt]         let _1565: Unit = Apply(move_perm1_forward.1551, [_1564, ])
// [KnfOpt]         let _1566: Int = Int(0)
// [KnfOpt]         let _1567: Int = Get r.368[_1566]
// [KnfOpt]         let _1568: Int = Int(0)
// [KnfOpt]         let _1569: Int = Get t.491[_1568]
// [KnfOpt]         let _1570: Unit = Put perm1.16[_1567] = _1569
// [KnfOpt]         let _1571: Int = Int(0)
// [KnfOpt]         let _1572: Int = Get r.368[_1571]
// [KnfOpt]         let _1573: Int = Int(0)
// [KnfOpt]         let _1574: Int = Get r.368[_1573]
// [KnfOpt]         let _1575: Int = Get count.20[_1574]
// [KnfOpt]         let _1576: Int = Int(1)
// [KnfOpt]         let _1577: Int = Sub(_1575, _1576)
// [KnfOpt]         let _1578: Unit = Put count.20[_1572] = _1577
// [KnfOpt]         let _1579: Int = Int(1)
// [KnfOpt]         let _1580: Int = Int(0)
// [KnfOpt]         let _1581: Int = Get r.368[_1580]
// [KnfOpt]         let _1582: Int = Get count.20[_1581]
// [KnfOpt]         if (_1579 <= _1582) then {
// [KnfOpt]           let _1584: Int = Int(0)
// [KnfOpt]           let _1585: Bool = Bool(false)
// [KnfOpt]           let _1583: Unit = Put go.488[_1584] = _1585
// [KnfOpt]           let _1540: Unit = Unit
// [KnfOpt]           Jump(go_loop.1534, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _1586: Int = Int(0)
// [KnfOpt]           let _1587: Int = Int(0)
// [KnfOpt]           let _1588: Int = Get r.368[_1587]
// [KnfOpt]           let _1589: Int = Int(1)
// [KnfOpt]           let _1590: Int = Add(_1588, _1589)
// [KnfOpt]           let _1583: Unit = Put r.368[_1586] = _1590
// [KnfOpt]           let _1540: Unit = Unit
// [KnfOpt]           Jump(go_loop.1534, [])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]     } else {
// [KnfOpt]       let _550: Unit = Unit
// [KnfOpt]       let _551: Int = Int(0)
// [KnfOpt]       let _552: Int = Int(0)
// [KnfOpt]       let _553: Int = Get nperm.32[_552]
// [KnfOpt]       let _554: Int = Int(1)
// [KnfOpt]       let _555: Int = Add(_553, _554)
// [KnfOpt]       let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]       Jump(compute.367, [r.368, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(go_loop.1534, [])
// [KnfOpt] }
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Knf inline Some(go_loop) let _550: Unit = Unit
// [KnfOpt] let _551: Int = Int(0)
// [KnfOpt] let _552: Int = Int(0)
// [KnfOpt] let _553: Int = Get nperm.32[_552]
// [KnfOpt] let _554: Int = Int(1)
// [KnfOpt] let _555: Int = Add(_553, _554)
// [KnfOpt] let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt] Jump(compute.367, [r.368, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Knf inline Some(go_loop) let _550: Unit = Unit
// [KnfOpt] let _551: Int = Int(0)
// [KnfOpt] let _552: Int = Int(0)
// [KnfOpt] let _553: Int = Get nperm.32[_552]
// [KnfOpt] let _554: Int = Int(1)
// [KnfOpt] let _555: Int = Add(_553, _554)
// [KnfOpt] let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt] Jump(compute.367, [r.368, ])
// [KnfOpt] Knf inline Some(copy_perm) let _383: Unit = Unit
// [KnfOpt] let rec init_count.384: Unit = () {
// [KnfOpt]   let _385: Int = Int(0)
// [KnfOpt]   let _386: Int = Get r.368[_385]
// [KnfOpt]   let _387: Int = Int(1)
// [KnfOpt]   if (_386 == _387) then {
// [KnfOpt]     let _388: Unit = Unit
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _389: Int = Int(0)
// [KnfOpt]     let _390: Int = Get r.368[_389]
// [KnfOpt]     let _391: Int = Int(1)
// [KnfOpt]     let _392: Int = Sub(_390, _391)
// [KnfOpt]     let _393: Int = Int(0)
// [KnfOpt]     let _394: Int = Get r.368[_393]
// [KnfOpt]     let _395: Unit = Put count.20[_392] = _394
// [KnfOpt]     let _396: Int = Int(0)
// [KnfOpt]     let _397: Int = Int(0)
// [KnfOpt]     let _398: Int = Get r.368[_397]
// [KnfOpt]     let _399: Int = Int(1)
// [KnfOpt]     let _400: Int = Sub(_398, _399)
// [KnfOpt]     let _401: Unit = Put r.368[_396] = _400
// [KnfOpt]     let _388: Unit = Apply(init_count.384, [])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _402: Unit = Apply(init_count.384, [])
// [KnfOpt] let _403: Int = Int(0)
// [KnfOpt] let _404: Int = Int(0)
// [KnfOpt] let _405: Unit = Put flips.23[_403] = _404
// [KnfOpt] let _406: Int = Int(1)
// [KnfOpt] let _407: Int = Int(0)
// [KnfOpt] let _408: Int = Get perm.18[_407]
// [KnfOpt] let k.409: Array(Int) = ExtApply(minimbt_create_array, [_406, _408, ])
// [KnfOpt] let rec do_flip.410: Unit = (k.411: Array(Int)) {
// [KnfOpt]   let join do_flip.412: Unit = (k.413: Array(Int)) {
// [KnfOpt]     let _414: Int = Int(0)
// [KnfOpt]     let _415: Int = Get k.413[_414]
// [KnfOpt]     let _416: Int = Int(0)
// [KnfOpt]     if (_415 == _416) then {
// [KnfOpt]       Unit
// [KnfOpt]     } else {
// [KnfOpt]       let _417: Int = Int(1)
// [KnfOpt]       let _418: Int = Int(0)
// [KnfOpt]       let t.419: Array(Int) = ExtApply(minimbt_create_array, [_417, _418, ])
// [KnfOpt]       let rec flip_loop.420: Unit = (i.421: Int) {
// [KnfOpt]         let join flip_loop.422: Unit = (i.423: Int) {
// [KnfOpt]           let _424: Int = Int(0)
// [KnfOpt]           let _425: Int = Get k.413[_424]
// [KnfOpt]           let _426: Int = Int(2)
// [KnfOpt]           let _427: Int = Div(_425, _426)
// [KnfOpt]           if (i.423 <= _427) then {
// [KnfOpt]             let _428: Int = Int(0)
// [KnfOpt]             let _429: Int = Get perm.18[i.423]
// [KnfOpt]             let _430: Unit = Put t.419[_428] = _429
// [KnfOpt]             let _431: Int = Int(0)
// [KnfOpt]             let _432: Int = Get k.413[_431]
// [KnfOpt]             let _433: Int = Sub(_432, i.423)
// [KnfOpt]             let _434: Int = Get perm.18[_433]
// [KnfOpt]             let _435: Unit = Put perm.18[i.423] = _434
// [KnfOpt]             let _436: Int = Int(0)
// [KnfOpt]             let _437: Int = Get k.413[_436]
// [KnfOpt]             let _438: Int = Sub(_437, i.423)
// [KnfOpt]             let _439: Int = Int(0)
// [KnfOpt]             let _440: Int = Get t.419[_439]
// [KnfOpt]             let _441: Unit = Put perm.18[_438] = _440
// [KnfOpt]             let _442: Int = Int(1)
// [KnfOpt]             let _443: Int = Add(i.423, _442)
// [KnfOpt]             Jump(flip_loop.422, [_443, ])
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(flip_loop.422, [i.421, ])
// [KnfOpt]       }
// [KnfOpt]       let _444: Int = Int(0)
// [KnfOpt]       let join flip_loop.1455: Unit = (i.1456: Int) {
// [KnfOpt]         let _1457: Int = Int(0)
// [KnfOpt]         let _1458: Int = Get k.413[_1457]
// [KnfOpt]         let _1459: Int = Int(2)
// [KnfOpt]         let _1460: Int = Div(_1458, _1459)
// [KnfOpt]         if (i.1456 <= _1460) then {
// [KnfOpt]           let _1461: Int = Int(0)
// [KnfOpt]           let _1462: Int = Get perm.18[i.1456]
// [KnfOpt]           let _1463: Unit = Put t.419[_1461] = _1462
// [KnfOpt]           let _1464: Int = Int(0)
// [KnfOpt]           let _1465: Int = Get k.413[_1464]
// [KnfOpt]           let _1466: Int = Sub(_1465, i.1456)
// [KnfOpt]           let _1467: Int = Get perm.18[_1466]
// [KnfOpt]           let _1468: Unit = Put perm.18[i.1456] = _1467
// [KnfOpt]           let _1469: Int = Int(0)
// [KnfOpt]           let _1470: Int = Get k.413[_1469]
// [KnfOpt]           let _1471: Int = Sub(_1470, i.1456)
// [KnfOpt]           let _1472: Int = Int(0)
// [KnfOpt]           let _1473: Int = Get t.419[_1472]
// [KnfOpt]           let _1474: Unit = Put perm.18[_1471] = _1473
// [KnfOpt]           let _1475: Int = Int(1)
// [KnfOpt]           let _1476: Int = Add(i.1456, _1475)
// [KnfOpt]           Jump(flip_loop.1455, [_1476, ])
// [KnfOpt]         } else {
// [KnfOpt]           let _445: Unit = Unit
// [KnfOpt]           let _446: Int = Int(0)
// [KnfOpt]           let _447: Int = Int(0)
// [KnfOpt]           let _448: Int = Get perm.18[_447]
// [KnfOpt]           let _449: Unit = Put k.413[_446] = _448
// [KnfOpt]           let _450: Int = Int(0)
// [KnfOpt]           let _451: Int = Int(0)
// [KnfOpt]           let _452: Int = Get flips.23[_451]
// [KnfOpt]           let _453: Int = Int(1)
// [KnfOpt]           let _454: Int = Add(_452, _453)
// [KnfOpt]           let _455: Unit = Put flips.23[_450] = _454
// [KnfOpt]           Jump(do_flip.412, [k.413, ])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(flip_loop.1455, [_444, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(do_flip.412, [k.411, ])
// [KnfOpt] }
// [KnfOpt] let join do_flip.1591: Unit = (k.1592: Array(Int)) {
// [KnfOpt]   let _1593: Int = Int(0)
// [KnfOpt]   let _1594: Int = Get k.1592[_1593]
// [KnfOpt]   let _1595: Int = Int(0)
// [KnfOpt]   if (_1594 == _1595) then {
// [KnfOpt]     let _456: Unit = Unit
// [KnfOpt]     let _457: Int = Int(0)
// [KnfOpt]     let _458: Int = Get max_flips.26[_457]
// [KnfOpt]     let _459: Int = Int(0)
// [KnfOpt]     let _460: Int = Get flips.23[_459]
// [KnfOpt]     if (_458 <= _460) then {
// [KnfOpt]       let _462: Int = Int(0)
// [KnfOpt]       let _463: Int = Int(0)
// [KnfOpt]       let _464: Int = Get flips.23[_463]
// [KnfOpt]       let _461: Unit = Put max_flips.26[_462] = _464
// [KnfOpt]       let _465: Int = Int(0)
// [KnfOpt]       let _466: Int = Int(0)
// [KnfOpt]       let _467: Int = Get check_sum.29[_466]
// [KnfOpt]       let _468: Int = Int(0)
// [KnfOpt]       let _469: Int = Get flips.23[_468]
// [KnfOpt]       let _470: Int = Int(1)
// [KnfOpt]       let _471: Int = Int(0)
// [KnfOpt]       let _472: Int = Get nperm.32[_471]
// [KnfOpt]       let _473: Int = Int(0)
// [KnfOpt]       let _474: Int = Get nperm.32[_473]
// [KnfOpt]       let _475: Int = Int(2)
// [KnfOpt]       let _476: Int = Div(_474, _475)
// [KnfOpt]       let _477: Int = Int(2)
// [KnfOpt]       let _478: Int = Mul(_476, _477)
// [KnfOpt]       let _479: Int = Sub(_472, _478)
// [KnfOpt]       let _480: Int = Int(2)
// [KnfOpt]       let _481: Int = Mul(_479, _480)
// [KnfOpt]       let _482: Int = Sub(_470, _481)
// [KnfOpt]       let _483: Int = Mul(_469, _482)
// [KnfOpt]       let _484: Int = Add(_467, _483)
// [KnfOpt]       let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]       let _486: Int = Int(1)
// [KnfOpt]       let _487: Bool = Bool(true)
// [KnfOpt]       let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]       let _489: Int = Int(1)
// [KnfOpt]       let _490: Int = Int(0)
// [KnfOpt]       let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]       let rec go_loop.492: Unit = () {
// [KnfOpt]         let join go_loop.493: Unit = () {
// [KnfOpt]           let _494: Int = Int(0)
// [KnfOpt]           let _495: Bool = Get go.488[_494]
// [KnfOpt]           let _496: Bool = Bool(true)
// [KnfOpt]           if (_495 == _496) then {
// [KnfOpt]             let _497: Int = Int(0)
// [KnfOpt]             let _498: Int = Get r.368[_497]
// [KnfOpt]             if (_498 == n.2) then {
// [KnfOpt]               let _500: Int = Int(0)
// [KnfOpt]               let _501: Bool = Bool(false)
// [KnfOpt]               let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]               let _503: Int = Int(0)
// [KnfOpt]               let _504: Int = Int(0)
// [KnfOpt]               let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]               let _499: Unit = Unit
// [KnfOpt]               Jump(go_loop.493, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _506: Int = Int(0)
// [KnfOpt]               let _507: Int = Int(0)
// [KnfOpt]               let _508: Int = Get perm1.16[_507]
// [KnfOpt]               let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]               let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]                 let _512: Int = Int(0)
// [KnfOpt]                 let _513: Int = Get r.368[_512]
// [KnfOpt]                 let _514: Int = Int(1)
// [KnfOpt]                 let _515: Int = Sub(_513, _514)
// [KnfOpt]                 if (i.511 <= _515) then {
// [KnfOpt]                   let _516: Int = Int(1)
// [KnfOpt]                   let _517: Int = Add(i.511, _516)
// [KnfOpt]                   let _518: Int = Get perm1.16[_517]
// [KnfOpt]                   let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]                   let _520: Int = Int(1)
// [KnfOpt]                   let _521: Int = Add(i.511, _520)
// [KnfOpt]                   let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]                   Unit
// [KnfOpt]                 } else {
// [KnfOpt]                   Unit
// [KnfOpt]                 }
// [KnfOpt]               }
// [KnfOpt]               let _523: Int = Int(0)
// [KnfOpt]               let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]               let _525: Int = Int(0)
// [KnfOpt]               let _526: Int = Get r.368[_525]
// [KnfOpt]               let _527: Int = Int(0)
// [KnfOpt]               let _528: Int = Get t.491[_527]
// [KnfOpt]               let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]               let _530: Int = Int(0)
// [KnfOpt]               let _531: Int = Get r.368[_530]
// [KnfOpt]               let _532: Int = Int(0)
// [KnfOpt]               let _533: Int = Get r.368[_532]
// [KnfOpt]               let _534: Int = Get count.20[_533]
// [KnfOpt]               let _535: Int = Int(1)
// [KnfOpt]               let _536: Int = Sub(_534, _535)
// [KnfOpt]               let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]               let _538: Int = Int(1)
// [KnfOpt]               let _539: Int = Int(0)
// [KnfOpt]               let _540: Int = Get r.368[_539]
// [KnfOpt]               let _541: Int = Get count.20[_540]
// [KnfOpt]               if (_538 <= _541) then {
// [KnfOpt]                 let _543: Int = Int(0)
// [KnfOpt]                 let _544: Bool = Bool(false)
// [KnfOpt]                 let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]                 let _499: Unit = Unit
// [KnfOpt]                 Jump(go_loop.493, [])
// [KnfOpt]               } else {
// [KnfOpt]                 let _545: Int = Int(0)
// [KnfOpt]                 let _546: Int = Int(0)
// [KnfOpt]                 let _547: Int = Get r.368[_546]
// [KnfOpt]                 let _548: Int = Int(1)
// [KnfOpt]                 let _549: Int = Add(_547, _548)
// [KnfOpt]                 let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]                 let _499: Unit = Unit
// [KnfOpt]                 Jump(go_loop.493, [])
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(go_loop.493, [])
// [KnfOpt]       }
// [KnfOpt]       let join go_loop.1596: Unit = () {
// [KnfOpt]         let _1597: Int = Int(0)
// [KnfOpt]         let _1598: Bool = Get go.488[_1597]
// [KnfOpt]         let _1599: Bool = Bool(true)
// [KnfOpt]         if (_1598 == _1599) then {
// [KnfOpt]           let _1600: Int = Int(0)
// [KnfOpt]           let _1601: Int = Get r.368[_1600]
// [KnfOpt]           if (_1601 == n.2) then {
// [KnfOpt]             let _1603: Int = Int(0)
// [KnfOpt]             let _1604: Bool = Bool(false)
// [KnfOpt]             let _1605: Unit = Put go.488[_1603] = _1604
// [KnfOpt]             let _1606: Int = Int(0)
// [KnfOpt]             let _1607: Int = Int(0)
// [KnfOpt]             let _1608: Unit = Put r.368[_1606] = _1607
// [KnfOpt]             let _1602: Unit = Unit
// [KnfOpt]             Jump(go_loop.1596, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _1609: Int = Int(0)
// [KnfOpt]             let _1610: Int = Int(0)
// [KnfOpt]             let _1611: Int = Get perm1.16[_1610]
// [KnfOpt]             let _1612: Unit = Put t.491[_1609] = _1611
// [KnfOpt]             let rec move_perm1_forward.1613: Unit = (i.1614: Int) {
// [KnfOpt]               let _1615: Int = Int(0)
// [KnfOpt]               let _1616: Int = Get r.368[_1615]
// [KnfOpt]               let _1617: Int = Int(1)
// [KnfOpt]               let _1618: Int = Sub(_1616, _1617)
// [KnfOpt]               if (i.1614 <= _1618) then {
// [KnfOpt]                 let _1619: Int = Int(1)
// [KnfOpt]                 let _1620: Int = Add(i.1614, _1619)
// [KnfOpt]                 let _1621: Int = Get perm1.16[_1620]
// [KnfOpt]                 let _1622: Unit = Put perm1.16[i.1614] = _1621
// [KnfOpt]                 let _1623: Int = Int(1)
// [KnfOpt]                 let _1624: Int = Add(i.1614, _1623)
// [KnfOpt]                 let _1625: Unit = Apply(move_perm1_forward.1613, [_1624, ])
// [KnfOpt]                 Unit
// [KnfOpt]               } else {
// [KnfOpt]                 Unit
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]             let _1626: Int = Int(0)
// [KnfOpt]             let _1627: Unit = Apply(move_perm1_forward.1613, [_1626, ])
// [KnfOpt]             let _1628: Int = Int(0)
// [KnfOpt]             let _1629: Int = Get r.368[_1628]
// [KnfOpt]             let _1630: Int = Int(0)
// [KnfOpt]             let _1631: Int = Get t.491[_1630]
// [KnfOpt]             let _1632: Unit = Put perm1.16[_1629] = _1631
// [KnfOpt]             let _1633: Int = Int(0)
// [KnfOpt]             let _1634: Int = Get r.368[_1633]
// [KnfOpt]             let _1635: Int = Int(0)
// [KnfOpt]             let _1636: Int = Get r.368[_1635]
// [KnfOpt]             let _1637: Int = Get count.20[_1636]
// [KnfOpt]             let _1638: Int = Int(1)
// [KnfOpt]             let _1639: Int = Sub(_1637, _1638)
// [KnfOpt]             let _1640: Unit = Put count.20[_1634] = _1639
// [KnfOpt]             let _1641: Int = Int(1)
// [KnfOpt]             let _1642: Int = Int(0)
// [KnfOpt]             let _1643: Int = Get r.368[_1642]
// [KnfOpt]             let _1644: Int = Get count.20[_1643]
// [KnfOpt]             if (_1641 <= _1644) then {
// [KnfOpt]               let _1646: Int = Int(0)
// [KnfOpt]               let _1647: Bool = Bool(false)
// [KnfOpt]               let _1645: Unit = Put go.488[_1646] = _1647
// [KnfOpt]               let _1602: Unit = Unit
// [KnfOpt]               Jump(go_loop.1596, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _1648: Int = Int(0)
// [KnfOpt]               let _1649: Int = Int(0)
// [KnfOpt]               let _1650: Int = Get r.368[_1649]
// [KnfOpt]               let _1651: Int = Int(1)
// [KnfOpt]               let _1652: Int = Add(_1650, _1651)
// [KnfOpt]               let _1645: Unit = Put r.368[_1648] = _1652
// [KnfOpt]               let _1602: Unit = Unit
// [KnfOpt]               Jump(go_loop.1596, [])
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]         } else {
// [KnfOpt]           let _550: Unit = Unit
// [KnfOpt]           let _551: Int = Int(0)
// [KnfOpt]           let _552: Int = Int(0)
// [KnfOpt]           let _553: Int = Get nperm.32[_552]
// [KnfOpt]           let _554: Int = Int(1)
// [KnfOpt]           let _555: Int = Add(_553, _554)
// [KnfOpt]           let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]           Jump(compute.367, [r.368, ])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(go_loop.1596, [])
// [KnfOpt]     } else {
// [KnfOpt]       let _461: Unit = Unit
// [KnfOpt]       let _465: Int = Int(0)
// [KnfOpt]       let _466: Int = Int(0)
// [KnfOpt]       let _467: Int = Get check_sum.29[_466]
// [KnfOpt]       let _468: Int = Int(0)
// [KnfOpt]       let _469: Int = Get flips.23[_468]
// [KnfOpt]       let _470: Int = Int(1)
// [KnfOpt]       let _471: Int = Int(0)
// [KnfOpt]       let _472: Int = Get nperm.32[_471]
// [KnfOpt]       let _473: Int = Int(0)
// [KnfOpt]       let _474: Int = Get nperm.32[_473]
// [KnfOpt]       let _475: Int = Int(2)
// [KnfOpt]       let _476: Int = Div(_474, _475)
// [KnfOpt]       let _477: Int = Int(2)
// [KnfOpt]       let _478: Int = Mul(_476, _477)
// [KnfOpt]       let _479: Int = Sub(_472, _478)
// [KnfOpt]       let _480: Int = Int(2)
// [KnfOpt]       let _481: Int = Mul(_479, _480)
// [KnfOpt]       let _482: Int = Sub(_470, _481)
// [KnfOpt]       let _483: Int = Mul(_469, _482)
// [KnfOpt]       let _484: Int = Add(_467, _483)
// [KnfOpt]       let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]       let _486: Int = Int(1)
// [KnfOpt]       let _487: Bool = Bool(true)
// [KnfOpt]       let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]       let _489: Int = Int(1)
// [KnfOpt]       let _490: Int = Int(0)
// [KnfOpt]       let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]       let rec go_loop.492: Unit = () {
// [KnfOpt]         let join go_loop.493: Unit = () {
// [KnfOpt]           let _494: Int = Int(0)
// [KnfOpt]           let _495: Bool = Get go.488[_494]
// [KnfOpt]           let _496: Bool = Bool(true)
// [KnfOpt]           if (_495 == _496) then {
// [KnfOpt]             let _497: Int = Int(0)
// [KnfOpt]             let _498: Int = Get r.368[_497]
// [KnfOpt]             if (_498 == n.2) then {
// [KnfOpt]               let _500: Int = Int(0)
// [KnfOpt]               let _501: Bool = Bool(false)
// [KnfOpt]               let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]               let _503: Int = Int(0)
// [KnfOpt]               let _504: Int = Int(0)
// [KnfOpt]               let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]               let _499: Unit = Unit
// [KnfOpt]               Jump(go_loop.493, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _506: Int = Int(0)
// [KnfOpt]               let _507: Int = Int(0)
// [KnfOpt]               let _508: Int = Get perm1.16[_507]
// [KnfOpt]               let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]               let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]                 let _512: Int = Int(0)
// [KnfOpt]                 let _513: Int = Get r.368[_512]
// [KnfOpt]                 let _514: Int = Int(1)
// [KnfOpt]                 let _515: Int = Sub(_513, _514)
// [KnfOpt]                 if (i.511 <= _515) then {
// [KnfOpt]                   let _516: Int = Int(1)
// [KnfOpt]                   let _517: Int = Add(i.511, _516)
// [KnfOpt]                   let _518: Int = Get perm1.16[_517]
// [KnfOpt]                   let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]                   let _520: Int = Int(1)
// [KnfOpt]                   let _521: Int = Add(i.511, _520)
// [KnfOpt]                   let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]                   Unit
// [KnfOpt]                 } else {
// [KnfOpt]                   Unit
// [KnfOpt]                 }
// [KnfOpt]               }
// [KnfOpt]               let _523: Int = Int(0)
// [KnfOpt]               let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]               let _525: Int = Int(0)
// [KnfOpt]               let _526: Int = Get r.368[_525]
// [KnfOpt]               let _527: Int = Int(0)
// [KnfOpt]               let _528: Int = Get t.491[_527]
// [KnfOpt]               let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]               let _530: Int = Int(0)
// [KnfOpt]               let _531: Int = Get r.368[_530]
// [KnfOpt]               let _532: Int = Int(0)
// [KnfOpt]               let _533: Int = Get r.368[_532]
// [KnfOpt]               let _534: Int = Get count.20[_533]
// [KnfOpt]               let _535: Int = Int(1)
// [KnfOpt]               let _536: Int = Sub(_534, _535)
// [KnfOpt]               let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]               let _538: Int = Int(1)
// [KnfOpt]               let _539: Int = Int(0)
// [KnfOpt]               let _540: Int = Get r.368[_539]
// [KnfOpt]               let _541: Int = Get count.20[_540]
// [KnfOpt]               if (_538 <= _541) then {
// [KnfOpt]                 let _543: Int = Int(0)
// [KnfOpt]                 let _544: Bool = Bool(false)
// [KnfOpt]                 let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]                 let _499: Unit = Unit
// [KnfOpt]                 Jump(go_loop.493, [])
// [KnfOpt]               } else {
// [KnfOpt]                 let _545: Int = Int(0)
// [KnfOpt]                 let _546: Int = Int(0)
// [KnfOpt]                 let _547: Int = Get r.368[_546]
// [KnfOpt]                 let _548: Int = Int(1)
// [KnfOpt]                 let _549: Int = Add(_547, _548)
// [KnfOpt]                 let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]                 let _499: Unit = Unit
// [KnfOpt]                 Jump(go_loop.493, [])
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(go_loop.493, [])
// [KnfOpt]       }
// [KnfOpt]       let join go_loop.1653: Unit = () {
// [KnfOpt]         let _1654: Int = Int(0)
// [KnfOpt]         let _1655: Bool = Get go.488[_1654]
// [KnfOpt]         let _1656: Bool = Bool(true)
// [KnfOpt]         if (_1655 == _1656) then {
// [KnfOpt]           let _1657: Int = Int(0)
// [KnfOpt]           let _1658: Int = Get r.368[_1657]
// [KnfOpt]           if (_1658 == n.2) then {
// [KnfOpt]             let _1660: Int = Int(0)
// [KnfOpt]             let _1661: Bool = Bool(false)
// [KnfOpt]             let _1662: Unit = Put go.488[_1660] = _1661
// [KnfOpt]             let _1663: Int = Int(0)
// [KnfOpt]             let _1664: Int = Int(0)
// [KnfOpt]             let _1665: Unit = Put r.368[_1663] = _1664
// [KnfOpt]             let _1659: Unit = Unit
// [KnfOpt]             Jump(go_loop.1653, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _1666: Int = Int(0)
// [KnfOpt]             let _1667: Int = Int(0)
// [KnfOpt]             let _1668: Int = Get perm1.16[_1667]
// [KnfOpt]             let _1669: Unit = Put t.491[_1666] = _1668
// [KnfOpt]             let rec move_perm1_forward.1670: Unit = (i.1671: Int) {
// [KnfOpt]               let _1672: Int = Int(0)
// [KnfOpt]               let _1673: Int = Get r.368[_1672]
// [KnfOpt]               let _1674: Int = Int(1)
// [KnfOpt]               let _1675: Int = Sub(_1673, _1674)
// [KnfOpt]               if (i.1671 <= _1675) then {
// [KnfOpt]                 let _1676: Int = Int(1)
// [KnfOpt]                 let _1677: Int = Add(i.1671, _1676)
// [KnfOpt]                 let _1678: Int = Get perm1.16[_1677]
// [KnfOpt]                 let _1679: Unit = Put perm1.16[i.1671] = _1678
// [KnfOpt]                 let _1680: Int = Int(1)
// [KnfOpt]                 let _1681: Int = Add(i.1671, _1680)
// [KnfOpt]                 let _1682: Unit = Apply(move_perm1_forward.1670, [_1681, ])
// [KnfOpt]                 Unit
// [KnfOpt]               } else {
// [KnfOpt]                 Unit
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]             let _1683: Int = Int(0)
// [KnfOpt]             let _1684: Unit = Apply(move_perm1_forward.1670, [_1683, ])
// [KnfOpt]             let _1685: Int = Int(0)
// [KnfOpt]             let _1686: Int = Get r.368[_1685]
// [KnfOpt]             let _1687: Int = Int(0)
// [KnfOpt]             let _1688: Int = Get t.491[_1687]
// [KnfOpt]             let _1689: Unit = Put perm1.16[_1686] = _1688
// [KnfOpt]             let _1690: Int = Int(0)
// [KnfOpt]             let _1691: Int = Get r.368[_1690]
// [KnfOpt]             let _1692: Int = Int(0)
// [KnfOpt]             let _1693: Int = Get r.368[_1692]
// [KnfOpt]             let _1694: Int = Get count.20[_1693]
// [KnfOpt]             let _1695: Int = Int(1)
// [KnfOpt]             let _1696: Int = Sub(_1694, _1695)
// [KnfOpt]             let _1697: Unit = Put count.20[_1691] = _1696
// [KnfOpt]             let _1698: Int = Int(1)
// [KnfOpt]             let _1699: Int = Int(0)
// [KnfOpt]             let _1700: Int = Get r.368[_1699]
// [KnfOpt]             let _1701: Int = Get count.20[_1700]
// [KnfOpt]             if (_1698 <= _1701) then {
// [KnfOpt]               let _1703: Int = Int(0)
// [KnfOpt]               let _1704: Bool = Bool(false)
// [KnfOpt]               let _1702: Unit = Put go.488[_1703] = _1704
// [KnfOpt]               let _1659: Unit = Unit
// [KnfOpt]               Jump(go_loop.1653, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _1705: Int = Int(0)
// [KnfOpt]               let _1706: Int = Int(0)
// [KnfOpt]               let _1707: Int = Get r.368[_1706]
// [KnfOpt]               let _1708: Int = Int(1)
// [KnfOpt]               let _1709: Int = Add(_1707, _1708)
// [KnfOpt]               let _1702: Unit = Put r.368[_1705] = _1709
// [KnfOpt]               let _1659: Unit = Unit
// [KnfOpt]               Jump(go_loop.1653, [])
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]         } else {
// [KnfOpt]           let _550: Unit = Unit
// [KnfOpt]           let _551: Int = Int(0)
// [KnfOpt]           let _552: Int = Int(0)
// [KnfOpt]           let _553: Int = Get nperm.32[_552]
// [KnfOpt]           let _554: Int = Int(1)
// [KnfOpt]           let _555: Int = Add(_553, _554)
// [KnfOpt]           let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]           Jump(compute.367, [r.368, ])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(go_loop.1653, [])
// [KnfOpt]     }
// [KnfOpt]   } else {
// [KnfOpt]     let _1710: Int = Int(1)
// [KnfOpt]     let _1711: Int = Int(0)
// [KnfOpt]     let t.1712: Array(Int) = ExtApply(minimbt_create_array, [_1710, _1711, ])
// [KnfOpt]     let rec flip_loop.1713: Unit = (i.1714: Int) {
// [KnfOpt]       let join flip_loop.1715: Unit = (i.1716: Int) {
// [KnfOpt]         let _1717: Int = Int(0)
// [KnfOpt]         let _1718: Int = Get k.1592[_1717]
// [KnfOpt]         let _1719: Int = Int(2)
// [KnfOpt]         let _1720: Int = Div(_1718, _1719)
// [KnfOpt]         if (i.1716 <= _1720) then {
// [KnfOpt]           let _1721: Int = Int(0)
// [KnfOpt]           let _1722: Int = Get perm.18[i.1716]
// [KnfOpt]           let _1723: Unit = Put t.1712[_1721] = _1722
// [KnfOpt]           let _1724: Int = Int(0)
// [KnfOpt]           let _1725: Int = Get k.1592[_1724]
// [KnfOpt]           let _1726: Int = Sub(_1725, i.1716)
// [KnfOpt]           let _1727: Int = Get perm.18[_1726]
// [KnfOpt]           let _1728: Unit = Put perm.18[i.1716] = _1727
// [KnfOpt]           let _1729: Int = Int(0)
// [KnfOpt]           let _1730: Int = Get k.1592[_1729]
// [KnfOpt]           let _1731: Int = Sub(_1730, i.1716)
// [KnfOpt]           let _1732: Int = Int(0)
// [KnfOpt]           let _1733: Int = Get t.1712[_1732]
// [KnfOpt]           let _1734: Unit = Put perm.18[_1731] = _1733
// [KnfOpt]           let _1735: Int = Int(1)
// [KnfOpt]           let _1736: Int = Add(i.1716, _1735)
// [KnfOpt]           Jump(flip_loop.1715, [_1736, ])
// [KnfOpt]         } else {
// [KnfOpt]           Unit
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(flip_loop.1715, [i.1714, ])
// [KnfOpt]     }
// [KnfOpt]     let _1737: Int = Int(0)
// [KnfOpt]     let _1738: Unit = Apply(flip_loop.1713, [_1737, ])
// [KnfOpt]     let _1739: Int = Int(0)
// [KnfOpt]     let _1740: Int = Int(0)
// [KnfOpt]     let _1741: Int = Get perm.18[_1740]
// [KnfOpt]     let _1742: Unit = Put k.1592[_1739] = _1741
// [KnfOpt]     let _1743: Int = Int(0)
// [KnfOpt]     let _1744: Int = Int(0)
// [KnfOpt]     let _1745: Int = Get flips.23[_1744]
// [KnfOpt]     let _1746: Int = Int(1)
// [KnfOpt]     let _1747: Int = Add(_1745, _1746)
// [KnfOpt]     let _1748: Unit = Put flips.23[_1743] = _1747
// [KnfOpt]     Jump(do_flip.1591, [k.1592, ])
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Jump(do_flip.1591, [k.409, ])
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_count.384 rejected
// [KnfOpt] Knf inline Some(flip_loop) let _445: Unit = Unit
// [KnfOpt] let _446: Int = Int(0)
// [KnfOpt] let _447: Int = Int(0)
// [KnfOpt] let _448: Int = Get perm.18[_447]
// [KnfOpt] let _449: Unit = Put k.413[_446] = _448
// [KnfOpt] let _450: Int = Int(0)
// [KnfOpt] let _451: Int = Int(0)
// [KnfOpt] let _452: Int = Get flips.23[_451]
// [KnfOpt] let _453: Int = Int(1)
// [KnfOpt] let _454: Int = Add(_452, _453)
// [KnfOpt] let _455: Unit = Put flips.23[_450] = _454
// [KnfOpt] Jump(do_flip.412, [k.413, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Knf inline Some(go_loop) let _550: Unit = Unit
// [KnfOpt] let _551: Int = Int(0)
// [KnfOpt] let _552: Int = Int(0)
// [KnfOpt] let _553: Int = Get nperm.32[_552]
// [KnfOpt] let _554: Int = Int(1)
// [KnfOpt] let _555: Int = Add(_553, _554)
// [KnfOpt] let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt] Jump(compute.367, [r.368, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Knf inline Some(go_loop) let _550: Unit = Unit
// [KnfOpt] let _551: Int = Int(0)
// [KnfOpt] let _552: Int = Int(0)
// [KnfOpt] let _553: Int = Get nperm.32[_552]
// [KnfOpt] let _554: Int = Int(1)
// [KnfOpt] let _555: Int = Add(_553, _554)
// [KnfOpt] let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt] Jump(compute.367, [r.368, ])
// [KnfOpt] Knf inline Some(do_flip) let _456: Unit = Unit
// [KnfOpt] let _457: Int = Int(0)
// [KnfOpt] let _458: Int = Get max_flips.26[_457]
// [KnfOpt] let _459: Int = Int(0)
// [KnfOpt] let _460: Int = Get flips.23[_459]
// [KnfOpt] if (_458 <= _460) then {
// [KnfOpt]   let _462: Int = Int(0)
// [KnfOpt]   let _463: Int = Int(0)
// [KnfOpt]   let _464: Int = Get flips.23[_463]
// [KnfOpt]   let _461: Unit = Put max_flips.26[_462] = _464
// [KnfOpt]   let _465: Int = Int(0)
// [KnfOpt]   let _466: Int = Int(0)
// [KnfOpt]   let _467: Int = Get check_sum.29[_466]
// [KnfOpt]   let _468: Int = Int(0)
// [KnfOpt]   let _469: Int = Get flips.23[_468]
// [KnfOpt]   let _470: Int = Int(1)
// [KnfOpt]   let _471: Int = Int(0)
// [KnfOpt]   let _472: Int = Get nperm.32[_471]
// [KnfOpt]   let _473: Int = Int(0)
// [KnfOpt]   let _474: Int = Get nperm.32[_473]
// [KnfOpt]   let _475: Int = Int(2)
// [KnfOpt]   let _476: Int = Div(_474, _475)
// [KnfOpt]   let _477: Int = Int(2)
// [KnfOpt]   let _478: Int = Mul(_476, _477)
// [KnfOpt]   let _479: Int = Sub(_472, _478)
// [KnfOpt]   let _480: Int = Int(2)
// [KnfOpt]   let _481: Int = Mul(_479, _480)
// [KnfOpt]   let _482: Int = Sub(_470, _481)
// [KnfOpt]   let _483: Int = Mul(_469, _482)
// [KnfOpt]   let _484: Int = Add(_467, _483)
// [KnfOpt]   let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]   let _486: Int = Int(1)
// [KnfOpt]   let _487: Bool = Bool(true)
// [KnfOpt]   let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]   let _489: Int = Int(1)
// [KnfOpt]   let _490: Int = Int(0)
// [KnfOpt]   let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]   let rec go_loop.492: Unit = () {
// [KnfOpt]     let join go_loop.493: Unit = () {
// [KnfOpt]       let _494: Int = Int(0)
// [KnfOpt]       let _495: Bool = Get go.488[_494]
// [KnfOpt]       let _496: Bool = Bool(true)
// [KnfOpt]       if (_495 == _496) then {
// [KnfOpt]         let _497: Int = Int(0)
// [KnfOpt]         let _498: Int = Get r.368[_497]
// [KnfOpt]         if (_498 == n.2) then {
// [KnfOpt]           let _500: Int = Int(0)
// [KnfOpt]           let _501: Bool = Bool(false)
// [KnfOpt]           let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]           let _503: Int = Int(0)
// [KnfOpt]           let _504: Int = Int(0)
// [KnfOpt]           let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]           let _499: Unit = Unit
// [KnfOpt]           Jump(go_loop.493, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _506: Int = Int(0)
// [KnfOpt]           let _507: Int = Int(0)
// [KnfOpt]           let _508: Int = Get perm1.16[_507]
// [KnfOpt]           let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]           let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]             let _512: Int = Int(0)
// [KnfOpt]             let _513: Int = Get r.368[_512]
// [KnfOpt]             let _514: Int = Int(1)
// [KnfOpt]             let _515: Int = Sub(_513, _514)
// [KnfOpt]             if (i.511 <= _515) then {
// [KnfOpt]               let _516: Int = Int(1)
// [KnfOpt]               let _517: Int = Add(i.511, _516)
// [KnfOpt]               let _518: Int = Get perm1.16[_517]
// [KnfOpt]               let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]               let _520: Int = Int(1)
// [KnfOpt]               let _521: Int = Add(i.511, _520)
// [KnfOpt]               let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _523: Int = Int(0)
// [KnfOpt]           let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]           let _525: Int = Int(0)
// [KnfOpt]           let _526: Int = Get r.368[_525]
// [KnfOpt]           let _527: Int = Int(0)
// [KnfOpt]           let _528: Int = Get t.491[_527]
// [KnfOpt]           let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]           let _530: Int = Int(0)
// [KnfOpt]           let _531: Int = Get r.368[_530]
// [KnfOpt]           let _532: Int = Int(0)
// [KnfOpt]           let _533: Int = Get r.368[_532]
// [KnfOpt]           let _534: Int = Get count.20[_533]
// [KnfOpt]           let _535: Int = Int(1)
// [KnfOpt]           let _536: Int = Sub(_534, _535)
// [KnfOpt]           let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]           let _538: Int = Int(1)
// [KnfOpt]           let _539: Int = Int(0)
// [KnfOpt]           let _540: Int = Get r.368[_539]
// [KnfOpt]           let _541: Int = Get count.20[_540]
// [KnfOpt]           if (_538 <= _541) then {
// [KnfOpt]             let _543: Int = Int(0)
// [KnfOpt]             let _544: Bool = Bool(false)
// [KnfOpt]             let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _545: Int = Int(0)
// [KnfOpt]             let _546: Int = Int(0)
// [KnfOpt]             let _547: Int = Get r.368[_546]
// [KnfOpt]             let _548: Int = Int(1)
// [KnfOpt]             let _549: Int = Add(_547, _548)
// [KnfOpt]             let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.493, [])
// [KnfOpt]   }
// [KnfOpt]   let join go_loop.1779: Unit = () {
// [KnfOpt]     let _1780: Int = Int(0)
// [KnfOpt]     let _1781: Bool = Get go.488[_1780]
// [KnfOpt]     let _1782: Bool = Bool(true)
// [KnfOpt]     if (_1781 == _1782) then {
// [KnfOpt]       let _1783: Int = Int(0)
// [KnfOpt]       let _1784: Int = Get r.368[_1783]
// [KnfOpt]       if (_1784 == n.2) then {
// [KnfOpt]         let _1786: Int = Int(0)
// [KnfOpt]         let _1787: Bool = Bool(false)
// [KnfOpt]         let _1788: Unit = Put go.488[_1786] = _1787
// [KnfOpt]         let _1789: Int = Int(0)
// [KnfOpt]         let _1790: Int = Int(0)
// [KnfOpt]         let _1791: Unit = Put r.368[_1789] = _1790
// [KnfOpt]         let _1785: Unit = Unit
// [KnfOpt]         Jump(go_loop.1779, [])
// [KnfOpt]       } else {
// [KnfOpt]         let _1792: Int = Int(0)
// [KnfOpt]         let _1793: Int = Int(0)
// [KnfOpt]         let _1794: Int = Get perm1.16[_1793]
// [KnfOpt]         let _1795: Unit = Put t.491[_1792] = _1794
// [KnfOpt]         let rec move_perm1_forward.1796: Unit = (i.1797: Int) {
// [KnfOpt]           let _1798: Int = Int(0)
// [KnfOpt]           let _1799: Int = Get r.368[_1798]
// [KnfOpt]           let _1800: Int = Int(1)
// [KnfOpt]           let _1801: Int = Sub(_1799, _1800)
// [KnfOpt]           if (i.1797 <= _1801) then {
// [KnfOpt]             let _1802: Int = Int(1)
// [KnfOpt]             let _1803: Int = Add(i.1797, _1802)
// [KnfOpt]             let _1804: Int = Get perm1.16[_1803]
// [KnfOpt]             let _1805: Unit = Put perm1.16[i.1797] = _1804
// [KnfOpt]             let _1806: Int = Int(1)
// [KnfOpt]             let _1807: Int = Add(i.1797, _1806)
// [KnfOpt]             let _1808: Unit = Apply(move_perm1_forward.1796, [_1807, ])
// [KnfOpt]             Unit
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         let _1809: Int = Int(0)
// [KnfOpt]         let _1810: Unit = Apply(move_perm1_forward.1796, [_1809, ])
// [KnfOpt]         let _1811: Int = Int(0)
// [KnfOpt]         let _1812: Int = Get r.368[_1811]
// [KnfOpt]         let _1813: Int = Int(0)
// [KnfOpt]         let _1814: Int = Get t.491[_1813]
// [KnfOpt]         let _1815: Unit = Put perm1.16[_1812] = _1814
// [KnfOpt]         let _1816: Int = Int(0)
// [KnfOpt]         let _1817: Int = Get r.368[_1816]
// [KnfOpt]         let _1818: Int = Int(0)
// [KnfOpt]         let _1819: Int = Get r.368[_1818]
// [KnfOpt]         let _1820: Int = Get count.20[_1819]
// [KnfOpt]         let _1821: Int = Int(1)
// [KnfOpt]         let _1822: Int = Sub(_1820, _1821)
// [KnfOpt]         let _1823: Unit = Put count.20[_1817] = _1822
// [KnfOpt]         let _1824: Int = Int(1)
// [KnfOpt]         let _1825: Int = Int(0)
// [KnfOpt]         let _1826: Int = Get r.368[_1825]
// [KnfOpt]         let _1827: Int = Get count.20[_1826]
// [KnfOpt]         if (_1824 <= _1827) then {
// [KnfOpt]           let _1829: Int = Int(0)
// [KnfOpt]           let _1830: Bool = Bool(false)
// [KnfOpt]           let _1828: Unit = Put go.488[_1829] = _1830
// [KnfOpt]           let _1785: Unit = Unit
// [KnfOpt]           Jump(go_loop.1779, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _1831: Int = Int(0)
// [KnfOpt]           let _1832: Int = Int(0)
// [KnfOpt]           let _1833: Int = Get r.368[_1832]
// [KnfOpt]           let _1834: Int = Int(1)
// [KnfOpt]           let _1835: Int = Add(_1833, _1834)
// [KnfOpt]           let _1828: Unit = Put r.368[_1831] = _1835
// [KnfOpt]           let _1785: Unit = Unit
// [KnfOpt]           Jump(go_loop.1779, [])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]     } else {
// [KnfOpt]       let _550: Unit = Unit
// [KnfOpt]       let _551: Int = Int(0)
// [KnfOpt]       let _552: Int = Int(0)
// [KnfOpt]       let _553: Int = Get nperm.32[_552]
// [KnfOpt]       let _554: Int = Int(1)
// [KnfOpt]       let _555: Int = Add(_553, _554)
// [KnfOpt]       let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]       Jump(compute.367, [r.368, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(go_loop.1779, [])
// [KnfOpt] } else {
// [KnfOpt]   let _461: Unit = Unit
// [KnfOpt]   let _465: Int = Int(0)
// [KnfOpt]   let _466: Int = Int(0)
// [KnfOpt]   let _467: Int = Get check_sum.29[_466]
// [KnfOpt]   let _468: Int = Int(0)
// [KnfOpt]   let _469: Int = Get flips.23[_468]
// [KnfOpt]   let _470: Int = Int(1)
// [KnfOpt]   let _471: Int = Int(0)
// [KnfOpt]   let _472: Int = Get nperm.32[_471]
// [KnfOpt]   let _473: Int = Int(0)
// [KnfOpt]   let _474: Int = Get nperm.32[_473]
// [KnfOpt]   let _475: Int = Int(2)
// [KnfOpt]   let _476: Int = Div(_474, _475)
// [KnfOpt]   let _477: Int = Int(2)
// [KnfOpt]   let _478: Int = Mul(_476, _477)
// [KnfOpt]   let _479: Int = Sub(_472, _478)
// [KnfOpt]   let _480: Int = Int(2)
// [KnfOpt]   let _481: Int = Mul(_479, _480)
// [KnfOpt]   let _482: Int = Sub(_470, _481)
// [KnfOpt]   let _483: Int = Mul(_469, _482)
// [KnfOpt]   let _484: Int = Add(_467, _483)
// [KnfOpt]   let _485: Unit = Put check_sum.29[_465] = _484
// [KnfOpt]   let _486: Int = Int(1)
// [KnfOpt]   let _487: Bool = Bool(true)
// [KnfOpt]   let go.488: Array(Bool) = ExtApply(minimbt_create_array, [_486, _487, ])
// [KnfOpt]   let _489: Int = Int(1)
// [KnfOpt]   let _490: Int = Int(0)
// [KnfOpt]   let t.491: Array(Int) = ExtApply(minimbt_create_array, [_489, _490, ])
// [KnfOpt]   let rec go_loop.492: Unit = () {
// [KnfOpt]     let join go_loop.493: Unit = () {
// [KnfOpt]       let _494: Int = Int(0)
// [KnfOpt]       let _495: Bool = Get go.488[_494]
// [KnfOpt]       let _496: Bool = Bool(true)
// [KnfOpt]       if (_495 == _496) then {
// [KnfOpt]         let _497: Int = Int(0)
// [KnfOpt]         let _498: Int = Get r.368[_497]
// [KnfOpt]         if (_498 == n.2) then {
// [KnfOpt]           let _500: Int = Int(0)
// [KnfOpt]           let _501: Bool = Bool(false)
// [KnfOpt]           let _502: Unit = Put go.488[_500] = _501
// [KnfOpt]           let _503: Int = Int(0)
// [KnfOpt]           let _504: Int = Int(0)
// [KnfOpt]           let _505: Unit = Put r.368[_503] = _504
// [KnfOpt]           let _499: Unit = Unit
// [KnfOpt]           Jump(go_loop.493, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _506: Int = Int(0)
// [KnfOpt]           let _507: Int = Int(0)
// [KnfOpt]           let _508: Int = Get perm1.16[_507]
// [KnfOpt]           let _509: Unit = Put t.491[_506] = _508
// [KnfOpt]           let rec move_perm1_forward.510: Unit = (i.511: Int) {
// [KnfOpt]             let _512: Int = Int(0)
// [KnfOpt]             let _513: Int = Get r.368[_512]
// [KnfOpt]             let _514: Int = Int(1)
// [KnfOpt]             let _515: Int = Sub(_513, _514)
// [KnfOpt]             if (i.511 <= _515) then {
// [KnfOpt]               let _516: Int = Int(1)
// [KnfOpt]               let _517: Int = Add(i.511, _516)
// [KnfOpt]               let _518: Int = Get perm1.16[_517]
// [KnfOpt]               let _519: Unit = Put perm1.16[i.511] = _518
// [KnfOpt]               let _520: Int = Int(1)
// [KnfOpt]               let _521: Int = Add(i.511, _520)
// [KnfOpt]               let _522: Unit = Apply(move_perm1_forward.510, [_521, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _523: Int = Int(0)
// [KnfOpt]           let _524: Unit = Apply(move_perm1_forward.510, [_523, ])
// [KnfOpt]           let _525: Int = Int(0)
// [KnfOpt]           let _526: Int = Get r.368[_525]
// [KnfOpt]           let _527: Int = Int(0)
// [KnfOpt]           let _528: Int = Get t.491[_527]
// [KnfOpt]           let _529: Unit = Put perm1.16[_526] = _528
// [KnfOpt]           let _530: Int = Int(0)
// [KnfOpt]           let _531: Int = Get r.368[_530]
// [KnfOpt]           let _532: Int = Int(0)
// [KnfOpt]           let _533: Int = Get r.368[_532]
// [KnfOpt]           let _534: Int = Get count.20[_533]
// [KnfOpt]           let _535: Int = Int(1)
// [KnfOpt]           let _536: Int = Sub(_534, _535)
// [KnfOpt]           let _537: Unit = Put count.20[_531] = _536
// [KnfOpt]           let _538: Int = Int(1)
// [KnfOpt]           let _539: Int = Int(0)
// [KnfOpt]           let _540: Int = Get r.368[_539]
// [KnfOpt]           let _541: Int = Get count.20[_540]
// [KnfOpt]           if (_538 <= _541) then {
// [KnfOpt]             let _543: Int = Int(0)
// [KnfOpt]             let _544: Bool = Bool(false)
// [KnfOpt]             let _542: Unit = Put go.488[_543] = _544
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _545: Int = Int(0)
// [KnfOpt]             let _546: Int = Int(0)
// [KnfOpt]             let _547: Int = Get r.368[_546]
// [KnfOpt]             let _548: Int = Int(1)
// [KnfOpt]             let _549: Int = Add(_547, _548)
// [KnfOpt]             let _542: Unit = Put r.368[_545] = _549
// [KnfOpt]             let _499: Unit = Unit
// [KnfOpt]             Jump(go_loop.493, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.493, [])
// [KnfOpt]   }
// [KnfOpt]   let join go_loop.1836: Unit = () {
// [KnfOpt]     let _1837: Int = Int(0)
// [KnfOpt]     let _1838: Bool = Get go.488[_1837]
// [KnfOpt]     let _1839: Bool = Bool(true)
// [KnfOpt]     if (_1838 == _1839) then {
// [KnfOpt]       let _1840: Int = Int(0)
// [KnfOpt]       let _1841: Int = Get r.368[_1840]
// [KnfOpt]       if (_1841 == n.2) then {
// [KnfOpt]         let _1843: Int = Int(0)
// [KnfOpt]         let _1844: Bool = Bool(false)
// [KnfOpt]         let _1845: Unit = Put go.488[_1843] = _1844
// [KnfOpt]         let _1846: Int = Int(0)
// [KnfOpt]         let _1847: Int = Int(0)
// [KnfOpt]         let _1848: Unit = Put r.368[_1846] = _1847
// [KnfOpt]         let _1842: Unit = Unit
// [KnfOpt]         Jump(go_loop.1836, [])
// [KnfOpt]       } else {
// [KnfOpt]         let _1849: Int = Int(0)
// [KnfOpt]         let _1850: Int = Int(0)
// [KnfOpt]         let _1851: Int = Get perm1.16[_1850]
// [KnfOpt]         let _1852: Unit = Put t.491[_1849] = _1851
// [KnfOpt]         let rec move_perm1_forward.1853: Unit = (i.1854: Int) {
// [KnfOpt]           let _1855: Int = Int(0)
// [KnfOpt]           let _1856: Int = Get r.368[_1855]
// [KnfOpt]           let _1857: Int = Int(1)
// [KnfOpt]           let _1858: Int = Sub(_1856, _1857)
// [KnfOpt]           if (i.1854 <= _1858) then {
// [KnfOpt]             let _1859: Int = Int(1)
// [KnfOpt]             let _1860: Int = Add(i.1854, _1859)
// [KnfOpt]             let _1861: Int = Get perm1.16[_1860]
// [KnfOpt]             let _1862: Unit = Put perm1.16[i.1854] = _1861
// [KnfOpt]             let _1863: Int = Int(1)
// [KnfOpt]             let _1864: Int = Add(i.1854, _1863)
// [KnfOpt]             let _1865: Unit = Apply(move_perm1_forward.1853, [_1864, ])
// [KnfOpt]             Unit
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         let _1866: Int = Int(0)
// [KnfOpt]         let _1867: Unit = Apply(move_perm1_forward.1853, [_1866, ])
// [KnfOpt]         let _1868: Int = Int(0)
// [KnfOpt]         let _1869: Int = Get r.368[_1868]
// [KnfOpt]         let _1870: Int = Int(0)
// [KnfOpt]         let _1871: Int = Get t.491[_1870]
// [KnfOpt]         let _1872: Unit = Put perm1.16[_1869] = _1871
// [KnfOpt]         let _1873: Int = Int(0)
// [KnfOpt]         let _1874: Int = Get r.368[_1873]
// [KnfOpt]         let _1875: Int = Int(0)
// [KnfOpt]         let _1876: Int = Get r.368[_1875]
// [KnfOpt]         let _1877: Int = Get count.20[_1876]
// [KnfOpt]         let _1878: Int = Int(1)
// [KnfOpt]         let _1879: Int = Sub(_1877, _1878)
// [KnfOpt]         let _1880: Unit = Put count.20[_1874] = _1879
// [KnfOpt]         let _1881: Int = Int(1)
// [KnfOpt]         let _1882: Int = Int(0)
// [KnfOpt]         let _1883: Int = Get r.368[_1882]
// [KnfOpt]         let _1884: Int = Get count.20[_1883]
// [KnfOpt]         if (_1881 <= _1884) then {
// [KnfOpt]           let _1886: Int = Int(0)
// [KnfOpt]           let _1887: Bool = Bool(false)
// [KnfOpt]           let _1885: Unit = Put go.488[_1886] = _1887
// [KnfOpt]           let _1842: Unit = Unit
// [KnfOpt]           Jump(go_loop.1836, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _1888: Int = Int(0)
// [KnfOpt]           let _1889: Int = Int(0)
// [KnfOpt]           let _1890: Int = Get r.368[_1889]
// [KnfOpt]           let _1891: Int = Int(1)
// [KnfOpt]           let _1892: Int = Add(_1890, _1891)
// [KnfOpt]           let _1885: Unit = Put r.368[_1888] = _1892
// [KnfOpt]           let _1842: Unit = Unit
// [KnfOpt]           Jump(go_loop.1836, [])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]     } else {
// [KnfOpt]       let _550: Unit = Unit
// [KnfOpt]       let _551: Int = Int(0)
// [KnfOpt]       let _552: Int = Int(0)
// [KnfOpt]       let _553: Int = Get nperm.32[_552]
// [KnfOpt]       let _554: Int = Int(1)
// [KnfOpt]       let _555: Int = Add(_553, _554)
// [KnfOpt]       let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt]       Jump(compute.367, [r.368, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(go_loop.1836, [])
// [KnfOpt] }
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Knf inline Some(go_loop) let _550: Unit = Unit
// [KnfOpt] let _551: Int = Int(0)
// [KnfOpt] let _552: Int = Int(0)
// [KnfOpt] let _553: Int = Get nperm.32[_552]
// [KnfOpt] let _554: Int = Int(1)
// [KnfOpt] let _555: Int = Add(_553, _554)
// [KnfOpt] let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt] Jump(compute.367, [r.368, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.510 rejected
// [KnfOpt] Knf inline Some(go_loop) let _550: Unit = Unit
// [KnfOpt] let _551: Int = Int(0)
// [KnfOpt] let _552: Int = Int(0)
// [KnfOpt] let _553: Int = Get nperm.32[_552]
// [KnfOpt] let _554: Int = Int(1)
// [KnfOpt] let _555: Int = Add(_553, _554)
// [KnfOpt] let _556: Unit = Put nperm.32[_551] = _555
// [KnfOpt] Jump(compute.367, [r.368, ])
// [KnfOpt] Knf inline Some(compute) let _218: Unit = Unit
// [KnfOpt] let _219: Int = Int(0)
// [KnfOpt] let _220: Int = Get max_flips.26[_219]
// [KnfOpt] let _221: Int = Int(0)
// [KnfOpt] let _222: Int = Get check_sum.29[_221]
// [KnfOpt] Tuple([_220, _222, ])
// [KnfOpt] Knf inline Some(fannkuch) let _225: Tuple([Int, Int]) = Unit
// [KnfOpt] let (max_flips.226: Var({val: Some(Int)}), check_sum.227: Var({val: Some(Int)})) = _225
// [KnfOpt] let _228: Unit = ExtApply(minimbt_print_int, [check_sum.227, ])
// [KnfOpt] ExtApply(minimbt_print_int, [max_flips.226, ])
// [KnfOpt] freq: {main.223: Once, gen_perm1.2333: Once, init_arr.2337: Once, init_arr.2339: Many(2), compute.2367: Once, compute.2369: Many(3), copy_perm.2374: Once, copy_perm.2376: Many(2), init_count.2386: Many(2), do_flip.2412: Once, do_flip.2414: Many(2), flip_loop.2422: Once, flip_loop.2424: Many(2), go_loop.2494: Once, go_loop.2495: Many(4), move_perm1_forward.2512: Many(2), go_loop.2586: Once, go_loop.2587: Many(4), move_perm1_forward.2604: Many(2)}
// [KnfOpt] Knf inline Some(init_arr) let _2347: Unit = Unit
// [KnfOpt] Var(arr.2336)
// [KnfOpt] Inline threshold 2 39
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_count.2386 rejected
// [KnfOpt] Inline threshold 2 39
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_count.2386 rejected
// [KnfOpt] Knf inline Some(flip_loop) let _2447: Unit = Unit
// [KnfOpt] let _2448: Int = Int(0)
// [KnfOpt] let _2449: Int = Int(0)
// [KnfOpt] let _2450: Int = Get perm.2350[_2449]
// [KnfOpt] let _2451: Unit = Put k.2415[_2448] = _2450
// [KnfOpt] let _2452: Int = Int(0)
// [KnfOpt] let _2453: Int = Int(0)
// [KnfOpt] let _2454: Int = Get flips.2355[_2453]
// [KnfOpt] let _2455: Int = Int(1)
// [KnfOpt] let _2456: Int = Add(_2454, _2455)
// [KnfOpt] let _2457: Unit = Put flips.2355[_2452] = _2456
// [KnfOpt] Jump(do_flip.2414, [k.2415, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2512 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2512 rejected
// [KnfOpt] Knf inline Some(go_loop) let _2552: Unit = Unit
// [KnfOpt] let _2553: Int = Int(0)
// [KnfOpt] let _2554: Int = Int(0)
// [KnfOpt] let _2555: Int = Get nperm.2364[_2554]
// [KnfOpt] let _2556: Int = Int(1)
// [KnfOpt] let _2557: Int = Add(_2555, _2556)
// [KnfOpt] let _2558: Unit = Put nperm.2364[_2553] = _2557
// [KnfOpt] Jump(compute.2369, [r.2370, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2604 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2604 rejected
// [KnfOpt] Knf inline Some(go_loop) let _2644: Unit = Unit
// [KnfOpt] let _2645: Int = Int(0)
// [KnfOpt] let _2646: Int = Int(0)
// [KnfOpt] let _2647: Int = Get nperm.2364[_2646]
// [KnfOpt] let _2648: Int = Int(1)
// [KnfOpt] let _2649: Int = Add(_2647, _2648)
// [KnfOpt] let _2650: Unit = Put nperm.2364[_2645] = _2649
// [KnfOpt] Jump(compute.2369, [r.2370, ])
// [KnfOpt] Knf inline Some(do_flip) let _2458: Unit = Unit
// [KnfOpt] let _2459: Int = Int(0)
// [KnfOpt] let _2460: Int = Get max_flips.2358[_2459]
// [KnfOpt] let _2461: Int = Int(0)
// [KnfOpt] let _2462: Int = Get flips.2355[_2461]
// [KnfOpt] if (_2460 <= _2462) then {
// [KnfOpt]   let _2464: Int = Int(0)
// [KnfOpt]   let _2465: Int = Int(0)
// [KnfOpt]   let _2466: Int = Get flips.2355[_2465]
// [KnfOpt]   let _2463: Unit = Put max_flips.2358[_2464] = _2466
// [KnfOpt]   let _2467: Int = Int(0)
// [KnfOpt]   let _2468: Int = Int(0)
// [KnfOpt]   let _2469: Int = Get check_sum.2361[_2468]
// [KnfOpt]   let _2470: Int = Int(0)
// [KnfOpt]   let _2471: Int = Get flips.2355[_2470]
// [KnfOpt]   let _2472: Int = Int(1)
// [KnfOpt]   let _2473: Int = Int(0)
// [KnfOpt]   let _2474: Int = Get nperm.2364[_2473]
// [KnfOpt]   let _2475: Int = Int(0)
// [KnfOpt]   let _2476: Int = Get nperm.2364[_2475]
// [KnfOpt]   let _2477: Int = Int(2)
// [KnfOpt]   let _2478: Int = Div(_2476, _2477)
// [KnfOpt]   let _2479: Int = Int(2)
// [KnfOpt]   let _2480: Int = Mul(_2478, _2479)
// [KnfOpt]   let _2481: Int = Sub(_2474, _2480)
// [KnfOpt]   let _2482: Int = Int(2)
// [KnfOpt]   let _2483: Int = Mul(_2481, _2482)
// [KnfOpt]   let _2484: Int = Sub(_2472, _2483)
// [KnfOpt]   let _2485: Int = Mul(_2471, _2484)
// [KnfOpt]   let _2486: Int = Add(_2469, _2485)
// [KnfOpt]   let _2487: Unit = Put check_sum.2361[_2467] = _2486
// [KnfOpt]   let _2488: Int = Int(1)
// [KnfOpt]   let _2489: Bool = Bool(true)
// [KnfOpt]   let go.2490: Array(Bool) = ExtApply(minimbt_create_array, [_2488, _2489, ])
// [KnfOpt]   let _2491: Int = Int(1)
// [KnfOpt]   let _2492: Int = Int(0)
// [KnfOpt]   let t.2493: Array(Int) = ExtApply(minimbt_create_array, [_2491, _2492, ])
// [KnfOpt]   let rec go_loop.2494: Unit = () {
// [KnfOpt]     let join go_loop.2495: Unit = () {
// [KnfOpt]       let _2496: Int = Int(0)
// [KnfOpt]       let _2497: Bool = Get go.2490[_2496]
// [KnfOpt]       let _2498: Bool = Bool(true)
// [KnfOpt]       if (_2497 == _2498) then {
// [KnfOpt]         let _2499: Int = Int(0)
// [KnfOpt]         let _2500: Int = Get r.2370[_2499]
// [KnfOpt]         if (_2500 == _224) then {
// [KnfOpt]           let _2502: Int = Int(0)
// [KnfOpt]           let _2503: Bool = Bool(false)
// [KnfOpt]           let _2504: Unit = Put go.2490[_2502] = _2503
// [KnfOpt]           let _2505: Int = Int(0)
// [KnfOpt]           let _2506: Int = Int(0)
// [KnfOpt]           let _2507: Unit = Put r.2370[_2505] = _2506
// [KnfOpt]           let _2501: Unit = Unit
// [KnfOpt]           Jump(go_loop.2495, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _2508: Int = Int(0)
// [KnfOpt]           let _2509: Int = Int(0)
// [KnfOpt]           let _2510: Int = Get perm1.2348[_2509]
// [KnfOpt]           let _2511: Unit = Put t.2493[_2508] = _2510
// [KnfOpt]           let rec move_perm1_forward.2512: Unit = (i.2513: Int) {
// [KnfOpt]             let _2514: Int = Int(0)
// [KnfOpt]             let _2515: Int = Get r.2370[_2514]
// [KnfOpt]             let _2516: Int = Int(1)
// [KnfOpt]             let _2517: Int = Sub(_2515, _2516)
// [KnfOpt]             if (i.2513 <= _2517) then {
// [KnfOpt]               let _2518: Int = Int(1)
// [KnfOpt]               let _2519: Int = Add(i.2513, _2518)
// [KnfOpt]               let _2520: Int = Get perm1.2348[_2519]
// [KnfOpt]               let _2521: Unit = Put perm1.2348[i.2513] = _2520
// [KnfOpt]               let _2522: Int = Int(1)
// [KnfOpt]               let _2523: Int = Add(i.2513, _2522)
// [KnfOpt]               let _2524: Unit = Apply(move_perm1_forward.2512, [_2523, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _2525: Int = Int(0)
// [KnfOpt]           let _2526: Unit = Apply(move_perm1_forward.2512, [_2525, ])
// [KnfOpt]           let _2527: Int = Int(0)
// [KnfOpt]           let _2528: Int = Get r.2370[_2527]
// [KnfOpt]           let _2529: Int = Int(0)
// [KnfOpt]           let _2530: Int = Get t.2493[_2529]
// [KnfOpt]           let _2531: Unit = Put perm1.2348[_2528] = _2530
// [KnfOpt]           let _2532: Int = Int(0)
// [KnfOpt]           let _2533: Int = Get r.2370[_2532]
// [KnfOpt]           let _2534: Int = Int(0)
// [KnfOpt]           let _2535: Int = Get r.2370[_2534]
// [KnfOpt]           let _2536: Int = Get count.2352[_2535]
// [KnfOpt]           let _2537: Int = Int(1)
// [KnfOpt]           let _2538: Int = Sub(_2536, _2537)
// [KnfOpt]           let _2539: Unit = Put count.2352[_2533] = _2538
// [KnfOpt]           let _2540: Int = Int(1)
// [KnfOpt]           let _2541: Int = Int(0)
// [KnfOpt]           let _2542: Int = Get r.2370[_2541]
// [KnfOpt]           let _2543: Int = Get count.2352[_2542]
// [KnfOpt]           if (_2540 <= _2543) then {
// [KnfOpt]             let _2545: Int = Int(0)
// [KnfOpt]             let _2546: Bool = Bool(false)
// [KnfOpt]             let _2544: Unit = Put go.2490[_2545] = _2546
// [KnfOpt]             let _2501: Unit = Unit
// [KnfOpt]             Jump(go_loop.2495, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _2547: Int = Int(0)
// [KnfOpt]             let _2548: Int = Int(0)
// [KnfOpt]             let _2549: Int = Get r.2370[_2548]
// [KnfOpt]             let _2550: Int = Int(1)
// [KnfOpt]             let _2551: Int = Add(_2549, _2550)
// [KnfOpt]             let _2544: Unit = Put r.2370[_2547] = _2551
// [KnfOpt]             let _2501: Unit = Unit
// [KnfOpt]             Jump(go_loop.2495, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.2495, [])
// [KnfOpt]   }
// [KnfOpt]   let join go_loop.2685: Unit = () {
// [KnfOpt]     let _2686: Int = Int(0)
// [KnfOpt]     let _2687: Bool = Get go.2490[_2686]
// [KnfOpt]     let _2688: Bool = Bool(true)
// [KnfOpt]     if (_2687 == _2688) then {
// [KnfOpt]       let _2689: Int = Int(0)
// [KnfOpt]       let _2690: Int = Get r.2370[_2689]
// [KnfOpt]       if (_2690 == _224) then {
// [KnfOpt]         let _2691: Int = Int(0)
// [KnfOpt]         let _2692: Bool = Bool(false)
// [KnfOpt]         let _2693: Unit = Put go.2490[_2691] = _2692
// [KnfOpt]         let _2694: Int = Int(0)
// [KnfOpt]         let _2695: Int = Int(0)
// [KnfOpt]         let _2696: Unit = Put r.2370[_2694] = _2695
// [KnfOpt]         let _2697: Unit = Unit
// [KnfOpt]         Jump(go_loop.2685, [])
// [KnfOpt]       } else {
// [KnfOpt]         let _2698: Int = Int(0)
// [KnfOpt]         let _2699: Int = Int(0)
// [KnfOpt]         let _2700: Int = Get perm1.2348[_2699]
// [KnfOpt]         let _2701: Unit = Put t.2493[_2698] = _2700
// [KnfOpt]         let rec move_perm1_forward.2702: Unit = (i.2703: Int) {
// [KnfOpt]           let _2704: Int = Int(0)
// [KnfOpt]           let _2705: Int = Get r.2370[_2704]
// [KnfOpt]           let _2706: Int = Int(1)
// [KnfOpt]           let _2707: Int = Sub(_2705, _2706)
// [KnfOpt]           if (i.2703 <= _2707) then {
// [KnfOpt]             let _2708: Int = Int(1)
// [KnfOpt]             let _2709: Int = Add(i.2703, _2708)
// [KnfOpt]             let _2710: Int = Get perm1.2348[_2709]
// [KnfOpt]             let _2711: Unit = Put perm1.2348[i.2703] = _2710
// [KnfOpt]             let _2712: Int = Int(1)
// [KnfOpt]             let _2713: Int = Add(i.2703, _2712)
// [KnfOpt]             let _2714: Unit = Apply(move_perm1_forward.2702, [_2713, ])
// [KnfOpt]             Unit
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         let _2715: Int = Int(0)
// [KnfOpt]         let _2716: Unit = Apply(move_perm1_forward.2702, [_2715, ])
// [KnfOpt]         let _2717: Int = Int(0)
// [KnfOpt]         let _2718: Int = Get r.2370[_2717]
// [KnfOpt]         let _2719: Int = Int(0)
// [KnfOpt]         let _2720: Int = Get t.2493[_2719]
// [KnfOpt]         let _2721: Unit = Put perm1.2348[_2718] = _2720
// [KnfOpt]         let _2722: Int = Int(0)
// [KnfOpt]         let _2723: Int = Get r.2370[_2722]
// [KnfOpt]         let _2724: Int = Int(0)
// [KnfOpt]         let _2725: Int = Get r.2370[_2724]
// [KnfOpt]         let _2726: Int = Get count.2352[_2725]
// [KnfOpt]         let _2727: Int = Int(1)
// [KnfOpt]         let _2728: Int = Sub(_2726, _2727)
// [KnfOpt]         let _2729: Unit = Put count.2352[_2723] = _2728
// [KnfOpt]         let _2730: Int = Int(1)
// [KnfOpt]         let _2731: Int = Int(0)
// [KnfOpt]         let _2732: Int = Get r.2370[_2731]
// [KnfOpt]         let _2733: Int = Get count.2352[_2732]
// [KnfOpt]         if (_2730 <= _2733) then {
// [KnfOpt]           let _2734: Int = Int(0)
// [KnfOpt]           let _2735: Bool = Bool(false)
// [KnfOpt]           let _2736: Unit = Put go.2490[_2734] = _2735
// [KnfOpt]           let _2737: Unit = Unit
// [KnfOpt]           Jump(go_loop.2685, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _2738: Int = Int(0)
// [KnfOpt]           let _2739: Int = Int(0)
// [KnfOpt]           let _2740: Int = Get r.2370[_2739]
// [KnfOpt]           let _2741: Int = Int(1)
// [KnfOpt]           let _2742: Int = Add(_2740, _2741)
// [KnfOpt]           let _2743: Unit = Put r.2370[_2738] = _2742
// [KnfOpt]           let _2744: Unit = Unit
// [KnfOpt]           Jump(go_loop.2685, [])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]     } else {
// [KnfOpt]       let _2552: Unit = Unit
// [KnfOpt]       let _2553: Int = Int(0)
// [KnfOpt]       let _2554: Int = Int(0)
// [KnfOpt]       let _2555: Int = Get nperm.2364[_2554]
// [KnfOpt]       let _2556: Int = Int(1)
// [KnfOpt]       let _2557: Int = Add(_2555, _2556)
// [KnfOpt]       let _2558: Unit = Put nperm.2364[_2553] = _2557
// [KnfOpt]       Jump(compute.2369, [r.2370, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(go_loop.2685, [])
// [KnfOpt] } else {
// [KnfOpt]   let _2463: Unit = Unit
// [KnfOpt]   let _2559: Int = Int(0)
// [KnfOpt]   let _2560: Int = Int(0)
// [KnfOpt]   let _2561: Int = Get check_sum.2361[_2560]
// [KnfOpt]   let _2562: Int = Int(0)
// [KnfOpt]   let _2563: Int = Get flips.2355[_2562]
// [KnfOpt]   let _2564: Int = Int(1)
// [KnfOpt]   let _2565: Int = Int(0)
// [KnfOpt]   let _2566: Int = Get nperm.2364[_2565]
// [KnfOpt]   let _2567: Int = Int(0)
// [KnfOpt]   let _2568: Int = Get nperm.2364[_2567]
// [KnfOpt]   let _2569: Int = Int(2)
// [KnfOpt]   let _2570: Int = Div(_2568, _2569)
// [KnfOpt]   let _2571: Int = Int(2)
// [KnfOpt]   let _2572: Int = Mul(_2570, _2571)
// [KnfOpt]   let _2573: Int = Sub(_2566, _2572)
// [KnfOpt]   let _2574: Int = Int(2)
// [KnfOpt]   let _2575: Int = Mul(_2573, _2574)
// [KnfOpt]   let _2576: Int = Sub(_2564, _2575)
// [KnfOpt]   let _2577: Int = Mul(_2563, _2576)
// [KnfOpt]   let _2578: Int = Add(_2561, _2577)
// [KnfOpt]   let _2579: Unit = Put check_sum.2361[_2559] = _2578
// [KnfOpt]   let _2580: Int = Int(1)
// [KnfOpt]   let _2581: Bool = Bool(true)
// [KnfOpt]   let go.2582: Array(Bool) = ExtApply(minimbt_create_array, [_2580, _2581, ])
// [KnfOpt]   let _2583: Int = Int(1)
// [KnfOpt]   let _2584: Int = Int(0)
// [KnfOpt]   let t.2585: Array(Int) = ExtApply(minimbt_create_array, [_2583, _2584, ])
// [KnfOpt]   let rec go_loop.2586: Unit = () {
// [KnfOpt]     let join go_loop.2587: Unit = () {
// [KnfOpt]       let _2588: Int = Int(0)
// [KnfOpt]       let _2589: Bool = Get go.2582[_2588]
// [KnfOpt]       let _2590: Bool = Bool(true)
// [KnfOpt]       if (_2589 == _2590) then {
// [KnfOpt]         let _2591: Int = Int(0)
// [KnfOpt]         let _2592: Int = Get r.2370[_2591]
// [KnfOpt]         if (_2592 == _224) then {
// [KnfOpt]           let _2594: Int = Int(0)
// [KnfOpt]           let _2595: Bool = Bool(false)
// [KnfOpt]           let _2596: Unit = Put go.2582[_2594] = _2595
// [KnfOpt]           let _2597: Int = Int(0)
// [KnfOpt]           let _2598: Int = Int(0)
// [KnfOpt]           let _2599: Unit = Put r.2370[_2597] = _2598
// [KnfOpt]           let _2593: Unit = Unit
// [KnfOpt]           Jump(go_loop.2587, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _2600: Int = Int(0)
// [KnfOpt]           let _2601: Int = Int(0)
// [KnfOpt]           let _2602: Int = Get perm1.2348[_2601]
// [KnfOpt]           let _2603: Unit = Put t.2585[_2600] = _2602
// [KnfOpt]           let rec move_perm1_forward.2604: Unit = (i.2605: Int) {
// [KnfOpt]             let _2606: Int = Int(0)
// [KnfOpt]             let _2607: Int = Get r.2370[_2606]
// [KnfOpt]             let _2608: Int = Int(1)
// [KnfOpt]             let _2609: Int = Sub(_2607, _2608)
// [KnfOpt]             if (i.2605 <= _2609) then {
// [KnfOpt]               let _2610: Int = Int(1)
// [KnfOpt]               let _2611: Int = Add(i.2605, _2610)
// [KnfOpt]               let _2612: Int = Get perm1.2348[_2611]
// [KnfOpt]               let _2613: Unit = Put perm1.2348[i.2605] = _2612
// [KnfOpt]               let _2614: Int = Int(1)
// [KnfOpt]               let _2615: Int = Add(i.2605, _2614)
// [KnfOpt]               let _2616: Unit = Apply(move_perm1_forward.2604, [_2615, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _2617: Int = Int(0)
// [KnfOpt]           let _2618: Unit = Apply(move_perm1_forward.2604, [_2617, ])
// [KnfOpt]           let _2619: Int = Int(0)
// [KnfOpt]           let _2620: Int = Get r.2370[_2619]
// [KnfOpt]           let _2621: Int = Int(0)
// [KnfOpt]           let _2622: Int = Get t.2585[_2621]
// [KnfOpt]           let _2623: Unit = Put perm1.2348[_2620] = _2622
// [KnfOpt]           let _2624: Int = Int(0)
// [KnfOpt]           let _2625: Int = Get r.2370[_2624]
// [KnfOpt]           let _2626: Int = Int(0)
// [KnfOpt]           let _2627: Int = Get r.2370[_2626]
// [KnfOpt]           let _2628: Int = Get count.2352[_2627]
// [KnfOpt]           let _2629: Int = Int(1)
// [KnfOpt]           let _2630: Int = Sub(_2628, _2629)
// [KnfOpt]           let _2631: Unit = Put count.2352[_2625] = _2630
// [KnfOpt]           let _2632: Int = Int(1)
// [KnfOpt]           let _2633: Int = Int(0)
// [KnfOpt]           let _2634: Int = Get r.2370[_2633]
// [KnfOpt]           let _2635: Int = Get count.2352[_2634]
// [KnfOpt]           if (_2632 <= _2635) then {
// [KnfOpt]             let _2637: Int = Int(0)
// [KnfOpt]             let _2638: Bool = Bool(false)
// [KnfOpt]             let _2636: Unit = Put go.2582[_2637] = _2638
// [KnfOpt]             let _2593: Unit = Unit
// [KnfOpt]             Jump(go_loop.2587, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _2639: Int = Int(0)
// [KnfOpt]             let _2640: Int = Int(0)
// [KnfOpt]             let _2641: Int = Get r.2370[_2640]
// [KnfOpt]             let _2642: Int = Int(1)
// [KnfOpt]             let _2643: Int = Add(_2641, _2642)
// [KnfOpt]             let _2636: Unit = Put r.2370[_2639] = _2643
// [KnfOpt]             let _2593: Unit = Unit
// [KnfOpt]             Jump(go_loop.2587, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.2587, [])
// [KnfOpt]   }
// [KnfOpt]   let join go_loop.2745: Unit = () {
// [KnfOpt]     let _2746: Int = Int(0)
// [KnfOpt]     let _2747: Bool = Get go.2582[_2746]
// [KnfOpt]     let _2748: Bool = Bool(true)
// [KnfOpt]     if (_2747 == _2748) then {
// [KnfOpt]       let _2749: Int = Int(0)
// [KnfOpt]       let _2750: Int = Get r.2370[_2749]
// [KnfOpt]       if (_2750 == _224) then {
// [KnfOpt]         let _2751: Int = Int(0)
// [KnfOpt]         let _2752: Bool = Bool(false)
// [KnfOpt]         let _2753: Unit = Put go.2582[_2751] = _2752
// [KnfOpt]         let _2754: Int = Int(0)
// [KnfOpt]         let _2755: Int = Int(0)
// [KnfOpt]         let _2756: Unit = Put r.2370[_2754] = _2755
// [KnfOpt]         let _2757: Unit = Unit
// [KnfOpt]         Jump(go_loop.2745, [])
// [KnfOpt]       } else {
// [KnfOpt]         let _2758: Int = Int(0)
// [KnfOpt]         let _2759: Int = Int(0)
// [KnfOpt]         let _2760: Int = Get perm1.2348[_2759]
// [KnfOpt]         let _2761: Unit = Put t.2585[_2758] = _2760
// [KnfOpt]         let rec move_perm1_forward.2762: Unit = (i.2763: Int) {
// [KnfOpt]           let _2764: Int = Int(0)
// [KnfOpt]           let _2765: Int = Get r.2370[_2764]
// [KnfOpt]           let _2766: Int = Int(1)
// [KnfOpt]           let _2767: Int = Sub(_2765, _2766)
// [KnfOpt]           if (i.2763 <= _2767) then {
// [KnfOpt]             let _2768: Int = Int(1)
// [KnfOpt]             let _2769: Int = Add(i.2763, _2768)
// [KnfOpt]             let _2770: Int = Get perm1.2348[_2769]
// [KnfOpt]             let _2771: Unit = Put perm1.2348[i.2763] = _2770
// [KnfOpt]             let _2772: Int = Int(1)
// [KnfOpt]             let _2773: Int = Add(i.2763, _2772)
// [KnfOpt]             let _2774: Unit = Apply(move_perm1_forward.2762, [_2773, ])
// [KnfOpt]             Unit
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         let _2775: Int = Int(0)
// [KnfOpt]         let _2776: Unit = Apply(move_perm1_forward.2762, [_2775, ])
// [KnfOpt]         let _2777: Int = Int(0)
// [KnfOpt]         let _2778: Int = Get r.2370[_2777]
// [KnfOpt]         let _2779: Int = Int(0)
// [KnfOpt]         let _2780: Int = Get t.2585[_2779]
// [KnfOpt]         let _2781: Unit = Put perm1.2348[_2778] = _2780
// [KnfOpt]         let _2782: Int = Int(0)
// [KnfOpt]         let _2783: Int = Get r.2370[_2782]
// [KnfOpt]         let _2784: Int = Int(0)
// [KnfOpt]         let _2785: Int = Get r.2370[_2784]
// [KnfOpt]         let _2786: Int = Get count.2352[_2785]
// [KnfOpt]         let _2787: Int = Int(1)
// [KnfOpt]         let _2788: Int = Sub(_2786, _2787)
// [KnfOpt]         let _2789: Unit = Put count.2352[_2783] = _2788
// [KnfOpt]         let _2790: Int = Int(1)
// [KnfOpt]         let _2791: Int = Int(0)
// [KnfOpt]         let _2792: Int = Get r.2370[_2791]
// [KnfOpt]         let _2793: Int = Get count.2352[_2792]
// [KnfOpt]         if (_2790 <= _2793) then {
// [KnfOpt]           let _2794: Int = Int(0)
// [KnfOpt]           let _2795: Bool = Bool(false)
// [KnfOpt]           let _2796: Unit = Put go.2582[_2794] = _2795
// [KnfOpt]           let _2797: Unit = Unit
// [KnfOpt]           Jump(go_loop.2745, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _2798: Int = Int(0)
// [KnfOpt]           let _2799: Int = Int(0)
// [KnfOpt]           let _2800: Int = Get r.2370[_2799]
// [KnfOpt]           let _2801: Int = Int(1)
// [KnfOpt]           let _2802: Int = Add(_2800, _2801)
// [KnfOpt]           let _2803: Unit = Put r.2370[_2798] = _2802
// [KnfOpt]           let _2804: Unit = Unit
// [KnfOpt]           Jump(go_loop.2745, [])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]     } else {
// [KnfOpt]       let _2644: Unit = Unit
// [KnfOpt]       let _2645: Int = Int(0)
// [KnfOpt]       let _2646: Int = Int(0)
// [KnfOpt]       let _2647: Int = Get nperm.2364[_2646]
// [KnfOpt]       let _2648: Int = Int(1)
// [KnfOpt]       let _2649: Int = Add(_2647, _2648)
// [KnfOpt]       let _2650: Unit = Put nperm.2364[_2645] = _2649
// [KnfOpt]       Jump(compute.2369, [r.2370, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(go_loop.2745, [])
// [KnfOpt] }
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2512 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2512 rejected
// [KnfOpt] Knf inline Some(go_loop) let _2552: Unit = Unit
// [KnfOpt] let _2553: Int = Int(0)
// [KnfOpt] let _2554: Int = Int(0)
// [KnfOpt] let _2555: Int = Get nperm.2364[_2554]
// [KnfOpt] let _2556: Int = Int(1)
// [KnfOpt] let _2557: Int = Add(_2555, _2556)
// [KnfOpt] let _2558: Unit = Put nperm.2364[_2553] = _2557
// [KnfOpt] Jump(compute.2369, [r.2370, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2604 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2604 rejected
// [KnfOpt] Knf inline Some(go_loop) let _2644: Unit = Unit
// [KnfOpt] let _2645: Int = Int(0)
// [KnfOpt] let _2646: Int = Int(0)
// [KnfOpt] let _2647: Int = Get nperm.2364[_2646]
// [KnfOpt] let _2648: Int = Int(1)
// [KnfOpt] let _2649: Int = Add(_2647, _2648)
// [KnfOpt] let _2650: Unit = Put nperm.2364[_2645] = _2649
// [KnfOpt] Jump(compute.2369, [r.2370, ])
// [KnfOpt] Knf inline Some(copy_perm) let _2385: Unit = Unit
// [KnfOpt] let rec init_count.2386: Unit = () {
// [KnfOpt]   let _2387: Int = Int(0)
// [KnfOpt]   let _2388: Int = Get r.2370[_2387]
// [KnfOpt]   let _2389: Int = Int(1)
// [KnfOpt]   if (_2388 == _2389) then {
// [KnfOpt]     let _2390: Unit = Unit
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _2391: Int = Int(0)
// [KnfOpt]     let _2392: Int = Get r.2370[_2391]
// [KnfOpt]     let _2393: Int = Int(1)
// [KnfOpt]     let _2394: Int = Sub(_2392, _2393)
// [KnfOpt]     let _2395: Int = Int(0)
// [KnfOpt]     let _2396: Int = Get r.2370[_2395]
// [KnfOpt]     let _2397: Unit = Put count.2352[_2394] = _2396
// [KnfOpt]     let _2398: Int = Int(0)
// [KnfOpt]     let _2399: Int = Int(0)
// [KnfOpt]     let _2400: Int = Get r.2370[_2399]
// [KnfOpt]     let _2401: Int = Int(1)
// [KnfOpt]     let _2402: Int = Sub(_2400, _2401)
// [KnfOpt]     let _2403: Unit = Put r.2370[_2398] = _2402
// [KnfOpt]     let _2390: Unit = Apply(init_count.2386, [])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _2404: Unit = Apply(init_count.2386, [])
// [KnfOpt] let _2405: Int = Int(0)
// [KnfOpt] let _2406: Int = Int(0)
// [KnfOpt] let _2407: Unit = Put flips.2355[_2405] = _2406
// [KnfOpt] let _2408: Int = Int(1)
// [KnfOpt] let _2409: Int = Int(0)
// [KnfOpt] let _2410: Int = Get perm.2350[_2409]
// [KnfOpt] let k.2411: Array(Int) = ExtApply(minimbt_create_array, [_2408, _2410, ])
// [KnfOpt] let rec do_flip.2412: Unit = (k.2413: Array(Int)) {
// [KnfOpt]   let join do_flip.2414: Unit = (k.2415: Array(Int)) {
// [KnfOpt]     let _2416: Int = Int(0)
// [KnfOpt]     let _2417: Int = Get k.2415[_2416]
// [KnfOpt]     let _2418: Int = Int(0)
// [KnfOpt]     if (_2417 == _2418) then {
// [KnfOpt]       Unit
// [KnfOpt]     } else {
// [KnfOpt]       let _2419: Int = Int(1)
// [KnfOpt]       let _2420: Int = Int(0)
// [KnfOpt]       let t.2421: Array(Int) = ExtApply(minimbt_create_array, [_2419, _2420, ])
// [KnfOpt]       let rec flip_loop.2422: Unit = (i.2423: Int) {
// [KnfOpt]         let join flip_loop.2424: Unit = (i.2425: Int) {
// [KnfOpt]           let _2426: Int = Int(0)
// [KnfOpt]           let _2427: Int = Get k.2415[_2426]
// [KnfOpt]           let _2428: Int = Int(2)
// [KnfOpt]           let _2429: Int = Div(_2427, _2428)
// [KnfOpt]           if (i.2425 <= _2429) then {
// [KnfOpt]             let _2430: Int = Int(0)
// [KnfOpt]             let _2431: Int = Get perm.2350[i.2425]
// [KnfOpt]             let _2432: Unit = Put t.2421[_2430] = _2431
// [KnfOpt]             let _2433: Int = Int(0)
// [KnfOpt]             let _2434: Int = Get k.2415[_2433]
// [KnfOpt]             let _2435: Int = Sub(_2434, i.2425)
// [KnfOpt]             let _2436: Int = Get perm.2350[_2435]
// [KnfOpt]             let _2437: Unit = Put perm.2350[i.2425] = _2436
// [KnfOpt]             let _2438: Int = Int(0)
// [KnfOpt]             let _2439: Int = Get k.2415[_2438]
// [KnfOpt]             let _2440: Int = Sub(_2439, i.2425)
// [KnfOpt]             let _2441: Int = Int(0)
// [KnfOpt]             let _2442: Int = Get t.2421[_2441]
// [KnfOpt]             let _2443: Unit = Put perm.2350[_2440] = _2442
// [KnfOpt]             let _2444: Int = Int(1)
// [KnfOpt]             let _2445: Int = Add(i.2425, _2444)
// [KnfOpt]             Jump(flip_loop.2424, [_2445, ])
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(flip_loop.2424, [i.2423, ])
// [KnfOpt]       }
// [KnfOpt]       let _2446: Int = Int(0)
// [KnfOpt]       let join flip_loop.2663: Unit = (i.2664: Int) {
// [KnfOpt]         let _2665: Int = Int(0)
// [KnfOpt]         let _2666: Int = Get k.2415[_2665]
// [KnfOpt]         let _2667: Int = Int(2)
// [KnfOpt]         let _2668: Int = Div(_2666, _2667)
// [KnfOpt]         if (i.2664 <= _2668) then {
// [KnfOpt]           let _2669: Int = Int(0)
// [KnfOpt]           let _2670: Int = Get perm.2350[i.2664]
// [KnfOpt]           let _2671: Unit = Put t.2421[_2669] = _2670
// [KnfOpt]           let _2672: Int = Int(0)
// [KnfOpt]           let _2673: Int = Get k.2415[_2672]
// [KnfOpt]           let _2674: Int = Sub(_2673, i.2664)
// [KnfOpt]           let _2675: Int = Get perm.2350[_2674]
// [KnfOpt]           let _2676: Unit = Put perm.2350[i.2664] = _2675
// [KnfOpt]           let _2677: Int = Int(0)
// [KnfOpt]           let _2678: Int = Get k.2415[_2677]
// [KnfOpt]           let _2679: Int = Sub(_2678, i.2664)
// [KnfOpt]           let _2680: Int = Int(0)
// [KnfOpt]           let _2681: Int = Get t.2421[_2680]
// [KnfOpt]           let _2682: Unit = Put perm.2350[_2679] = _2681
// [KnfOpt]           let _2683: Int = Int(1)
// [KnfOpt]           let _2684: Int = Add(i.2664, _2683)
// [KnfOpt]           Jump(flip_loop.2663, [_2684, ])
// [KnfOpt]         } else {
// [KnfOpt]           let _2447: Unit = Unit
// [KnfOpt]           let _2448: Int = Int(0)
// [KnfOpt]           let _2449: Int = Int(0)
// [KnfOpt]           let _2450: Int = Get perm.2350[_2449]
// [KnfOpt]           let _2451: Unit = Put k.2415[_2448] = _2450
// [KnfOpt]           let _2452: Int = Int(0)
// [KnfOpt]           let _2453: Int = Int(0)
// [KnfOpt]           let _2454: Int = Get flips.2355[_2453]
// [KnfOpt]           let _2455: Int = Int(1)
// [KnfOpt]           let _2456: Int = Add(_2454, _2455)
// [KnfOpt]           let _2457: Unit = Put flips.2355[_2452] = _2456
// [KnfOpt]           Jump(do_flip.2414, [k.2415, ])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(flip_loop.2663, [_2446, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(do_flip.2414, [k.2413, ])
// [KnfOpt] }
// [KnfOpt] let join do_flip.2805: Unit = (k.2806: Array(Int)) {
// [KnfOpt]   let _2807: Int = Int(0)
// [KnfOpt]   let _2808: Int = Get k.2806[_2807]
// [KnfOpt]   let _2809: Int = Int(0)
// [KnfOpt]   if (_2808 == _2809) then {
// [KnfOpt]     let _2458: Unit = Unit
// [KnfOpt]     let _2459: Int = Int(0)
// [KnfOpt]     let _2460: Int = Get max_flips.2358[_2459]
// [KnfOpt]     let _2461: Int = Int(0)
// [KnfOpt]     let _2462: Int = Get flips.2355[_2461]
// [KnfOpt]     if (_2460 <= _2462) then {
// [KnfOpt]       let _2464: Int = Int(0)
// [KnfOpt]       let _2465: Int = Int(0)
// [KnfOpt]       let _2466: Int = Get flips.2355[_2465]
// [KnfOpt]       let _2463: Unit = Put max_flips.2358[_2464] = _2466
// [KnfOpt]       let _2467: Int = Int(0)
// [KnfOpt]       let _2468: Int = Int(0)
// [KnfOpt]       let _2469: Int = Get check_sum.2361[_2468]
// [KnfOpt]       let _2470: Int = Int(0)
// [KnfOpt]       let _2471: Int = Get flips.2355[_2470]
// [KnfOpt]       let _2472: Int = Int(1)
// [KnfOpt]       let _2473: Int = Int(0)
// [KnfOpt]       let _2474: Int = Get nperm.2364[_2473]
// [KnfOpt]       let _2475: Int = Int(0)
// [KnfOpt]       let _2476: Int = Get nperm.2364[_2475]
// [KnfOpt]       let _2477: Int = Int(2)
// [KnfOpt]       let _2478: Int = Div(_2476, _2477)
// [KnfOpt]       let _2479: Int = Int(2)
// [KnfOpt]       let _2480: Int = Mul(_2478, _2479)
// [KnfOpt]       let _2481: Int = Sub(_2474, _2480)
// [KnfOpt]       let _2482: Int = Int(2)
// [KnfOpt]       let _2483: Int = Mul(_2481, _2482)
// [KnfOpt]       let _2484: Int = Sub(_2472, _2483)
// [KnfOpt]       let _2485: Int = Mul(_2471, _2484)
// [KnfOpt]       let _2486: Int = Add(_2469, _2485)
// [KnfOpt]       let _2487: Unit = Put check_sum.2361[_2467] = _2486
// [KnfOpt]       let _2488: Int = Int(1)
// [KnfOpt]       let _2489: Bool = Bool(true)
// [KnfOpt]       let go.2490: Array(Bool) = ExtApply(minimbt_create_array, [_2488, _2489, ])
// [KnfOpt]       let _2491: Int = Int(1)
// [KnfOpt]       let _2492: Int = Int(0)
// [KnfOpt]       let t.2493: Array(Int) = ExtApply(minimbt_create_array, [_2491, _2492, ])
// [KnfOpt]       let rec go_loop.2494: Unit = () {
// [KnfOpt]         let join go_loop.2495: Unit = () {
// [KnfOpt]           let _2496: Int = Int(0)
// [KnfOpt]           let _2497: Bool = Get go.2490[_2496]
// [KnfOpt]           let _2498: Bool = Bool(true)
// [KnfOpt]           if (_2497 == _2498) then {
// [KnfOpt]             let _2499: Int = Int(0)
// [KnfOpt]             let _2500: Int = Get r.2370[_2499]
// [KnfOpt]             if (_2500 == _224) then {
// [KnfOpt]               let _2502: Int = Int(0)
// [KnfOpt]               let _2503: Bool = Bool(false)
// [KnfOpt]               let _2504: Unit = Put go.2490[_2502] = _2503
// [KnfOpt]               let _2505: Int = Int(0)
// [KnfOpt]               let _2506: Int = Int(0)
// [KnfOpt]               let _2507: Unit = Put r.2370[_2505] = _2506
// [KnfOpt]               let _2501: Unit = Unit
// [KnfOpt]               Jump(go_loop.2495, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _2508: Int = Int(0)
// [KnfOpt]               let _2509: Int = Int(0)
// [KnfOpt]               let _2510: Int = Get perm1.2348[_2509]
// [KnfOpt]               let _2511: Unit = Put t.2493[_2508] = _2510
// [KnfOpt]               let rec move_perm1_forward.2512: Unit = (i.2513: Int) {
// [KnfOpt]                 let _2514: Int = Int(0)
// [KnfOpt]                 let _2515: Int = Get r.2370[_2514]
// [KnfOpt]                 let _2516: Int = Int(1)
// [KnfOpt]                 let _2517: Int = Sub(_2515, _2516)
// [KnfOpt]                 if (i.2513 <= _2517) then {
// [KnfOpt]                   let _2518: Int = Int(1)
// [KnfOpt]                   let _2519: Int = Add(i.2513, _2518)
// [KnfOpt]                   let _2520: Int = Get perm1.2348[_2519]
// [KnfOpt]                   let _2521: Unit = Put perm1.2348[i.2513] = _2520
// [KnfOpt]                   let _2522: Int = Int(1)
// [KnfOpt]                   let _2523: Int = Add(i.2513, _2522)
// [KnfOpt]                   let _2524: Unit = Apply(move_perm1_forward.2512, [_2523, ])
// [KnfOpt]                   Unit
// [KnfOpt]                 } else {
// [KnfOpt]                   Unit
// [KnfOpt]                 }
// [KnfOpt]               }
// [KnfOpt]               let _2525: Int = Int(0)
// [KnfOpt]               let _2526: Unit = Apply(move_perm1_forward.2512, [_2525, ])
// [KnfOpt]               let _2527: Int = Int(0)
// [KnfOpt]               let _2528: Int = Get r.2370[_2527]
// [KnfOpt]               let _2529: Int = Int(0)
// [KnfOpt]               let _2530: Int = Get t.2493[_2529]
// [KnfOpt]               let _2531: Unit = Put perm1.2348[_2528] = _2530
// [KnfOpt]               let _2532: Int = Int(0)
// [KnfOpt]               let _2533: Int = Get r.2370[_2532]
// [KnfOpt]               let _2534: Int = Int(0)
// [KnfOpt]               let _2535: Int = Get r.2370[_2534]
// [KnfOpt]               let _2536: Int = Get count.2352[_2535]
// [KnfOpt]               let _2537: Int = Int(1)
// [KnfOpt]               let _2538: Int = Sub(_2536, _2537)
// [KnfOpt]               let _2539: Unit = Put count.2352[_2533] = _2538
// [KnfOpt]               let _2540: Int = Int(1)
// [KnfOpt]               let _2541: Int = Int(0)
// [KnfOpt]               let _2542: Int = Get r.2370[_2541]
// [KnfOpt]               let _2543: Int = Get count.2352[_2542]
// [KnfOpt]               if (_2540 <= _2543) then {
// [KnfOpt]                 let _2545: Int = Int(0)
// [KnfOpt]                 let _2546: Bool = Bool(false)
// [KnfOpt]                 let _2544: Unit = Put go.2490[_2545] = _2546
// [KnfOpt]                 let _2501: Unit = Unit
// [KnfOpt]                 Jump(go_loop.2495, [])
// [KnfOpt]               } else {
// [KnfOpt]                 let _2547: Int = Int(0)
// [KnfOpt]                 let _2548: Int = Int(0)
// [KnfOpt]                 let _2549: Int = Get r.2370[_2548]
// [KnfOpt]                 let _2550: Int = Int(1)
// [KnfOpt]                 let _2551: Int = Add(_2549, _2550)
// [KnfOpt]                 let _2544: Unit = Put r.2370[_2547] = _2551
// [KnfOpt]                 let _2501: Unit = Unit
// [KnfOpt]                 Jump(go_loop.2495, [])
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(go_loop.2495, [])
// [KnfOpt]       }
// [KnfOpt]       let join go_loop.2810: Unit = () {
// [KnfOpt]         let _2811: Int = Int(0)
// [KnfOpt]         let _2812: Bool = Get go.2490[_2811]
// [KnfOpt]         let _2813: Bool = Bool(true)
// [KnfOpt]         if (_2812 == _2813) then {
// [KnfOpt]           let _2814: Int = Int(0)
// [KnfOpt]           let _2815: Int = Get r.2370[_2814]
// [KnfOpt]           if (_2815 == _224) then {
// [KnfOpt]             let _2816: Int = Int(0)
// [KnfOpt]             let _2817: Bool = Bool(false)
// [KnfOpt]             let _2818: Unit = Put go.2490[_2816] = _2817
// [KnfOpt]             let _2819: Int = Int(0)
// [KnfOpt]             let _2820: Int = Int(0)
// [KnfOpt]             let _2821: Unit = Put r.2370[_2819] = _2820
// [KnfOpt]             let _2822: Unit = Unit
// [KnfOpt]             Jump(go_loop.2810, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _2823: Int = Int(0)
// [KnfOpt]             let _2824: Int = Int(0)
// [KnfOpt]             let _2825: Int = Get perm1.2348[_2824]
// [KnfOpt]             let _2826: Unit = Put t.2493[_2823] = _2825
// [KnfOpt]             let rec move_perm1_forward.2827: Unit = (i.2828: Int) {
// [KnfOpt]               let _2829: Int = Int(0)
// [KnfOpt]               let _2830: Int = Get r.2370[_2829]
// [KnfOpt]               let _2831: Int = Int(1)
// [KnfOpt]               let _2832: Int = Sub(_2830, _2831)
// [KnfOpt]               if (i.2828 <= _2832) then {
// [KnfOpt]                 let _2833: Int = Int(1)
// [KnfOpt]                 let _2834: Int = Add(i.2828, _2833)
// [KnfOpt]                 let _2835: Int = Get perm1.2348[_2834]
// [KnfOpt]                 let _2836: Unit = Put perm1.2348[i.2828] = _2835
// [KnfOpt]                 let _2837: Int = Int(1)
// [KnfOpt]                 let _2838: Int = Add(i.2828, _2837)
// [KnfOpt]                 let _2839: Unit = Apply(move_perm1_forward.2827, [_2838, ])
// [KnfOpt]                 Unit
// [KnfOpt]               } else {
// [KnfOpt]                 Unit
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]             let _2840: Int = Int(0)
// [KnfOpt]             let _2841: Unit = Apply(move_perm1_forward.2827, [_2840, ])
// [KnfOpt]             let _2842: Int = Int(0)
// [KnfOpt]             let _2843: Int = Get r.2370[_2842]
// [KnfOpt]             let _2844: Int = Int(0)
// [KnfOpt]             let _2845: Int = Get t.2493[_2844]
// [KnfOpt]             let _2846: Unit = Put perm1.2348[_2843] = _2845
// [KnfOpt]             let _2847: Int = Int(0)
// [KnfOpt]             let _2848: Int = Get r.2370[_2847]
// [KnfOpt]             let _2849: Int = Int(0)
// [KnfOpt]             let _2850: Int = Get r.2370[_2849]
// [KnfOpt]             let _2851: Int = Get count.2352[_2850]
// [KnfOpt]             let _2852: Int = Int(1)
// [KnfOpt]             let _2853: Int = Sub(_2851, _2852)
// [KnfOpt]             let _2854: Unit = Put count.2352[_2848] = _2853
// [KnfOpt]             let _2855: Int = Int(1)
// [KnfOpt]             let _2856: Int = Int(0)
// [KnfOpt]             let _2857: Int = Get r.2370[_2856]
// [KnfOpt]             let _2858: Int = Get count.2352[_2857]
// [KnfOpt]             if (_2855 <= _2858) then {
// [KnfOpt]               let _2859: Int = Int(0)
// [KnfOpt]               let _2860: Bool = Bool(false)
// [KnfOpt]               let _2861: Unit = Put go.2490[_2859] = _2860
// [KnfOpt]               let _2862: Unit = Unit
// [KnfOpt]               Jump(go_loop.2810, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _2863: Int = Int(0)
// [KnfOpt]               let _2864: Int = Int(0)
// [KnfOpt]               let _2865: Int = Get r.2370[_2864]
// [KnfOpt]               let _2866: Int = Int(1)
// [KnfOpt]               let _2867: Int = Add(_2865, _2866)
// [KnfOpt]               let _2868: Unit = Put r.2370[_2863] = _2867
// [KnfOpt]               let _2869: Unit = Unit
// [KnfOpt]               Jump(go_loop.2810, [])
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]         } else {
// [KnfOpt]           let _2552: Unit = Unit
// [KnfOpt]           let _2553: Int = Int(0)
// [KnfOpt]           let _2554: Int = Int(0)
// [KnfOpt]           let _2555: Int = Get nperm.2364[_2554]
// [KnfOpt]           let _2556: Int = Int(1)
// [KnfOpt]           let _2557: Int = Add(_2555, _2556)
// [KnfOpt]           let _2558: Unit = Put nperm.2364[_2553] = _2557
// [KnfOpt]           Jump(compute.2369, [r.2370, ])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(go_loop.2810, [])
// [KnfOpt]     } else {
// [KnfOpt]       let _2463: Unit = Unit
// [KnfOpt]       let _2559: Int = Int(0)
// [KnfOpt]       let _2560: Int = Int(0)
// [KnfOpt]       let _2561: Int = Get check_sum.2361[_2560]
// [KnfOpt]       let _2562: Int = Int(0)
// [KnfOpt]       let _2563: Int = Get flips.2355[_2562]
// [KnfOpt]       let _2564: Int = Int(1)
// [KnfOpt]       let _2565: Int = Int(0)
// [KnfOpt]       let _2566: Int = Get nperm.2364[_2565]
// [KnfOpt]       let _2567: Int = Int(0)
// [KnfOpt]       let _2568: Int = Get nperm.2364[_2567]
// [KnfOpt]       let _2569: Int = Int(2)
// [KnfOpt]       let _2570: Int = Div(_2568, _2569)
// [KnfOpt]       let _2571: Int = Int(2)
// [KnfOpt]       let _2572: Int = Mul(_2570, _2571)
// [KnfOpt]       let _2573: Int = Sub(_2566, _2572)
// [KnfOpt]       let _2574: Int = Int(2)
// [KnfOpt]       let _2575: Int = Mul(_2573, _2574)
// [KnfOpt]       let _2576: Int = Sub(_2564, _2575)
// [KnfOpt]       let _2577: Int = Mul(_2563, _2576)
// [KnfOpt]       let _2578: Int = Add(_2561, _2577)
// [KnfOpt]       let _2579: Unit = Put check_sum.2361[_2559] = _2578
// [KnfOpt]       let _2580: Int = Int(1)
// [KnfOpt]       let _2581: Bool = Bool(true)
// [KnfOpt]       let go.2582: Array(Bool) = ExtApply(minimbt_create_array, [_2580, _2581, ])
// [KnfOpt]       let _2583: Int = Int(1)
// [KnfOpt]       let _2584: Int = Int(0)
// [KnfOpt]       let t.2585: Array(Int) = ExtApply(minimbt_create_array, [_2583, _2584, ])
// [KnfOpt]       let rec go_loop.2586: Unit = () {
// [KnfOpt]         let join go_loop.2587: Unit = () {
// [KnfOpt]           let _2588: Int = Int(0)
// [KnfOpt]           let _2589: Bool = Get go.2582[_2588]
// [KnfOpt]           let _2590: Bool = Bool(true)
// [KnfOpt]           if (_2589 == _2590) then {
// [KnfOpt]             let _2591: Int = Int(0)
// [KnfOpt]             let _2592: Int = Get r.2370[_2591]
// [KnfOpt]             if (_2592 == _224) then {
// [KnfOpt]               let _2594: Int = Int(0)
// [KnfOpt]               let _2595: Bool = Bool(false)
// [KnfOpt]               let _2596: Unit = Put go.2582[_2594] = _2595
// [KnfOpt]               let _2597: Int = Int(0)
// [KnfOpt]               let _2598: Int = Int(0)
// [KnfOpt]               let _2599: Unit = Put r.2370[_2597] = _2598
// [KnfOpt]               let _2593: Unit = Unit
// [KnfOpt]               Jump(go_loop.2587, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _2600: Int = Int(0)
// [KnfOpt]               let _2601: Int = Int(0)
// [KnfOpt]               let _2602: Int = Get perm1.2348[_2601]
// [KnfOpt]               let _2603: Unit = Put t.2585[_2600] = _2602
// [KnfOpt]               let rec move_perm1_forward.2604: Unit = (i.2605: Int) {
// [KnfOpt]                 let _2606: Int = Int(0)
// [KnfOpt]                 let _2607: Int = Get r.2370[_2606]
// [KnfOpt]                 let _2608: Int = Int(1)
// [KnfOpt]                 let _2609: Int = Sub(_2607, _2608)
// [KnfOpt]                 if (i.2605 <= _2609) then {
// [KnfOpt]                   let _2610: Int = Int(1)
// [KnfOpt]                   let _2611: Int = Add(i.2605, _2610)
// [KnfOpt]                   let _2612: Int = Get perm1.2348[_2611]
// [KnfOpt]                   let _2613: Unit = Put perm1.2348[i.2605] = _2612
// [KnfOpt]                   let _2614: Int = Int(1)
// [KnfOpt]                   let _2615: Int = Add(i.2605, _2614)
// [KnfOpt]                   let _2616: Unit = Apply(move_perm1_forward.2604, [_2615, ])
// [KnfOpt]                   Unit
// [KnfOpt]                 } else {
// [KnfOpt]                   Unit
// [KnfOpt]                 }
// [KnfOpt]               }
// [KnfOpt]               let _2617: Int = Int(0)
// [KnfOpt]               let _2618: Unit = Apply(move_perm1_forward.2604, [_2617, ])
// [KnfOpt]               let _2619: Int = Int(0)
// [KnfOpt]               let _2620: Int = Get r.2370[_2619]
// [KnfOpt]               let _2621: Int = Int(0)
// [KnfOpt]               let _2622: Int = Get t.2585[_2621]
// [KnfOpt]               let _2623: Unit = Put perm1.2348[_2620] = _2622
// [KnfOpt]               let _2624: Int = Int(0)
// [KnfOpt]               let _2625: Int = Get r.2370[_2624]
// [KnfOpt]               let _2626: Int = Int(0)
// [KnfOpt]               let _2627: Int = Get r.2370[_2626]
// [KnfOpt]               let _2628: Int = Get count.2352[_2627]
// [KnfOpt]               let _2629: Int = Int(1)
// [KnfOpt]               let _2630: Int = Sub(_2628, _2629)
// [KnfOpt]               let _2631: Unit = Put count.2352[_2625] = _2630
// [KnfOpt]               let _2632: Int = Int(1)
// [KnfOpt]               let _2633: Int = Int(0)
// [KnfOpt]               let _2634: Int = Get r.2370[_2633]
// [KnfOpt]               let _2635: Int = Get count.2352[_2634]
// [KnfOpt]               if (_2632 <= _2635) then {
// [KnfOpt]                 let _2637: Int = Int(0)
// [KnfOpt]                 let _2638: Bool = Bool(false)
// [KnfOpt]                 let _2636: Unit = Put go.2582[_2637] = _2638
// [KnfOpt]                 let _2593: Unit = Unit
// [KnfOpt]                 Jump(go_loop.2587, [])
// [KnfOpt]               } else {
// [KnfOpt]                 let _2639: Int = Int(0)
// [KnfOpt]                 let _2640: Int = Int(0)
// [KnfOpt]                 let _2641: Int = Get r.2370[_2640]
// [KnfOpt]                 let _2642: Int = Int(1)
// [KnfOpt]                 let _2643: Int = Add(_2641, _2642)
// [KnfOpt]                 let _2636: Unit = Put r.2370[_2639] = _2643
// [KnfOpt]                 let _2593: Unit = Unit
// [KnfOpt]                 Jump(go_loop.2587, [])
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(go_loop.2587, [])
// [KnfOpt]       }
// [KnfOpt]       let join go_loop.2870: Unit = () {
// [KnfOpt]         let _2871: Int = Int(0)
// [KnfOpt]         let _2872: Bool = Get go.2582[_2871]
// [KnfOpt]         let _2873: Bool = Bool(true)
// [KnfOpt]         if (_2872 == _2873) then {
// [KnfOpt]           let _2874: Int = Int(0)
// [KnfOpt]           let _2875: Int = Get r.2370[_2874]
// [KnfOpt]           if (_2875 == _224) then {
// [KnfOpt]             let _2876: Int = Int(0)
// [KnfOpt]             let _2877: Bool = Bool(false)
// [KnfOpt]             let _2878: Unit = Put go.2582[_2876] = _2877
// [KnfOpt]             let _2879: Int = Int(0)
// [KnfOpt]             let _2880: Int = Int(0)
// [KnfOpt]             let _2881: Unit = Put r.2370[_2879] = _2880
// [KnfOpt]             let _2882: Unit = Unit
// [KnfOpt]             Jump(go_loop.2870, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _2883: Int = Int(0)
// [KnfOpt]             let _2884: Int = Int(0)
// [KnfOpt]             let _2885: Int = Get perm1.2348[_2884]
// [KnfOpt]             let _2886: Unit = Put t.2585[_2883] = _2885
// [KnfOpt]             let rec move_perm1_forward.2887: Unit = (i.2888: Int) {
// [KnfOpt]               let _2889: Int = Int(0)
// [KnfOpt]               let _2890: Int = Get r.2370[_2889]
// [KnfOpt]               let _2891: Int = Int(1)
// [KnfOpt]               let _2892: Int = Sub(_2890, _2891)
// [KnfOpt]               if (i.2888 <= _2892) then {
// [KnfOpt]                 let _2893: Int = Int(1)
// [KnfOpt]                 let _2894: Int = Add(i.2888, _2893)
// [KnfOpt]                 let _2895: Int = Get perm1.2348[_2894]
// [KnfOpt]                 let _2896: Unit = Put perm1.2348[i.2888] = _2895
// [KnfOpt]                 let _2897: Int = Int(1)
// [KnfOpt]                 let _2898: Int = Add(i.2888, _2897)
// [KnfOpt]                 let _2899: Unit = Apply(move_perm1_forward.2887, [_2898, ])
// [KnfOpt]                 Unit
// [KnfOpt]               } else {
// [KnfOpt]                 Unit
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]             let _2900: Int = Int(0)
// [KnfOpt]             let _2901: Unit = Apply(move_perm1_forward.2887, [_2900, ])
// [KnfOpt]             let _2902: Int = Int(0)
// [KnfOpt]             let _2903: Int = Get r.2370[_2902]
// [KnfOpt]             let _2904: Int = Int(0)
// [KnfOpt]             let _2905: Int = Get t.2585[_2904]
// [KnfOpt]             let _2906: Unit = Put perm1.2348[_2903] = _2905
// [KnfOpt]             let _2907: Int = Int(0)
// [KnfOpt]             let _2908: Int = Get r.2370[_2907]
// [KnfOpt]             let _2909: Int = Int(0)
// [KnfOpt]             let _2910: Int = Get r.2370[_2909]
// [KnfOpt]             let _2911: Int = Get count.2352[_2910]
// [KnfOpt]             let _2912: Int = Int(1)
// [KnfOpt]             let _2913: Int = Sub(_2911, _2912)
// [KnfOpt]             let _2914: Unit = Put count.2352[_2908] = _2913
// [KnfOpt]             let _2915: Int = Int(1)
// [KnfOpt]             let _2916: Int = Int(0)
// [KnfOpt]             let _2917: Int = Get r.2370[_2916]
// [KnfOpt]             let _2918: Int = Get count.2352[_2917]
// [KnfOpt]             if (_2915 <= _2918) then {
// [KnfOpt]               let _2919: Int = Int(0)
// [KnfOpt]               let _2920: Bool = Bool(false)
// [KnfOpt]               let _2921: Unit = Put go.2582[_2919] = _2920
// [KnfOpt]               let _2922: Unit = Unit
// [KnfOpt]               Jump(go_loop.2870, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _2923: Int = Int(0)
// [KnfOpt]               let _2924: Int = Int(0)
// [KnfOpt]               let _2925: Int = Get r.2370[_2924]
// [KnfOpt]               let _2926: Int = Int(1)
// [KnfOpt]               let _2927: Int = Add(_2925, _2926)
// [KnfOpt]               let _2928: Unit = Put r.2370[_2923] = _2927
// [KnfOpt]               let _2929: Unit = Unit
// [KnfOpt]               Jump(go_loop.2870, [])
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]         } else {
// [KnfOpt]           let _2644: Unit = Unit
// [KnfOpt]           let _2645: Int = Int(0)
// [KnfOpt]           let _2646: Int = Int(0)
// [KnfOpt]           let _2647: Int = Get nperm.2364[_2646]
// [KnfOpt]           let _2648: Int = Int(1)
// [KnfOpt]           let _2649: Int = Add(_2647, _2648)
// [KnfOpt]           let _2650: Unit = Put nperm.2364[_2645] = _2649
// [KnfOpt]           Jump(compute.2369, [r.2370, ])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(go_loop.2870, [])
// [KnfOpt]     }
// [KnfOpt]   } else {
// [KnfOpt]     let _2930: Int = Int(1)
// [KnfOpt]     let _2931: Int = Int(0)
// [KnfOpt]     let t.2932: Array(Int) = ExtApply(minimbt_create_array, [_2930, _2931, ])
// [KnfOpt]     let rec flip_loop.2933: Unit = (i.2934: Int) {
// [KnfOpt]       let join flip_loop.2935: Unit = (i.2936: Int) {
// [KnfOpt]         let _2937: Int = Int(0)
// [KnfOpt]         let _2938: Int = Get k.2806[_2937]
// [KnfOpt]         let _2939: Int = Int(2)
// [KnfOpt]         let _2940: Int = Div(_2938, _2939)
// [KnfOpt]         if (i.2936 <= _2940) then {
// [KnfOpt]           let _2941: Int = Int(0)
// [KnfOpt]           let _2942: Int = Get perm.2350[i.2936]
// [KnfOpt]           let _2943: Unit = Put t.2932[_2941] = _2942
// [KnfOpt]           let _2944: Int = Int(0)
// [KnfOpt]           let _2945: Int = Get k.2806[_2944]
// [KnfOpt]           let _2946: Int = Sub(_2945, i.2936)
// [KnfOpt]           let _2947: Int = Get perm.2350[_2946]
// [KnfOpt]           let _2948: Unit = Put perm.2350[i.2936] = _2947
// [KnfOpt]           let _2949: Int = Int(0)
// [KnfOpt]           let _2950: Int = Get k.2806[_2949]
// [KnfOpt]           let _2951: Int = Sub(_2950, i.2936)
// [KnfOpt]           let _2952: Int = Int(0)
// [KnfOpt]           let _2953: Int = Get t.2932[_2952]
// [KnfOpt]           let _2954: Unit = Put perm.2350[_2951] = _2953
// [KnfOpt]           let _2955: Int = Int(1)
// [KnfOpt]           let _2956: Int = Add(i.2936, _2955)
// [KnfOpt]           Jump(flip_loop.2935, [_2956, ])
// [KnfOpt]         } else {
// [KnfOpt]           Unit
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(flip_loop.2935, [i.2934, ])
// [KnfOpt]     }
// [KnfOpt]     let _2957: Int = Int(0)
// [KnfOpt]     let _2958: Unit = Apply(flip_loop.2933, [_2957, ])
// [KnfOpt]     let _2959: Int = Int(0)
// [KnfOpt]     let _2960: Int = Int(0)
// [KnfOpt]     let _2961: Int = Get perm.2350[_2960]
// [KnfOpt]     let _2962: Unit = Put k.2806[_2959] = _2961
// [KnfOpt]     let _2963: Int = Int(0)
// [KnfOpt]     let _2964: Int = Int(0)
// [KnfOpt]     let _2965: Int = Get flips.2355[_2964]
// [KnfOpt]     let _2966: Int = Int(1)
// [KnfOpt]     let _2967: Int = Add(_2965, _2966)
// [KnfOpt]     let _2968: Unit = Put flips.2355[_2963] = _2967
// [KnfOpt]     Jump(do_flip.2805, [k.2806, ])
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Jump(do_flip.2805, [k.2411, ])
// [KnfOpt] Inline threshold 2 39
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_count.2386 rejected
// [KnfOpt] Inline threshold 2 39
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_count.2386 rejected
// [KnfOpt] Knf inline Some(flip_loop) let _2447: Unit = Unit
// [KnfOpt] let _2448: Int = Int(0)
// [KnfOpt] let _2449: Int = Int(0)
// [KnfOpt] let _2450: Int = Get perm.2350[_2449]
// [KnfOpt] let _2451: Unit = Put k.2415[_2448] = _2450
// [KnfOpt] let _2452: Int = Int(0)
// [KnfOpt] let _2453: Int = Int(0)
// [KnfOpt] let _2454: Int = Get flips.2355[_2453]
// [KnfOpt] let _2455: Int = Int(1)
// [KnfOpt] let _2456: Int = Add(_2454, _2455)
// [KnfOpt] let _2457: Unit = Put flips.2355[_2452] = _2456
// [KnfOpt] Jump(do_flip.2414, [k.2415, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2512 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2512 rejected
// [KnfOpt] Knf inline Some(go_loop) let _2552: Unit = Unit
// [KnfOpt] let _2553: Int = Int(0)
// [KnfOpt] let _2554: Int = Int(0)
// [KnfOpt] let _2555: Int = Get nperm.2364[_2554]
// [KnfOpt] let _2556: Int = Int(1)
// [KnfOpt] let _2557: Int = Add(_2555, _2556)
// [KnfOpt] let _2558: Unit = Put nperm.2364[_2553] = _2557
// [KnfOpt] Jump(compute.2369, [r.2370, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2604 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2604 rejected
// [KnfOpt] Knf inline Some(go_loop) let _2644: Unit = Unit
// [KnfOpt] let _2645: Int = Int(0)
// [KnfOpt] let _2646: Int = Int(0)
// [KnfOpt] let _2647: Int = Get nperm.2364[_2646]
// [KnfOpt] let _2648: Int = Int(1)
// [KnfOpt] let _2649: Int = Add(_2647, _2648)
// [KnfOpt] let _2650: Unit = Put nperm.2364[_2645] = _2649
// [KnfOpt] Jump(compute.2369, [r.2370, ])
// [KnfOpt] Knf inline Some(do_flip) let _2458: Unit = Unit
// [KnfOpt] let _2459: Int = Int(0)
// [KnfOpt] let _2460: Int = Get max_flips.2358[_2459]
// [KnfOpt] let _2461: Int = Int(0)
// [KnfOpt] let _2462: Int = Get flips.2355[_2461]
// [KnfOpt] if (_2460 <= _2462) then {
// [KnfOpt]   let _2464: Int = Int(0)
// [KnfOpt]   let _2465: Int = Int(0)
// [KnfOpt]   let _2466: Int = Get flips.2355[_2465]
// [KnfOpt]   let _2463: Unit = Put max_flips.2358[_2464] = _2466
// [KnfOpt]   let _2467: Int = Int(0)
// [KnfOpt]   let _2468: Int = Int(0)
// [KnfOpt]   let _2469: Int = Get check_sum.2361[_2468]
// [KnfOpt]   let _2470: Int = Int(0)
// [KnfOpt]   let _2471: Int = Get flips.2355[_2470]
// [KnfOpt]   let _2472: Int = Int(1)
// [KnfOpt]   let _2473: Int = Int(0)
// [KnfOpt]   let _2474: Int = Get nperm.2364[_2473]
// [KnfOpt]   let _2475: Int = Int(0)
// [KnfOpt]   let _2476: Int = Get nperm.2364[_2475]
// [KnfOpt]   let _2477: Int = Int(2)
// [KnfOpt]   let _2478: Int = Div(_2476, _2477)
// [KnfOpt]   let _2479: Int = Int(2)
// [KnfOpt]   let _2480: Int = Mul(_2478, _2479)
// [KnfOpt]   let _2481: Int = Sub(_2474, _2480)
// [KnfOpt]   let _2482: Int = Int(2)
// [KnfOpt]   let _2483: Int = Mul(_2481, _2482)
// [KnfOpt]   let _2484: Int = Sub(_2472, _2483)
// [KnfOpt]   let _2485: Int = Mul(_2471, _2484)
// [KnfOpt]   let _2486: Int = Add(_2469, _2485)
// [KnfOpt]   let _2487: Unit = Put check_sum.2361[_2467] = _2486
// [KnfOpt]   let _2488: Int = Int(1)
// [KnfOpt]   let _2489: Bool = Bool(true)
// [KnfOpt]   let go.2490: Array(Bool) = ExtApply(minimbt_create_array, [_2488, _2489, ])
// [KnfOpt]   let _2491: Int = Int(1)
// [KnfOpt]   let _2492: Int = Int(0)
// [KnfOpt]   let t.2493: Array(Int) = ExtApply(minimbt_create_array, [_2491, _2492, ])
// [KnfOpt]   let rec go_loop.2494: Unit = () {
// [KnfOpt]     let join go_loop.2495: Unit = () {
// [KnfOpt]       let _2496: Int = Int(0)
// [KnfOpt]       let _2497: Bool = Get go.2490[_2496]
// [KnfOpt]       let _2498: Bool = Bool(true)
// [KnfOpt]       if (_2497 == _2498) then {
// [KnfOpt]         let _2499: Int = Int(0)
// [KnfOpt]         let _2500: Int = Get r.2370[_2499]
// [KnfOpt]         if (_2500 == _224) then {
// [KnfOpt]           let _2502: Int = Int(0)
// [KnfOpt]           let _2503: Bool = Bool(false)
// [KnfOpt]           let _2504: Unit = Put go.2490[_2502] = _2503
// [KnfOpt]           let _2505: Int = Int(0)
// [KnfOpt]           let _2506: Int = Int(0)
// [KnfOpt]           let _2507: Unit = Put r.2370[_2505] = _2506
// [KnfOpt]           let _2501: Unit = Unit
// [KnfOpt]           Jump(go_loop.2495, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _2508: Int = Int(0)
// [KnfOpt]           let _2509: Int = Int(0)
// [KnfOpt]           let _2510: Int = Get perm1.2348[_2509]
// [KnfOpt]           let _2511: Unit = Put t.2493[_2508] = _2510
// [KnfOpt]           let rec move_perm1_forward.2512: Unit = (i.2513: Int) {
// [KnfOpt]             let _2514: Int = Int(0)
// [KnfOpt]             let _2515: Int = Get r.2370[_2514]
// [KnfOpt]             let _2516: Int = Int(1)
// [KnfOpt]             let _2517: Int = Sub(_2515, _2516)
// [KnfOpt]             if (i.2513 <= _2517) then {
// [KnfOpt]               let _2518: Int = Int(1)
// [KnfOpt]               let _2519: Int = Add(i.2513, _2518)
// [KnfOpt]               let _2520: Int = Get perm1.2348[_2519]
// [KnfOpt]               let _2521: Unit = Put perm1.2348[i.2513] = _2520
// [KnfOpt]               let _2522: Int = Int(1)
// [KnfOpt]               let _2523: Int = Add(i.2513, _2522)
// [KnfOpt]               let _2524: Unit = Apply(move_perm1_forward.2512, [_2523, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _2525: Int = Int(0)
// [KnfOpt]           let _2526: Unit = Apply(move_perm1_forward.2512, [_2525, ])
// [KnfOpt]           let _2527: Int = Int(0)
// [KnfOpt]           let _2528: Int = Get r.2370[_2527]
// [KnfOpt]           let _2529: Int = Int(0)
// [KnfOpt]           let _2530: Int = Get t.2493[_2529]
// [KnfOpt]           let _2531: Unit = Put perm1.2348[_2528] = _2530
// [KnfOpt]           let _2532: Int = Int(0)
// [KnfOpt]           let _2533: Int = Get r.2370[_2532]
// [KnfOpt]           let _2534: Int = Int(0)
// [KnfOpt]           let _2535: Int = Get r.2370[_2534]
// [KnfOpt]           let _2536: Int = Get count.2352[_2535]
// [KnfOpt]           let _2537: Int = Int(1)
// [KnfOpt]           let _2538: Int = Sub(_2536, _2537)
// [KnfOpt]           let _2539: Unit = Put count.2352[_2533] = _2538
// [KnfOpt]           let _2540: Int = Int(1)
// [KnfOpt]           let _2541: Int = Int(0)
// [KnfOpt]           let _2542: Int = Get r.2370[_2541]
// [KnfOpt]           let _2543: Int = Get count.2352[_2542]
// [KnfOpt]           if (_2540 <= _2543) then {
// [KnfOpt]             let _2545: Int = Int(0)
// [KnfOpt]             let _2546: Bool = Bool(false)
// [KnfOpt]             let _2544: Unit = Put go.2490[_2545] = _2546
// [KnfOpt]             let _2501: Unit = Unit
// [KnfOpt]             Jump(go_loop.2495, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _2547: Int = Int(0)
// [KnfOpt]             let _2548: Int = Int(0)
// [KnfOpt]             let _2549: Int = Get r.2370[_2548]
// [KnfOpt]             let _2550: Int = Int(1)
// [KnfOpt]             let _2551: Int = Add(_2549, _2550)
// [KnfOpt]             let _2544: Unit = Put r.2370[_2547] = _2551
// [KnfOpt]             let _2501: Unit = Unit
// [KnfOpt]             Jump(go_loop.2495, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.2495, [])
// [KnfOpt]   }
// [KnfOpt]   let join go_loop.2999: Unit = () {
// [KnfOpt]     let _3000: Int = Int(0)
// [KnfOpt]     let _3001: Bool = Get go.2490[_3000]
// [KnfOpt]     let _3002: Bool = Bool(true)
// [KnfOpt]     if (_3001 == _3002) then {
// [KnfOpt]       let _3003: Int = Int(0)
// [KnfOpt]       let _3004: Int = Get r.2370[_3003]
// [KnfOpt]       if (_3004 == _224) then {
// [KnfOpt]         let _3005: Int = Int(0)
// [KnfOpt]         let _3006: Bool = Bool(false)
// [KnfOpt]         let _3007: Unit = Put go.2490[_3005] = _3006
// [KnfOpt]         let _3008: Int = Int(0)
// [KnfOpt]         let _3009: Int = Int(0)
// [KnfOpt]         let _3010: Unit = Put r.2370[_3008] = _3009
// [KnfOpt]         let _3011: Unit = Unit
// [KnfOpt]         Jump(go_loop.2999, [])
// [KnfOpt]       } else {
// [KnfOpt]         let _3012: Int = Int(0)
// [KnfOpt]         let _3013: Int = Int(0)
// [KnfOpt]         let _3014: Int = Get perm1.2348[_3013]
// [KnfOpt]         let _3015: Unit = Put t.2493[_3012] = _3014
// [KnfOpt]         let rec move_perm1_forward.3016: Unit = (i.3017: Int) {
// [KnfOpt]           let _3018: Int = Int(0)
// [KnfOpt]           let _3019: Int = Get r.2370[_3018]
// [KnfOpt]           let _3020: Int = Int(1)
// [KnfOpt]           let _3021: Int = Sub(_3019, _3020)
// [KnfOpt]           if (i.3017 <= _3021) then {
// [KnfOpt]             let _3022: Int = Int(1)
// [KnfOpt]             let _3023: Int = Add(i.3017, _3022)
// [KnfOpt]             let _3024: Int = Get perm1.2348[_3023]
// [KnfOpt]             let _3025: Unit = Put perm1.2348[i.3017] = _3024
// [KnfOpt]             let _3026: Int = Int(1)
// [KnfOpt]             let _3027: Int = Add(i.3017, _3026)
// [KnfOpt]             let _3028: Unit = Apply(move_perm1_forward.3016, [_3027, ])
// [KnfOpt]             Unit
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         let _3029: Int = Int(0)
// [KnfOpt]         let _3030: Unit = Apply(move_perm1_forward.3016, [_3029, ])
// [KnfOpt]         let _3031: Int = Int(0)
// [KnfOpt]         let _3032: Int = Get r.2370[_3031]
// [KnfOpt]         let _3033: Int = Int(0)
// [KnfOpt]         let _3034: Int = Get t.2493[_3033]
// [KnfOpt]         let _3035: Unit = Put perm1.2348[_3032] = _3034
// [KnfOpt]         let _3036: Int = Int(0)
// [KnfOpt]         let _3037: Int = Get r.2370[_3036]
// [KnfOpt]         let _3038: Int = Int(0)
// [KnfOpt]         let _3039: Int = Get r.2370[_3038]
// [KnfOpt]         let _3040: Int = Get count.2352[_3039]
// [KnfOpt]         let _3041: Int = Int(1)
// [KnfOpt]         let _3042: Int = Sub(_3040, _3041)
// [KnfOpt]         let _3043: Unit = Put count.2352[_3037] = _3042
// [KnfOpt]         let _3044: Int = Int(1)
// [KnfOpt]         let _3045: Int = Int(0)
// [KnfOpt]         let _3046: Int = Get r.2370[_3045]
// [KnfOpt]         let _3047: Int = Get count.2352[_3046]
// [KnfOpt]         if (_3044 <= _3047) then {
// [KnfOpt]           let _3048: Int = Int(0)
// [KnfOpt]           let _3049: Bool = Bool(false)
// [KnfOpt]           let _3050: Unit = Put go.2490[_3048] = _3049
// [KnfOpt]           let _3051: Unit = Unit
// [KnfOpt]           Jump(go_loop.2999, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _3052: Int = Int(0)
// [KnfOpt]           let _3053: Int = Int(0)
// [KnfOpt]           let _3054: Int = Get r.2370[_3053]
// [KnfOpt]           let _3055: Int = Int(1)
// [KnfOpt]           let _3056: Int = Add(_3054, _3055)
// [KnfOpt]           let _3057: Unit = Put r.2370[_3052] = _3056
// [KnfOpt]           let _3058: Unit = Unit
// [KnfOpt]           Jump(go_loop.2999, [])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]     } else {
// [KnfOpt]       let _2552: Unit = Unit
// [KnfOpt]       let _2553: Int = Int(0)
// [KnfOpt]       let _2554: Int = Int(0)
// [KnfOpt]       let _2555: Int = Get nperm.2364[_2554]
// [KnfOpt]       let _2556: Int = Int(1)
// [KnfOpt]       let _2557: Int = Add(_2555, _2556)
// [KnfOpt]       let _2558: Unit = Put nperm.2364[_2553] = _2557
// [KnfOpt]       Jump(compute.2369, [r.2370, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(go_loop.2999, [])
// [KnfOpt] } else {
// [KnfOpt]   let _2463: Unit = Unit
// [KnfOpt]   let _2559: Int = Int(0)
// [KnfOpt]   let _2560: Int = Int(0)
// [KnfOpt]   let _2561: Int = Get check_sum.2361[_2560]
// [KnfOpt]   let _2562: Int = Int(0)
// [KnfOpt]   let _2563: Int = Get flips.2355[_2562]
// [KnfOpt]   let _2564: Int = Int(1)
// [KnfOpt]   let _2565: Int = Int(0)
// [KnfOpt]   let _2566: Int = Get nperm.2364[_2565]
// [KnfOpt]   let _2567: Int = Int(0)
// [KnfOpt]   let _2568: Int = Get nperm.2364[_2567]
// [KnfOpt]   let _2569: Int = Int(2)
// [KnfOpt]   let _2570: Int = Div(_2568, _2569)
// [KnfOpt]   let _2571: Int = Int(2)
// [KnfOpt]   let _2572: Int = Mul(_2570, _2571)
// [KnfOpt]   let _2573: Int = Sub(_2566, _2572)
// [KnfOpt]   let _2574: Int = Int(2)
// [KnfOpt]   let _2575: Int = Mul(_2573, _2574)
// [KnfOpt]   let _2576: Int = Sub(_2564, _2575)
// [KnfOpt]   let _2577: Int = Mul(_2563, _2576)
// [KnfOpt]   let _2578: Int = Add(_2561, _2577)
// [KnfOpt]   let _2579: Unit = Put check_sum.2361[_2559] = _2578
// [KnfOpt]   let _2580: Int = Int(1)
// [KnfOpt]   let _2581: Bool = Bool(true)
// [KnfOpt]   let go.2582: Array(Bool) = ExtApply(minimbt_create_array, [_2580, _2581, ])
// [KnfOpt]   let _2583: Int = Int(1)
// [KnfOpt]   let _2584: Int = Int(0)
// [KnfOpt]   let t.2585: Array(Int) = ExtApply(minimbt_create_array, [_2583, _2584, ])
// [KnfOpt]   let rec go_loop.2586: Unit = () {
// [KnfOpt]     let join go_loop.2587: Unit = () {
// [KnfOpt]       let _2588: Int = Int(0)
// [KnfOpt]       let _2589: Bool = Get go.2582[_2588]
// [KnfOpt]       let _2590: Bool = Bool(true)
// [KnfOpt]       if (_2589 == _2590) then {
// [KnfOpt]         let _2591: Int = Int(0)
// [KnfOpt]         let _2592: Int = Get r.2370[_2591]
// [KnfOpt]         if (_2592 == _224) then {
// [KnfOpt]           let _2594: Int = Int(0)
// [KnfOpt]           let _2595: Bool = Bool(false)
// [KnfOpt]           let _2596: Unit = Put go.2582[_2594] = _2595
// [KnfOpt]           let _2597: Int = Int(0)
// [KnfOpt]           let _2598: Int = Int(0)
// [KnfOpt]           let _2599: Unit = Put r.2370[_2597] = _2598
// [KnfOpt]           let _2593: Unit = Unit
// [KnfOpt]           Jump(go_loop.2587, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _2600: Int = Int(0)
// [KnfOpt]           let _2601: Int = Int(0)
// [KnfOpt]           let _2602: Int = Get perm1.2348[_2601]
// [KnfOpt]           let _2603: Unit = Put t.2585[_2600] = _2602
// [KnfOpt]           let rec move_perm1_forward.2604: Unit = (i.2605: Int) {
// [KnfOpt]             let _2606: Int = Int(0)
// [KnfOpt]             let _2607: Int = Get r.2370[_2606]
// [KnfOpt]             let _2608: Int = Int(1)
// [KnfOpt]             let _2609: Int = Sub(_2607, _2608)
// [KnfOpt]             if (i.2605 <= _2609) then {
// [KnfOpt]               let _2610: Int = Int(1)
// [KnfOpt]               let _2611: Int = Add(i.2605, _2610)
// [KnfOpt]               let _2612: Int = Get perm1.2348[_2611]
// [KnfOpt]               let _2613: Unit = Put perm1.2348[i.2605] = _2612
// [KnfOpt]               let _2614: Int = Int(1)
// [KnfOpt]               let _2615: Int = Add(i.2605, _2614)
// [KnfOpt]               let _2616: Unit = Apply(move_perm1_forward.2604, [_2615, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _2617: Int = Int(0)
// [KnfOpt]           let _2618: Unit = Apply(move_perm1_forward.2604, [_2617, ])
// [KnfOpt]           let _2619: Int = Int(0)
// [KnfOpt]           let _2620: Int = Get r.2370[_2619]
// [KnfOpt]           let _2621: Int = Int(0)
// [KnfOpt]           let _2622: Int = Get t.2585[_2621]
// [KnfOpt]           let _2623: Unit = Put perm1.2348[_2620] = _2622
// [KnfOpt]           let _2624: Int = Int(0)
// [KnfOpt]           let _2625: Int = Get r.2370[_2624]
// [KnfOpt]           let _2626: Int = Int(0)
// [KnfOpt]           let _2627: Int = Get r.2370[_2626]
// [KnfOpt]           let _2628: Int = Get count.2352[_2627]
// [KnfOpt]           let _2629: Int = Int(1)
// [KnfOpt]           let _2630: Int = Sub(_2628, _2629)
// [KnfOpt]           let _2631: Unit = Put count.2352[_2625] = _2630
// [KnfOpt]           let _2632: Int = Int(1)
// [KnfOpt]           let _2633: Int = Int(0)
// [KnfOpt]           let _2634: Int = Get r.2370[_2633]
// [KnfOpt]           let _2635: Int = Get count.2352[_2634]
// [KnfOpt]           if (_2632 <= _2635) then {
// [KnfOpt]             let _2637: Int = Int(0)
// [KnfOpt]             let _2638: Bool = Bool(false)
// [KnfOpt]             let _2636: Unit = Put go.2582[_2637] = _2638
// [KnfOpt]             let _2593: Unit = Unit
// [KnfOpt]             Jump(go_loop.2587, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _2639: Int = Int(0)
// [KnfOpt]             let _2640: Int = Int(0)
// [KnfOpt]             let _2641: Int = Get r.2370[_2640]
// [KnfOpt]             let _2642: Int = Int(1)
// [KnfOpt]             let _2643: Int = Add(_2641, _2642)
// [KnfOpt]             let _2636: Unit = Put r.2370[_2639] = _2643
// [KnfOpt]             let _2593: Unit = Unit
// [KnfOpt]             Jump(go_loop.2587, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.2587, [])
// [KnfOpt]   }
// [KnfOpt]   let join go_loop.3059: Unit = () {
// [KnfOpt]     let _3060: Int = Int(0)
// [KnfOpt]     let _3061: Bool = Get go.2582[_3060]
// [KnfOpt]     let _3062: Bool = Bool(true)
// [KnfOpt]     if (_3061 == _3062) then {
// [KnfOpt]       let _3063: Int = Int(0)
// [KnfOpt]       let _3064: Int = Get r.2370[_3063]
// [KnfOpt]       if (_3064 == _224) then {
// [KnfOpt]         let _3065: Int = Int(0)
// [KnfOpt]         let _3066: Bool = Bool(false)
// [KnfOpt]         let _3067: Unit = Put go.2582[_3065] = _3066
// [KnfOpt]         let _3068: Int = Int(0)
// [KnfOpt]         let _3069: Int = Int(0)
// [KnfOpt]         let _3070: Unit = Put r.2370[_3068] = _3069
// [KnfOpt]         let _3071: Unit = Unit
// [KnfOpt]         Jump(go_loop.3059, [])
// [KnfOpt]       } else {
// [KnfOpt]         let _3072: Int = Int(0)
// [KnfOpt]         let _3073: Int = Int(0)
// [KnfOpt]         let _3074: Int = Get perm1.2348[_3073]
// [KnfOpt]         let _3075: Unit = Put t.2585[_3072] = _3074
// [KnfOpt]         let rec move_perm1_forward.3076: Unit = (i.3077: Int) {
// [KnfOpt]           let _3078: Int = Int(0)
// [KnfOpt]           let _3079: Int = Get r.2370[_3078]
// [KnfOpt]           let _3080: Int = Int(1)
// [KnfOpt]           let _3081: Int = Sub(_3079, _3080)
// [KnfOpt]           if (i.3077 <= _3081) then {
// [KnfOpt]             let _3082: Int = Int(1)
// [KnfOpt]             let _3083: Int = Add(i.3077, _3082)
// [KnfOpt]             let _3084: Int = Get perm1.2348[_3083]
// [KnfOpt]             let _3085: Unit = Put perm1.2348[i.3077] = _3084
// [KnfOpt]             let _3086: Int = Int(1)
// [KnfOpt]             let _3087: Int = Add(i.3077, _3086)
// [KnfOpt]             let _3088: Unit = Apply(move_perm1_forward.3076, [_3087, ])
// [KnfOpt]             Unit
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         let _3089: Int = Int(0)
// [KnfOpt]         let _3090: Unit = Apply(move_perm1_forward.3076, [_3089, ])
// [KnfOpt]         let _3091: Int = Int(0)
// [KnfOpt]         let _3092: Int = Get r.2370[_3091]
// [KnfOpt]         let _3093: Int = Int(0)
// [KnfOpt]         let _3094: Int = Get t.2585[_3093]
// [KnfOpt]         let _3095: Unit = Put perm1.2348[_3092] = _3094
// [KnfOpt]         let _3096: Int = Int(0)
// [KnfOpt]         let _3097: Int = Get r.2370[_3096]
// [KnfOpt]         let _3098: Int = Int(0)
// [KnfOpt]         let _3099: Int = Get r.2370[_3098]
// [KnfOpt]         let _3100: Int = Get count.2352[_3099]
// [KnfOpt]         let _3101: Int = Int(1)
// [KnfOpt]         let _3102: Int = Sub(_3100, _3101)
// [KnfOpt]         let _3103: Unit = Put count.2352[_3097] = _3102
// [KnfOpt]         let _3104: Int = Int(1)
// [KnfOpt]         let _3105: Int = Int(0)
// [KnfOpt]         let _3106: Int = Get r.2370[_3105]
// [KnfOpt]         let _3107: Int = Get count.2352[_3106]
// [KnfOpt]         if (_3104 <= _3107) then {
// [KnfOpt]           let _3108: Int = Int(0)
// [KnfOpt]           let _3109: Bool = Bool(false)
// [KnfOpt]           let _3110: Unit = Put go.2582[_3108] = _3109
// [KnfOpt]           let _3111: Unit = Unit
// [KnfOpt]           Jump(go_loop.3059, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _3112: Int = Int(0)
// [KnfOpt]           let _3113: Int = Int(0)
// [KnfOpt]           let _3114: Int = Get r.2370[_3113]
// [KnfOpt]           let _3115: Int = Int(1)
// [KnfOpt]           let _3116: Int = Add(_3114, _3115)
// [KnfOpt]           let _3117: Unit = Put r.2370[_3112] = _3116
// [KnfOpt]           let _3118: Unit = Unit
// [KnfOpt]           Jump(go_loop.3059, [])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]     } else {
// [KnfOpt]       let _2644: Unit = Unit
// [KnfOpt]       let _2645: Int = Int(0)
// [KnfOpt]       let _2646: Int = Int(0)
// [KnfOpt]       let _2647: Int = Get nperm.2364[_2646]
// [KnfOpt]       let _2648: Int = Int(1)
// [KnfOpt]       let _2649: Int = Add(_2647, _2648)
// [KnfOpt]       let _2650: Unit = Put nperm.2364[_2645] = _2649
// [KnfOpt]       Jump(compute.2369, [r.2370, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(go_loop.3059, [])
// [KnfOpt] }
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2512 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2512 rejected
// [KnfOpt] Knf inline Some(go_loop) let _2552: Unit = Unit
// [KnfOpt] let _2553: Int = Int(0)
// [KnfOpt] let _2554: Int = Int(0)
// [KnfOpt] let _2555: Int = Get nperm.2364[_2554]
// [KnfOpt] let _2556: Int = Int(1)
// [KnfOpt] let _2557: Int = Add(_2555, _2556)
// [KnfOpt] let _2558: Unit = Put nperm.2364[_2553] = _2557
// [KnfOpt] Jump(compute.2369, [r.2370, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2604 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2604 rejected
// [KnfOpt] Knf inline Some(go_loop) let _2644: Unit = Unit
// [KnfOpt] let _2645: Int = Int(0)
// [KnfOpt] let _2646: Int = Int(0)
// [KnfOpt] let _2647: Int = Get nperm.2364[_2646]
// [KnfOpt] let _2648: Int = Int(1)
// [KnfOpt] let _2649: Int = Add(_2647, _2648)
// [KnfOpt] let _2650: Unit = Put nperm.2364[_2645] = _2649
// [KnfOpt] Jump(compute.2369, [r.2370, ])
// [KnfOpt] Knf inline Some(compute) let _2651: Unit = Unit
// [KnfOpt] let _2652: Int = Int(0)
// [KnfOpt] let _2653: Int = Get max_flips.2358[_2652]
// [KnfOpt] let _2654: Int = Int(0)
// [KnfOpt] let _2655: Int = Get check_sum.2361[_2654]
// [KnfOpt] let _225: Tuple([Int, Int]) = Tuple([_2653, _2655, ])
// [KnfOpt] let (max_flips.226: Var({val: Some(Int)}), check_sum.227: Var({val: Some(Int)})) = _225
// [KnfOpt] let _228: Unit = ExtApply(minimbt_print_int, [check_sum.227, ])
// [KnfOpt] ExtApply(minimbt_print_int, [max_flips.226, ])
// [KnfOpt] Knf inline Some(gen_perm1) let perm1.2348: Array(Int) = Unit
// [KnfOpt] let _2349: Int = Int(0)
// [KnfOpt] let perm.2350: Array(Int) = ExtApply(minimbt_create_array, [_224, _2349, ])
// [KnfOpt] let _2351: Int = Int(0)
// [KnfOpt] let count.2352: Array(Int) = ExtApply(minimbt_create_array, [_224, _2351, ])
// [KnfOpt] let _2353: Int = Int(1)
// [KnfOpt] let _2354: Int = Int(0)
// [KnfOpt] let flips.2355: Array(Int) = ExtApply(minimbt_create_array, [_2353, _2354, ])
// [KnfOpt] let _2356: Int = Int(1)
// [KnfOpt] let _2357: Int = Int(0)
// [KnfOpt] let max_flips.2358: Array(Int) = ExtApply(minimbt_create_array, [_2356, _2357, ])
// [KnfOpt] let _2359: Int = Int(1)
// [KnfOpt] let _2360: Int = Int(0)
// [KnfOpt] let check_sum.2361: Array(Int) = ExtApply(minimbt_create_array, [_2359, _2360, ])
// [KnfOpt] let _2362: Int = Int(1)
// [KnfOpt] let _2363: Int = Int(0)
// [KnfOpt] let nperm.2364: Array(Int) = ExtApply(minimbt_create_array, [_2362, _2363, ])
// [KnfOpt] let _2365: Int = Int(1)
// [KnfOpt] let r.2366: Array(Int) = ExtApply(minimbt_create_array, [_2365, _224, ])
// [KnfOpt] let rec compute.2367: Unit = (r.2368: Array(Int)) {
// [KnfOpt]   let join compute.2369: Unit = (r.2370: Array(Int)) {
// [KnfOpt]     let _2371: Int = Int(1)
// [KnfOpt]     let _2372: Int = Int(0)
// [KnfOpt]     let _2373: Int = Get r.2370[_2372]
// [KnfOpt]     if (_2371 <= _2373) then {
// [KnfOpt]       let rec copy_perm.2374: Unit = (i.2375: Int) {
// [KnfOpt]         let join copy_perm.2376: Unit = (i.2377: Int) {
// [KnfOpt]           let _2378: Int = Int(1)
// [KnfOpt]           let _2379: Int = Sub(_224, _2378)
// [KnfOpt]           if (i.2377 <= _2379) then {
// [KnfOpt]             let _2380: Int = Get perm1.2348[i.2377]
// [KnfOpt]             let _2381: Unit = Put perm.2350[i.2377] = _2380
// [KnfOpt]             let _2382: Int = Int(1)
// [KnfOpt]             let _2383: Int = Add(i.2377, _2382)
// [KnfOpt]             Jump(copy_perm.2376, [_2383, ])
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(copy_perm.2376, [i.2375, ])
// [KnfOpt]       }
// [KnfOpt]       let _2384: Int = Int(0)
// [KnfOpt]       let join copy_perm.2969: Unit = (i.2970: Int) {
// [KnfOpt]         let _2971: Int = Int(1)
// [KnfOpt]         let _2972: Int = Sub(_224, _2971)
// [KnfOpt]         if (i.2970 <= _2972) then {
// [KnfOpt]           let _2973: Int = Get perm1.2348[i.2970]
// [KnfOpt]           let _2974: Unit = Put perm.2350[i.2970] = _2973
// [KnfOpt]           let _2975: Int = Int(1)
// [KnfOpt]           let _2976: Int = Add(i.2970, _2975)
// [KnfOpt]           Jump(copy_perm.2969, [_2976, ])
// [KnfOpt]         } else {
// [KnfOpt]           let _2385: Unit = Unit
// [KnfOpt]           let rec init_count.2386: Unit = () {
// [KnfOpt]             let _2387: Int = Int(0)
// [KnfOpt]             let _2388: Int = Get r.2370[_2387]
// [KnfOpt]             let _2389: Int = Int(1)
// [KnfOpt]             if (_2388 == _2389) then {
// [KnfOpt]               let _2390: Unit = Unit
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               let _2391: Int = Int(0)
// [KnfOpt]               let _2392: Int = Get r.2370[_2391]
// [KnfOpt]               let _2393: Int = Int(1)
// [KnfOpt]               let _2394: Int = Sub(_2392, _2393)
// [KnfOpt]               let _2395: Int = Int(0)
// [KnfOpt]               let _2396: Int = Get r.2370[_2395]
// [KnfOpt]               let _2397: Unit = Put count.2352[_2394] = _2396
// [KnfOpt]               let _2398: Int = Int(0)
// [KnfOpt]               let _2399: Int = Int(0)
// [KnfOpt]               let _2400: Int = Get r.2370[_2399]
// [KnfOpt]               let _2401: Int = Int(1)
// [KnfOpt]               let _2402: Int = Sub(_2400, _2401)
// [KnfOpt]               let _2403: Unit = Put r.2370[_2398] = _2402
// [KnfOpt]               let _2390: Unit = Apply(init_count.2386, [])
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _2404: Unit = Apply(init_count.2386, [])
// [KnfOpt]           let _2405: Int = Int(0)
// [KnfOpt]           let _2406: Int = Int(0)
// [KnfOpt]           let _2407: Unit = Put flips.2355[_2405] = _2406
// [KnfOpt]           let _2408: Int = Int(1)
// [KnfOpt]           let _2409: Int = Int(0)
// [KnfOpt]           let _2410: Int = Get perm.2350[_2409]
// [KnfOpt]           let k.2411: Array(Int) = ExtApply(minimbt_create_array, [_2408, _2410, ])
// [KnfOpt]           let rec do_flip.2412: Unit = (k.2413: Array(Int)) {
// [KnfOpt]             let join do_flip.2414: Unit = (k.2415: Array(Int)) {
// [KnfOpt]               let _2416: Int = Int(0)
// [KnfOpt]               let _2417: Int = Get k.2415[_2416]
// [KnfOpt]               let _2418: Int = Int(0)
// [KnfOpt]               if (_2417 == _2418) then {
// [KnfOpt]                 Unit
// [KnfOpt]               } else {
// [KnfOpt]                 let _2419: Int = Int(1)
// [KnfOpt]                 let _2420: Int = Int(0)
// [KnfOpt]                 let t.2421: Array(Int) = ExtApply(minimbt_create_array, [_2419, _2420, ])
// [KnfOpt]                 let rec flip_loop.2422: Unit = (i.2423: Int) {
// [KnfOpt]                   let join flip_loop.2424: Unit = (i.2425: Int) {
// [KnfOpt]                     let _2426: Int = Int(0)
// [KnfOpt]                     let _2427: Int = Get k.2415[_2426]
// [KnfOpt]                     let _2428: Int = Int(2)
// [KnfOpt]                     let _2429: Int = Div(_2427, _2428)
// [KnfOpt]                     if (i.2425 <= _2429) then {
// [KnfOpt]                       let _2430: Int = Int(0)
// [KnfOpt]                       let _2431: Int = Get perm.2350[i.2425]
// [KnfOpt]                       let _2432: Unit = Put t.2421[_2430] = _2431
// [KnfOpt]                       let _2433: Int = Int(0)
// [KnfOpt]                       let _2434: Int = Get k.2415[_2433]
// [KnfOpt]                       let _2435: Int = Sub(_2434, i.2425)
// [KnfOpt]                       let _2436: Int = Get perm.2350[_2435]
// [KnfOpt]                       let _2437: Unit = Put perm.2350[i.2425] = _2436
// [KnfOpt]                       let _2438: Int = Int(0)
// [KnfOpt]                       let _2439: Int = Get k.2415[_2438]
// [KnfOpt]                       let _2440: Int = Sub(_2439, i.2425)
// [KnfOpt]                       let _2441: Int = Int(0)
// [KnfOpt]                       let _2442: Int = Get t.2421[_2441]
// [KnfOpt]                       let _2443: Unit = Put perm.2350[_2440] = _2442
// [KnfOpt]                       let _2444: Int = Int(1)
// [KnfOpt]                       let _2445: Int = Add(i.2425, _2444)
// [KnfOpt]                       Jump(flip_loop.2424, [_2445, ])
// [KnfOpt]                     } else {
// [KnfOpt]                       Unit
// [KnfOpt]                     }
// [KnfOpt]                   }
// [KnfOpt]                   Jump(flip_loop.2424, [i.2423, ])
// [KnfOpt]                 }
// [KnfOpt]                 let _2446: Int = Int(0)
// [KnfOpt]                 let join flip_loop.2977: Unit = (i.2978: Int) {
// [KnfOpt]                   let _2979: Int = Int(0)
// [KnfOpt]                   let _2980: Int = Get k.2415[_2979]
// [KnfOpt]                   let _2981: Int = Int(2)
// [KnfOpt]                   let _2982: Int = Div(_2980, _2981)
// [KnfOpt]                   if (i.2978 <= _2982) then {
// [KnfOpt]                     let _2983: Int = Int(0)
// [KnfOpt]                     let _2984: Int = Get perm.2350[i.2978]
// [KnfOpt]                     let _2985: Unit = Put t.2421[_2983] = _2984
// [KnfOpt]                     let _2986: Int = Int(0)
// [KnfOpt]                     let _2987: Int = Get k.2415[_2986]
// [KnfOpt]                     let _2988: Int = Sub(_2987, i.2978)
// [KnfOpt]                     let _2989: Int = Get perm.2350[_2988]
// [KnfOpt]                     let _2990: Unit = Put perm.2350[i.2978] = _2989
// [KnfOpt]                     let _2991: Int = Int(0)
// [KnfOpt]                     let _2992: Int = Get k.2415[_2991]
// [KnfOpt]                     let _2993: Int = Sub(_2992, i.2978)
// [KnfOpt]                     let _2994: Int = Int(0)
// [KnfOpt]                     let _2995: Int = Get t.2421[_2994]
// [KnfOpt]                     let _2996: Unit = Put perm.2350[_2993] = _2995
// [KnfOpt]                     let _2997: Int = Int(1)
// [KnfOpt]                     let _2998: Int = Add(i.2978, _2997)
// [KnfOpt]                     Jump(flip_loop.2977, [_2998, ])
// [KnfOpt]                   } else {
// [KnfOpt]                     let _2447: Unit = Unit
// [KnfOpt]                     let _2448: Int = Int(0)
// [KnfOpt]                     let _2449: Int = Int(0)
// [KnfOpt]                     let _2450: Int = Get perm.2350[_2449]
// [KnfOpt]                     let _2451: Unit = Put k.2415[_2448] = _2450
// [KnfOpt]                     let _2452: Int = Int(0)
// [KnfOpt]                     let _2453: Int = Int(0)
// [KnfOpt]                     let _2454: Int = Get flips.2355[_2453]
// [KnfOpt]                     let _2455: Int = Int(1)
// [KnfOpt]                     let _2456: Int = Add(_2454, _2455)
// [KnfOpt]                     let _2457: Unit = Put flips.2355[_2452] = _2456
// [KnfOpt]                     Jump(do_flip.2414, [k.2415, ])
// [KnfOpt]                   }
// [KnfOpt]                 }
// [KnfOpt]                 Jump(flip_loop.2977, [_2446, ])
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]             Jump(do_flip.2414, [k.2413, ])
// [KnfOpt]           }
// [KnfOpt]           let join do_flip.3119: Unit = (k.3120: Array(Int)) {
// [KnfOpt]             let _3121: Int = Int(0)
// [KnfOpt]             let _3122: Int = Get k.3120[_3121]
// [KnfOpt]             let _3123: Int = Int(0)
// [KnfOpt]             if (_3122 == _3123) then {
// [KnfOpt]               let _2458: Unit = Unit
// [KnfOpt]               let _2459: Int = Int(0)
// [KnfOpt]               let _2460: Int = Get max_flips.2358[_2459]
// [KnfOpt]               let _2461: Int = Int(0)
// [KnfOpt]               let _2462: Int = Get flips.2355[_2461]
// [KnfOpt]               if (_2460 <= _2462) then {
// [KnfOpt]                 let _2464: Int = Int(0)
// [KnfOpt]                 let _2465: Int = Int(0)
// [KnfOpt]                 let _2466: Int = Get flips.2355[_2465]
// [KnfOpt]                 let _2463: Unit = Put max_flips.2358[_2464] = _2466
// [KnfOpt]                 let _2467: Int = Int(0)
// [KnfOpt]                 let _2468: Int = Int(0)
// [KnfOpt]                 let _2469: Int = Get check_sum.2361[_2468]
// [KnfOpt]                 let _2470: Int = Int(0)
// [KnfOpt]                 let _2471: Int = Get flips.2355[_2470]
// [KnfOpt]                 let _2472: Int = Int(1)
// [KnfOpt]                 let _2473: Int = Int(0)
// [KnfOpt]                 let _2474: Int = Get nperm.2364[_2473]
// [KnfOpt]                 let _2475: Int = Int(0)
// [KnfOpt]                 let _2476: Int = Get nperm.2364[_2475]
// [KnfOpt]                 let _2477: Int = Int(2)
// [KnfOpt]                 let _2478: Int = Div(_2476, _2477)
// [KnfOpt]                 let _2479: Int = Int(2)
// [KnfOpt]                 let _2480: Int = Mul(_2478, _2479)
// [KnfOpt]                 let _2481: Int = Sub(_2474, _2480)
// [KnfOpt]                 let _2482: Int = Int(2)
// [KnfOpt]                 let _2483: Int = Mul(_2481, _2482)
// [KnfOpt]                 let _2484: Int = Sub(_2472, _2483)
// [KnfOpt]                 let _2485: Int = Mul(_2471, _2484)
// [KnfOpt]                 let _2486: Int = Add(_2469, _2485)
// [KnfOpt]                 let _2487: Unit = Put check_sum.2361[_2467] = _2486
// [KnfOpt]                 let _2488: Int = Int(1)
// [KnfOpt]                 let _2489: Bool = Bool(true)
// [KnfOpt]                 let go.2490: Array(Bool) = ExtApply(minimbt_create_array, [_2488, _2489, ])
// [KnfOpt]                 let _2491: Int = Int(1)
// [KnfOpt]                 let _2492: Int = Int(0)
// [KnfOpt]                 let t.2493: Array(Int) = ExtApply(minimbt_create_array, [_2491, _2492, ])
// [KnfOpt]                 let rec go_loop.2494: Unit = () {
// [KnfOpt]                   let join go_loop.2495: Unit = () {
// [KnfOpt]                     let _2496: Int = Int(0)
// [KnfOpt]                     let _2497: Bool = Get go.2490[_2496]
// [KnfOpt]                     let _2498: Bool = Bool(true)
// [KnfOpt]                     if (_2497 == _2498) then {
// [KnfOpt]                       let _2499: Int = Int(0)
// [KnfOpt]                       let _2500: Int = Get r.2370[_2499]
// [KnfOpt]                       if (_2500 == _224) then {
// [KnfOpt]                         let _2502: Int = Int(0)
// [KnfOpt]                         let _2503: Bool = Bool(false)
// [KnfOpt]                         let _2504: Unit = Put go.2490[_2502] = _2503
// [KnfOpt]                         let _2505: Int = Int(0)
// [KnfOpt]                         let _2506: Int = Int(0)
// [KnfOpt]                         let _2507: Unit = Put r.2370[_2505] = _2506
// [KnfOpt]                         let _2501: Unit = Unit
// [KnfOpt]                         Jump(go_loop.2495, [])
// [KnfOpt]                       } else {
// [KnfOpt]                         let _2508: Int = Int(0)
// [KnfOpt]                         let _2509: Int = Int(0)
// [KnfOpt]                         let _2510: Int = Get perm1.2348[_2509]
// [KnfOpt]                         let _2511: Unit = Put t.2493[_2508] = _2510
// [KnfOpt]                         let rec move_perm1_forward.2512: Unit = (i.2513: Int) {
// [KnfOpt]                           let _2514: Int = Int(0)
// [KnfOpt]                           let _2515: Int = Get r.2370[_2514]
// [KnfOpt]                           let _2516: Int = Int(1)
// [KnfOpt]                           let _2517: Int = Sub(_2515, _2516)
// [KnfOpt]                           if (i.2513 <= _2517) then {
// [KnfOpt]                             let _2518: Int = Int(1)
// [KnfOpt]                             let _2519: Int = Add(i.2513, _2518)
// [KnfOpt]                             let _2520: Int = Get perm1.2348[_2519]
// [KnfOpt]                             let _2521: Unit = Put perm1.2348[i.2513] = _2520
// [KnfOpt]                             let _2522: Int = Int(1)
// [KnfOpt]                             let _2523: Int = Add(i.2513, _2522)
// [KnfOpt]                             let _2524: Unit = Apply(move_perm1_forward.2512, [_2523, ])
// [KnfOpt]                             Unit
// [KnfOpt]                           } else {
// [KnfOpt]                             Unit
// [KnfOpt]                           }
// [KnfOpt]                         }
// [KnfOpt]                         let _2525: Int = Int(0)
// [KnfOpt]                         let _2526: Unit = Apply(move_perm1_forward.2512, [_2525, ])
// [KnfOpt]                         let _2527: Int = Int(0)
// [KnfOpt]                         let _2528: Int = Get r.2370[_2527]
// [KnfOpt]                         let _2529: Int = Int(0)
// [KnfOpt]                         let _2530: Int = Get t.2493[_2529]
// [KnfOpt]                         let _2531: Unit = Put perm1.2348[_2528] = _2530
// [KnfOpt]                         let _2532: Int = Int(0)
// [KnfOpt]                         let _2533: Int = Get r.2370[_2532]
// [KnfOpt]                         let _2534: Int = Int(0)
// [KnfOpt]                         let _2535: Int = Get r.2370[_2534]
// [KnfOpt]                         let _2536: Int = Get count.2352[_2535]
// [KnfOpt]                         let _2537: Int = Int(1)
// [KnfOpt]                         let _2538: Int = Sub(_2536, _2537)
// [KnfOpt]                         let _2539: Unit = Put count.2352[_2533] = _2538
// [KnfOpt]                         let _2540: Int = Int(1)
// [KnfOpt]                         let _2541: Int = Int(0)
// [KnfOpt]                         let _2542: Int = Get r.2370[_2541]
// [KnfOpt]                         let _2543: Int = Get count.2352[_2542]
// [KnfOpt]                         if (_2540 <= _2543) then {
// [KnfOpt]                           let _2545: Int = Int(0)
// [KnfOpt]                           let _2546: Bool = Bool(false)
// [KnfOpt]                           let _2544: Unit = Put go.2490[_2545] = _2546
// [KnfOpt]                           let _2501: Unit = Unit
// [KnfOpt]                           Jump(go_loop.2495, [])
// [KnfOpt]                         } else {
// [KnfOpt]                           let _2547: Int = Int(0)
// [KnfOpt]                           let _2548: Int = Int(0)
// [KnfOpt]                           let _2549: Int = Get r.2370[_2548]
// [KnfOpt]                           let _2550: Int = Int(1)
// [KnfOpt]                           let _2551: Int = Add(_2549, _2550)
// [KnfOpt]                           let _2544: Unit = Put r.2370[_2547] = _2551
// [KnfOpt]                           let _2501: Unit = Unit
// [KnfOpt]                           Jump(go_loop.2495, [])
// [KnfOpt]                         }
// [KnfOpt]                       }
// [KnfOpt]                     } else {
// [KnfOpt]                       Unit
// [KnfOpt]                     }
// [KnfOpt]                   }
// [KnfOpt]                   Jump(go_loop.2495, [])
// [KnfOpt]                 }
// [KnfOpt]                 let join go_loop.3124: Unit = () {
// [KnfOpt]                   let _3125: Int = Int(0)
// [KnfOpt]                   let _3126: Bool = Get go.2490[_3125]
// [KnfOpt]                   let _3127: Bool = Bool(true)
// [KnfOpt]                   if (_3126 == _3127) then {
// [KnfOpt]                     let _3128: Int = Int(0)
// [KnfOpt]                     let _3129: Int = Get r.2370[_3128]
// [KnfOpt]                     if (_3129 == _224) then {
// [KnfOpt]                       let _3130: Int = Int(0)
// [KnfOpt]                       let _3131: Bool = Bool(false)
// [KnfOpt]                       let _3132: Unit = Put go.2490[_3130] = _3131
// [KnfOpt]                       let _3133: Int = Int(0)
// [KnfOpt]                       let _3134: Int = Int(0)
// [KnfOpt]                       let _3135: Unit = Put r.2370[_3133] = _3134
// [KnfOpt]                       let _3136: Unit = Unit
// [KnfOpt]                       Jump(go_loop.3124, [])
// [KnfOpt]                     } else {
// [KnfOpt]                       let _3137: Int = Int(0)
// [KnfOpt]                       let _3138: Int = Int(0)
// [KnfOpt]                       let _3139: Int = Get perm1.2348[_3138]
// [KnfOpt]                       let _3140: Unit = Put t.2493[_3137] = _3139
// [KnfOpt]                       let rec move_perm1_forward.3141: Unit = (i.3142: Int) {
// [KnfOpt]                         let _3143: Int = Int(0)
// [KnfOpt]                         let _3144: Int = Get r.2370[_3143]
// [KnfOpt]                         let _3145: Int = Int(1)
// [KnfOpt]                         let _3146: Int = Sub(_3144, _3145)
// [KnfOpt]                         if (i.3142 <= _3146) then {
// [KnfOpt]                           let _3147: Int = Int(1)
// [KnfOpt]                           let _3148: Int = Add(i.3142, _3147)
// [KnfOpt]                           let _3149: Int = Get perm1.2348[_3148]
// [KnfOpt]                           let _3150: Unit = Put perm1.2348[i.3142] = _3149
// [KnfOpt]                           let _3151: Int = Int(1)
// [KnfOpt]                           let _3152: Int = Add(i.3142, _3151)
// [KnfOpt]                           let _3153: Unit = Apply(move_perm1_forward.3141, [_3152, ])
// [KnfOpt]                           Unit
// [KnfOpt]                         } else {
// [KnfOpt]                           Unit
// [KnfOpt]                         }
// [KnfOpt]                       }
// [KnfOpt]                       let _3154: Int = Int(0)
// [KnfOpt]                       let _3155: Unit = Apply(move_perm1_forward.3141, [_3154, ])
// [KnfOpt]                       let _3156: Int = Int(0)
// [KnfOpt]                       let _3157: Int = Get r.2370[_3156]
// [KnfOpt]                       let _3158: Int = Int(0)
// [KnfOpt]                       let _3159: Int = Get t.2493[_3158]
// [KnfOpt]                       let _3160: Unit = Put perm1.2348[_3157] = _3159
// [KnfOpt]                       let _3161: Int = Int(0)
// [KnfOpt]                       let _3162: Int = Get r.2370[_3161]
// [KnfOpt]                       let _3163: Int = Int(0)
// [KnfOpt]                       let _3164: Int = Get r.2370[_3163]
// [KnfOpt]                       let _3165: Int = Get count.2352[_3164]
// [KnfOpt]                       let _3166: Int = Int(1)
// [KnfOpt]                       let _3167: Int = Sub(_3165, _3166)
// [KnfOpt]                       let _3168: Unit = Put count.2352[_3162] = _3167
// [KnfOpt]                       let _3169: Int = Int(1)
// [KnfOpt]                       let _3170: Int = Int(0)
// [KnfOpt]                       let _3171: Int = Get r.2370[_3170]
// [KnfOpt]                       let _3172: Int = Get count.2352[_3171]
// [KnfOpt]                       if (_3169 <= _3172) then {
// [KnfOpt]                         let _3173: Int = Int(0)
// [KnfOpt]                         let _3174: Bool = Bool(false)
// [KnfOpt]                         let _3175: Unit = Put go.2490[_3173] = _3174
// [KnfOpt]                         let _3176: Unit = Unit
// [KnfOpt]                         Jump(go_loop.3124, [])
// [KnfOpt]                       } else {
// [KnfOpt]                         let _3177: Int = Int(0)
// [KnfOpt]                         let _3178: Int = Int(0)
// [KnfOpt]                         let _3179: Int = Get r.2370[_3178]
// [KnfOpt]                         let _3180: Int = Int(1)
// [KnfOpt]                         let _3181: Int = Add(_3179, _3180)
// [KnfOpt]                         let _3182: Unit = Put r.2370[_3177] = _3181
// [KnfOpt]                         let _3183: Unit = Unit
// [KnfOpt]                         Jump(go_loop.3124, [])
// [KnfOpt]                       }
// [KnfOpt]                     }
// [KnfOpt]                   } else {
// [KnfOpt]                     let _2552: Unit = Unit
// [KnfOpt]                     let _2553: Int = Int(0)
// [KnfOpt]                     let _2554: Int = Int(0)
// [KnfOpt]                     let _2555: Int = Get nperm.2364[_2554]
// [KnfOpt]                     let _2556: Int = Int(1)
// [KnfOpt]                     let _2557: Int = Add(_2555, _2556)
// [KnfOpt]                     let _2558: Unit = Put nperm.2364[_2553] = _2557
// [KnfOpt]                     Jump(compute.2369, [r.2370, ])
// [KnfOpt]                   }
// [KnfOpt]                 }
// [KnfOpt]                 Jump(go_loop.3124, [])
// [KnfOpt]               } else {
// [KnfOpt]                 let _2463: Unit = Unit
// [KnfOpt]                 let _2559: Int = Int(0)
// [KnfOpt]                 let _2560: Int = Int(0)
// [KnfOpt]                 let _2561: Int = Get check_sum.2361[_2560]
// [KnfOpt]                 let _2562: Int = Int(0)
// [KnfOpt]                 let _2563: Int = Get flips.2355[_2562]
// [KnfOpt]                 let _2564: Int = Int(1)
// [KnfOpt]                 let _2565: Int = Int(0)
// [KnfOpt]                 let _2566: Int = Get nperm.2364[_2565]
// [KnfOpt]                 let _2567: Int = Int(0)
// [KnfOpt]                 let _2568: Int = Get nperm.2364[_2567]
// [KnfOpt]                 let _2569: Int = Int(2)
// [KnfOpt]                 let _2570: Int = Div(_2568, _2569)
// [KnfOpt]                 let _2571: Int = Int(2)
// [KnfOpt]                 let _2572: Int = Mul(_2570, _2571)
// [KnfOpt]                 let _2573: Int = Sub(_2566, _2572)
// [KnfOpt]                 let _2574: Int = Int(2)
// [KnfOpt]                 let _2575: Int = Mul(_2573, _2574)
// [KnfOpt]                 let _2576: Int = Sub(_2564, _2575)
// [KnfOpt]                 let _2577: Int = Mul(_2563, _2576)
// [KnfOpt]                 let _2578: Int = Add(_2561, _2577)
// [KnfOpt]                 let _2579: Unit = Put check_sum.2361[_2559] = _2578
// [KnfOpt]                 let _2580: Int = Int(1)
// [KnfOpt]                 let _2581: Bool = Bool(true)
// [KnfOpt]                 let go.2582: Array(Bool) = ExtApply(minimbt_create_array, [_2580, _2581, ])
// [KnfOpt]                 let _2583: Int = Int(1)
// [KnfOpt]                 let _2584: Int = Int(0)
// [KnfOpt]                 let t.2585: Array(Int) = ExtApply(minimbt_create_array, [_2583, _2584, ])
// [KnfOpt]                 let rec go_loop.2586: Unit = () {
// [KnfOpt]                   let join go_loop.2587: Unit = () {
// [KnfOpt]                     let _2588: Int = Int(0)
// [KnfOpt]                     let _2589: Bool = Get go.2582[_2588]
// [KnfOpt]                     let _2590: Bool = Bool(true)
// [KnfOpt]                     if (_2589 == _2590) then {
// [KnfOpt]                       let _2591: Int = Int(0)
// [KnfOpt]                       let _2592: Int = Get r.2370[_2591]
// [KnfOpt]                       if (_2592 == _224) then {
// [KnfOpt]                         let _2594: Int = Int(0)
// [KnfOpt]                         let _2595: Bool = Bool(false)
// [KnfOpt]                         let _2596: Unit = Put go.2582[_2594] = _2595
// [KnfOpt]                         let _2597: Int = Int(0)
// [KnfOpt]                         let _2598: Int = Int(0)
// [KnfOpt]                         let _2599: Unit = Put r.2370[_2597] = _2598
// [KnfOpt]                         let _2593: Unit = Unit
// [KnfOpt]                         Jump(go_loop.2587, [])
// [KnfOpt]                       } else {
// [KnfOpt]                         let _2600: Int = Int(0)
// [KnfOpt]                         let _2601: Int = Int(0)
// [KnfOpt]                         let _2602: Int = Get perm1.2348[_2601]
// [KnfOpt]                         let _2603: Unit = Put t.2585[_2600] = _2602
// [KnfOpt]                         let rec move_perm1_forward.2604: Unit = (i.2605: Int) {
// [KnfOpt]                           let _2606: Int = Int(0)
// [KnfOpt]                           let _2607: Int = Get r.2370[_2606]
// [KnfOpt]                           let _2608: Int = Int(1)
// [KnfOpt]                           let _2609: Int = Sub(_2607, _2608)
// [KnfOpt]                           if (i.2605 <= _2609) then {
// [KnfOpt]                             let _2610: Int = Int(1)
// [KnfOpt]                             let _2611: Int = Add(i.2605, _2610)
// [KnfOpt]                             let _2612: Int = Get perm1.2348[_2611]
// [KnfOpt]                             let _2613: Unit = Put perm1.2348[i.2605] = _2612
// [KnfOpt]                             let _2614: Int = Int(1)
// [KnfOpt]                             let _2615: Int = Add(i.2605, _2614)
// [KnfOpt]                             let _2616: Unit = Apply(move_perm1_forward.2604, [_2615, ])
// [KnfOpt]                             Unit
// [KnfOpt]                           } else {
// [KnfOpt]                             Unit
// [KnfOpt]                           }
// [KnfOpt]                         }
// [KnfOpt]                         let _2617: Int = Int(0)
// [KnfOpt]                         let _2618: Unit = Apply(move_perm1_forward.2604, [_2617, ])
// [KnfOpt]                         let _2619: Int = Int(0)
// [KnfOpt]                         let _2620: Int = Get r.2370[_2619]
// [KnfOpt]                         let _2621: Int = Int(0)
// [KnfOpt]                         let _2622: Int = Get t.2585[_2621]
// [KnfOpt]                         let _2623: Unit = Put perm1.2348[_2620] = _2622
// [KnfOpt]                         let _2624: Int = Int(0)
// [KnfOpt]                         let _2625: Int = Get r.2370[_2624]
// [KnfOpt]                         let _2626: Int = Int(0)
// [KnfOpt]                         let _2627: Int = Get r.2370[_2626]
// [KnfOpt]                         let _2628: Int = Get count.2352[_2627]
// [KnfOpt]                         let _2629: Int = Int(1)
// [KnfOpt]                         let _2630: Int = Sub(_2628, _2629)
// [KnfOpt]                         let _2631: Unit = Put count.2352[_2625] = _2630
// [KnfOpt]                         let _2632: Int = Int(1)
// [KnfOpt]                         let _2633: Int = Int(0)
// [KnfOpt]                         let _2634: Int = Get r.2370[_2633]
// [KnfOpt]                         let _2635: Int = Get count.2352[_2634]
// [KnfOpt]                         if (_2632 <= _2635) then {
// [KnfOpt]                           let _2637: Int = Int(0)
// [KnfOpt]                           let _2638: Bool = Bool(false)
// [KnfOpt]                           let _2636: Unit = Put go.2582[_2637] = _2638
// [KnfOpt]                           let _2593: Unit = Unit
// [KnfOpt]                           Jump(go_loop.2587, [])
// [KnfOpt]                         } else {
// [KnfOpt]                           let _2639: Int = Int(0)
// [KnfOpt]                           let _2640: Int = Int(0)
// [KnfOpt]                           let _2641: Int = Get r.2370[_2640]
// [KnfOpt]                           let _2642: Int = Int(1)
// [KnfOpt]                           let _2643: Int = Add(_2641, _2642)
// [KnfOpt]                           let _2636: Unit = Put r.2370[_2639] = _2643
// [KnfOpt]                           let _2593: Unit = Unit
// [KnfOpt]                           Jump(go_loop.2587, [])
// [KnfOpt]                         }
// [KnfOpt]                       }
// [KnfOpt]                     } else {
// [KnfOpt]                       Unit
// [KnfOpt]                     }
// [KnfOpt]                   }
// [KnfOpt]                   Jump(go_loop.2587, [])
// [KnfOpt]                 }
// [KnfOpt]                 let join go_loop.3184: Unit = () {
// [KnfOpt]                   let _3185: Int = Int(0)
// [KnfOpt]                   let _3186: Bool = Get go.2582[_3185]
// [KnfOpt]                   let _3187: Bool = Bool(true)
// [KnfOpt]                   if (_3186 == _3187) then {
// [KnfOpt]                     let _3188: Int = Int(0)
// [KnfOpt]                     let _3189: Int = Get r.2370[_3188]
// [KnfOpt]                     if (_3189 == _224) then {
// [KnfOpt]                       let _3190: Int = Int(0)
// [KnfOpt]                       let _3191: Bool = Bool(false)
// [KnfOpt]                       let _3192: Unit = Put go.2582[_3190] = _3191
// [KnfOpt]                       let _3193: Int = Int(0)
// [KnfOpt]                       let _3194: Int = Int(0)
// [KnfOpt]                       let _3195: Unit = Put r.2370[_3193] = _3194
// [KnfOpt]                       let _3196: Unit = Unit
// [KnfOpt]                       Jump(go_loop.3184, [])
// [KnfOpt]                     } else {
// [KnfOpt]                       let _3197: Int = Int(0)
// [KnfOpt]                       let _3198: Int = Int(0)
// [KnfOpt]                       let _3199: Int = Get perm1.2348[_3198]
// [KnfOpt]                       let _3200: Unit = Put t.2585[_3197] = _3199
// [KnfOpt]                       let rec move_perm1_forward.3201: Unit = (i.3202: Int) {
// [KnfOpt]                         let _3203: Int = Int(0)
// [KnfOpt]                         let _3204: Int = Get r.2370[_3203]
// [KnfOpt]                         let _3205: Int = Int(1)
// [KnfOpt]                         let _3206: Int = Sub(_3204, _3205)
// [KnfOpt]                         if (i.3202 <= _3206) then {
// [KnfOpt]                           let _3207: Int = Int(1)
// [KnfOpt]                           let _3208: Int = Add(i.3202, _3207)
// [KnfOpt]                           let _3209: Int = Get perm1.2348[_3208]
// [KnfOpt]                           let _3210: Unit = Put perm1.2348[i.3202] = _3209
// [KnfOpt]                           let _3211: Int = Int(1)
// [KnfOpt]                           let _3212: Int = Add(i.3202, _3211)
// [KnfOpt]                           let _3213: Unit = Apply(move_perm1_forward.3201, [_3212, ])
// [KnfOpt]                           Unit
// [KnfOpt]                         } else {
// [KnfOpt]                           Unit
// [KnfOpt]                         }
// [KnfOpt]                       }
// [KnfOpt]                       let _3214: Int = Int(0)
// [KnfOpt]                       let _3215: Unit = Apply(move_perm1_forward.3201, [_3214, ])
// [KnfOpt]                       let _3216: Int = Int(0)
// [KnfOpt]                       let _3217: Int = Get r.2370[_3216]
// [KnfOpt]                       let _3218: Int = Int(0)
// [KnfOpt]                       let _3219: Int = Get t.2585[_3218]
// [KnfOpt]                       let _3220: Unit = Put perm1.2348[_3217] = _3219
// [KnfOpt]                       let _3221: Int = Int(0)
// [KnfOpt]                       let _3222: Int = Get r.2370[_3221]
// [KnfOpt]                       let _3223: Int = Int(0)
// [KnfOpt]                       let _3224: Int = Get r.2370[_3223]
// [KnfOpt]                       let _3225: Int = Get count.2352[_3224]
// [KnfOpt]                       let _3226: Int = Int(1)
// [KnfOpt]                       let _3227: Int = Sub(_3225, _3226)
// [KnfOpt]                       let _3228: Unit = Put count.2352[_3222] = _3227
// [KnfOpt]                       let _3229: Int = Int(1)
// [KnfOpt]                       let _3230: Int = Int(0)
// [KnfOpt]                       let _3231: Int = Get r.2370[_3230]
// [KnfOpt]                       let _3232: Int = Get count.2352[_3231]
// [KnfOpt]                       if (_3229 <= _3232) then {
// [KnfOpt]                         let _3233: Int = Int(0)
// [KnfOpt]                         let _3234: Bool = Bool(false)
// [KnfOpt]                         let _3235: Unit = Put go.2582[_3233] = _3234
// [KnfOpt]                         let _3236: Unit = Unit
// [KnfOpt]                         Jump(go_loop.3184, [])
// [KnfOpt]                       } else {
// [KnfOpt]                         let _3237: Int = Int(0)
// [KnfOpt]                         let _3238: Int = Int(0)
// [KnfOpt]                         let _3239: Int = Get r.2370[_3238]
// [KnfOpt]                         let _3240: Int = Int(1)
// [KnfOpt]                         let _3241: Int = Add(_3239, _3240)
// [KnfOpt]                         let _3242: Unit = Put r.2370[_3237] = _3241
// [KnfOpt]                         let _3243: Unit = Unit
// [KnfOpt]                         Jump(go_loop.3184, [])
// [KnfOpt]                       }
// [KnfOpt]                     }
// [KnfOpt]                   } else {
// [KnfOpt]                     let _2644: Unit = Unit
// [KnfOpt]                     let _2645: Int = Int(0)
// [KnfOpt]                     let _2646: Int = Int(0)
// [KnfOpt]                     let _2647: Int = Get nperm.2364[_2646]
// [KnfOpt]                     let _2648: Int = Int(1)
// [KnfOpt]                     let _2649: Int = Add(_2647, _2648)
// [KnfOpt]                     let _2650: Unit = Put nperm.2364[_2645] = _2649
// [KnfOpt]                     Jump(compute.2369, [r.2370, ])
// [KnfOpt]                   }
// [KnfOpt]                 }
// [KnfOpt]                 Jump(go_loop.3184, [])
// [KnfOpt]               }
// [KnfOpt]             } else {
// [KnfOpt]               let _3244: Int = Int(1)
// [KnfOpt]               let _3245: Int = Int(0)
// [KnfOpt]               let t.3246: Array(Int) = ExtApply(minimbt_create_array, [_3244, _3245, ])
// [KnfOpt]               let rec flip_loop.3247: Unit = (i.3248: Int) {
// [KnfOpt]                 let join flip_loop.3249: Unit = (i.3250: Int) {
// [KnfOpt]                   let _3251: Int = Int(0)
// [KnfOpt]                   let _3252: Int = Get k.3120[_3251]
// [KnfOpt]                   let _3253: Int = Int(2)
// [KnfOpt]                   let _3254: Int = Div(_3252, _3253)
// [KnfOpt]                   if (i.3250 <= _3254) then {
// [KnfOpt]                     let _3255: Int = Int(0)
// [KnfOpt]                     let _3256: Int = Get perm.2350[i.3250]
// [KnfOpt]                     let _3257: Unit = Put t.3246[_3255] = _3256
// [KnfOpt]                     let _3258: Int = Int(0)
// [KnfOpt]                     let _3259: Int = Get k.3120[_3258]
// [KnfOpt]                     let _3260: Int = Sub(_3259, i.3250)
// [KnfOpt]                     let _3261: Int = Get perm.2350[_3260]
// [KnfOpt]                     let _3262: Unit = Put perm.2350[i.3250] = _3261
// [KnfOpt]                     let _3263: Int = Int(0)
// [KnfOpt]                     let _3264: Int = Get k.3120[_3263]
// [KnfOpt]                     let _3265: Int = Sub(_3264, i.3250)
// [KnfOpt]                     let _3266: Int = Int(0)
// [KnfOpt]                     let _3267: Int = Get t.3246[_3266]
// [KnfOpt]                     let _3268: Unit = Put perm.2350[_3265] = _3267
// [KnfOpt]                     let _3269: Int = Int(1)
// [KnfOpt]                     let _3270: Int = Add(i.3250, _3269)
// [KnfOpt]                     Jump(flip_loop.3249, [_3270, ])
// [KnfOpt]                   } else {
// [KnfOpt]                     Unit
// [KnfOpt]                   }
// [KnfOpt]                 }
// [KnfOpt]                 Jump(flip_loop.3249, [i.3248, ])
// [KnfOpt]               }
// [KnfOpt]               let _3271: Int = Int(0)
// [KnfOpt]               let _3272: Unit = Apply(flip_loop.3247, [_3271, ])
// [KnfOpt]               let _3273: Int = Int(0)
// [KnfOpt]               let _3274: Int = Int(0)
// [KnfOpt]               let _3275: Int = Get perm.2350[_3274]
// [KnfOpt]               let _3276: Unit = Put k.3120[_3273] = _3275
// [KnfOpt]               let _3277: Int = Int(0)
// [KnfOpt]               let _3278: Int = Int(0)
// [KnfOpt]               let _3279: Int = Get flips.2355[_3278]
// [KnfOpt]               let _3280: Int = Int(1)
// [KnfOpt]               let _3281: Int = Add(_3279, _3280)
// [KnfOpt]               let _3282: Unit = Put flips.2355[_3277] = _3281
// [KnfOpt]               Jump(do_flip.3119, [k.3120, ])
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           Jump(do_flip.3119, [k.2411, ])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(copy_perm.2969, [_2384, ])
// [KnfOpt]     } else {
// [KnfOpt]       Unit
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(compute.2369, [r.2368, ])
// [KnfOpt] }
// [KnfOpt] let join compute.3283: Unit = (r.3284: Array(Int)) {
// [KnfOpt]   let _3285: Int = Int(1)
// [KnfOpt]   let _3286: Int = Int(0)
// [KnfOpt]   let _3287: Int = Get r.3284[_3286]
// [KnfOpt]   if (_3285 <= _3287) then {
// [KnfOpt]     let rec copy_perm.3288: Unit = (i.3289: Int) {
// [KnfOpt]       let join copy_perm.3290: Unit = (i.3291: Int) {
// [KnfOpt]         let _3292: Int = Int(1)
// [KnfOpt]         let _3293: Int = Sub(_224, _3292)
// [KnfOpt]         if (i.3291 <= _3293) then {
// [KnfOpt]           let _3294: Int = Get perm1.2348[i.3291]
// [KnfOpt]           let _3295: Unit = Put perm.2350[i.3291] = _3294
// [KnfOpt]           let _3296: Int = Int(1)
// [KnfOpt]           let _3297: Int = Add(i.3291, _3296)
// [KnfOpt]           Jump(copy_perm.3290, [_3297, ])
// [KnfOpt]         } else {
// [KnfOpt]           Unit
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(copy_perm.3290, [i.3289, ])
// [KnfOpt]     }
// [KnfOpt]     let _3298: Int = Int(0)
// [KnfOpt]     let _3299: Unit = Apply(copy_perm.3288, [_3298, ])
// [KnfOpt]     let rec init_count.3300: Unit = () {
// [KnfOpt]       let _3301: Int = Int(0)
// [KnfOpt]       let _3302: Int = Get r.3284[_3301]
// [KnfOpt]       let _3303: Int = Int(1)
// [KnfOpt]       if (_3302 == _3303) then {
// [KnfOpt]         let _3304: Unit = Unit
// [KnfOpt]         Unit
// [KnfOpt]       } else {
// [KnfOpt]         let _3305: Int = Int(0)
// [KnfOpt]         let _3306: Int = Get r.3284[_3305]
// [KnfOpt]         let _3307: Int = Int(1)
// [KnfOpt]         let _3308: Int = Sub(_3306, _3307)
// [KnfOpt]         let _3309: Int = Int(0)
// [KnfOpt]         let _3310: Int = Get r.3284[_3309]
// [KnfOpt]         let _3311: Unit = Put count.2352[_3308] = _3310
// [KnfOpt]         let _3312: Int = Int(0)
// [KnfOpt]         let _3313: Int = Int(0)
// [KnfOpt]         let _3314: Int = Get r.3284[_3313]
// [KnfOpt]         let _3315: Int = Int(1)
// [KnfOpt]         let _3316: Int = Sub(_3314, _3315)
// [KnfOpt]         let _3317: Unit = Put r.3284[_3312] = _3316
// [KnfOpt]         let _3318: Unit = Apply(init_count.3300, [])
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     let _3319: Unit = Apply(init_count.3300, [])
// [KnfOpt]     let _3320: Int = Int(0)
// [KnfOpt]     let _3321: Int = Int(0)
// [KnfOpt]     let _3322: Unit = Put flips.2355[_3320] = _3321
// [KnfOpt]     let _3323: Int = Int(1)
// [KnfOpt]     let _3324: Int = Int(0)
// [KnfOpt]     let _3325: Int = Get perm.2350[_3324]
// [KnfOpt]     let k.3326: Array(Int) = ExtApply(minimbt_create_array, [_3323, _3325, ])
// [KnfOpt]     let rec do_flip.3327: Unit = (k.3328: Array(Int)) {
// [KnfOpt]       let join do_flip.3329: Unit = (k.3330: Array(Int)) {
// [KnfOpt]         let _3331: Int = Int(0)
// [KnfOpt]         let _3332: Int = Get k.3330[_3331]
// [KnfOpt]         let _3333: Int = Int(0)
// [KnfOpt]         if (_3332 == _3333) then {
// [KnfOpt]           Unit
// [KnfOpt]         } else {
// [KnfOpt]           let _3334: Int = Int(1)
// [KnfOpt]           let _3335: Int = Int(0)
// [KnfOpt]           let t.3336: Array(Int) = ExtApply(minimbt_create_array, [_3334, _3335, ])
// [KnfOpt]           let rec flip_loop.3337: Unit = (i.3338: Int) {
// [KnfOpt]             let join flip_loop.3339: Unit = (i.3340: Int) {
// [KnfOpt]               let _3341: Int = Int(0)
// [KnfOpt]               let _3342: Int = Get k.3330[_3341]
// [KnfOpt]               let _3343: Int = Int(2)
// [KnfOpt]               let _3344: Int = Div(_3342, _3343)
// [KnfOpt]               if (i.3340 <= _3344) then {
// [KnfOpt]                 let _3345: Int = Int(0)
// [KnfOpt]                 let _3346: Int = Get perm.2350[i.3340]
// [KnfOpt]                 let _3347: Unit = Put t.3336[_3345] = _3346
// [KnfOpt]                 let _3348: Int = Int(0)
// [KnfOpt]                 let _3349: Int = Get k.3330[_3348]
// [KnfOpt]                 let _3350: Int = Sub(_3349, i.3340)
// [KnfOpt]                 let _3351: Int = Get perm.2350[_3350]
// [KnfOpt]                 let _3352: Unit = Put perm.2350[i.3340] = _3351
// [KnfOpt]                 let _3353: Int = Int(0)
// [KnfOpt]                 let _3354: Int = Get k.3330[_3353]
// [KnfOpt]                 let _3355: Int = Sub(_3354, i.3340)
// [KnfOpt]                 let _3356: Int = Int(0)
// [KnfOpt]                 let _3357: Int = Get t.3336[_3356]
// [KnfOpt]                 let _3358: Unit = Put perm.2350[_3355] = _3357
// [KnfOpt]                 let _3359: Int = Int(1)
// [KnfOpt]                 let _3360: Int = Add(i.3340, _3359)
// [KnfOpt]                 Jump(flip_loop.3339, [_3360, ])
// [KnfOpt]               } else {
// [KnfOpt]                 Unit
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]             Jump(flip_loop.3339, [i.3338, ])
// [KnfOpt]           }
// [KnfOpt]           let _3361: Int = Int(0)
// [KnfOpt]           let _3362: Unit = Apply(flip_loop.3337, [_3361, ])
// [KnfOpt]           let _3363: Int = Int(0)
// [KnfOpt]           let _3364: Int = Int(0)
// [KnfOpt]           let _3365: Int = Get perm.2350[_3364]
// [KnfOpt]           let _3366: Unit = Put k.3330[_3363] = _3365
// [KnfOpt]           let _3367: Int = Int(0)
// [KnfOpt]           let _3368: Int = Int(0)
// [KnfOpt]           let _3369: Int = Get flips.2355[_3368]
// [KnfOpt]           let _3370: Int = Int(1)
// [KnfOpt]           let _3371: Int = Add(_3369, _3370)
// [KnfOpt]           let _3372: Unit = Put flips.2355[_3367] = _3371
// [KnfOpt]           Jump(do_flip.3329, [k.3330, ])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(do_flip.3329, [k.3328, ])
// [KnfOpt]     }
// [KnfOpt]     let _3373: Unit = Apply(do_flip.3327, [k.3326, ])
// [KnfOpt]     let _3374: Int = Int(0)
// [KnfOpt]     let _3375: Int = Get max_flips.2358[_3374]
// [KnfOpt]     let _3376: Int = Int(0)
// [KnfOpt]     let _3377: Int = Get flips.2355[_3376]
// [KnfOpt]     if (_3375 <= _3377) then {
// [KnfOpt]       let _3378: Int = Int(0)
// [KnfOpt]       let _3379: Int = Int(0)
// [KnfOpt]       let _3380: Int = Get flips.2355[_3379]
// [KnfOpt]       let _3381: Unit = Put max_flips.2358[_3378] = _3380
// [KnfOpt]       let _3382: Int = Int(0)
// [KnfOpt]       let _3383: Int = Int(0)
// [KnfOpt]       let _3384: Int = Get check_sum.2361[_3383]
// [KnfOpt]       let _3385: Int = Int(0)
// [KnfOpt]       let _3386: Int = Get flips.2355[_3385]
// [KnfOpt]       let _3387: Int = Int(1)
// [KnfOpt]       let _3388: Int = Int(0)
// [KnfOpt]       let _3389: Int = Get nperm.2364[_3388]
// [KnfOpt]       let _3390: Int = Int(0)
// [KnfOpt]       let _3391: Int = Get nperm.2364[_3390]
// [KnfOpt]       let _3392: Int = Int(2)
// [KnfOpt]       let _3393: Int = Div(_3391, _3392)
// [KnfOpt]       let _3394: Int = Int(2)
// [KnfOpt]       let _3395: Int = Mul(_3393, _3394)
// [KnfOpt]       let _3396: Int = Sub(_3389, _3395)
// [KnfOpt]       let _3397: Int = Int(2)
// [KnfOpt]       let _3398: Int = Mul(_3396, _3397)
// [KnfOpt]       let _3399: Int = Sub(_3387, _3398)
// [KnfOpt]       let _3400: Int = Mul(_3386, _3399)
// [KnfOpt]       let _3401: Int = Add(_3384, _3400)
// [KnfOpt]       let _3402: Unit = Put check_sum.2361[_3382] = _3401
// [KnfOpt]       let _3403: Int = Int(1)
// [KnfOpt]       let _3404: Bool = Bool(true)
// [KnfOpt]       let go.3405: Array(Bool) = ExtApply(minimbt_create_array, [_3403, _3404, ])
// [KnfOpt]       let _3406: Int = Int(1)
// [KnfOpt]       let _3407: Int = Int(0)
// [KnfOpt]       let t.3408: Array(Int) = ExtApply(minimbt_create_array, [_3406, _3407, ])
// [KnfOpt]       let rec go_loop.3409: Unit = () {
// [KnfOpt]         let join go_loop.3410: Unit = () {
// [KnfOpt]           let _3411: Int = Int(0)
// [KnfOpt]           let _3412: Bool = Get go.3405[_3411]
// [KnfOpt]           let _3413: Bool = Bool(true)
// [KnfOpt]           if (_3412 == _3413) then {
// [KnfOpt]             let _3414: Int = Int(0)
// [KnfOpt]             let _3415: Int = Get r.3284[_3414]
// [KnfOpt]             if (_3415 == _224) then {
// [KnfOpt]               let _3416: Int = Int(0)
// [KnfOpt]               let _3417: Bool = Bool(false)
// [KnfOpt]               let _3418: Unit = Put go.3405[_3416] = _3417
// [KnfOpt]               let _3419: Int = Int(0)
// [KnfOpt]               let _3420: Int = Int(0)
// [KnfOpt]               let _3421: Unit = Put r.3284[_3419] = _3420
// [KnfOpt]               let _3422: Unit = Unit
// [KnfOpt]               Jump(go_loop.3410, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _3423: Int = Int(0)
// [KnfOpt]               let _3424: Int = Int(0)
// [KnfOpt]               let _3425: Int = Get perm1.2348[_3424]
// [KnfOpt]               let _3426: Unit = Put t.3408[_3423] = _3425
// [KnfOpt]               let rec move_perm1_forward.3427: Unit = (i.3428: Int) {
// [KnfOpt]                 let _3429: Int = Int(0)
// [KnfOpt]                 let _3430: Int = Get r.3284[_3429]
// [KnfOpt]                 let _3431: Int = Int(1)
// [KnfOpt]                 let _3432: Int = Sub(_3430, _3431)
// [KnfOpt]                 if (i.3428 <= _3432) then {
// [KnfOpt]                   let _3433: Int = Int(1)
// [KnfOpt]                   let _3434: Int = Add(i.3428, _3433)
// [KnfOpt]                   let _3435: Int = Get perm1.2348[_3434]
// [KnfOpt]                   let _3436: Unit = Put perm1.2348[i.3428] = _3435
// [KnfOpt]                   let _3437: Int = Int(1)
// [KnfOpt]                   let _3438: Int = Add(i.3428, _3437)
// [KnfOpt]                   let _3439: Unit = Apply(move_perm1_forward.3427, [_3438, ])
// [KnfOpt]                   Unit
// [KnfOpt]                 } else {
// [KnfOpt]                   Unit
// [KnfOpt]                 }
// [KnfOpt]               }
// [KnfOpt]               let _3440: Int = Int(0)
// [KnfOpt]               let _3441: Unit = Apply(move_perm1_forward.3427, [_3440, ])
// [KnfOpt]               let _3442: Int = Int(0)
// [KnfOpt]               let _3443: Int = Get r.3284[_3442]
// [KnfOpt]               let _3444: Int = Int(0)
// [KnfOpt]               let _3445: Int = Get t.3408[_3444]
// [KnfOpt]               let _3446: Unit = Put perm1.2348[_3443] = _3445
// [KnfOpt]               let _3447: Int = Int(0)
// [KnfOpt]               let _3448: Int = Get r.3284[_3447]
// [KnfOpt]               let _3449: Int = Int(0)
// [KnfOpt]               let _3450: Int = Get r.3284[_3449]
// [KnfOpt]               let _3451: Int = Get count.2352[_3450]
// [KnfOpt]               let _3452: Int = Int(1)
// [KnfOpt]               let _3453: Int = Sub(_3451, _3452)
// [KnfOpt]               let _3454: Unit = Put count.2352[_3448] = _3453
// [KnfOpt]               let _3455: Int = Int(1)
// [KnfOpt]               let _3456: Int = Int(0)
// [KnfOpt]               let _3457: Int = Get r.3284[_3456]
// [KnfOpt]               let _3458: Int = Get count.2352[_3457]
// [KnfOpt]               if (_3455 <= _3458) then {
// [KnfOpt]                 let _3459: Int = Int(0)
// [KnfOpt]                 let _3460: Bool = Bool(false)
// [KnfOpt]                 let _3461: Unit = Put go.3405[_3459] = _3460
// [KnfOpt]                 let _3462: Unit = Unit
// [KnfOpt]                 Jump(go_loop.3410, [])
// [KnfOpt]               } else {
// [KnfOpt]                 let _3463: Int = Int(0)
// [KnfOpt]                 let _3464: Int = Int(0)
// [KnfOpt]                 let _3465: Int = Get r.3284[_3464]
// [KnfOpt]                 let _3466: Int = Int(1)
// [KnfOpt]                 let _3467: Int = Add(_3465, _3466)
// [KnfOpt]                 let _3468: Unit = Put r.3284[_3463] = _3467
// [KnfOpt]                 let _3469: Unit = Unit
// [KnfOpt]                 Jump(go_loop.3410, [])
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(go_loop.3410, [])
// [KnfOpt]       }
// [KnfOpt]       let _3470: Unit = Apply(go_loop.3409, [])
// [KnfOpt]       let _3471: Int = Int(0)
// [KnfOpt]       let _3472: Int = Int(0)
// [KnfOpt]       let _3473: Int = Get nperm.2364[_3472]
// [KnfOpt]       let _3474: Int = Int(1)
// [KnfOpt]       let _3475: Int = Add(_3473, _3474)
// [KnfOpt]       let _3476: Unit = Put nperm.2364[_3471] = _3475
// [KnfOpt]       Jump(compute.3283, [r.3284, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _3477: Unit = Unit
// [KnfOpt]       let _3478: Int = Int(0)
// [KnfOpt]       let _3479: Int = Int(0)
// [KnfOpt]       let _3480: Int = Get check_sum.2361[_3479]
// [KnfOpt]       let _3481: Int = Int(0)
// [KnfOpt]       let _3482: Int = Get flips.2355[_3481]
// [KnfOpt]       let _3483: Int = Int(1)
// [KnfOpt]       let _3484: Int = Int(0)
// [KnfOpt]       let _3485: Int = Get nperm.2364[_3484]
// [KnfOpt]       let _3486: Int = Int(0)
// [KnfOpt]       let _3487: Int = Get nperm.2364[_3486]
// [KnfOpt]       let _3488: Int = Int(2)
// [KnfOpt]       let _3489: Int = Div(_3487, _3488)
// [KnfOpt]       let _3490: Int = Int(2)
// [KnfOpt]       let _3491: Int = Mul(_3489, _3490)
// [KnfOpt]       let _3492: Int = Sub(_3485, _3491)
// [KnfOpt]       let _3493: Int = Int(2)
// [KnfOpt]       let _3494: Int = Mul(_3492, _3493)
// [KnfOpt]       let _3495: Int = Sub(_3483, _3494)
// [KnfOpt]       let _3496: Int = Mul(_3482, _3495)
// [KnfOpt]       let _3497: Int = Add(_3480, _3496)
// [KnfOpt]       let _3498: Unit = Put check_sum.2361[_3478] = _3497
// [KnfOpt]       let _3499: Int = Int(1)
// [KnfOpt]       let _3500: Bool = Bool(true)
// [KnfOpt]       let go.3501: Array(Bool) = ExtApply(minimbt_create_array, [_3499, _3500, ])
// [KnfOpt]       let _3502: Int = Int(1)
// [KnfOpt]       let _3503: Int = Int(0)
// [KnfOpt]       let t.3504: Array(Int) = ExtApply(minimbt_create_array, [_3502, _3503, ])
// [KnfOpt]       let rec go_loop.3505: Unit = () {
// [KnfOpt]         let join go_loop.3506: Unit = () {
// [KnfOpt]           let _3507: Int = Int(0)
// [KnfOpt]           let _3508: Bool = Get go.3501[_3507]
// [KnfOpt]           let _3509: Bool = Bool(true)
// [KnfOpt]           if (_3508 == _3509) then {
// [KnfOpt]             let _3510: Int = Int(0)
// [KnfOpt]             let _3511: Int = Get r.3284[_3510]
// [KnfOpt]             if (_3511 == _224) then {
// [KnfOpt]               let _3512: Int = Int(0)
// [KnfOpt]               let _3513: Bool = Bool(false)
// [KnfOpt]               let _3514: Unit = Put go.3501[_3512] = _3513
// [KnfOpt]               let _3515: Int = Int(0)
// [KnfOpt]               let _3516: Int = Int(0)
// [KnfOpt]               let _3517: Unit = Put r.3284[_3515] = _3516
// [KnfOpt]               let _3518: Unit = Unit
// [KnfOpt]               Jump(go_loop.3506, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _3519: Int = Int(0)
// [KnfOpt]               let _3520: Int = Int(0)
// [KnfOpt]               let _3521: Int = Get perm1.2348[_3520]
// [KnfOpt]               let _3522: Unit = Put t.3504[_3519] = _3521
// [KnfOpt]               let rec move_perm1_forward.3523: Unit = (i.3524: Int) {
// [KnfOpt]                 let _3525: Int = Int(0)
// [KnfOpt]                 let _3526: Int = Get r.3284[_3525]
// [KnfOpt]                 let _3527: Int = Int(1)
// [KnfOpt]                 let _3528: Int = Sub(_3526, _3527)
// [KnfOpt]                 if (i.3524 <= _3528) then {
// [KnfOpt]                   let _3529: Int = Int(1)
// [KnfOpt]                   let _3530: Int = Add(i.3524, _3529)
// [KnfOpt]                   let _3531: Int = Get perm1.2348[_3530]
// [KnfOpt]                   let _3532: Unit = Put perm1.2348[i.3524] = _3531
// [KnfOpt]                   let _3533: Int = Int(1)
// [KnfOpt]                   let _3534: Int = Add(i.3524, _3533)
// [KnfOpt]                   let _3535: Unit = Apply(move_perm1_forward.3523, [_3534, ])
// [KnfOpt]                   Unit
// [KnfOpt]                 } else {
// [KnfOpt]                   Unit
// [KnfOpt]                 }
// [KnfOpt]               }
// [KnfOpt]               let _3536: Int = Int(0)
// [KnfOpt]               let _3537: Unit = Apply(move_perm1_forward.3523, [_3536, ])
// [KnfOpt]               let _3538: Int = Int(0)
// [KnfOpt]               let _3539: Int = Get r.3284[_3538]
// [KnfOpt]               let _3540: Int = Int(0)
// [KnfOpt]               let _3541: Int = Get t.3504[_3540]
// [KnfOpt]               let _3542: Unit = Put perm1.2348[_3539] = _3541
// [KnfOpt]               let _3543: Int = Int(0)
// [KnfOpt]               let _3544: Int = Get r.3284[_3543]
// [KnfOpt]               let _3545: Int = Int(0)
// [KnfOpt]               let _3546: Int = Get r.3284[_3545]
// [KnfOpt]               let _3547: Int = Get count.2352[_3546]
// [KnfOpt]               let _3548: Int = Int(1)
// [KnfOpt]               let _3549: Int = Sub(_3547, _3548)
// [KnfOpt]               let _3550: Unit = Put count.2352[_3544] = _3549
// [KnfOpt]               let _3551: Int = Int(1)
// [KnfOpt]               let _3552: Int = Int(0)
// [KnfOpt]               let _3553: Int = Get r.3284[_3552]
// [KnfOpt]               let _3554: Int = Get count.2352[_3553]
// [KnfOpt]               if (_3551 <= _3554) then {
// [KnfOpt]                 let _3555: Int = Int(0)
// [KnfOpt]                 let _3556: Bool = Bool(false)
// [KnfOpt]                 let _3557: Unit = Put go.3501[_3555] = _3556
// [KnfOpt]                 let _3558: Unit = Unit
// [KnfOpt]                 Jump(go_loop.3506, [])
// [KnfOpt]               } else {
// [KnfOpt]                 let _3559: Int = Int(0)
// [KnfOpt]                 let _3560: Int = Int(0)
// [KnfOpt]                 let _3561: Int = Get r.3284[_3560]
// [KnfOpt]                 let _3562: Int = Int(1)
// [KnfOpt]                 let _3563: Int = Add(_3561, _3562)
// [KnfOpt]                 let _3564: Unit = Put r.3284[_3559] = _3563
// [KnfOpt]                 let _3565: Unit = Unit
// [KnfOpt]                 Jump(go_loop.3506, [])
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(go_loop.3506, [])
// [KnfOpt]       }
// [KnfOpt]       let _3566: Unit = Apply(go_loop.3505, [])
// [KnfOpt]       let _3567: Int = Int(0)
// [KnfOpt]       let _3568: Int = Int(0)
// [KnfOpt]       let _3569: Int = Get nperm.2364[_3568]
// [KnfOpt]       let _3570: Int = Int(1)
// [KnfOpt]       let _3571: Int = Add(_3569, _3570)
// [KnfOpt]       let _3572: Unit = Put nperm.2364[_3567] = _3571
// [KnfOpt]       Jump(compute.3283, [r.3284, ])
// [KnfOpt]     }
// [KnfOpt]   } else {
// [KnfOpt]     let _2651: Unit = Unit
// [KnfOpt]     let _2652: Int = Int(0)
// [KnfOpt]     let _2653: Int = Get max_flips.2358[_2652]
// [KnfOpt]     let _2654: Int = Int(0)
// [KnfOpt]     let _2655: Int = Get check_sum.2361[_2654]
// [KnfOpt]     let _225: Tuple([Int, Int]) = Tuple([_2653, _2655, ])
// [KnfOpt]     let (max_flips.226: Var({val: Some(Int)}), check_sum.227: Var({val: Some(Int)})) = _225
// [KnfOpt]     let _228: Unit = ExtApply(minimbt_print_int, [check_sum.227, ])
// [KnfOpt]     ExtApply(minimbt_print_int, [max_flips.226, ])
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Jump(compute.3283, [r.2366, ])
// [KnfOpt] Inline threshold 2 39
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_count.2386 rejected
// [KnfOpt] Inline threshold 2 39
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_count.2386 rejected
// [KnfOpt] Knf inline Some(flip_loop) let _2447: Unit = Unit
// [KnfOpt] let _2448: Int = Int(0)
// [KnfOpt] let _2449: Int = Int(0)
// [KnfOpt] let _2450: Int = Get perm.2350[_2449]
// [KnfOpt] let _2451: Unit = Put k.2415[_2448] = _2450
// [KnfOpt] let _2452: Int = Int(0)
// [KnfOpt] let _2453: Int = Int(0)
// [KnfOpt] let _2454: Int = Get flips.2355[_2453]
// [KnfOpt] let _2455: Int = Int(1)
// [KnfOpt] let _2456: Int = Add(_2454, _2455)
// [KnfOpt] let _2457: Unit = Put flips.2355[_2452] = _2456
// [KnfOpt] Jump(do_flip.2414, [k.2415, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2512 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2512 rejected
// [KnfOpt] Knf inline Some(go_loop) let _2552: Unit = Unit
// [KnfOpt] let _2553: Int = Int(0)
// [KnfOpt] let _2554: Int = Int(0)
// [KnfOpt] let _2555: Int = Get nperm.2364[_2554]
// [KnfOpt] let _2556: Int = Int(1)
// [KnfOpt] let _2557: Int = Add(_2555, _2556)
// [KnfOpt] let _2558: Unit = Put nperm.2364[_2553] = _2557
// [KnfOpt] Jump(compute.2369, [r.2370, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2604 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2604 rejected
// [KnfOpt] Knf inline Some(go_loop) let _2644: Unit = Unit
// [KnfOpt] let _2645: Int = Int(0)
// [KnfOpt] let _2646: Int = Int(0)
// [KnfOpt] let _2647: Int = Get nperm.2364[_2646]
// [KnfOpt] let _2648: Int = Int(1)
// [KnfOpt] let _2649: Int = Add(_2647, _2648)
// [KnfOpt] let _2650: Unit = Put nperm.2364[_2645] = _2649
// [KnfOpt] Jump(compute.2369, [r.2370, ])
// [KnfOpt] Knf inline Some(do_flip) let _2458: Unit = Unit
// [KnfOpt] let _2459: Int = Int(0)
// [KnfOpt] let _2460: Int = Get max_flips.2358[_2459]
// [KnfOpt] let _2461: Int = Int(0)
// [KnfOpt] let _2462: Int = Get flips.2355[_2461]
// [KnfOpt] if (_2460 <= _2462) then {
// [KnfOpt]   let _2464: Int = Int(0)
// [KnfOpt]   let _2465: Int = Int(0)
// [KnfOpt]   let _2466: Int = Get flips.2355[_2465]
// [KnfOpt]   let _2463: Unit = Put max_flips.2358[_2464] = _2466
// [KnfOpt]   let _2467: Int = Int(0)
// [KnfOpt]   let _2468: Int = Int(0)
// [KnfOpt]   let _2469: Int = Get check_sum.2361[_2468]
// [KnfOpt]   let _2470: Int = Int(0)
// [KnfOpt]   let _2471: Int = Get flips.2355[_2470]
// [KnfOpt]   let _2472: Int = Int(1)
// [KnfOpt]   let _2473: Int = Int(0)
// [KnfOpt]   let _2474: Int = Get nperm.2364[_2473]
// [KnfOpt]   let _2475: Int = Int(0)
// [KnfOpt]   let _2476: Int = Get nperm.2364[_2475]
// [KnfOpt]   let _2477: Int = Int(2)
// [KnfOpt]   let _2478: Int = Div(_2476, _2477)
// [KnfOpt]   let _2479: Int = Int(2)
// [KnfOpt]   let _2480: Int = Mul(_2478, _2479)
// [KnfOpt]   let _2481: Int = Sub(_2474, _2480)
// [KnfOpt]   let _2482: Int = Int(2)
// [KnfOpt]   let _2483: Int = Mul(_2481, _2482)
// [KnfOpt]   let _2484: Int = Sub(_2472, _2483)
// [KnfOpt]   let _2485: Int = Mul(_2471, _2484)
// [KnfOpt]   let _2486: Int = Add(_2469, _2485)
// [KnfOpt]   let _2487: Unit = Put check_sum.2361[_2467] = _2486
// [KnfOpt]   let _2488: Int = Int(1)
// [KnfOpt]   let _2489: Bool = Bool(true)
// [KnfOpt]   let go.2490: Array(Bool) = ExtApply(minimbt_create_array, [_2488, _2489, ])
// [KnfOpt]   let _2491: Int = Int(1)
// [KnfOpt]   let _2492: Int = Int(0)
// [KnfOpt]   let t.2493: Array(Int) = ExtApply(minimbt_create_array, [_2491, _2492, ])
// [KnfOpt]   let rec go_loop.2494: Unit = () {
// [KnfOpt]     let join go_loop.2495: Unit = () {
// [KnfOpt]       let _2496: Int = Int(0)
// [KnfOpt]       let _2497: Bool = Get go.2490[_2496]
// [KnfOpt]       let _2498: Bool = Bool(true)
// [KnfOpt]       if (_2497 == _2498) then {
// [KnfOpt]         let _2499: Int = Int(0)
// [KnfOpt]         let _2500: Int = Get r.2370[_2499]
// [KnfOpt]         if (_2500 == _224) then {
// [KnfOpt]           let _2502: Int = Int(0)
// [KnfOpt]           let _2503: Bool = Bool(false)
// [KnfOpt]           let _2504: Unit = Put go.2490[_2502] = _2503
// [KnfOpt]           let _2505: Int = Int(0)
// [KnfOpt]           let _2506: Int = Int(0)
// [KnfOpt]           let _2507: Unit = Put r.2370[_2505] = _2506
// [KnfOpt]           let _2501: Unit = Unit
// [KnfOpt]           Jump(go_loop.2495, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _2508: Int = Int(0)
// [KnfOpt]           let _2509: Int = Int(0)
// [KnfOpt]           let _2510: Int = Get perm1.2348[_2509]
// [KnfOpt]           let _2511: Unit = Put t.2493[_2508] = _2510
// [KnfOpt]           let rec move_perm1_forward.2512: Unit = (i.2513: Int) {
// [KnfOpt]             let _2514: Int = Int(0)
// [KnfOpt]             let _2515: Int = Get r.2370[_2514]
// [KnfOpt]             let _2516: Int = Int(1)
// [KnfOpt]             let _2517: Int = Sub(_2515, _2516)
// [KnfOpt]             if (i.2513 <= _2517) then {
// [KnfOpt]               let _2518: Int = Int(1)
// [KnfOpt]               let _2519: Int = Add(i.2513, _2518)
// [KnfOpt]               let _2520: Int = Get perm1.2348[_2519]
// [KnfOpt]               let _2521: Unit = Put perm1.2348[i.2513] = _2520
// [KnfOpt]               let _2522: Int = Int(1)
// [KnfOpt]               let _2523: Int = Add(i.2513, _2522)
// [KnfOpt]               let _2524: Unit = Apply(move_perm1_forward.2512, [_2523, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _2525: Int = Int(0)
// [KnfOpt]           let _2526: Unit = Apply(move_perm1_forward.2512, [_2525, ])
// [KnfOpt]           let _2527: Int = Int(0)
// [KnfOpt]           let _2528: Int = Get r.2370[_2527]
// [KnfOpt]           let _2529: Int = Int(0)
// [KnfOpt]           let _2530: Int = Get t.2493[_2529]
// [KnfOpt]           let _2531: Unit = Put perm1.2348[_2528] = _2530
// [KnfOpt]           let _2532: Int = Int(0)
// [KnfOpt]           let _2533: Int = Get r.2370[_2532]
// [KnfOpt]           let _2534: Int = Int(0)
// [KnfOpt]           let _2535: Int = Get r.2370[_2534]
// [KnfOpt]           let _2536: Int = Get count.2352[_2535]
// [KnfOpt]           let _2537: Int = Int(1)
// [KnfOpt]           let _2538: Int = Sub(_2536, _2537)
// [KnfOpt]           let _2539: Unit = Put count.2352[_2533] = _2538
// [KnfOpt]           let _2540: Int = Int(1)
// [KnfOpt]           let _2541: Int = Int(0)
// [KnfOpt]           let _2542: Int = Get r.2370[_2541]
// [KnfOpt]           let _2543: Int = Get count.2352[_2542]
// [KnfOpt]           if (_2540 <= _2543) then {
// [KnfOpt]             let _2545: Int = Int(0)
// [KnfOpt]             let _2546: Bool = Bool(false)
// [KnfOpt]             let _2544: Unit = Put go.2490[_2545] = _2546
// [KnfOpt]             let _2501: Unit = Unit
// [KnfOpt]             Jump(go_loop.2495, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _2547: Int = Int(0)
// [KnfOpt]             let _2548: Int = Int(0)
// [KnfOpt]             let _2549: Int = Get r.2370[_2548]
// [KnfOpt]             let _2550: Int = Int(1)
// [KnfOpt]             let _2551: Int = Add(_2549, _2550)
// [KnfOpt]             let _2544: Unit = Put r.2370[_2547] = _2551
// [KnfOpt]             let _2501: Unit = Unit
// [KnfOpt]             Jump(go_loop.2495, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.2495, [])
// [KnfOpt]   }
// [KnfOpt]   let join go_loop.3608: Unit = () {
// [KnfOpt]     let _3609: Int = Int(0)
// [KnfOpt]     let _3610: Bool = Get go.2490[_3609]
// [KnfOpt]     let _3611: Bool = Bool(true)
// [KnfOpt]     if (_3610 == _3611) then {
// [KnfOpt]       let _3612: Int = Int(0)
// [KnfOpt]       let _3613: Int = Get r.2370[_3612]
// [KnfOpt]       if (_3613 == _224) then {
// [KnfOpt]         let _3614: Int = Int(0)
// [KnfOpt]         let _3615: Bool = Bool(false)
// [KnfOpt]         let _3616: Unit = Put go.2490[_3614] = _3615
// [KnfOpt]         let _3617: Int = Int(0)
// [KnfOpt]         let _3618: Int = Int(0)
// [KnfOpt]         let _3619: Unit = Put r.2370[_3617] = _3618
// [KnfOpt]         let _3620: Unit = Unit
// [KnfOpt]         Jump(go_loop.3608, [])
// [KnfOpt]       } else {
// [KnfOpt]         let _3621: Int = Int(0)
// [KnfOpt]         let _3622: Int = Int(0)
// [KnfOpt]         let _3623: Int = Get perm1.2348[_3622]
// [KnfOpt]         let _3624: Unit = Put t.2493[_3621] = _3623
// [KnfOpt]         let rec move_perm1_forward.3625: Unit = (i.3626: Int) {
// [KnfOpt]           let _3627: Int = Int(0)
// [KnfOpt]           let _3628: Int = Get r.2370[_3627]
// [KnfOpt]           let _3629: Int = Int(1)
// [KnfOpt]           let _3630: Int = Sub(_3628, _3629)
// [KnfOpt]           if (i.3626 <= _3630) then {
// [KnfOpt]             let _3631: Int = Int(1)
// [KnfOpt]             let _3632: Int = Add(i.3626, _3631)
// [KnfOpt]             let _3633: Int = Get perm1.2348[_3632]
// [KnfOpt]             let _3634: Unit = Put perm1.2348[i.3626] = _3633
// [KnfOpt]             let _3635: Int = Int(1)
// [KnfOpt]             let _3636: Int = Add(i.3626, _3635)
// [KnfOpt]             let _3637: Unit = Apply(move_perm1_forward.3625, [_3636, ])
// [KnfOpt]             Unit
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         let _3638: Int = Int(0)
// [KnfOpt]         let _3639: Unit = Apply(move_perm1_forward.3625, [_3638, ])
// [KnfOpt]         let _3640: Int = Int(0)
// [KnfOpt]         let _3641: Int = Get r.2370[_3640]
// [KnfOpt]         let _3642: Int = Int(0)
// [KnfOpt]         let _3643: Int = Get t.2493[_3642]
// [KnfOpt]         let _3644: Unit = Put perm1.2348[_3641] = _3643
// [KnfOpt]         let _3645: Int = Int(0)
// [KnfOpt]         let _3646: Int = Get r.2370[_3645]
// [KnfOpt]         let _3647: Int = Int(0)
// [KnfOpt]         let _3648: Int = Get r.2370[_3647]
// [KnfOpt]         let _3649: Int = Get count.2352[_3648]
// [KnfOpt]         let _3650: Int = Int(1)
// [KnfOpt]         let _3651: Int = Sub(_3649, _3650)
// [KnfOpt]         let _3652: Unit = Put count.2352[_3646] = _3651
// [KnfOpt]         let _3653: Int = Int(1)
// [KnfOpt]         let _3654: Int = Int(0)
// [KnfOpt]         let _3655: Int = Get r.2370[_3654]
// [KnfOpt]         let _3656: Int = Get count.2352[_3655]
// [KnfOpt]         if (_3653 <= _3656) then {
// [KnfOpt]           let _3657: Int = Int(0)
// [KnfOpt]           let _3658: Bool = Bool(false)
// [KnfOpt]           let _3659: Unit = Put go.2490[_3657] = _3658
// [KnfOpt]           let _3660: Unit = Unit
// [KnfOpt]           Jump(go_loop.3608, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _3661: Int = Int(0)
// [KnfOpt]           let _3662: Int = Int(0)
// [KnfOpt]           let _3663: Int = Get r.2370[_3662]
// [KnfOpt]           let _3664: Int = Int(1)
// [KnfOpt]           let _3665: Int = Add(_3663, _3664)
// [KnfOpt]           let _3666: Unit = Put r.2370[_3661] = _3665
// [KnfOpt]           let _3667: Unit = Unit
// [KnfOpt]           Jump(go_loop.3608, [])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]     } else {
// [KnfOpt]       let _2552: Unit = Unit
// [KnfOpt]       let _2553: Int = Int(0)
// [KnfOpt]       let _2554: Int = Int(0)
// [KnfOpt]       let _2555: Int = Get nperm.2364[_2554]
// [KnfOpt]       let _2556: Int = Int(1)
// [KnfOpt]       let _2557: Int = Add(_2555, _2556)
// [KnfOpt]       let _2558: Unit = Put nperm.2364[_2553] = _2557
// [KnfOpt]       Jump(compute.2369, [r.2370, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(go_loop.3608, [])
// [KnfOpt] } else {
// [KnfOpt]   let _2463: Unit = Unit
// [KnfOpt]   let _2559: Int = Int(0)
// [KnfOpt]   let _2560: Int = Int(0)
// [KnfOpt]   let _2561: Int = Get check_sum.2361[_2560]
// [KnfOpt]   let _2562: Int = Int(0)
// [KnfOpt]   let _2563: Int = Get flips.2355[_2562]
// [KnfOpt]   let _2564: Int = Int(1)
// [KnfOpt]   let _2565: Int = Int(0)
// [KnfOpt]   let _2566: Int = Get nperm.2364[_2565]
// [KnfOpt]   let _2567: Int = Int(0)
// [KnfOpt]   let _2568: Int = Get nperm.2364[_2567]
// [KnfOpt]   let _2569: Int = Int(2)
// [KnfOpt]   let _2570: Int = Div(_2568, _2569)
// [KnfOpt]   let _2571: Int = Int(2)
// [KnfOpt]   let _2572: Int = Mul(_2570, _2571)
// [KnfOpt]   let _2573: Int = Sub(_2566, _2572)
// [KnfOpt]   let _2574: Int = Int(2)
// [KnfOpt]   let _2575: Int = Mul(_2573, _2574)
// [KnfOpt]   let _2576: Int = Sub(_2564, _2575)
// [KnfOpt]   let _2577: Int = Mul(_2563, _2576)
// [KnfOpt]   let _2578: Int = Add(_2561, _2577)
// [KnfOpt]   let _2579: Unit = Put check_sum.2361[_2559] = _2578
// [KnfOpt]   let _2580: Int = Int(1)
// [KnfOpt]   let _2581: Bool = Bool(true)
// [KnfOpt]   let go.2582: Array(Bool) = ExtApply(minimbt_create_array, [_2580, _2581, ])
// [KnfOpt]   let _2583: Int = Int(1)
// [KnfOpt]   let _2584: Int = Int(0)
// [KnfOpt]   let t.2585: Array(Int) = ExtApply(minimbt_create_array, [_2583, _2584, ])
// [KnfOpt]   let rec go_loop.2586: Unit = () {
// [KnfOpt]     let join go_loop.2587: Unit = () {
// [KnfOpt]       let _2588: Int = Int(0)
// [KnfOpt]       let _2589: Bool = Get go.2582[_2588]
// [KnfOpt]       let _2590: Bool = Bool(true)
// [KnfOpt]       if (_2589 == _2590) then {
// [KnfOpt]         let _2591: Int = Int(0)
// [KnfOpt]         let _2592: Int = Get r.2370[_2591]
// [KnfOpt]         if (_2592 == _224) then {
// [KnfOpt]           let _2594: Int = Int(0)
// [KnfOpt]           let _2595: Bool = Bool(false)
// [KnfOpt]           let _2596: Unit = Put go.2582[_2594] = _2595
// [KnfOpt]           let _2597: Int = Int(0)
// [KnfOpt]           let _2598: Int = Int(0)
// [KnfOpt]           let _2599: Unit = Put r.2370[_2597] = _2598
// [KnfOpt]           let _2593: Unit = Unit
// [KnfOpt]           Jump(go_loop.2587, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _2600: Int = Int(0)
// [KnfOpt]           let _2601: Int = Int(0)
// [KnfOpt]           let _2602: Int = Get perm1.2348[_2601]
// [KnfOpt]           let _2603: Unit = Put t.2585[_2600] = _2602
// [KnfOpt]           let rec move_perm1_forward.2604: Unit = (i.2605: Int) {
// [KnfOpt]             let _2606: Int = Int(0)
// [KnfOpt]             let _2607: Int = Get r.2370[_2606]
// [KnfOpt]             let _2608: Int = Int(1)
// [KnfOpt]             let _2609: Int = Sub(_2607, _2608)
// [KnfOpt]             if (i.2605 <= _2609) then {
// [KnfOpt]               let _2610: Int = Int(1)
// [KnfOpt]               let _2611: Int = Add(i.2605, _2610)
// [KnfOpt]               let _2612: Int = Get perm1.2348[_2611]
// [KnfOpt]               let _2613: Unit = Put perm1.2348[i.2605] = _2612
// [KnfOpt]               let _2614: Int = Int(1)
// [KnfOpt]               let _2615: Int = Add(i.2605, _2614)
// [KnfOpt]               let _2616: Unit = Apply(move_perm1_forward.2604, [_2615, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _2617: Int = Int(0)
// [KnfOpt]           let _2618: Unit = Apply(move_perm1_forward.2604, [_2617, ])
// [KnfOpt]           let _2619: Int = Int(0)
// [KnfOpt]           let _2620: Int = Get r.2370[_2619]
// [KnfOpt]           let _2621: Int = Int(0)
// [KnfOpt]           let _2622: Int = Get t.2585[_2621]
// [KnfOpt]           let _2623: Unit = Put perm1.2348[_2620] = _2622
// [KnfOpt]           let _2624: Int = Int(0)
// [KnfOpt]           let _2625: Int = Get r.2370[_2624]
// [KnfOpt]           let _2626: Int = Int(0)
// [KnfOpt]           let _2627: Int = Get r.2370[_2626]
// [KnfOpt]           let _2628: Int = Get count.2352[_2627]
// [KnfOpt]           let _2629: Int = Int(1)
// [KnfOpt]           let _2630: Int = Sub(_2628, _2629)
// [KnfOpt]           let _2631: Unit = Put count.2352[_2625] = _2630
// [KnfOpt]           let _2632: Int = Int(1)
// [KnfOpt]           let _2633: Int = Int(0)
// [KnfOpt]           let _2634: Int = Get r.2370[_2633]
// [KnfOpt]           let _2635: Int = Get count.2352[_2634]
// [KnfOpt]           if (_2632 <= _2635) then {
// [KnfOpt]             let _2637: Int = Int(0)
// [KnfOpt]             let _2638: Bool = Bool(false)
// [KnfOpt]             let _2636: Unit = Put go.2582[_2637] = _2638
// [KnfOpt]             let _2593: Unit = Unit
// [KnfOpt]             Jump(go_loop.2587, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _2639: Int = Int(0)
// [KnfOpt]             let _2640: Int = Int(0)
// [KnfOpt]             let _2641: Int = Get r.2370[_2640]
// [KnfOpt]             let _2642: Int = Int(1)
// [KnfOpt]             let _2643: Int = Add(_2641, _2642)
// [KnfOpt]             let _2636: Unit = Put r.2370[_2639] = _2643
// [KnfOpt]             let _2593: Unit = Unit
// [KnfOpt]             Jump(go_loop.2587, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.2587, [])
// [KnfOpt]   }
// [KnfOpt]   let join go_loop.3668: Unit = () {
// [KnfOpt]     let _3669: Int = Int(0)
// [KnfOpt]     let _3670: Bool = Get go.2582[_3669]
// [KnfOpt]     let _3671: Bool = Bool(true)
// [KnfOpt]     if (_3670 == _3671) then {
// [KnfOpt]       let _3672: Int = Int(0)
// [KnfOpt]       let _3673: Int = Get r.2370[_3672]
// [KnfOpt]       if (_3673 == _224) then {
// [KnfOpt]         let _3674: Int = Int(0)
// [KnfOpt]         let _3675: Bool = Bool(false)
// [KnfOpt]         let _3676: Unit = Put go.2582[_3674] = _3675
// [KnfOpt]         let _3677: Int = Int(0)
// [KnfOpt]         let _3678: Int = Int(0)
// [KnfOpt]         let _3679: Unit = Put r.2370[_3677] = _3678
// [KnfOpt]         let _3680: Unit = Unit
// [KnfOpt]         Jump(go_loop.3668, [])
// [KnfOpt]       } else {
// [KnfOpt]         let _3681: Int = Int(0)
// [KnfOpt]         let _3682: Int = Int(0)
// [KnfOpt]         let _3683: Int = Get perm1.2348[_3682]
// [KnfOpt]         let _3684: Unit = Put t.2585[_3681] = _3683
// [KnfOpt]         let rec move_perm1_forward.3685: Unit = (i.3686: Int) {
// [KnfOpt]           let _3687: Int = Int(0)
// [KnfOpt]           let _3688: Int = Get r.2370[_3687]
// [KnfOpt]           let _3689: Int = Int(1)
// [KnfOpt]           let _3690: Int = Sub(_3688, _3689)
// [KnfOpt]           if (i.3686 <= _3690) then {
// [KnfOpt]             let _3691: Int = Int(1)
// [KnfOpt]             let _3692: Int = Add(i.3686, _3691)
// [KnfOpt]             let _3693: Int = Get perm1.2348[_3692]
// [KnfOpt]             let _3694: Unit = Put perm1.2348[i.3686] = _3693
// [KnfOpt]             let _3695: Int = Int(1)
// [KnfOpt]             let _3696: Int = Add(i.3686, _3695)
// [KnfOpt]             let _3697: Unit = Apply(move_perm1_forward.3685, [_3696, ])
// [KnfOpt]             Unit
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         let _3698: Int = Int(0)
// [KnfOpt]         let _3699: Unit = Apply(move_perm1_forward.3685, [_3698, ])
// [KnfOpt]         let _3700: Int = Int(0)
// [KnfOpt]         let _3701: Int = Get r.2370[_3700]
// [KnfOpt]         let _3702: Int = Int(0)
// [KnfOpt]         let _3703: Int = Get t.2585[_3702]
// [KnfOpt]         let _3704: Unit = Put perm1.2348[_3701] = _3703
// [KnfOpt]         let _3705: Int = Int(0)
// [KnfOpt]         let _3706: Int = Get r.2370[_3705]
// [KnfOpt]         let _3707: Int = Int(0)
// [KnfOpt]         let _3708: Int = Get r.2370[_3707]
// [KnfOpt]         let _3709: Int = Get count.2352[_3708]
// [KnfOpt]         let _3710: Int = Int(1)
// [KnfOpt]         let _3711: Int = Sub(_3709, _3710)
// [KnfOpt]         let _3712: Unit = Put count.2352[_3706] = _3711
// [KnfOpt]         let _3713: Int = Int(1)
// [KnfOpt]         let _3714: Int = Int(0)
// [KnfOpt]         let _3715: Int = Get r.2370[_3714]
// [KnfOpt]         let _3716: Int = Get count.2352[_3715]
// [KnfOpt]         if (_3713 <= _3716) then {
// [KnfOpt]           let _3717: Int = Int(0)
// [KnfOpt]           let _3718: Bool = Bool(false)
// [KnfOpt]           let _3719: Unit = Put go.2582[_3717] = _3718
// [KnfOpt]           let _3720: Unit = Unit
// [KnfOpt]           Jump(go_loop.3668, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _3721: Int = Int(0)
// [KnfOpt]           let _3722: Int = Int(0)
// [KnfOpt]           let _3723: Int = Get r.2370[_3722]
// [KnfOpt]           let _3724: Int = Int(1)
// [KnfOpt]           let _3725: Int = Add(_3723, _3724)
// [KnfOpt]           let _3726: Unit = Put r.2370[_3721] = _3725
// [KnfOpt]           let _3727: Unit = Unit
// [KnfOpt]           Jump(go_loop.3668, [])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]     } else {
// [KnfOpt]       let _2644: Unit = Unit
// [KnfOpt]       let _2645: Int = Int(0)
// [KnfOpt]       let _2646: Int = Int(0)
// [KnfOpt]       let _2647: Int = Get nperm.2364[_2646]
// [KnfOpt]       let _2648: Int = Int(1)
// [KnfOpt]       let _2649: Int = Add(_2647, _2648)
// [KnfOpt]       let _2650: Unit = Put nperm.2364[_2645] = _2649
// [KnfOpt]       Jump(compute.2369, [r.2370, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(go_loop.3668, [])
// [KnfOpt] }
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2512 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2512 rejected
// [KnfOpt] Knf inline Some(go_loop) let _2552: Unit = Unit
// [KnfOpt] let _2553: Int = Int(0)
// [KnfOpt] let _2554: Int = Int(0)
// [KnfOpt] let _2555: Int = Get nperm.2364[_2554]
// [KnfOpt] let _2556: Int = Int(1)
// [KnfOpt] let _2557: Int = Add(_2555, _2556)
// [KnfOpt] let _2558: Unit = Put nperm.2364[_2553] = _2557
// [KnfOpt] Jump(compute.2369, [r.2370, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2604 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2604 rejected
// [KnfOpt] Knf inline Some(go_loop) let _2644: Unit = Unit
// [KnfOpt] let _2645: Int = Int(0)
// [KnfOpt] let _2646: Int = Int(0)
// [KnfOpt] let _2647: Int = Get nperm.2364[_2646]
// [KnfOpt] let _2648: Int = Int(1)
// [KnfOpt] let _2649: Int = Add(_2647, _2648)
// [KnfOpt] let _2650: Unit = Put nperm.2364[_2645] = _2649
// [KnfOpt] Jump(compute.2369, [r.2370, ])
// [KnfOpt] Knf inline Some(copy_perm) let _2385: Unit = Unit
// [KnfOpt] let rec init_count.2386: Unit = () {
// [KnfOpt]   let _2387: Int = Int(0)
// [KnfOpt]   let _2388: Int = Get r.2370[_2387]
// [KnfOpt]   let _2389: Int = Int(1)
// [KnfOpt]   if (_2388 == _2389) then {
// [KnfOpt]     let _2390: Unit = Unit
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _2391: Int = Int(0)
// [KnfOpt]     let _2392: Int = Get r.2370[_2391]
// [KnfOpt]     let _2393: Int = Int(1)
// [KnfOpt]     let _2394: Int = Sub(_2392, _2393)
// [KnfOpt]     let _2395: Int = Int(0)
// [KnfOpt]     let _2396: Int = Get r.2370[_2395]
// [KnfOpt]     let _2397: Unit = Put count.2352[_2394] = _2396
// [KnfOpt]     let _2398: Int = Int(0)
// [KnfOpt]     let _2399: Int = Int(0)
// [KnfOpt]     let _2400: Int = Get r.2370[_2399]
// [KnfOpt]     let _2401: Int = Int(1)
// [KnfOpt]     let _2402: Int = Sub(_2400, _2401)
// [KnfOpt]     let _2403: Unit = Put r.2370[_2398] = _2402
// [KnfOpt]     let _2390: Unit = Apply(init_count.2386, [])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _2404: Unit = Apply(init_count.2386, [])
// [KnfOpt] let _2405: Int = Int(0)
// [KnfOpt] let _2406: Int = Int(0)
// [KnfOpt] let _2407: Unit = Put flips.2355[_2405] = _2406
// [KnfOpt] let _2408: Int = Int(1)
// [KnfOpt] let _2409: Int = Int(0)
// [KnfOpt] let _2410: Int = Get perm.2350[_2409]
// [KnfOpt] let k.2411: Array(Int) = ExtApply(minimbt_create_array, [_2408, _2410, ])
// [KnfOpt] let rec do_flip.2412: Unit = (k.2413: Array(Int)) {
// [KnfOpt]   let join do_flip.2414: Unit = (k.2415: Array(Int)) {
// [KnfOpt]     let _2416: Int = Int(0)
// [KnfOpt]     let _2417: Int = Get k.2415[_2416]
// [KnfOpt]     let _2418: Int = Int(0)
// [KnfOpt]     if (_2417 == _2418) then {
// [KnfOpt]       Unit
// [KnfOpt]     } else {
// [KnfOpt]       let _2419: Int = Int(1)
// [KnfOpt]       let _2420: Int = Int(0)
// [KnfOpt]       let t.2421: Array(Int) = ExtApply(minimbt_create_array, [_2419, _2420, ])
// [KnfOpt]       let rec flip_loop.2422: Unit = (i.2423: Int) {
// [KnfOpt]         let join flip_loop.2424: Unit = (i.2425: Int) {
// [KnfOpt]           let _2426: Int = Int(0)
// [KnfOpt]           let _2427: Int = Get k.2415[_2426]
// [KnfOpt]           let _2428: Int = Int(2)
// [KnfOpt]           let _2429: Int = Div(_2427, _2428)
// [KnfOpt]           if (i.2425 <= _2429) then {
// [KnfOpt]             let _2430: Int = Int(0)
// [KnfOpt]             let _2431: Int = Get perm.2350[i.2425]
// [KnfOpt]             let _2432: Unit = Put t.2421[_2430] = _2431
// [KnfOpt]             let _2433: Int = Int(0)
// [KnfOpt]             let _2434: Int = Get k.2415[_2433]
// [KnfOpt]             let _2435: Int = Sub(_2434, i.2425)
// [KnfOpt]             let _2436: Int = Get perm.2350[_2435]
// [KnfOpt]             let _2437: Unit = Put perm.2350[i.2425] = _2436
// [KnfOpt]             let _2438: Int = Int(0)
// [KnfOpt]             let _2439: Int = Get k.2415[_2438]
// [KnfOpt]             let _2440: Int = Sub(_2439, i.2425)
// [KnfOpt]             let _2441: Int = Int(0)
// [KnfOpt]             let _2442: Int = Get t.2421[_2441]
// [KnfOpt]             let _2443: Unit = Put perm.2350[_2440] = _2442
// [KnfOpt]             let _2444: Int = Int(1)
// [KnfOpt]             let _2445: Int = Add(i.2425, _2444)
// [KnfOpt]             Jump(flip_loop.2424, [_2445, ])
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(flip_loop.2424, [i.2423, ])
// [KnfOpt]       }
// [KnfOpt]       let _2446: Int = Int(0)
// [KnfOpt]       let join flip_loop.3586: Unit = (i.3587: Int) {
// [KnfOpt]         let _3588: Int = Int(0)
// [KnfOpt]         let _3589: Int = Get k.2415[_3588]
// [KnfOpt]         let _3590: Int = Int(2)
// [KnfOpt]         let _3591: Int = Div(_3589, _3590)
// [KnfOpt]         if (i.3587 <= _3591) then {
// [KnfOpt]           let _3592: Int = Int(0)
// [KnfOpt]           let _3593: Int = Get perm.2350[i.3587]
// [KnfOpt]           let _3594: Unit = Put t.2421[_3592] = _3593
// [KnfOpt]           let _3595: Int = Int(0)
// [KnfOpt]           let _3596: Int = Get k.2415[_3595]
// [KnfOpt]           let _3597: Int = Sub(_3596, i.3587)
// [KnfOpt]           let _3598: Int = Get perm.2350[_3597]
// [KnfOpt]           let _3599: Unit = Put perm.2350[i.3587] = _3598
// [KnfOpt]           let _3600: Int = Int(0)
// [KnfOpt]           let _3601: Int = Get k.2415[_3600]
// [KnfOpt]           let _3602: Int = Sub(_3601, i.3587)
// [KnfOpt]           let _3603: Int = Int(0)
// [KnfOpt]           let _3604: Int = Get t.2421[_3603]
// [KnfOpt]           let _3605: Unit = Put perm.2350[_3602] = _3604
// [KnfOpt]           let _3606: Int = Int(1)
// [KnfOpt]           let _3607: Int = Add(i.3587, _3606)
// [KnfOpt]           Jump(flip_loop.3586, [_3607, ])
// [KnfOpt]         } else {
// [KnfOpt]           let _2447: Unit = Unit
// [KnfOpt]           let _2448: Int = Int(0)
// [KnfOpt]           let _2449: Int = Int(0)
// [KnfOpt]           let _2450: Int = Get perm.2350[_2449]
// [KnfOpt]           let _2451: Unit = Put k.2415[_2448] = _2450
// [KnfOpt]           let _2452: Int = Int(0)
// [KnfOpt]           let _2453: Int = Int(0)
// [KnfOpt]           let _2454: Int = Get flips.2355[_2453]
// [KnfOpt]           let _2455: Int = Int(1)
// [KnfOpt]           let _2456: Int = Add(_2454, _2455)
// [KnfOpt]           let _2457: Unit = Put flips.2355[_2452] = _2456
// [KnfOpt]           Jump(do_flip.2414, [k.2415, ])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(flip_loop.3586, [_2446, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(do_flip.2414, [k.2413, ])
// [KnfOpt] }
// [KnfOpt] let join do_flip.3728: Unit = (k.3729: Array(Int)) {
// [KnfOpt]   let _3730: Int = Int(0)
// [KnfOpt]   let _3731: Int = Get k.3729[_3730]
// [KnfOpt]   let _3732: Int = Int(0)
// [KnfOpt]   if (_3731 == _3732) then {
// [KnfOpt]     let _2458: Unit = Unit
// [KnfOpt]     let _2459: Int = Int(0)
// [KnfOpt]     let _2460: Int = Get max_flips.2358[_2459]
// [KnfOpt]     let _2461: Int = Int(0)
// [KnfOpt]     let _2462: Int = Get flips.2355[_2461]
// [KnfOpt]     if (_2460 <= _2462) then {
// [KnfOpt]       let _2464: Int = Int(0)
// [KnfOpt]       let _2465: Int = Int(0)
// [KnfOpt]       let _2466: Int = Get flips.2355[_2465]
// [KnfOpt]       let _2463: Unit = Put max_flips.2358[_2464] = _2466
// [KnfOpt]       let _2467: Int = Int(0)
// [KnfOpt]       let _2468: Int = Int(0)
// [KnfOpt]       let _2469: Int = Get check_sum.2361[_2468]
// [KnfOpt]       let _2470: Int = Int(0)
// [KnfOpt]       let _2471: Int = Get flips.2355[_2470]
// [KnfOpt]       let _2472: Int = Int(1)
// [KnfOpt]       let _2473: Int = Int(0)
// [KnfOpt]       let _2474: Int = Get nperm.2364[_2473]
// [KnfOpt]       let _2475: Int = Int(0)
// [KnfOpt]       let _2476: Int = Get nperm.2364[_2475]
// [KnfOpt]       let _2477: Int = Int(2)
// [KnfOpt]       let _2478: Int = Div(_2476, _2477)
// [KnfOpt]       let _2479: Int = Int(2)
// [KnfOpt]       let _2480: Int = Mul(_2478, _2479)
// [KnfOpt]       let _2481: Int = Sub(_2474, _2480)
// [KnfOpt]       let _2482: Int = Int(2)
// [KnfOpt]       let _2483: Int = Mul(_2481, _2482)
// [KnfOpt]       let _2484: Int = Sub(_2472, _2483)
// [KnfOpt]       let _2485: Int = Mul(_2471, _2484)
// [KnfOpt]       let _2486: Int = Add(_2469, _2485)
// [KnfOpt]       let _2487: Unit = Put check_sum.2361[_2467] = _2486
// [KnfOpt]       let _2488: Int = Int(1)
// [KnfOpt]       let _2489: Bool = Bool(true)
// [KnfOpt]       let go.2490: Array(Bool) = ExtApply(minimbt_create_array, [_2488, _2489, ])
// [KnfOpt]       let _2491: Int = Int(1)
// [KnfOpt]       let _2492: Int = Int(0)
// [KnfOpt]       let t.2493: Array(Int) = ExtApply(minimbt_create_array, [_2491, _2492, ])
// [KnfOpt]       let rec go_loop.2494: Unit = () {
// [KnfOpt]         let join go_loop.2495: Unit = () {
// [KnfOpt]           let _2496: Int = Int(0)
// [KnfOpt]           let _2497: Bool = Get go.2490[_2496]
// [KnfOpt]           let _2498: Bool = Bool(true)
// [KnfOpt]           if (_2497 == _2498) then {
// [KnfOpt]             let _2499: Int = Int(0)
// [KnfOpt]             let _2500: Int = Get r.2370[_2499]
// [KnfOpt]             if (_2500 == _224) then {
// [KnfOpt]               let _2502: Int = Int(0)
// [KnfOpt]               let _2503: Bool = Bool(false)
// [KnfOpt]               let _2504: Unit = Put go.2490[_2502] = _2503
// [KnfOpt]               let _2505: Int = Int(0)
// [KnfOpt]               let _2506: Int = Int(0)
// [KnfOpt]               let _2507: Unit = Put r.2370[_2505] = _2506
// [KnfOpt]               let _2501: Unit = Unit
// [KnfOpt]               Jump(go_loop.2495, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _2508: Int = Int(0)
// [KnfOpt]               let _2509: Int = Int(0)
// [KnfOpt]               let _2510: Int = Get perm1.2348[_2509]
// [KnfOpt]               let _2511: Unit = Put t.2493[_2508] = _2510
// [KnfOpt]               let rec move_perm1_forward.2512: Unit = (i.2513: Int) {
// [KnfOpt]                 let _2514: Int = Int(0)
// [KnfOpt]                 let _2515: Int = Get r.2370[_2514]
// [KnfOpt]                 let _2516: Int = Int(1)
// [KnfOpt]                 let _2517: Int = Sub(_2515, _2516)
// [KnfOpt]                 if (i.2513 <= _2517) then {
// [KnfOpt]                   let _2518: Int = Int(1)
// [KnfOpt]                   let _2519: Int = Add(i.2513, _2518)
// [KnfOpt]                   let _2520: Int = Get perm1.2348[_2519]
// [KnfOpt]                   let _2521: Unit = Put perm1.2348[i.2513] = _2520
// [KnfOpt]                   let _2522: Int = Int(1)
// [KnfOpt]                   let _2523: Int = Add(i.2513, _2522)
// [KnfOpt]                   let _2524: Unit = Apply(move_perm1_forward.2512, [_2523, ])
// [KnfOpt]                   Unit
// [KnfOpt]                 } else {
// [KnfOpt]                   Unit
// [KnfOpt]                 }
// [KnfOpt]               }
// [KnfOpt]               let _2525: Int = Int(0)
// [KnfOpt]               let _2526: Unit = Apply(move_perm1_forward.2512, [_2525, ])
// [KnfOpt]               let _2527: Int = Int(0)
// [KnfOpt]               let _2528: Int = Get r.2370[_2527]
// [KnfOpt]               let _2529: Int = Int(0)
// [KnfOpt]               let _2530: Int = Get t.2493[_2529]
// [KnfOpt]               let _2531: Unit = Put perm1.2348[_2528] = _2530
// [KnfOpt]               let _2532: Int = Int(0)
// [KnfOpt]               let _2533: Int = Get r.2370[_2532]
// [KnfOpt]               let _2534: Int = Int(0)
// [KnfOpt]               let _2535: Int = Get r.2370[_2534]
// [KnfOpt]               let _2536: Int = Get count.2352[_2535]
// [KnfOpt]               let _2537: Int = Int(1)
// [KnfOpt]               let _2538: Int = Sub(_2536, _2537)
// [KnfOpt]               let _2539: Unit = Put count.2352[_2533] = _2538
// [KnfOpt]               let _2540: Int = Int(1)
// [KnfOpt]               let _2541: Int = Int(0)
// [KnfOpt]               let _2542: Int = Get r.2370[_2541]
// [KnfOpt]               let _2543: Int = Get count.2352[_2542]
// [KnfOpt]               if (_2540 <= _2543) then {
// [KnfOpt]                 let _2545: Int = Int(0)
// [KnfOpt]                 let _2546: Bool = Bool(false)
// [KnfOpt]                 let _2544: Unit = Put go.2490[_2545] = _2546
// [KnfOpt]                 let _2501: Unit = Unit
// [KnfOpt]                 Jump(go_loop.2495, [])
// [KnfOpt]               } else {
// [KnfOpt]                 let _2547: Int = Int(0)
// [KnfOpt]                 let _2548: Int = Int(0)
// [KnfOpt]                 let _2549: Int = Get r.2370[_2548]
// [KnfOpt]                 let _2550: Int = Int(1)
// [KnfOpt]                 let _2551: Int = Add(_2549, _2550)
// [KnfOpt]                 let _2544: Unit = Put r.2370[_2547] = _2551
// [KnfOpt]                 let _2501: Unit = Unit
// [KnfOpt]                 Jump(go_loop.2495, [])
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(go_loop.2495, [])
// [KnfOpt]       }
// [KnfOpt]       let join go_loop.3733: Unit = () {
// [KnfOpt]         let _3734: Int = Int(0)
// [KnfOpt]         let _3735: Bool = Get go.2490[_3734]
// [KnfOpt]         let _3736: Bool = Bool(true)
// [KnfOpt]         if (_3735 == _3736) then {
// [KnfOpt]           let _3737: Int = Int(0)
// [KnfOpt]           let _3738: Int = Get r.2370[_3737]
// [KnfOpt]           if (_3738 == _224) then {
// [KnfOpt]             let _3739: Int = Int(0)
// [KnfOpt]             let _3740: Bool = Bool(false)
// [KnfOpt]             let _3741: Unit = Put go.2490[_3739] = _3740
// [KnfOpt]             let _3742: Int = Int(0)
// [KnfOpt]             let _3743: Int = Int(0)
// [KnfOpt]             let _3744: Unit = Put r.2370[_3742] = _3743
// [KnfOpt]             let _3745: Unit = Unit
// [KnfOpt]             Jump(go_loop.3733, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _3746: Int = Int(0)
// [KnfOpt]             let _3747: Int = Int(0)
// [KnfOpt]             let _3748: Int = Get perm1.2348[_3747]
// [KnfOpt]             let _3749: Unit = Put t.2493[_3746] = _3748
// [KnfOpt]             let rec move_perm1_forward.3750: Unit = (i.3751: Int) {
// [KnfOpt]               let _3752: Int = Int(0)
// [KnfOpt]               let _3753: Int = Get r.2370[_3752]
// [KnfOpt]               let _3754: Int = Int(1)
// [KnfOpt]               let _3755: Int = Sub(_3753, _3754)
// [KnfOpt]               if (i.3751 <= _3755) then {
// [KnfOpt]                 let _3756: Int = Int(1)
// [KnfOpt]                 let _3757: Int = Add(i.3751, _3756)
// [KnfOpt]                 let _3758: Int = Get perm1.2348[_3757]
// [KnfOpt]                 let _3759: Unit = Put perm1.2348[i.3751] = _3758
// [KnfOpt]                 let _3760: Int = Int(1)
// [KnfOpt]                 let _3761: Int = Add(i.3751, _3760)
// [KnfOpt]                 let _3762: Unit = Apply(move_perm1_forward.3750, [_3761, ])
// [KnfOpt]                 Unit
// [KnfOpt]               } else {
// [KnfOpt]                 Unit
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]             let _3763: Int = Int(0)
// [KnfOpt]             let _3764: Unit = Apply(move_perm1_forward.3750, [_3763, ])
// [KnfOpt]             let _3765: Int = Int(0)
// [KnfOpt]             let _3766: Int = Get r.2370[_3765]
// [KnfOpt]             let _3767: Int = Int(0)
// [KnfOpt]             let _3768: Int = Get t.2493[_3767]
// [KnfOpt]             let _3769: Unit = Put perm1.2348[_3766] = _3768
// [KnfOpt]             let _3770: Int = Int(0)
// [KnfOpt]             let _3771: Int = Get r.2370[_3770]
// [KnfOpt]             let _3772: Int = Int(0)
// [KnfOpt]             let _3773: Int = Get r.2370[_3772]
// [KnfOpt]             let _3774: Int = Get count.2352[_3773]
// [KnfOpt]             let _3775: Int = Int(1)
// [KnfOpt]             let _3776: Int = Sub(_3774, _3775)
// [KnfOpt]             let _3777: Unit = Put count.2352[_3771] = _3776
// [KnfOpt]             let _3778: Int = Int(1)
// [KnfOpt]             let _3779: Int = Int(0)
// [KnfOpt]             let _3780: Int = Get r.2370[_3779]
// [KnfOpt]             let _3781: Int = Get count.2352[_3780]
// [KnfOpt]             if (_3778 <= _3781) then {
// [KnfOpt]               let _3782: Int = Int(0)
// [KnfOpt]               let _3783: Bool = Bool(false)
// [KnfOpt]               let _3784: Unit = Put go.2490[_3782] = _3783
// [KnfOpt]               let _3785: Unit = Unit
// [KnfOpt]               Jump(go_loop.3733, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _3786: Int = Int(0)
// [KnfOpt]               let _3787: Int = Int(0)
// [KnfOpt]               let _3788: Int = Get r.2370[_3787]
// [KnfOpt]               let _3789: Int = Int(1)
// [KnfOpt]               let _3790: Int = Add(_3788, _3789)
// [KnfOpt]               let _3791: Unit = Put r.2370[_3786] = _3790
// [KnfOpt]               let _3792: Unit = Unit
// [KnfOpt]               Jump(go_loop.3733, [])
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]         } else {
// [KnfOpt]           let _2552: Unit = Unit
// [KnfOpt]           let _2553: Int = Int(0)
// [KnfOpt]           let _2554: Int = Int(0)
// [KnfOpt]           let _2555: Int = Get nperm.2364[_2554]
// [KnfOpt]           let _2556: Int = Int(1)
// [KnfOpt]           let _2557: Int = Add(_2555, _2556)
// [KnfOpt]           let _2558: Unit = Put nperm.2364[_2553] = _2557
// [KnfOpt]           Jump(compute.2369, [r.2370, ])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(go_loop.3733, [])
// [KnfOpt]     } else {
// [KnfOpt]       let _2463: Unit = Unit
// [KnfOpt]       let _2559: Int = Int(0)
// [KnfOpt]       let _2560: Int = Int(0)
// [KnfOpt]       let _2561: Int = Get check_sum.2361[_2560]
// [KnfOpt]       let _2562: Int = Int(0)
// [KnfOpt]       let _2563: Int = Get flips.2355[_2562]
// [KnfOpt]       let _2564: Int = Int(1)
// [KnfOpt]       let _2565: Int = Int(0)
// [KnfOpt]       let _2566: Int = Get nperm.2364[_2565]
// [KnfOpt]       let _2567: Int = Int(0)
// [KnfOpt]       let _2568: Int = Get nperm.2364[_2567]
// [KnfOpt]       let _2569: Int = Int(2)
// [KnfOpt]       let _2570: Int = Div(_2568, _2569)
// [KnfOpt]       let _2571: Int = Int(2)
// [KnfOpt]       let _2572: Int = Mul(_2570, _2571)
// [KnfOpt]       let _2573: Int = Sub(_2566, _2572)
// [KnfOpt]       let _2574: Int = Int(2)
// [KnfOpt]       let _2575: Int = Mul(_2573, _2574)
// [KnfOpt]       let _2576: Int = Sub(_2564, _2575)
// [KnfOpt]       let _2577: Int = Mul(_2563, _2576)
// [KnfOpt]       let _2578: Int = Add(_2561, _2577)
// [KnfOpt]       let _2579: Unit = Put check_sum.2361[_2559] = _2578
// [KnfOpt]       let _2580: Int = Int(1)
// [KnfOpt]       let _2581: Bool = Bool(true)
// [KnfOpt]       let go.2582: Array(Bool) = ExtApply(minimbt_create_array, [_2580, _2581, ])
// [KnfOpt]       let _2583: Int = Int(1)
// [KnfOpt]       let _2584: Int = Int(0)
// [KnfOpt]       let t.2585: Array(Int) = ExtApply(minimbt_create_array, [_2583, _2584, ])
// [KnfOpt]       let rec go_loop.2586: Unit = () {
// [KnfOpt]         let join go_loop.2587: Unit = () {
// [KnfOpt]           let _2588: Int = Int(0)
// [KnfOpt]           let _2589: Bool = Get go.2582[_2588]
// [KnfOpt]           let _2590: Bool = Bool(true)
// [KnfOpt]           if (_2589 == _2590) then {
// [KnfOpt]             let _2591: Int = Int(0)
// [KnfOpt]             let _2592: Int = Get r.2370[_2591]
// [KnfOpt]             if (_2592 == _224) then {
// [KnfOpt]               let _2594: Int = Int(0)
// [KnfOpt]               let _2595: Bool = Bool(false)
// [KnfOpt]               let _2596: Unit = Put go.2582[_2594] = _2595
// [KnfOpt]               let _2597: Int = Int(0)
// [KnfOpt]               let _2598: Int = Int(0)
// [KnfOpt]               let _2599: Unit = Put r.2370[_2597] = _2598
// [KnfOpt]               let _2593: Unit = Unit
// [KnfOpt]               Jump(go_loop.2587, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _2600: Int = Int(0)
// [KnfOpt]               let _2601: Int = Int(0)
// [KnfOpt]               let _2602: Int = Get perm1.2348[_2601]
// [KnfOpt]               let _2603: Unit = Put t.2585[_2600] = _2602
// [KnfOpt]               let rec move_perm1_forward.2604: Unit = (i.2605: Int) {
// [KnfOpt]                 let _2606: Int = Int(0)
// [KnfOpt]                 let _2607: Int = Get r.2370[_2606]
// [KnfOpt]                 let _2608: Int = Int(1)
// [KnfOpt]                 let _2609: Int = Sub(_2607, _2608)
// [KnfOpt]                 if (i.2605 <= _2609) then {
// [KnfOpt]                   let _2610: Int = Int(1)
// [KnfOpt]                   let _2611: Int = Add(i.2605, _2610)
// [KnfOpt]                   let _2612: Int = Get perm1.2348[_2611]
// [KnfOpt]                   let _2613: Unit = Put perm1.2348[i.2605] = _2612
// [KnfOpt]                   let _2614: Int = Int(1)
// [KnfOpt]                   let _2615: Int = Add(i.2605, _2614)
// [KnfOpt]                   let _2616: Unit = Apply(move_perm1_forward.2604, [_2615, ])
// [KnfOpt]                   Unit
// [KnfOpt]                 } else {
// [KnfOpt]                   Unit
// [KnfOpt]                 }
// [KnfOpt]               }
// [KnfOpt]               let _2617: Int = Int(0)
// [KnfOpt]               let _2618: Unit = Apply(move_perm1_forward.2604, [_2617, ])
// [KnfOpt]               let _2619: Int = Int(0)
// [KnfOpt]               let _2620: Int = Get r.2370[_2619]
// [KnfOpt]               let _2621: Int = Int(0)
// [KnfOpt]               let _2622: Int = Get t.2585[_2621]
// [KnfOpt]               let _2623: Unit = Put perm1.2348[_2620] = _2622
// [KnfOpt]               let _2624: Int = Int(0)
// [KnfOpt]               let _2625: Int = Get r.2370[_2624]
// [KnfOpt]               let _2626: Int = Int(0)
// [KnfOpt]               let _2627: Int = Get r.2370[_2626]
// [KnfOpt]               let _2628: Int = Get count.2352[_2627]
// [KnfOpt]               let _2629: Int = Int(1)
// [KnfOpt]               let _2630: Int = Sub(_2628, _2629)
// [KnfOpt]               let _2631: Unit = Put count.2352[_2625] = _2630
// [KnfOpt]               let _2632: Int = Int(1)
// [KnfOpt]               let _2633: Int = Int(0)
// [KnfOpt]               let _2634: Int = Get r.2370[_2633]
// [KnfOpt]               let _2635: Int = Get count.2352[_2634]
// [KnfOpt]               if (_2632 <= _2635) then {
// [KnfOpt]                 let _2637: Int = Int(0)
// [KnfOpt]                 let _2638: Bool = Bool(false)
// [KnfOpt]                 let _2636: Unit = Put go.2582[_2637] = _2638
// [KnfOpt]                 let _2593: Unit = Unit
// [KnfOpt]                 Jump(go_loop.2587, [])
// [KnfOpt]               } else {
// [KnfOpt]                 let _2639: Int = Int(0)
// [KnfOpt]                 let _2640: Int = Int(0)
// [KnfOpt]                 let _2641: Int = Get r.2370[_2640]
// [KnfOpt]                 let _2642: Int = Int(1)
// [KnfOpt]                 let _2643: Int = Add(_2641, _2642)
// [KnfOpt]                 let _2636: Unit = Put r.2370[_2639] = _2643
// [KnfOpt]                 let _2593: Unit = Unit
// [KnfOpt]                 Jump(go_loop.2587, [])
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         Jump(go_loop.2587, [])
// [KnfOpt]       }
// [KnfOpt]       let join go_loop.3793: Unit = () {
// [KnfOpt]         let _3794: Int = Int(0)
// [KnfOpt]         let _3795: Bool = Get go.2582[_3794]
// [KnfOpt]         let _3796: Bool = Bool(true)
// [KnfOpt]         if (_3795 == _3796) then {
// [KnfOpt]           let _3797: Int = Int(0)
// [KnfOpt]           let _3798: Int = Get r.2370[_3797]
// [KnfOpt]           if (_3798 == _224) then {
// [KnfOpt]             let _3799: Int = Int(0)
// [KnfOpt]             let _3800: Bool = Bool(false)
// [KnfOpt]             let _3801: Unit = Put go.2582[_3799] = _3800
// [KnfOpt]             let _3802: Int = Int(0)
// [KnfOpt]             let _3803: Int = Int(0)
// [KnfOpt]             let _3804: Unit = Put r.2370[_3802] = _3803
// [KnfOpt]             let _3805: Unit = Unit
// [KnfOpt]             Jump(go_loop.3793, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _3806: Int = Int(0)
// [KnfOpt]             let _3807: Int = Int(0)
// [KnfOpt]             let _3808: Int = Get perm1.2348[_3807]
// [KnfOpt]             let _3809: Unit = Put t.2585[_3806] = _3808
// [KnfOpt]             let rec move_perm1_forward.3810: Unit = (i.3811: Int) {
// [KnfOpt]               let _3812: Int = Int(0)
// [KnfOpt]               let _3813: Int = Get r.2370[_3812]
// [KnfOpt]               let _3814: Int = Int(1)
// [KnfOpt]               let _3815: Int = Sub(_3813, _3814)
// [KnfOpt]               if (i.3811 <= _3815) then {
// [KnfOpt]                 let _3816: Int = Int(1)
// [KnfOpt]                 let _3817: Int = Add(i.3811, _3816)
// [KnfOpt]                 let _3818: Int = Get perm1.2348[_3817]
// [KnfOpt]                 let _3819: Unit = Put perm1.2348[i.3811] = _3818
// [KnfOpt]                 let _3820: Int = Int(1)
// [KnfOpt]                 let _3821: Int = Add(i.3811, _3820)
// [KnfOpt]                 let _3822: Unit = Apply(move_perm1_forward.3810, [_3821, ])
// [KnfOpt]                 Unit
// [KnfOpt]               } else {
// [KnfOpt]                 Unit
// [KnfOpt]               }
// [KnfOpt]             }
// [KnfOpt]             let _3823: Int = Int(0)
// [KnfOpt]             let _3824: Unit = Apply(move_perm1_forward.3810, [_3823, ])
// [KnfOpt]             let _3825: Int = Int(0)
// [KnfOpt]             let _3826: Int = Get r.2370[_3825]
// [KnfOpt]             let _3827: Int = Int(0)
// [KnfOpt]             let _3828: Int = Get t.2585[_3827]
// [KnfOpt]             let _3829: Unit = Put perm1.2348[_3826] = _3828
// [KnfOpt]             let _3830: Int = Int(0)
// [KnfOpt]             let _3831: Int = Get r.2370[_3830]
// [KnfOpt]             let _3832: Int = Int(0)
// [KnfOpt]             let _3833: Int = Get r.2370[_3832]
// [KnfOpt]             let _3834: Int = Get count.2352[_3833]
// [KnfOpt]             let _3835: Int = Int(1)
// [KnfOpt]             let _3836: Int = Sub(_3834, _3835)
// [KnfOpt]             let _3837: Unit = Put count.2352[_3831] = _3836
// [KnfOpt]             let _3838: Int = Int(1)
// [KnfOpt]             let _3839: Int = Int(0)
// [KnfOpt]             let _3840: Int = Get r.2370[_3839]
// [KnfOpt]             let _3841: Int = Get count.2352[_3840]
// [KnfOpt]             if (_3838 <= _3841) then {
// [KnfOpt]               let _3842: Int = Int(0)
// [KnfOpt]               let _3843: Bool = Bool(false)
// [KnfOpt]               let _3844: Unit = Put go.2582[_3842] = _3843
// [KnfOpt]               let _3845: Unit = Unit
// [KnfOpt]               Jump(go_loop.3793, [])
// [KnfOpt]             } else {
// [KnfOpt]               let _3846: Int = Int(0)
// [KnfOpt]               let _3847: Int = Int(0)
// [KnfOpt]               let _3848: Int = Get r.2370[_3847]
// [KnfOpt]               let _3849: Int = Int(1)
// [KnfOpt]               let _3850: Int = Add(_3848, _3849)
// [KnfOpt]               let _3851: Unit = Put r.2370[_3846] = _3850
// [KnfOpt]               let _3852: Unit = Unit
// [KnfOpt]               Jump(go_loop.3793, [])
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]         } else {
// [KnfOpt]           let _2644: Unit = Unit
// [KnfOpt]           let _2645: Int = Int(0)
// [KnfOpt]           let _2646: Int = Int(0)
// [KnfOpt]           let _2647: Int = Get nperm.2364[_2646]
// [KnfOpt]           let _2648: Int = Int(1)
// [KnfOpt]           let _2649: Int = Add(_2647, _2648)
// [KnfOpt]           let _2650: Unit = Put nperm.2364[_2645] = _2649
// [KnfOpt]           Jump(compute.2369, [r.2370, ])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(go_loop.3793, [])
// [KnfOpt]     }
// [KnfOpt]   } else {
// [KnfOpt]     let _3853: Int = Int(1)
// [KnfOpt]     let _3854: Int = Int(0)
// [KnfOpt]     let t.3855: Array(Int) = ExtApply(minimbt_create_array, [_3853, _3854, ])
// [KnfOpt]     let rec flip_loop.3856: Unit = (i.3857: Int) {
// [KnfOpt]       let join flip_loop.3858: Unit = (i.3859: Int) {
// [KnfOpt]         let _3860: Int = Int(0)
// [KnfOpt]         let _3861: Int = Get k.3729[_3860]
// [KnfOpt]         let _3862: Int = Int(2)
// [KnfOpt]         let _3863: Int = Div(_3861, _3862)
// [KnfOpt]         if (i.3859 <= _3863) then {
// [KnfOpt]           let _3864: Int = Int(0)
// [KnfOpt]           let _3865: Int = Get perm.2350[i.3859]
// [KnfOpt]           let _3866: Unit = Put t.3855[_3864] = _3865
// [KnfOpt]           let _3867: Int = Int(0)
// [KnfOpt]           let _3868: Int = Get k.3729[_3867]
// [KnfOpt]           let _3869: Int = Sub(_3868, i.3859)
// [KnfOpt]           let _3870: Int = Get perm.2350[_3869]
// [KnfOpt]           let _3871: Unit = Put perm.2350[i.3859] = _3870
// [KnfOpt]           let _3872: Int = Int(0)
// [KnfOpt]           let _3873: Int = Get k.3729[_3872]
// [KnfOpt]           let _3874: Int = Sub(_3873, i.3859)
// [KnfOpt]           let _3875: Int = Int(0)
// [KnfOpt]           let _3876: Int = Get t.3855[_3875]
// [KnfOpt]           let _3877: Unit = Put perm.2350[_3874] = _3876
// [KnfOpt]           let _3878: Int = Int(1)
// [KnfOpt]           let _3879: Int = Add(i.3859, _3878)
// [KnfOpt]           Jump(flip_loop.3858, [_3879, ])
// [KnfOpt]         } else {
// [KnfOpt]           Unit
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(flip_loop.3858, [i.3857, ])
// [KnfOpt]     }
// [KnfOpt]     let _3880: Int = Int(0)
// [KnfOpt]     let _3881: Unit = Apply(flip_loop.3856, [_3880, ])
// [KnfOpt]     let _3882: Int = Int(0)
// [KnfOpt]     let _3883: Int = Int(0)
// [KnfOpt]     let _3884: Int = Get perm.2350[_3883]
// [KnfOpt]     let _3885: Unit = Put k.3729[_3882] = _3884
// [KnfOpt]     let _3886: Int = Int(0)
// [KnfOpt]     let _3887: Int = Int(0)
// [KnfOpt]     let _3888: Int = Get flips.2355[_3887]
// [KnfOpt]     let _3889: Int = Int(1)
// [KnfOpt]     let _3890: Int = Add(_3888, _3889)
// [KnfOpt]     let _3891: Unit = Put flips.2355[_3886] = _3890
// [KnfOpt]     Jump(do_flip.3728, [k.3729, ])
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Jump(do_flip.3728, [k.2411, ])
// [KnfOpt] Inline threshold 2 39
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_count.2386 rejected
// [KnfOpt] Inline threshold 2 39
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_count.2386 rejected
// [KnfOpt] Knf inline Some(flip_loop) let _2447: Unit = Unit
// [KnfOpt] let _2448: Int = Int(0)
// [KnfOpt] let _2449: Int = Int(0)
// [KnfOpt] let _2450: Int = Get perm.2350[_2449]
// [KnfOpt] let _2451: Unit = Put k.2415[_2448] = _2450
// [KnfOpt] let _2452: Int = Int(0)
// [KnfOpt] let _2453: Int = Int(0)
// [KnfOpt] let _2454: Int = Get flips.2355[_2453]
// [KnfOpt] let _2455: Int = Int(1)
// [KnfOpt] let _2456: Int = Add(_2454, _2455)
// [KnfOpt] let _2457: Unit = Put flips.2355[_2452] = _2456
// [KnfOpt] Jump(do_flip.2414, [k.2415, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2512 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2512 rejected
// [KnfOpt] Knf inline Some(go_loop) let _2552: Unit = Unit
// [KnfOpt] let _2553: Int = Int(0)
// [KnfOpt] let _2554: Int = Int(0)
// [KnfOpt] let _2555: Int = Get nperm.2364[_2554]
// [KnfOpt] let _2556: Int = Int(1)
// [KnfOpt] let _2557: Int = Add(_2555, _2556)
// [KnfOpt] let _2558: Unit = Put nperm.2364[_2553] = _2557
// [KnfOpt] Jump(compute.2369, [r.2370, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2604 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2604 rejected
// [KnfOpt] Knf inline Some(go_loop) let _2644: Unit = Unit
// [KnfOpt] let _2645: Int = Int(0)
// [KnfOpt] let _2646: Int = Int(0)
// [KnfOpt] let _2647: Int = Get nperm.2364[_2646]
// [KnfOpt] let _2648: Int = Int(1)
// [KnfOpt] let _2649: Int = Add(_2647, _2648)
// [KnfOpt] let _2650: Unit = Put nperm.2364[_2645] = _2649
// [KnfOpt] Jump(compute.2369, [r.2370, ])
// [KnfOpt] Knf inline Some(do_flip) let _2458: Unit = Unit
// [KnfOpt] let _2459: Int = Int(0)
// [KnfOpt] let _2460: Int = Get max_flips.2358[_2459]
// [KnfOpt] let _2461: Int = Int(0)
// [KnfOpt] let _2462: Int = Get flips.2355[_2461]
// [KnfOpt] if (_2460 <= _2462) then {
// [KnfOpt]   let _2464: Int = Int(0)
// [KnfOpt]   let _2465: Int = Int(0)
// [KnfOpt]   let _2466: Int = Get flips.2355[_2465]
// [KnfOpt]   let _2463: Unit = Put max_flips.2358[_2464] = _2466
// [KnfOpt]   let _2467: Int = Int(0)
// [KnfOpt]   let _2468: Int = Int(0)
// [KnfOpt]   let _2469: Int = Get check_sum.2361[_2468]
// [KnfOpt]   let _2470: Int = Int(0)
// [KnfOpt]   let _2471: Int = Get flips.2355[_2470]
// [KnfOpt]   let _2472: Int = Int(1)
// [KnfOpt]   let _2473: Int = Int(0)
// [KnfOpt]   let _2474: Int = Get nperm.2364[_2473]
// [KnfOpt]   let _2475: Int = Int(0)
// [KnfOpt]   let _2476: Int = Get nperm.2364[_2475]
// [KnfOpt]   let _2477: Int = Int(2)
// [KnfOpt]   let _2478: Int = Div(_2476, _2477)
// [KnfOpt]   let _2479: Int = Int(2)
// [KnfOpt]   let _2480: Int = Mul(_2478, _2479)
// [KnfOpt]   let _2481: Int = Sub(_2474, _2480)
// [KnfOpt]   let _2482: Int = Int(2)
// [KnfOpt]   let _2483: Int = Mul(_2481, _2482)
// [KnfOpt]   let _2484: Int = Sub(_2472, _2483)
// [KnfOpt]   let _2485: Int = Mul(_2471, _2484)
// [KnfOpt]   let _2486: Int = Add(_2469, _2485)
// [KnfOpt]   let _2487: Unit = Put check_sum.2361[_2467] = _2486
// [KnfOpt]   let _2488: Int = Int(1)
// [KnfOpt]   let _2489: Bool = Bool(true)
// [KnfOpt]   let go.2490: Array(Bool) = ExtApply(minimbt_create_array, [_2488, _2489, ])
// [KnfOpt]   let _2491: Int = Int(1)
// [KnfOpt]   let _2492: Int = Int(0)
// [KnfOpt]   let t.2493: Array(Int) = ExtApply(minimbt_create_array, [_2491, _2492, ])
// [KnfOpt]   let rec go_loop.2494: Unit = () {
// [KnfOpt]     let join go_loop.2495: Unit = () {
// [KnfOpt]       let _2496: Int = Int(0)
// [KnfOpt]       let _2497: Bool = Get go.2490[_2496]
// [KnfOpt]       let _2498: Bool = Bool(true)
// [KnfOpt]       if (_2497 == _2498) then {
// [KnfOpt]         let _2499: Int = Int(0)
// [KnfOpt]         let _2500: Int = Get r.2370[_2499]
// [KnfOpt]         if (_2500 == _224) then {
// [KnfOpt]           let _2502: Int = Int(0)
// [KnfOpt]           let _2503: Bool = Bool(false)
// [KnfOpt]           let _2504: Unit = Put go.2490[_2502] = _2503
// [KnfOpt]           let _2505: Int = Int(0)
// [KnfOpt]           let _2506: Int = Int(0)
// [KnfOpt]           let _2507: Unit = Put r.2370[_2505] = _2506
// [KnfOpt]           let _2501: Unit = Unit
// [KnfOpt]           Jump(go_loop.2495, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _2508: Int = Int(0)
// [KnfOpt]           let _2509: Int = Int(0)
// [KnfOpt]           let _2510: Int = Get perm1.2348[_2509]
// [KnfOpt]           let _2511: Unit = Put t.2493[_2508] = _2510
// [KnfOpt]           let rec move_perm1_forward.2512: Unit = (i.2513: Int) {
// [KnfOpt]             let _2514: Int = Int(0)
// [KnfOpt]             let _2515: Int = Get r.2370[_2514]
// [KnfOpt]             let _2516: Int = Int(1)
// [KnfOpt]             let _2517: Int = Sub(_2515, _2516)
// [KnfOpt]             if (i.2513 <= _2517) then {
// [KnfOpt]               let _2518: Int = Int(1)
// [KnfOpt]               let _2519: Int = Add(i.2513, _2518)
// [KnfOpt]               let _2520: Int = Get perm1.2348[_2519]
// [KnfOpt]               let _2521: Unit = Put perm1.2348[i.2513] = _2520
// [KnfOpt]               let _2522: Int = Int(1)
// [KnfOpt]               let _2523: Int = Add(i.2513, _2522)
// [KnfOpt]               let _2524: Unit = Apply(move_perm1_forward.2512, [_2523, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _2525: Int = Int(0)
// [KnfOpt]           let _2526: Unit = Apply(move_perm1_forward.2512, [_2525, ])
// [KnfOpt]           let _2527: Int = Int(0)
// [KnfOpt]           let _2528: Int = Get r.2370[_2527]
// [KnfOpt]           let _2529: Int = Int(0)
// [KnfOpt]           let _2530: Int = Get t.2493[_2529]
// [KnfOpt]           let _2531: Unit = Put perm1.2348[_2528] = _2530
// [KnfOpt]           let _2532: Int = Int(0)
// [KnfOpt]           let _2533: Int = Get r.2370[_2532]
// [KnfOpt]           let _2534: Int = Int(0)
// [KnfOpt]           let _2535: Int = Get r.2370[_2534]
// [KnfOpt]           let _2536: Int = Get count.2352[_2535]
// [KnfOpt]           let _2537: Int = Int(1)
// [KnfOpt]           let _2538: Int = Sub(_2536, _2537)
// [KnfOpt]           let _2539: Unit = Put count.2352[_2533] = _2538
// [KnfOpt]           let _2540: Int = Int(1)
// [KnfOpt]           let _2541: Int = Int(0)
// [KnfOpt]           let _2542: Int = Get r.2370[_2541]
// [KnfOpt]           let _2543: Int = Get count.2352[_2542]
// [KnfOpt]           if (_2540 <= _2543) then {
// [KnfOpt]             let _2545: Int = Int(0)
// [KnfOpt]             let _2546: Bool = Bool(false)
// [KnfOpt]             let _2544: Unit = Put go.2490[_2545] = _2546
// [KnfOpt]             let _2501: Unit = Unit
// [KnfOpt]             Jump(go_loop.2495, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _2547: Int = Int(0)
// [KnfOpt]             let _2548: Int = Int(0)
// [KnfOpt]             let _2549: Int = Get r.2370[_2548]
// [KnfOpt]             let _2550: Int = Int(1)
// [KnfOpt]             let _2551: Int = Add(_2549, _2550)
// [KnfOpt]             let _2544: Unit = Put r.2370[_2547] = _2551
// [KnfOpt]             let _2501: Unit = Unit
// [KnfOpt]             Jump(go_loop.2495, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.2495, [])
// [KnfOpt]   }
// [KnfOpt]   let join go_loop.3922: Unit = () {
// [KnfOpt]     let _3923: Int = Int(0)
// [KnfOpt]     let _3924: Bool = Get go.2490[_3923]
// [KnfOpt]     let _3925: Bool = Bool(true)
// [KnfOpt]     if (_3924 == _3925) then {
// [KnfOpt]       let _3926: Int = Int(0)
// [KnfOpt]       let _3927: Int = Get r.2370[_3926]
// [KnfOpt]       if (_3927 == _224) then {
// [KnfOpt]         let _3928: Int = Int(0)
// [KnfOpt]         let _3929: Bool = Bool(false)
// [KnfOpt]         let _3930: Unit = Put go.2490[_3928] = _3929
// [KnfOpt]         let _3931: Int = Int(0)
// [KnfOpt]         let _3932: Int = Int(0)
// [KnfOpt]         let _3933: Unit = Put r.2370[_3931] = _3932
// [KnfOpt]         let _3934: Unit = Unit
// [KnfOpt]         Jump(go_loop.3922, [])
// [KnfOpt]       } else {
// [KnfOpt]         let _3935: Int = Int(0)
// [KnfOpt]         let _3936: Int = Int(0)
// [KnfOpt]         let _3937: Int = Get perm1.2348[_3936]
// [KnfOpt]         let _3938: Unit = Put t.2493[_3935] = _3937
// [KnfOpt]         let rec move_perm1_forward.3939: Unit = (i.3940: Int) {
// [KnfOpt]           let _3941: Int = Int(0)
// [KnfOpt]           let _3942: Int = Get r.2370[_3941]
// [KnfOpt]           let _3943: Int = Int(1)
// [KnfOpt]           let _3944: Int = Sub(_3942, _3943)
// [KnfOpt]           if (i.3940 <= _3944) then {
// [KnfOpt]             let _3945: Int = Int(1)
// [KnfOpt]             let _3946: Int = Add(i.3940, _3945)
// [KnfOpt]             let _3947: Int = Get perm1.2348[_3946]
// [KnfOpt]             let _3948: Unit = Put perm1.2348[i.3940] = _3947
// [KnfOpt]             let _3949: Int = Int(1)
// [KnfOpt]             let _3950: Int = Add(i.3940, _3949)
// [KnfOpt]             let _3951: Unit = Apply(move_perm1_forward.3939, [_3950, ])
// [KnfOpt]             Unit
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         let _3952: Int = Int(0)
// [KnfOpt]         let _3953: Unit = Apply(move_perm1_forward.3939, [_3952, ])
// [KnfOpt]         let _3954: Int = Int(0)
// [KnfOpt]         let _3955: Int = Get r.2370[_3954]
// [KnfOpt]         let _3956: Int = Int(0)
// [KnfOpt]         let _3957: Int = Get t.2493[_3956]
// [KnfOpt]         let _3958: Unit = Put perm1.2348[_3955] = _3957
// [KnfOpt]         let _3959: Int = Int(0)
// [KnfOpt]         let _3960: Int = Get r.2370[_3959]
// [KnfOpt]         let _3961: Int = Int(0)
// [KnfOpt]         let _3962: Int = Get r.2370[_3961]
// [KnfOpt]         let _3963: Int = Get count.2352[_3962]
// [KnfOpt]         let _3964: Int = Int(1)
// [KnfOpt]         let _3965: Int = Sub(_3963, _3964)
// [KnfOpt]         let _3966: Unit = Put count.2352[_3960] = _3965
// [KnfOpt]         let _3967: Int = Int(1)
// [KnfOpt]         let _3968: Int = Int(0)
// [KnfOpt]         let _3969: Int = Get r.2370[_3968]
// [KnfOpt]         let _3970: Int = Get count.2352[_3969]
// [KnfOpt]         if (_3967 <= _3970) then {
// [KnfOpt]           let _3971: Int = Int(0)
// [KnfOpt]           let _3972: Bool = Bool(false)
// [KnfOpt]           let _3973: Unit = Put go.2490[_3971] = _3972
// [KnfOpt]           let _3974: Unit = Unit
// [KnfOpt]           Jump(go_loop.3922, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _3975: Int = Int(0)
// [KnfOpt]           let _3976: Int = Int(0)
// [KnfOpt]           let _3977: Int = Get r.2370[_3976]
// [KnfOpt]           let _3978: Int = Int(1)
// [KnfOpt]           let _3979: Int = Add(_3977, _3978)
// [KnfOpt]           let _3980: Unit = Put r.2370[_3975] = _3979
// [KnfOpt]           let _3981: Unit = Unit
// [KnfOpt]           Jump(go_loop.3922, [])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]     } else {
// [KnfOpt]       let _2552: Unit = Unit
// [KnfOpt]       let _2553: Int = Int(0)
// [KnfOpt]       let _2554: Int = Int(0)
// [KnfOpt]       let _2555: Int = Get nperm.2364[_2554]
// [KnfOpt]       let _2556: Int = Int(1)
// [KnfOpt]       let _2557: Int = Add(_2555, _2556)
// [KnfOpt]       let _2558: Unit = Put nperm.2364[_2553] = _2557
// [KnfOpt]       Jump(compute.2369, [r.2370, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(go_loop.3922, [])
// [KnfOpt] } else {
// [KnfOpt]   let _2463: Unit = Unit
// [KnfOpt]   let _2559: Int = Int(0)
// [KnfOpt]   let _2560: Int = Int(0)
// [KnfOpt]   let _2561: Int = Get check_sum.2361[_2560]
// [KnfOpt]   let _2562: Int = Int(0)
// [KnfOpt]   let _2563: Int = Get flips.2355[_2562]
// [KnfOpt]   let _2564: Int = Int(1)
// [KnfOpt]   let _2565: Int = Int(0)
// [KnfOpt]   let _2566: Int = Get nperm.2364[_2565]
// [KnfOpt]   let _2567: Int = Int(0)
// [KnfOpt]   let _2568: Int = Get nperm.2364[_2567]
// [KnfOpt]   let _2569: Int = Int(2)
// [KnfOpt]   let _2570: Int = Div(_2568, _2569)
// [KnfOpt]   let _2571: Int = Int(2)
// [KnfOpt]   let _2572: Int = Mul(_2570, _2571)
// [KnfOpt]   let _2573: Int = Sub(_2566, _2572)
// [KnfOpt]   let _2574: Int = Int(2)
// [KnfOpt]   let _2575: Int = Mul(_2573, _2574)
// [KnfOpt]   let _2576: Int = Sub(_2564, _2575)
// [KnfOpt]   let _2577: Int = Mul(_2563, _2576)
// [KnfOpt]   let _2578: Int = Add(_2561, _2577)
// [KnfOpt]   let _2579: Unit = Put check_sum.2361[_2559] = _2578
// [KnfOpt]   let _2580: Int = Int(1)
// [KnfOpt]   let _2581: Bool = Bool(true)
// [KnfOpt]   let go.2582: Array(Bool) = ExtApply(minimbt_create_array, [_2580, _2581, ])
// [KnfOpt]   let _2583: Int = Int(1)
// [KnfOpt]   let _2584: Int = Int(0)
// [KnfOpt]   let t.2585: Array(Int) = ExtApply(minimbt_create_array, [_2583, _2584, ])
// [KnfOpt]   let rec go_loop.2586: Unit = () {
// [KnfOpt]     let join go_loop.2587: Unit = () {
// [KnfOpt]       let _2588: Int = Int(0)
// [KnfOpt]       let _2589: Bool = Get go.2582[_2588]
// [KnfOpt]       let _2590: Bool = Bool(true)
// [KnfOpt]       if (_2589 == _2590) then {
// [KnfOpt]         let _2591: Int = Int(0)
// [KnfOpt]         let _2592: Int = Get r.2370[_2591]
// [KnfOpt]         if (_2592 == _224) then {
// [KnfOpt]           let _2594: Int = Int(0)
// [KnfOpt]           let _2595: Bool = Bool(false)
// [KnfOpt]           let _2596: Unit = Put go.2582[_2594] = _2595
// [KnfOpt]           let _2597: Int = Int(0)
// [KnfOpt]           let _2598: Int = Int(0)
// [KnfOpt]           let _2599: Unit = Put r.2370[_2597] = _2598
// [KnfOpt]           let _2593: Unit = Unit
// [KnfOpt]           Jump(go_loop.2587, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _2600: Int = Int(0)
// [KnfOpt]           let _2601: Int = Int(0)
// [KnfOpt]           let _2602: Int = Get perm1.2348[_2601]
// [KnfOpt]           let _2603: Unit = Put t.2585[_2600] = _2602
// [KnfOpt]           let rec move_perm1_forward.2604: Unit = (i.2605: Int) {
// [KnfOpt]             let _2606: Int = Int(0)
// [KnfOpt]             let _2607: Int = Get r.2370[_2606]
// [KnfOpt]             let _2608: Int = Int(1)
// [KnfOpt]             let _2609: Int = Sub(_2607, _2608)
// [KnfOpt]             if (i.2605 <= _2609) then {
// [KnfOpt]               let _2610: Int = Int(1)
// [KnfOpt]               let _2611: Int = Add(i.2605, _2610)
// [KnfOpt]               let _2612: Int = Get perm1.2348[_2611]
// [KnfOpt]               let _2613: Unit = Put perm1.2348[i.2605] = _2612
// [KnfOpt]               let _2614: Int = Int(1)
// [KnfOpt]               let _2615: Int = Add(i.2605, _2614)
// [KnfOpt]               let _2616: Unit = Apply(move_perm1_forward.2604, [_2615, ])
// [KnfOpt]               Unit
// [KnfOpt]             } else {
// [KnfOpt]               Unit
// [KnfOpt]             }
// [KnfOpt]           }
// [KnfOpt]           let _2617: Int = Int(0)
// [KnfOpt]           let _2618: Unit = Apply(move_perm1_forward.2604, [_2617, ])
// [KnfOpt]           let _2619: Int = Int(0)
// [KnfOpt]           let _2620: Int = Get r.2370[_2619]
// [KnfOpt]           let _2621: Int = Int(0)
// [KnfOpt]           let _2622: Int = Get t.2585[_2621]
// [KnfOpt]           let _2623: Unit = Put perm1.2348[_2620] = _2622
// [KnfOpt]           let _2624: Int = Int(0)
// [KnfOpt]           let _2625: Int = Get r.2370[_2624]
// [KnfOpt]           let _2626: Int = Int(0)
// [KnfOpt]           let _2627: Int = Get r.2370[_2626]
// [KnfOpt]           let _2628: Int = Get count.2352[_2627]
// [KnfOpt]           let _2629: Int = Int(1)
// [KnfOpt]           let _2630: Int = Sub(_2628, _2629)
// [KnfOpt]           let _2631: Unit = Put count.2352[_2625] = _2630
// [KnfOpt]           let _2632: Int = Int(1)
// [KnfOpt]           let _2633: Int = Int(0)
// [KnfOpt]           let _2634: Int = Get r.2370[_2633]
// [KnfOpt]           let _2635: Int = Get count.2352[_2634]
// [KnfOpt]           if (_2632 <= _2635) then {
// [KnfOpt]             let _2637: Int = Int(0)
// [KnfOpt]             let _2638: Bool = Bool(false)
// [KnfOpt]             let _2636: Unit = Put go.2582[_2637] = _2638
// [KnfOpt]             let _2593: Unit = Unit
// [KnfOpt]             Jump(go_loop.2587, [])
// [KnfOpt]           } else {
// [KnfOpt]             let _2639: Int = Int(0)
// [KnfOpt]             let _2640: Int = Int(0)
// [KnfOpt]             let _2641: Int = Get r.2370[_2640]
// [KnfOpt]             let _2642: Int = Int(1)
// [KnfOpt]             let _2643: Int = Add(_2641, _2642)
// [KnfOpt]             let _2636: Unit = Put r.2370[_2639] = _2643
// [KnfOpt]             let _2593: Unit = Unit
// [KnfOpt]             Jump(go_loop.2587, [])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       } else {
// [KnfOpt]         Unit
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(go_loop.2587, [])
// [KnfOpt]   }
// [KnfOpt]   let join go_loop.3982: Unit = () {
// [KnfOpt]     let _3983: Int = Int(0)
// [KnfOpt]     let _3984: Bool = Get go.2582[_3983]
// [KnfOpt]     let _3985: Bool = Bool(true)
// [KnfOpt]     if (_3984 == _3985) then {
// [KnfOpt]       let _3986: Int = Int(0)
// [KnfOpt]       let _3987: Int = Get r.2370[_3986]
// [KnfOpt]       if (_3987 == _224) then {
// [KnfOpt]         let _3988: Int = Int(0)
// [KnfOpt]         let _3989: Bool = Bool(false)
// [KnfOpt]         let _3990: Unit = Put go.2582[_3988] = _3989
// [KnfOpt]         let _3991: Int = Int(0)
// [KnfOpt]         let _3992: Int = Int(0)
// [KnfOpt]         let _3993: Unit = Put r.2370[_3991] = _3992
// [KnfOpt]         let _3994: Unit = Unit
// [KnfOpt]         Jump(go_loop.3982, [])
// [KnfOpt]       } else {
// [KnfOpt]         let _3995: Int = Int(0)
// [KnfOpt]         let _3996: Int = Int(0)
// [KnfOpt]         let _3997: Int = Get perm1.2348[_3996]
// [KnfOpt]         let _3998: Unit = Put t.2585[_3995] = _3997
// [KnfOpt]         let rec move_perm1_forward.3999: Unit = (i.4000: Int) {
// [KnfOpt]           let _4001: Int = Int(0)
// [KnfOpt]           let _4002: Int = Get r.2370[_4001]
// [KnfOpt]           let _4003: Int = Int(1)
// [KnfOpt]           let _4004: Int = Sub(_4002, _4003)
// [KnfOpt]           if (i.4000 <= _4004) then {
// [KnfOpt]             let _4005: Int = Int(1)
// [KnfOpt]             let _4006: Int = Add(i.4000, _4005)
// [KnfOpt]             let _4007: Int = Get perm1.2348[_4006]
// [KnfOpt]             let _4008: Unit = Put perm1.2348[i.4000] = _4007
// [KnfOpt]             let _4009: Int = Int(1)
// [KnfOpt]             let _4010: Int = Add(i.4000, _4009)
// [KnfOpt]             let _4011: Unit = Apply(move_perm1_forward.3999, [_4010, ])
// [KnfOpt]             Unit
// [KnfOpt]           } else {
// [KnfOpt]             Unit
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]         let _4012: Int = Int(0)
// [KnfOpt]         let _4013: Unit = Apply(move_perm1_forward.3999, [_4012, ])
// [KnfOpt]         let _4014: Int = Int(0)
// [KnfOpt]         let _4015: Int = Get r.2370[_4014]
// [KnfOpt]         let _4016: Int = Int(0)
// [KnfOpt]         let _4017: Int = Get t.2585[_4016]
// [KnfOpt]         let _4018: Unit = Put perm1.2348[_4015] = _4017
// [KnfOpt]         let _4019: Int = Int(0)
// [KnfOpt]         let _4020: Int = Get r.2370[_4019]
// [KnfOpt]         let _4021: Int = Int(0)
// [KnfOpt]         let _4022: Int = Get r.2370[_4021]
// [KnfOpt]         let _4023: Int = Get count.2352[_4022]
// [KnfOpt]         let _4024: Int = Int(1)
// [KnfOpt]         let _4025: Int = Sub(_4023, _4024)
// [KnfOpt]         let _4026: Unit = Put count.2352[_4020] = _4025
// [KnfOpt]         let _4027: Int = Int(1)
// [KnfOpt]         let _4028: Int = Int(0)
// [KnfOpt]         let _4029: Int = Get r.2370[_4028]
// [KnfOpt]         let _4030: Int = Get count.2352[_4029]
// [KnfOpt]         if (_4027 <= _4030) then {
// [KnfOpt]           let _4031: Int = Int(0)
// [KnfOpt]           let _4032: Bool = Bool(false)
// [KnfOpt]           let _4033: Unit = Put go.2582[_4031] = _4032
// [KnfOpt]           let _4034: Unit = Unit
// [KnfOpt]           Jump(go_loop.3982, [])
// [KnfOpt]         } else {
// [KnfOpt]           let _4035: Int = Int(0)
// [KnfOpt]           let _4036: Int = Int(0)
// [KnfOpt]           let _4037: Int = Get r.2370[_4036]
// [KnfOpt]           let _4038: Int = Int(1)
// [KnfOpt]           let _4039: Int = Add(_4037, _4038)
// [KnfOpt]           let _4040: Unit = Put r.2370[_4035] = _4039
// [KnfOpt]           let _4041: Unit = Unit
// [KnfOpt]           Jump(go_loop.3982, [])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]     } else {
// [KnfOpt]       let _2644: Unit = Unit
// [KnfOpt]       let _2645: Int = Int(0)
// [KnfOpt]       let _2646: Int = Int(0)
// [KnfOpt]       let _2647: Int = Get nperm.2364[_2646]
// [KnfOpt]       let _2648: Int = Int(1)
// [KnfOpt]       let _2649: Int = Add(_2647, _2648)
// [KnfOpt]       let _2650: Unit = Put nperm.2364[_2645] = _2649
// [KnfOpt]       Jump(compute.2369, [r.2370, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(go_loop.3982, [])
// [KnfOpt] }
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2512 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2512 rejected
// [KnfOpt] Knf inline Some(go_loop) let _2552: Unit = Unit
// [KnfOpt] let _2553: Int = Int(0)
// [KnfOpt] let _2554: Int = Int(0)
// [KnfOpt] let _2555: Int = Get nperm.2364[_2554]
// [KnfOpt] let _2556: Int = Int(1)
// [KnfOpt] let _2557: Int = Add(_2555, _2556)
// [KnfOpt] let _2558: Unit = Put nperm.2364[_2553] = _2557
// [KnfOpt] Jump(compute.2369, [r.2370, ])
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2604 rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision move_perm1_forward.2604 rejected
// [KnfOpt] Knf inline Some(go_loop) let _2644: Unit = Unit
// [KnfOpt] let _2645: Int = Int(0)
// [KnfOpt] let _2646: Int = Int(0)
// [KnfOpt] let _2647: Int = Get nperm.2364[_2646]
// [KnfOpt] let _2648: Int = Int(1)
// [KnfOpt] let _2649: Int = Add(_2647, _2648)
// [KnfOpt] let _2650: Unit = Put nperm.2364[_2645] = _2649
// [KnfOpt] Jump(compute.2369, [r.2370, ])
// [KnfOpt] Knf inline Some(compute) let _2651: Unit = Unit
// [KnfOpt] let _2652: Int = Int(0)
// [KnfOpt] let _2653: Int = Get max_flips.2358[_2652]
// [KnfOpt] let _2654: Int = Int(0)
// [KnfOpt] let _2655: Int = Get check_sum.2361[_2654]
// [KnfOpt] let _225: Tuple([Int, Int]) = Tuple([_2653, _2655, ])
// [KnfOpt] let (max_flips.226: Var({val: Some(Int)}), check_sum.227: Var({val: Some(Int)})) = _225
// [KnfOpt] let _228: Unit = ExtApply(minimbt_print_int, [check_sum.227, ])
// [KnfOpt] ExtApply(minimbt_print_int, [max_flips.226, ])
// [KnfOpt] Numbers of let rec: 10 10 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f4: Once, f8: Once, f9: Once, f0: Once, f1: Once, f5: Multiple, f2: Multiple, f3: Once, f7: Multiple, f20: Once})
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] do_flip.4500 is inlining Call(ty=Unit, f=f3, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0), Mem(fref=f4, mref=m0), FnParam(fref=f4, fpref=$f.1)])
// [CoreOpt] shifted callee .fn flip_loop.4501 #f3 : fn(int32, array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b9 {
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     jump b10($f0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b10 pre #Some(b9) header #b11 {
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b13
// [CoreOpt]     .block #b14
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 (int32) {
// [CoreOpt]     let %9: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %10: int32 = div(%9, 2)
// [CoreOpt]     let %11: bool = le($b11.0, %10)
// [CoreOpt]     br %11 b12() b13()
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     let %12: int32 = load int32 offset($f3, $b11.0 * @32)
// [CoreOpt]     let _ = store int32 field($f2, 0 * @32) <- %12
// [CoreOpt]     let %14: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %15: int32 = sub(%14, $b11.0)
// [CoreOpt]     let %16: int32 = load int32 offset($f3, %15 * @32)
// [CoreOpt]     let _ = store int32 offset($f3, $b11.0 * @32) <- %16
// [CoreOpt]     let %18: int32 = load int32 field($f1, 0 * @32)
// [CoreOpt]     let %19: int32 = sub(%18, $b11.0)
// [CoreOpt]     let %20: int32 = load int32 field($f2, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($f3, %19 * @32) <- %20
// [CoreOpt]     let %22: int32 = add($b11.0, 1)
// [CoreOpt]     jump b11(%22)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 () {
// [CoreOpt]     jump b14(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 (any) {
// [CoreOpt]     return $b14.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f3
// [CoreOpt] LVN subst Insn(iref=%13) with Insn(iref=%12)
// [CoreOpt] LVN subst Insn(iref=%13) with Insn(iref=%12)
// [CoreOpt] LVN subst Insn(iref=%43) with Insn(iref=%42)
// [CoreOpt] LVN subst Insn(iref=%25) with Insn(iref=%24)
// [CoreOpt] LVN subst Insn(iref=%6) with Insn(iref=%3)
// [CoreOpt] LVN subst Insn(iref=%4) with Insn(iref=%2)
// [CoreOpt] LVN subst Insn(iref=%6) with Insn(iref=%3)
