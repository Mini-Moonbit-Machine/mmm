// [Asm] pre_assigned_registers: FnParam(fref=f6, fpref=$f.1) -> v3, Insn(iref=%3) -> v8, Insn(iref=%7) -> v13, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%2) -> v7, FnParam(fref=f6, fpref=$f.0) -> v2, Insn(iref=%9) -> v11, Insn(iref=%1) -> v6, FnParam(fref=f6, fpref=$f.2) -> v4, Insn(iref=%10) -> v9, Self(fref=f6) -> v0, Insn(iref=%5) -> v12, Insn(iref=%0) -> v5, Insn(iref=%4) -> v10
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f6, fpref=$f.0), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%3), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f6, fpref=$f.0), Insn(iref=%1)])
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v8, v2, v4, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of move_perm1_forward197.511"];
// [Asm]   r0 [label="v8 ← a0", color=green];
// [Asm]   r20 [label="v14 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="v2 ← a3", color=green];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r22 [label="v6 ← a0", color=green];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="v10 ← a4", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r2 [label="v4 ← a2", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v13 ← a0", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r21 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r3 -- r19;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r1 -- r4;
// [Asm]   r6 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r7;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r6 -- r12;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r3 -- r10;
// [Asm]   r0 -- r5;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r6 -- r17;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r14;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r8;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r2 -- r3;
// [Asm]   comment = "0:v8-> 1:v2-> 2:v4-> 3:zero-> 4:v3-> 5:v10-> 21:v5-> 22:v6-> 6:a0-> 7:a1-> 8:a2-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:v13-> 20:v14"
// [Asm]   comment = "v8<-a0;v14<-a0;v3<-a1;v2<-a3;v6<-a0;v10<-a4;v4<-a2;v13<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of move_perm1_forward197.511"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v8, v2, 1 ->   addi a0, a3, 1
// [Asm] subst   th.lurw v10, v4, v8, 2 ->   th.lurw a4, a2, a0, 2
// [Asm] subst   th.surw v10, v4, v2, 2 ->   th.surw a4, a2, a3, 2
// [Asm] subst   call move_perm1_forward197.511 ->   call move_perm1_forward197.511
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   j .move_perm1_forward197.511_3 ->   j .move_perm1_forward197.511_3
// [Asm] subst   mv v2, a0 ->   mv a3, a0
// [Asm] subst   lw v5, 0(v3) ->   lw a0, 0(a1)
// [Asm] subst   addi v6, v5, -1 ->   addi a0, a0, -1
// [Asm] subst   blt v6, v2, .move_perm1_forward197.511_2 ->   blt a0, a3, .move_perm1_forward197.511_2
// [Asm] pre_assigned_registers: FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v13, FnParam(fref=f4, fpref=$f.3) -> v5, Insn(iref=%9) -> v22, Insn(iref=%8) -> v21, Insn(iref=%10) -> v23, BlockParam(bref=b0, bpref=$b.3) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> v8, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%5) -> v17, Insn(iref=%0) -> v10, Insn(iref=%4) -> v16, Insn(iref=%3) -> v15, Insn(iref=%13) -> v27, Insn(iref=%7) -> v20, Insn(iref=%22) -> v19, Insn(iref=%23) -> v14, Insn(iref=%17) -> v25, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%2) -> v12, Insn(iref=%1) -> v11, Insn(iref=%11) -> v24, Self(fref=f4) -> v0, Insn(iref=%6) -> v18, Insn(iref=%12) -> v26
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%10), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%6), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%1)])
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, v5, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v9 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v7, v6, v9]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [zero, v8, v7, v6, v17, v9]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v18, zero, v8, v7, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v20]
// [Asm] live_set: [zero, v20, v8, v7, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v7, v6, v9]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [zero, v22, v8, v7, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [zero, v23, v8, v7, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [zero, v23, v8, v7, v6, v24, v9]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, v9, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v7, v8, v9, zero, v27]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v27]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of flip_loop99.509"];
// [Asm]   r0 [label="v13 ← a0", color=green];
// [Asm]   r20 [label="v24 ← a5", color=green];
// [Asm]   r23 [label="v11 ← a4", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="v6 ← a0", color=green];
// [Asm]   r6 [label="v3 ← a1", color=green];
// [Asm]   r13 [label="a0", color=blue];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r11 [label="v8 ← a2", color=green];
// [Asm]   r7 [label="v4 ← a2", color=green];
// [Asm]   r10 [label="v7 ← a1", color=green];
// [Asm]   r22 [label="v10 ← a4", color=green];
// [Asm]   r14 [label="v15 ← a4", color=green];
// [Asm]   r8 [label="v5 ← a3", color=green];
// [Asm]   r5 [label="zero", color=blue];
// [Asm]   r15 [label="v17 ← a4", color=green];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r16 [label="v18 ← a4", color=green];
// [Asm]   r18 [label="v22 ← a4", color=green];
// [Asm]   r19 [label="v23 ← a4", color=green];
// [Asm]   r21 [label="v27 ← a0", color=green];
// [Asm]   r17 [label="v20 ← a4", color=green];
// [Asm]   r12 [label="v9 ← a3", color=green];
// [Asm]   r5 -- r12;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r5 -- r21;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r20;
// [Asm]   r9 -- r15;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r11 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r22;
// [Asm]   r12 -- r15;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r5 -- r18;
// [Asm]   r10 -- r19;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r11 -- r23;
// [Asm]   r11 -- r22;
// [Asm]   r9 -- r17;
// [Asm]   r11 -- r18;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r12 -- r19;
// [Asm]   r10 -- r16;
// [Asm]   r11 -- r19;
// [Asm]   r9 -- r18;
// [Asm]   r6 -- r8;
// [Asm]   r9 -- r14;
// [Asm]   r9 -- r22;
// [Asm]   r12 -- r20;
// [Asm]   r2 -- r6;
// [Asm]   r9 -- r11;
// [Asm]   r10 -- r20;
// [Asm]   r5 -- r6;
// [Asm]   r10 -- r18;
// [Asm]   r5 -- r9;
// [Asm]   r10 -- r12;
// [Asm]   r7 -- r10;
// [Asm]   r9 -- r23;
// [Asm]   r9 -- r12;
// [Asm]   r10 -- r15;
// [Asm]   r12 -- r22;
// [Asm]   r10 -- r23;
// [Asm]   r10 -- r11;
// [Asm]   r1 -- r2;
// [Asm]   r10 -- r22;
// [Asm]   r9 -- r20;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r9 -- r16;
// [Asm]   r12 -- r23;
// [Asm]   r5 -- r14;
// [Asm]   r11 -- r15;
// [Asm]   r8 -- r11;
// [Asm]   r12 -- r16;
// [Asm]   r12 -- r14;
// [Asm]   r9 -- r19;
// [Asm]   r1 -- r6;
// [Asm]   r12 -- r17;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r1 -- r3;
// [Asm]   r10 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r11 -- r21;
// [Asm]   r5 -- r15;
// [Asm]   r10 -- r17;
// [Asm]   r19 -- r20;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v13-> 1:v2-> 2:a2-> 6:v3-> 4:a3-> 7:v4-> 5:zero-> 8:v5-> 9:v6-> 10:v7-> 11:v8-> 12:v9-> 14:v15-> 15:v17-> 16:v18-> 17:v20-> 18:v22-> 19:v23-> 20:v24-> 22:v10-> 23:v11-> 21:v27-> 3:a1-> 13:a0"
// [Asm]   comment = "v13<-a0;v24<-a5;v11<-a4;v6<-a0;v3<-a1;v2<-a0;v8<-a2;v4<-a2;v7<-a1;v10<-a4;v15<-a4;v5<-a3;v17<-a4;v18<-a4;v22<-a4;v23<-a4;v27<-a0;v20<-a4;v9<-a3;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of flip_loop99.509"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   th.lurw v15, v9, v6, 2 ->   th.lurw a4, a3, a0, 2
// [Asm] subst   sw v15, 0(v7) ->   sw a4, 0(a1)
// [Asm] subst   lw v17, 0(v8) ->   lw a4, 0(a2)
// [Asm] subst   sub v18, v17, v6 ->   sub a4, a4, a0
// [Asm] subst   th.lurw v20, v9, v18, 2 ->   th.lurw a4, a3, a4, 2
// [Asm] subst   th.surw v20, v9, v6, 2 ->   th.surw a4, a3, a0, 2
// [Asm] subst   lw v22, 0(v8) ->   lw a4, 0(a2)
// [Asm] subst   sub v23, v22, v6 ->   sub a4, a4, a0
// [Asm] subst   lw v24, 0(v7) ->   lw a5, 0(a1)
// [Asm] subst   th.surw v24, v9, v23, 2 ->   th.surw a5, a3, a4, 2
// [Asm] subst   addi v27, v6, 1 ->   addi a0, a0, 1
// [Asm] subst   j .flip_loop99.509_0 ->   j .flip_loop99.509_0
// [Asm] subst   lw v10, 0(v8) ->   lw a4, 0(a2)
// [Asm] subst   srai v11, v10, 1 ->   srai a4, a4, 1
// [Asm] subst   blt v11, v6, .flip_loop99.509_2 ->   blt a4, a0, .flip_loop99.509_2
// [Asm] pre_assigned_registers: BlockParam(bref=b0, bpref=$b.7) -> v22, FnParam(fref=f8, fpref=$f.3) -> v5, Insn(iref=%15) -> v62, FnParam(fref=f8, fpref=$f.0) -> v2, Insn(iref=%41) -> v32, FnParam(fref=f8, fpref=$f.7) -> v9, Insn(iref=%33) -> v44, Insn(iref=%63) -> v102, BlockParam(bref=b10, bpref=$b.0) -> v53, Insn(iref=%8) -> v54, Insn(iref=%10) -> v56, BlockParam(bref=b0, bpref=$b.4) -> v19, BlockParam(bref=b34, bpref=$b.0) -> v52, Insn(iref=%25) -> v71, Insn(iref=%39) -> v51, Insn(iref=%59) -> v97, BlockParam(bref=b40, bpref=$b.2) -> v29, Insn(iref=%4) -> v36, Insn(iref=%81) -> v93, Insn(iref=%56) -> v94, Insn(iref=%49) -> v109, Insn(iref=%42) -> v113, Insn(iref=%65) -> v107, Mem(fref=f8, mref=m0) -> v13, Insn(iref=%68) -> v106, BlockParam(bref=b0, bpref=$b.8) -> v23, Insn(iref=%26) -> v72, BlockParam(bref=b46, bpref=$b.5) -> v78, BlockParam(bref=b0, bpref=$b.6) -> v21, BlockParam(bref=b53, bpref=$b.0) -> v108, BlockParam(bref=b9, bpref=$b.0) -> v34, Insn(iref=%31) -> v42, Insn(iref=%64) -> v103, Insn(iref=%38) -> v50, Insn(iref=%75) -> v101, Insn(iref=%53) -> v90, BlockParam(bref=b0, bpref=$b.1) -> v16, Insn(iref=%54) -> v91, Insn(iref=%60) -> v98, Insn(iref=%67) -> v105, Insn(iref=%5) -> v37, Mem(fref=f8, mref=m1) -> v11, Insn(iref=%19) -> v65, Insn(iref=%13) -> v60, BlockParam(bref=b11, bpref=$b.0) -> v82, Insn(iref=%55) -> v92, Insn(iref=%66) -> v104, Insn(iref=%23) -> v69, Insn(iref=%48) -> v87, Insn(iref=%71) -> v112, Insn(iref=%20) -> v66, Mem(fref=f8, mref=m2) -> v12, FnParam(fref=f8, fpref=$f.4) -> v6, BlockParam(bref=b40, bpref=$b.0) -> v27, Insn(iref=%34) -> v45, Insn(iref=%36) -> v48, BlockParam(bref=b31, bpref=$b.0) -> v39, BlockParam(bref=b31, bpref=$b.1) -> v40, FnParam(fref=f8, fpref=$f.5) -> v7, BlockParam(bref=b46, bpref=$b.1) -> v74, BlockParam(bref=b43, bpref=$b.0) -> v33, BlockParam(bref=b0, bpref=$b.5) -> v20, BlockParam(bref=b0, bpref=$b.3) -> v18, Insn(iref=%50) -> v110, Insn(iref=%14) -> v61, Insn(iref=%51) -> v88, BlockParam(bref=b37, bpref=$b.0) -> v46, BlockParam(bref=b46, bpref=$b.3) -> v76, Insn(iref=%80) -> v96, Insn(iref=%52) -> v89, Insn(iref=%44) -> v115, Insn(iref=%32) -> v43, BlockParam(bref=b6, bpref=$b.0) -> v26, FnParam(fref=f8, fpref=$f.6) -> v8, Insn(iref=%1) -> v25, Insn(iref=%11) -> v57, BlockParam(bref=b55, bpref=$b.0) -> v81, BlockParam(bref=b31, bpref=$b.2) -> v41, Insn(iref=%57) -> v95, Insn(iref=%6) -> v38, Insn(iref=%35) -> v47, Insn(iref=%62) -> v100, FnParam(fref=f8, fpref=$f.2) -> v4, Mem(fref=f8, mref=m31) -> v14, FnParam(fref=f8, fpref=$f.1) -> v3, Insn(iref=%46) -> v80, Insn(iref=%28) -> v83, Insn(iref=%9) -> v55, Insn(iref=%24) -> v70, Insn(iref=%37) -> v49, BlockParam(bref=b54, bpref=$b.0) -> v111, BlockParam(bref=b0, bpref=$b.0) -> v15, Insn(iref=%45) -> v79, BlockParam(bref=b0, bpref=$b.2) -> v17, BlockParam(bref=b46, bpref=$b.4) -> v77, Insn(iref=%29) -> v84, BlockParam(bref=b46, bpref=$b.0) -> v73, Insn(iref=%47) -> v86, Insn(iref=%0) -> v24, Insn(iref=%61) -> v99, BlockParam(bref=b40, bpref=$b.1) -> v28, Insn(iref=%3) -> v35, Insn(iref=%18) -> v64, FnParam(fref=f8, fpref=$f.8) -> v10, BlockParam(bref=b5, bpref=$b.0) -> v59, Insn(iref=%22) -> v68, Insn(iref=%17) -> v63, BlockParam(bref=b40, bpref=$b.3) -> v30, Insn(iref=%43) -> v114, Insn(iref=%30) -> v85, Insn(iref=%21) -> v67, Self(fref=f8) -> v0, Insn(iref=%40) -> v31, Insn(iref=%12) -> v58, BlockParam(bref=b46, bpref=$b.2) -> v75
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b40, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%63)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%62), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%57), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%54), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%47), BlockParam(bref=b46, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%45), Bool(val=true)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%8), Insn(iref=%9)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%31), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b40, bpref=$b.0), Insn(iref=%40)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%0)])
// [Asm] defs: [v47]
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v47, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: [v49]
// [Asm] live_set: [v16, v21, v49, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v50, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] move_origin: [v39]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] move_origin: [v40]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] move_origin: [v41]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defs: [v108]
// [Asm] live_set: [v16, v21, v22, v78, v17, v108, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: [zero]
// [Asm] defined: v108 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, v108, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a7, t0, a5, zero, a0, a4, a6, a2, a1, s11, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a7, t0, a5, zero, a4, a6, a2, a1, s11, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a7, t0, a5, zero, a4, a6, a2, s11, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a7, t0, a5, zero, a4, a6, v4, s11, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, a7, t0, v5, a5, zero, a4, a6, v4, s11, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, a7, t0, v5, a5, zero, a6, v4, v6, s11, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, a7, t0, v5, zero, v7, a6, v4, v6, s11, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, a7, t0, v5, zero, v8, v7, v4, v6, s11, v3]
// [Asm] move_origin: [a6]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, t0, v5, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: [a7]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v5, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: [t0]
// [Asm] defined: v10 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v16, v5, v10, zero, v8, v7, v17, v6, s11, v15, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v16, v18, v10, zero, v8, v7, v17, v6, s11, v15, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v16, v18, v10, zero, v8, v7, v19, v17, v15, s11, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v16, v18, v10, zero, v20, v8, v19, v17, v15, s11, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v16, v18, v21, v10, zero, v20, v19, v17, v15, s11, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v16, v18, v21, v10, zero, v20, v22, v19, v17, v15, s11]
// [Asm] move_origin: [v9]
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v10]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: [v73]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: [v74]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: [v75]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: [v76]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: [v77]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: [v78]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defs: [v53]
// [Asm] live_set: [v16, v53, v18, v21, zero, v23, v20, v22, v19, v17, v15, s11]
// [Asm] move_origin: [v52]
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v16, v21, a0, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v16, v21, a0, v22, v17, a1, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: [v18]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v16, v21, a0, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v35]
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: [a0]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v16, v21, v13, v22, v37, v17, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v16, v21, v13, v22, v37, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v18, v13, zero, v23, v20, v22, v19, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: [v104]
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v104, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defined: v104 is X
// [Asm] defs: [v105]
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v105, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defined: v105 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defs: [v108]
// [Asm] live_set: [v16, v21, v22, v78, v17, v108, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: [zero]
// [Asm] defined: v108 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v16, v21, v42, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v27, v23, v20, v19, v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v16, v21, v22, v17, s11, v28, v18, zero, v27, v23, v20, v19, v15]
// [Asm] move_origin: [v16]
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm] move_origin: [v17]
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm] move_origin: [v21]
// [Asm] defined: v30 is X
// [Asm] defs: [v113]
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v113, v18, v29, zero, v23, v20, v27, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v113 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v23, v20, v27, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v115]
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v115, v18, v29, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v115 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm] move_origin: [v115]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm] move_origin: [v28]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm] move_origin: [v29]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm] move_origin: [v30]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v81]
// [Asm] live_set: [v16, v18, v21, zero, v20, v22, v23, v19, v81, v17, v15, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: v81 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v16, v18, v21, zero, v23, v20, v22, v19, v17, v15, s11, v33]
// [Asm] move_origin: [zero]
// [Asm] defined: v33 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v16, v18, v21, zero, v22, v20, v23, v19, v59, v17, v15, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: v59 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v20, v23, v19, v59, v17, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v79]
// [Asm] live_set: [v16, v21, v79, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: [v133]
// [Asm] live_set: [v16, v21, v79, v22, v78, v133, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defined: v133 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defs: [v57]
// [Asm] live_set: [v16, v18, v21, zero, v22, v20, v23, v19, v17, v15, s11, v57]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v20, v23, v19, v17, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v59]
// [Asm] live_set: [v16, v18, v21, zero, v22, v20, v23, v19, v59, v17, v15, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: v59 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v26]
// [Asm] move_origin: [zero]
// [Asm] defined: v26 is X
// [Asm] defs: [v82]
// [Asm] live_set: [v82, v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v81]
// [Asm] defined: v82 is X
// [Asm] defs: [v111]
// [Asm] live_set: [v16, v21, v22, v78, v17, v111, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: [zero]
// [Asm] defined: v111 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v16, v14, v21, v22, v41, v17, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v16, v14, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v14, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v14, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v16, v14, v21, a0, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v16, v21, a0, v22, v41, a1, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: [v14]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v16, v21, a0, v22, v41, a2, a1, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: [v39]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v16, v21, a0, v22, v41, a2, a1, v17, s11, a3, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: [v40]
// [Asm] defined: a3 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v16, v21, a0, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v45]
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v45, v19, v15, v40]
// [Asm] move_origin: [a0]
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v45, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: [v45]
// [Asm] defined: v46 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v31, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v83]
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, s11, v15, v83]
// [Asm] move_origin: []
// [Asm] defined: v83 is X
// [Asm] defs: [v84]
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v84, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v84 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v16]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v17]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v18]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v19]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v20]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v21]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v22]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v23]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v88]
// [Asm] live_set: [v16, v21, v22, v78, v88, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defined: v88 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v16, v21, a0, v22, v78, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v16, v21, a0, v22, v78, v17, a1, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm] move_origin: [v76]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v16, v21, a0, v22, v78, a2, v17, a1, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm] move_origin: [v78]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v16, v21, a0, v22, v78, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v90]
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm] move_origin: [a0]
// [Asm] defined: v90 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defs: [v91]
// [Asm] live_set: [v16, v91, v21, v22, v78, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defined: v91 is X
// [Asm] defs: [v92]
// [Asm] live_set: [v16, v91, v21, v22, v78, v92, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defined: v92 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defs: [v95]
// [Asm] live_set: [v16, v21, v22, v78, v95, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defined: v95 is X
// [Asm] defs: [v97]
// [Asm] live_set: [v16, v21, v22, v78, v95, v17, s11, v73, v75, v18, zero, v97, v20, v23, v77, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defined: v97 is X
// [Asm] defs: [v98]
// [Asm] live_set: [v16, v21, v22, v78, v95, v17, s11, v73, v98, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defined: v98 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defs: [v100]
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v100, v76]
// [Asm] move_origin: []
// [Asm] defined: v100 is X
// [Asm] defs: [v102]
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v102, v76]
// [Asm] move_origin: []
// [Asm] defined: v102 is X
// [Asm] defs: [v120]
// [Asm] live_set: [v16, v21, v22, v78, v120, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v102, v76]
// [Asm] move_origin: []
// [Asm] defined: v120 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v26]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v86]
// [Asm] live_set: [v16, v21, v78, v22, v17, s11, v86, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defined: v86 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v78, v22, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [v16, v18, v21, zero, v23, v20, v22, v19, v17, v15, s11, v34]
// [Asm] move_origin: [v33]
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defs: [v111]
// [Asm] live_set: [v16, v21, v22, v78, v17, v111, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: [zero]
// [Asm] defined: v111 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v78, v17, v111, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: []
// [Asm] defs: [v52]
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v52, s11, v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v52 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v16, v18, v21, zero, v22, v20, v23, v19, v17, s11, v24, v15]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v162]
// [Asm] live_set: [v16, v162, v18, v21, zero, v22, v20, v23, v19, v17, s11, v24, v15]
// [Asm] move_origin: []
// [Asm] defined: v162 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v18, zero, v23, v22, v20, v19, v17, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v73]
// [Asm] live_set: [v11, v16, v21, v22, v17, s11, v12, v73, v18, zero, v20, v23, v19, v15]
// [Asm] move_origin: [v16]
// [Asm] defined: v73 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v11, v16, v21, v22, v17, s11, v73, v18, zero, v20, v23, v19, v74, v15]
// [Asm] move_origin: [v12]
// [Asm] defined: v74 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v16, v21, v22, v17, s11, v73, v75, v18, zero, v20, v23, v19, v74, v15]
// [Asm] move_origin: [v11]
// [Asm] defined: v75 is X
// [Asm] defs: [v76]
// [Asm] live_set: [v16, v21, v22, v17, s11, v73, v75, v18, zero, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: [v15]
// [Asm] defined: v76 is X
// [Asm] defs: [v77]
// [Asm] live_set: [v16, v21, v22, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: [v18]
// [Asm] defined: v77 is X
// [Asm] defs: [v78]
// [Asm] live_set: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] move_origin: [v21]
// [Asm] defined: v78 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, s11, v15, v54]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [v55]
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, s11, v15, v55, v54]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v16, v21, v22, v17, s11, v39, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: [v13]
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v16, v21, v22, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] move_origin: [v17]
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] move_origin: [v19]
// [Asm] defined: v41 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v16, v21, v22, v17, s11, v60, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v16, v21, v22, v17, s11, v60, v18, zero, v23, v20, v19, v15, v61]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: [v62]
// [Asm] live_set: [v62, v16, v21, v22, v17, s11, v60, v18, zero, v23, v20, v19, v15, v61]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v62, v16, v21, v22, v17, s11, v60, v63, v18, zero, v23, v20, v19, v15, v61]
// [Asm] move_origin: []
// [Asm] defined: v63 is X
// [Asm] defs: [v64]
// [Asm] live_set: [v62, v16, v21, v22, v17, s11, v64, v60, v18, zero, v23, v20, v19, v15, v61]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v16, v21, v22, v65, v17, s11, v60, v18, zero, v23, v20, v19, v15, v61]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: [v66]
// [Asm] live_set: [v66, v16, v21, v22, v17, s11, v60, v18, zero, v23, v20, v19, v15, v61]
// [Asm] move_origin: []
// [Asm] defined: v66 is X
// [Asm] defs: [v140]
// [Asm] live_set: [v66, v16, v21, v22, v17, s11, v60, v18, zero, v23, v20, v19, v140, v15, v61]
// [Asm] move_origin: []
// [Asm] defined: v140 is X
// [Asm] defs: [v67]
// [Asm] live_set: [v16, v21, v22, v67, v17, s11, v60, v18, zero, v23, v20, v19, v15, v61]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: [v68]
// [Asm] live_set: [v16, v21, v22, v17, s11, v60, v18, zero, v68, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: [v69]
// [Asm] live_set: [v16, v69, v21, v22, v17, s11, v18, zero, v20, v23, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v20, v23, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v16, v21, v22, v17, v18, zero, v20, v23, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v16, v21, v22, v17, s11, v18, zero, v20, v23, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v137]
// [Asm] live_set: [v11, v16, v21, v22, v17, s11, v18, zero, v20, v23, v19, v15, v137]
// [Asm] move_origin: []
// [Asm] defined: v137 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v21, v22, v17, s11, v18, zero, v20, v23, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v16, v21, v22, v17, v12, v18, zero, v20, v23, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v16, v21, v22, v17, v12, s11, v18, zero, v20, v23, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v21, v18, zero, v22, v20, v23, v19, v17, v12, s11, v15]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of compute40.505"];
// [Asm]   r0 [label="v47 ← a0", color=green];
// [Asm]   r46 [label="t4", color=blue];
// [Asm]   r33 [label="v3 ← a1", color=green];
// [Asm]   r59 [label="v81 ← a0", color=green];
// [Asm]   r76 [label="v91 ← a0", color=green];
// [Asm]   r9 [label="zero", color=blue];
// [Asm]   r26 [label="t0", color=blue];
// [Asm]   r86 [label="v52 ← a0", color=green];
// [Asm]   r44 [label="t2", color=blue];
// [Asm]   r53 [label="v27 ← a0", color=green];
// [Asm]   r56 [label="v30 ← a4", color=green];
// [Asm]   r10 [label="v23 ← s7", color=green];
// [Asm]   r5 [label="v17 ← s4", color=green];
// [Asm]   r54 [label="v28 ← a2", color=green];
// [Asm]   r24 [label="v2 ← a0", color=green];
// [Asm]   r43 [label="t1", color=blue];
// [Asm]   r80 [label="v98 ← a1", color=green];
// [Asm]   r88 [label="v162 ← a1", color=green];
// [Asm]   r31 [label="a1", color=blue];
// [Asm]   r99 [label="v66 ← a2", color=green];
// [Asm]   r39 [label="v9 ← a7", color=green];
// [Asm]   r17 [label="v108 ← a0", color=green];
// [Asm]   r65 [label="v26 ← a0", color=green];
// [Asm]   r52 [label="v42 ← a0", color=green];
// [Asm]   r79 [label="v97 ← a1", color=green];
// [Asm]   r20 [label="v75 ← s5", color=green];
// [Asm]   r61 [label="v59 ← a0", color=green];
// [Asm]   r23 [label="v76 ← s9", color=green];
// [Asm]   r3 [label="v22 ← s2", color=green];
// [Asm]   r82 [label="v102 ← a0", color=green];
// [Asm]   r67 [label="v111 ← a0", color=green];
// [Asm]   r27 [label="a5", color=blue];
// [Asm]   r77 [label="v92 ← a1", color=green];
// [Asm]   r75 [label="v90 ← a0", color=green];
// [Asm]   r62 [label="v79 ← a0", color=green];
// [Asm]   r40 [label="v10 ← t0", color=green];
// [Asm]   r11 [label="v20 ← s8", color=green];
// [Asm]   r58 [label="v115 ← a0", color=green];
// [Asm]   r34 [label="v4 ← a2", color=green];
// [Asm]   r83 [label="v120 ← a1", color=green];
// [Asm]   r103 [label="v69 ← a0", color=green];
// [Asm]   r14 [label="v40 ← s4", color=green];
// [Asm]   r51 [label="v105 ← a0", color=green];
// [Asm]   r96 [label="v63 ← a3", color=green];
// [Asm]   r78 [label="v95 ← a0", color=green];
// [Asm]   r55 [label="v29 ← a3", color=green];
// [Asm]   r16 [label="v50 ← a0", color=green];
// [Asm]   r21 [label="v77 ← s6", color=green];
// [Asm]   r60 [label="v33 ← a0", color=green];
// [Asm]   r73 [label="v84 ← a0", color=green];
// [Asm]   r93 [label="v60 ← a0", color=green];
// [Asm]   r38 [label="v8 ← a6", color=green];
// [Asm]   r72 [label="v83 ← a0", color=green];
// [Asm]   r104 [label="v137 ← a1", color=green];
// [Asm]   r87 [label="v24 ← a0", color=green];
// [Asm]   r100 [label="v140 ← a3", color=green];
// [Asm]   r85 [label="v34 ← a0", color=green];
// [Asm]   r47 [label="v35 ← a0", color=green];
// [Asm]   r6 [label="s11", color=blue];
// [Asm]   r13 [label="v15 ← s9", color=green];
// [Asm]   r42 [label="a0", color=blue];
// [Asm]   r4 [label="v41 ← s3", color=green];
// [Asm]   r29 [label="a6", color=blue];
// [Asm]   r95 [label="v62 ← a2", color=green];
// [Asm]   r35 [label="v5 ← a3", color=green];
// [Asm]   r7 [label="v39 ← s5", color=green];
// [Asm]   r64 [label="v57 ← a0", color=green];
// [Asm]   r8 [label="v18 ← s6", color=green];
// [Asm]   r36 [label="v6 ← a4", color=green];
// [Asm]   r66 [label="v82 ← a0", color=green];
// [Asm]   r15 [label="v49 ← a0", color=green];
// [Asm]   r32 [label="a3", color=blue];
// [Asm]   r49 [label="v13 ← a1", color=green];
// [Asm]   r74 [label="v88 ← a0", color=green];
// [Asm]   r57 [label="v113 ← a1", color=green];
// [Asm]   r68 [label="v14 ← a1", color=green];
// [Asm]   r98 [label="v65 ← a2", color=green];
// [Asm]   r91 [label="v54 ← a0", color=green];
// [Asm]   r70 [label="v46 ← a0", color=green];
// [Asm]   r48 [label="v37 ← a0", color=green];
// [Asm]   r12 [label="v19 ← s3", color=green];
// [Asm]   r37 [label="v7 ← a5", color=green];
// [Asm]   r102 [label="v68 ← a1", color=green];
// [Asm]   r1 [label="v16 ← s0", color=green];
// [Asm]   r28 [label="a4", color=blue];
// [Asm]   r41 [label="v53 ← a0", color=green];
// [Asm]   r71 [label="v31 ← a1", color=green];
// [Asm]   r22 [label="v74 ← s10", color=green];
// [Asm]   r69 [label="v45 ← a0", color=green];
// [Asm]   r84 [label="v86 ← a0", color=green];
// [Asm]   r89 [label="v11 ← a0", color=green];
// [Asm]   r50 [label="v104 ← a0", color=green];
// [Asm]   r30 [label="a2", color=blue];
// [Asm]   r45 [label="t3", color=blue];
// [Asm]   r92 [label="v55 ← a1", color=green];
// [Asm]   r25 [label="a7", color=blue];
// [Asm]   r63 [label="v133 ← a1", color=green];
// [Asm]   r2 [label="v21 ← s1", color=green];
// [Asm]   r18 [label="v78 ← s1", color=green];
// [Asm]   r19 [label="v73 ← s0", color=green];
// [Asm]   r90 [label="v12 ← a1", color=green];
// [Asm]   r97 [label="v64 ← a3", color=green];
// [Asm]   r81 [label="v100 ← a0", color=green];
// [Asm]   r94 [label="v61 ← a1", color=green];
// [Asm]   r101 [label="v67 ← a2", color=green];
// [Asm]   r9 -- r101;
// [Asm]   r12 -- r25;
// [Asm]   r5 -- r69;
// [Asm]   r10 -- r64;
// [Asm]   r6 -- r102;
// [Asm]   r12 -- r91;
// [Asm]   r6 -- r70;
// [Asm]   r2 -- r78;
// [Asm]   r6 -- r48;
// [Asm]   r10 -- r53;
// [Asm]   r11 -- r78;
// [Asm]   r23 -- r46;
// [Asm]   r8 -- r36;
// [Asm]   r27 -- r36;
// [Asm]   r6 -- r68;
// [Asm]   r4 -- r44;
// [Asm]   r13 -- r82;
// [Asm]   r6 -- r88;
// [Asm]   r8 -- r101;
// [Asm]   r3 -- r9;
// [Asm]   r2 -- r91;
// [Asm]   r9 -- r78;
// [Asm]   r13 -- r67;
// [Asm]   r10 -- r103;
// [Asm]   r3 -- r86;
// [Asm]   r2 -- r51;
// [Asm]   r11 -- r55;
// [Asm]   r3 -- r26;
// [Asm]   r11 -- r100;
// [Asm]   r3 -- r70;
// [Asm]   r3 -- r31;
// [Asm]   r2 -- r41;
// [Asm]   r7 -- r32;
// [Asm]   r13 -- r95;
// [Asm]   r18 -- r44;
// [Asm]   r1 -- r68;
// [Asm]   r20 -- r30;
// [Asm]   r9 -- r73;
// [Asm]   r22 -- r76;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r48;
// [Asm]   r9 -- r14;
// [Asm]   r9 -- r62;
// [Asm]   r6 -- r69;
// [Asm]   r8 -- r95;
// [Asm]   r5 -- r35;
// [Asm]   r20 -- r22;
// [Asm]   r13 -- r30;
// [Asm]   r10 -- r98;
// [Asm]   r13 -- r33;
// [Asm]   r11 -- r80;
// [Asm]   r8 -- r16;
// [Asm]   r2 -- r48;
// [Asm]   r13 -- r71;
// [Asm]   r10 -- r18;
// [Asm]   r56 -- r57;
// [Asm]   r35 -- r38;
// [Asm]   r29 -- r33;
// [Asm]   r12 -- r54;
// [Asm]   r5 -- r32;
// [Asm]   r14 -- r70;
// [Asm]   r11 -- r73;
// [Asm]   r8 -- r97;
// [Asm]   r20 -- r84;
// [Asm]   r1 -- r2;
// [Asm]   r18 -- r80;
// [Asm]   r4 -- r29;
// [Asm]   r28 -- r33;
// [Asm]   r1 -- r11;
// [Asm]   r11 -- r43;
// [Asm]   r12 -- r43;
// [Asm]   r32 -- r34;
// [Asm]   r5 -- r51;
// [Asm]   r12 -- r23;
// [Asm]   r13 -- r98;
// [Asm]   r2 -- r98;
// [Asm]   r25 -- r37;
// [Asm]   r1 -- r35;
// [Asm]   r6 -- r56;
// [Asm]   r22 -- r44;
// [Asm]   r9 -- r39;
// [Asm]   r12 -- r62;
// [Asm]   r2 -- r69;
// [Asm]   r18 -- r43;
// [Asm]   r18 -- r63;
// [Asm]   r6 -- r25;
// [Asm]   r23 -- r29;
// [Asm]   r26 -- r38;
// [Asm]   r7 -- r44;
// [Asm]   r23 -- r67;
// [Asm]   r27 -- r42;
// [Asm]   r11 -- r62;
// [Asm]   r2 -- r73;
// [Asm]   r6 -- r62;
// [Asm]   r10 -- r94;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r103;
// [Asm]   r1 -- r55;
// [Asm]   r23 -- r50;
// [Asm]   r21 -- r28;
// [Asm]   r21 -- r29;
// [Asm]   r11 -- r70;
// [Asm]   r42 -- r44;
// [Asm]   r12 -- r97;
// [Asm]   r22 -- r82;
// [Asm]   r18 -- r84;
// [Asm]   r3 -- r104;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r6 -- r46;
// [Asm]   r22 -- r26;
// [Asm]   r9 -- r76;
// [Asm]   r9 -- r30;
// [Asm]   r11 -- r86;
// [Asm]   r33 -- r35;
// [Asm]   r3 -- r83;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r42;
// [Asm]   r22 -- r89;
// [Asm]   r24 -- r29;
// [Asm]   r9 -- r84;
// [Asm]   r12 -- r50;
// [Asm]   r89 -- r104;
// [Asm]   r18 -- r51;
// [Asm]   r5 -- r74;
// [Asm]   r19 -- r50;
// [Asm]   r10 -- r81;
// [Asm]   r9 -- r99;
// [Asm]   r9 -- r102;
// [Asm]   r9 -- r11;
// [Asm]   r9 -- r83;
// [Asm]   r5 -- r93;
// [Asm]   r5 -- r97;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r99;
// [Asm]   r11 -- r52;
// [Asm]   r9 -- r63;
// [Asm]   r14 -- r25;
// [Asm]   r24 -- r34;
// [Asm]   r48 -- r49;
// [Asm]   r38 -- r40;
// [Asm]   r9 -- r24;
// [Asm]   r10 -- r15;
// [Asm]   r33 -- r37;
// [Asm]   r8 -- r18;
// [Asm]   r9 -- r36;
// [Asm]   r1 -- r72;
// [Asm]   r23 -- r42;
// [Asm]   r13 -- r52;
// [Asm]   r1 -- r99;
// [Asm]   r13 -- r103;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r60;
// [Asm]   r25 -- r42;
// [Asm]   r18 -- r67;
// [Asm]   r12 -- r16;
// [Asm]   r12 -- r17;
// [Asm]   r6 -- r38;
// [Asm]   r9 -- r46;
// [Asm]   r8 -- r100;
// [Asm]   r11 -- r87;
// [Asm]   r10 -- r32;
// [Asm]   r54 -- r56;
// [Asm]   r13 -- r68;
// [Asm]   r3 -- r23;
// [Asm]   r13 -- r94;
// [Asm]   r7 -- r46;
// [Asm]   r2 -- r58;
// [Asm]   r9 -- r21;
// [Asm]   r10 -- r62;
// [Asm]   r5 -- r12;
// [Asm]   r11 -- r44;
// [Asm]   r6 -- r95;
// [Asm]   r10 -- r79;
// [Asm]   r2 -- r45;
// [Asm]   r9 -- r25;
// [Asm]   r30 -- r42;
// [Asm]   r8 -- r93;
// [Asm]   r11 -- r68;
// [Asm]   r5 -- r63;
// [Asm]   r12 -- r81;
// [Asm]   r2 -- r15;
// [Asm]   r13 -- r61;
// [Asm]   r5 -- r8;
// [Asm]   r93 -- r94;
// [Asm]   r3 -- r56;
// [Asm]   r6 -- r66;
// [Asm]   r8 -- r68;
// [Asm]   r1 -- r10;
// [Asm]   r53 -- r57;
// [Asm]   r1 -- r85;
// [Asm]   r10 -- r19;
// [Asm]   r3 -- r32;
// [Asm]   r6 -- r54;
// [Asm]   r10 -- r99;
// [Asm]   r1 -- r17;
// [Asm]   r22 -- r31;
// [Asm]   r9 -- r45;
// [Asm]   r9 -- r31;
// [Asm]   r42 -- r43;
// [Asm]   r11 -- r60;
// [Asm]   r3 -- r89;
// [Asm]   r76 -- r77;
// [Asm]   r9 -- r41;
// [Asm]   r6 -- r77;
// [Asm]   r3 -- r18;
// [Asm]   r8 -- r91;
// [Asm]   r4 -- r69;
// [Asm]   r11 -- r103;
// [Asm]   r1 -- r70;
// [Asm]   r13 -- r90;
// [Asm]   r1 -- r31;
// [Asm]   r19 -- r78;
// [Asm]   r1 -- r103;
// [Asm]   r42 -- r45;
// [Asm]   r14 -- r28;
// [Asm]   r10 -- r56;
// [Asm]   r1 -- r87;
// [Asm]   r24 -- r31;
// [Asm]   r5 -- r104;
// [Asm]   r3 -- r97;
// [Asm]   r5 -- r86;
// [Asm]   r6 -- r96;
// [Asm]   r11 -- r48;
// [Asm]   r2 -- r46;
// [Asm]   r13 -- r43;
// [Asm]   r8 -- r78;
// [Asm]   r6 -- r18;
// [Asm]   r4 -- r28;
// [Asm]   r8 -- r94;
// [Asm]   r3 -- r40;
// [Asm]   r18 -- r30;
// [Asm]   r9 -- r87;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r69;
// [Asm]   r5 -- r80;
// [Asm]   r19 -- r42;
// [Asm]   r2 -- r97;
// [Asm]   r13 -- r18;
// [Asm]   r3 -- r95;
// [Asm]   r8 -- r29;
// [Asm]   r13 -- r57;
// [Asm]   r5 -- r7;
// [Asm]   r12 -- r86;
// [Asm]   r18 -- r79;
// [Asm]   r2 -- r103;
// [Asm]   r11 -- r96;
// [Asm]   r12 -- r90;
// [Asm]   r0 -- r11;
// [Asm]   r13 -- r22;
// [Asm]   r8 -- r11;
// [Asm]   r10 -- r25;
// [Asm]   r3 -- r7;
// [Asm]   r12 -- r68;
// [Asm]   r12 -- r53;
// [Asm]   r55 -- r56;
// [Asm]   r30 -- r33;
// [Asm]   r6 -- r32;
// [Asm]   r11 -- r25;
// [Asm]   r17 -- r20;
// [Asm]   r10 -- r17;
// [Asm]   r2 -- r72;
// [Asm]   r9 -- r98;
// [Asm]   r53 -- r55;
// [Asm]   r22 -- r81;
// [Asm]   r12 -- r38;
// [Asm]   r78 -- r80;
// [Asm]   r13 -- r46;
// [Asm]   r11 -- r57;
// [Asm]   r11 -- r91;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r9 -- r103;
// [Asm]   r9 -- r29;
// [Asm]   r20 -- r63;
// [Asm]   r22 -- r42;
// [Asm]   r14 -- r42;
// [Asm]   r94 -- r100;
// [Asm]   r21 -- r78;
// [Asm]   r94 -- r99;
// [Asm]   r1 -- r60;
// [Asm]   r6 -- r16;
// [Asm]   r12 -- r94;
// [Asm]   r33 -- r39;
// [Asm]   r5 -- r87;
// [Asm]   r4 -- r30;
// [Asm]   r10 -- r27;
// [Asm]   r13 -- r101;
// [Asm]   r1 -- r66;
// [Asm]   r19 -- r46;
// [Asm]   r1 -- r39;
// [Asm]   r9 -- r44;
// [Asm]   r2 -- r63;
// [Asm]   r8 -- r54;
// [Asm]   r12 -- r42;
// [Asm]   r20 -- r83;
// [Asm]   r2 -- r57;
// [Asm]   r4 -- r11;
// [Asm]   r9 -- r38;
// [Asm]   r3 -- r84;
// [Asm]   r8 -- r52;
// [Asm]   r22 -- r62;
// [Asm]   r8 -- r67;
// [Asm]   r2 -- r104;
// [Asm]   r12 -- r49;
// [Asm]   r21 -- r25;
// [Asm]   r34 -- r36;
// [Asm]   r19 -- r82;
// [Asm]   r10 -- r23;
// [Asm]   r3 -- r55;
// [Asm]   r24 -- r35;
// [Asm]   r22 -- r23;
// [Asm]   r12 -- r102;
// [Asm]   r11 -- r101;
// [Asm]   r1 -- r83;
// [Asm]   r23 -- r79;
// [Asm]   r6 -- r82;
// [Asm]   r12 -- r39;
// [Asm]   r22 -- r84;
// [Asm]   r11 -- r79;
// [Asm]   r1 -- r84;
// [Asm]   r12 -- r30;
// [Asm]   r9 -- r16;
// [Asm]   r1 -- r73;
// [Asm]   r2 -- r71;
// [Asm]   r9 -- r19;
// [Asm]   r11 -- r27;
// [Asm]   r7 -- r68;
// [Asm]   r5 -- r43;
// [Asm]   r0 -- r7;
// [Asm]   r9 -- r54;
// [Asm]   r7 -- r69;
// [Asm]   r5 -- r76;
// [Asm]   r10 -- r21;
// [Asm]   r54 -- r57;
// [Asm]   r33 -- r38;
// [Asm]   r12 -- r18;
// [Asm]   r1 -- r93;
// [Asm]   r3 -- r44;
// [Asm]   r8 -- r31;
// [Asm]   r37 -- r39;
// [Asm]   r26 -- r42;
// [Asm]   r6 -- r81;
// [Asm]   r12 -- r29;
// [Asm]   r5 -- r82;
// [Asm]   r3 -- r91;
// [Asm]   r12 -- r84;
// [Asm]   r12 -- r32;
// [Asm]   r1 -- r90;
// [Asm]   r5 -- r21;
// [Asm]   r8 -- r51;
// [Asm]   r10 -- r61;
// [Asm]   r1 -- r30;
// [Asm]   r13 -- r66;
// [Asm]   r11 -- r74;
// [Asm]   r5 -- r10;
// [Asm]   r13 -- r32;
// [Asm]   r3 -- r6;
// [Asm]   r34 -- r40;
// [Asm]   r2 -- r81;
// [Asm]   r5 -- r85;
// [Asm]   r5 -- r22;
// [Asm]   r6 -- r100;
// [Asm]   r55 -- r57;
// [Asm]   r1 -- r45;
// [Asm]   r12 -- r69;
// [Asm]   r13 -- r31;
// [Asm]   r11 -- r67;
// [Asm]   r10 -- r89;
// [Asm]   r5 -- r29;
// [Asm]   r1 -- r52;
// [Asm]   r13 -- r64;
// [Asm]   r11 -- r18;
// [Asm]   r6 -- r101;
// [Asm]   r9 -- r68;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r89;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r8 -- r61;
// [Asm]   r19 -- r63;
// [Asm]   r12 -- r103;
// [Asm]   r20 -- r23;
// [Asm]   r3 -- r92;
// [Asm]   r10 -- r104;
// [Asm]   r13 -- r38;
// [Asm]   r8 -- r75;
// [Asm]   r2 -- r25;
// [Asm]   r6 -- r60;
// [Asm]   r19 -- r76;
// [Asm]   r13 -- r63;
// [Asm]   r19 -- r29;
// [Asm]   r2 -- r83;
// [Asm]   r13 -- r99;
// [Asm]   r13 -- r55;
// [Asm]   r10 -- r12;
// [Asm]   r1 -- r77;
// [Asm]   r12 -- r104;
// [Asm]   r2 -- r67;
// [Asm]   r13 -- r83;
// [Asm]   r94 -- r95;
// [Asm]   r10 -- r31;
// [Asm]   r20 -- r27;
// [Asm]   r94 -- r96;
// [Asm]   r9 -- r100;
// [Asm]   r21 -- r50;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r1;
// [Asm]   r5 -- r101;
// [Asm]   r4 -- r25;
// [Asm]   r9 -- r74;
// [Asm]   r8 -- r70;
// [Asm]   r3 -- r49;
// [Asm]   r13 -- r35;
// [Asm]   r1 -- r80;
// [Asm]   r6 -- r55;
// [Asm]   r27 -- r35;
// [Asm]   r19 -- r80;
// [Asm]   r12 -- r21;
// [Asm]   r6 -- r23;
// [Asm]   r7 -- r42;
// [Asm]   r56 -- r58;
// [Asm]   r3 -- r46;
// [Asm]   r4 -- r14;
// [Asm]   r14 -- r15;
// [Asm]   r9 -- r89;
// [Asm]   r21 -- r74;
// [Asm]   r20 -- r51;
// [Asm]   r3 -- r45;
// [Asm]   r13 -- r15;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r43;
// [Asm]   r20 -- r26;
// [Asm]   r1 -- r34;
// [Asm]   r12 -- r72;
// [Asm]   r8 -- r27;
// [Asm]   r9 -- r91;
// [Asm]   r6 -- r33;
// [Asm]   r8 -- r9;
// [Asm]   r9 -- r94;
// [Asm]   r19 -- r62;
// [Asm]   r33 -- r36;
// [Asm]   r2 -- r88;
// [Asm]   r2 -- r80;
// [Asm]   r94 -- r98;
// [Asm]   r94 -- r101;
// [Asm]   r10 -- r29;
// [Asm]   r6 -- r22;
// [Asm]   r21 -- r45;
// [Asm]   r10 -- r51;
// [Asm]   r8 -- r64;
// [Asm]   r2 -- r44;
// [Asm]   r3 -- r57;
// [Asm]   r2 -- r40;
// [Asm]   r6 -- r27;
// [Asm]   r12 -- r20;
// [Asm]   r22 -- r67;
// [Asm]   r21 -- r76;
// [Asm]   r4 -- r15;
// [Asm]   r12 -- r41;
// [Asm]   r23 -- r25;
// [Asm]   r10 -- r101;
// [Asm]   r9 -- r70;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r32 -- r33;
// [Asm]   r10 -- r43;
// [Asm]   r1 -- r81;
// [Asm]   r25 -- r35;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r1 -- r94;
// [Asm]   r22 -- r75;
// [Asm]   r11 -- r59;
// [Asm]   r22 -- r28;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r87;
// [Asm]   r6 -- r57;
// [Asm]   r25 -- r34;
// [Asm]   r20 -- r62;
// [Asm]   r5 -- r70;
// [Asm]   r10 -- r46;
// [Asm]   r12 -- r98;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r5 -- r98;
// [Asm]   r13 -- r47;
// [Asm]   r20 -- r28;
// [Asm]   r7 -- r16;
// [Asm]   r9 -- r48;
// [Asm]   r7 -- r12;
// [Asm]   r19 -- r25;
// [Asm]   r20 -- r21;
// [Asm]   r7 -- r14;
// [Asm]   r9 -- r81;
// [Asm]   r28 -- r34;
// [Asm]   r8 -- r60;
// [Asm]   r2 -- r39;
// [Asm]   r6 -- r71;
// [Asm]   r6 -- r21;
// [Asm]   r8 -- r99;
// [Asm]   r23 -- r31;
// [Asm]   r2 -- r94;
// [Asm]   r19 -- r77;
// [Asm]   r19 -- r44;
// [Asm]   r1 -- r12;
// [Asm]   r8 -- r84;
// [Asm]   r6 -- r47;
// [Asm]   r14 -- r16;
// [Asm]   r10 -- r26;
// [Asm]   r5 -- r88;
// [Asm]   r1 -- r4;
// [Asm]   r2 -- r95;
// [Asm]   r3 -- r100;
// [Asm]   r13 -- r75;
// [Asm]   r19 -- r51;
// [Asm]   r8 -- r90;
// [Asm]   r1 -- r18;
// [Asm]   r11 -- r92;
// [Asm]   r99 -- r100;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r11 -- r32;
// [Asm]   r10 -- r100;
// [Asm]   r1 -- r69;
// [Asm]   r18 -- r78;
// [Asm]   r13 -- r50;
// [Asm]   r1 -- r20;
// [Asm]   r89 -- r90;
// [Asm]   r5 -- r73;
// [Asm]   r93 -- r101;
// [Asm]   r87 -- r88;
// [Asm]   r10 -- r58;
// [Asm]   r3 -- r51;
// [Asm]   r13 -- r92;
// [Asm]   r2 -- r74;
// [Asm]   r37 -- r40;
// [Asm]   r13 -- r37;
// [Asm]   r9 -- r18;
// [Asm]   r1 -- r46;
// [Asm]   r13 -- r40;
// [Asm]   r18 -- r50;
// [Asm]   r35 -- r39;
// [Asm]   r10 -- r49;
// [Asm]   r8 -- r102;
// [Asm]   r10 -- r92;
// [Asm]   r4 -- r43;
// [Asm]   r11 -- r82;
// [Asm]   r8 -- r37;
// [Asm]   r5 -- r53;
// [Asm]   r13 -- r54;
// [Asm]   r24 -- r36;
// [Asm]   r7 -- r10;
// [Asm]   r21 -- r32;
// [Asm]   r3 -- r80;
// [Asm]   r2 -- r47;
// [Asm]   r17 -- r22;
// [Asm]   r12 -- r74;
// [Asm]   r6 -- r94;
// [Asm]   r24 -- r27;
// [Asm]   r13 -- r104;
// [Asm]   r3 -- r82;
// [Asm]   r7 -- r70;
// [Asm]   r1 -- r27;
// [Asm]   r14 -- r52;
// [Asm]   r2 -- r79;
// [Asm]   r11 -- r63;
// [Asm]   r8 -- r39;
// [Asm]   r78 -- r79;
// [Asm]   r3 -- r102;
// [Asm]   r8 -- r22;
// [Asm]   r12 -- r99;
// [Asm]   r4 -- r8;
// [Asm]   r12 -- r61;
// [Asm]   r5 -- r50;
// [Asm]   r14 -- r31;
// [Asm]   r1 -- r49;
// [Asm]   r18 -- r31;
// [Asm]   r8 -- r96;
// [Asm]   r13 -- r100;
// [Asm]   r8 -- r14;
// [Asm]   r11 -- r30;
// [Asm]   r10 -- r55;
// [Asm]   r3 -- r58;
// [Asm]   r2 -- r70;
// [Asm]   r19 -- r75;
// [Asm]   r2 -- r87;
// [Asm]   r6 -- r58;
// [Asm]   r35 -- r36;
// [Asm]   r13 -- r60;
// [Asm]   r9 -- r72;
// [Asm]   r12 -- r45;
// [Asm]   r17 -- r18;
// [Asm]   r1 -- r58;
// [Asm]   r10 -- r72;
// [Asm]   r23 -- r63;
// [Asm]   r55 -- r71;
// [Asm]   r11 -- r40;
// [Asm]   r6 -- r15;
// [Asm]   r9 -- r35;
// [Asm]   r11 -- r71;
// [Asm]   r20 -- r43;
// [Asm]   r9 -- r15;
// [Asm]   r5 -- r103;
// [Asm]   r12 -- r80;
// [Asm]   r6 -- r44;
// [Asm]   r5 -- r77;
// [Asm]   r12 -- r15;
// [Asm]   r19 -- r67;
// [Asm]   r62 -- r63;
// [Asm]   r7 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r6 -- r79;
// [Asm]   r23 -- r62;
// [Asm]   r6 -- r51;
// [Asm]   r1 -- r78;
// [Asm]   r5 -- r52;
// [Asm]   r5 -- r84;
// [Asm]   r9 -- r42;
// [Asm]   r5 -- r44;
// [Asm]   r8 -- r38;
// [Asm]   r3 -- r28;
// [Asm]   r14 -- r29;
// [Asm]   r19 -- r74;
// [Asm]   r19 -- r84;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r40;
// [Asm]   r20 -- r46;
// [Asm]   r20 -- r25;
// [Asm]   r1 -- r28;
// [Asm]   r13 -- r56;
// [Asm]   r7 -- r28;
// [Asm]   r18 -- r77;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r5 -- r64;
// [Asm]   r8 -- r28;
// [Asm]   r10 -- r91;
// [Asm]   r12 -- r71;
// [Asm]   r53 -- r56;
// [Asm]   r9 -- r80;
// [Asm]   r18 -- r32;
// [Asm]   r10 -- r50;
// [Asm]   r11 -- r42;
// [Asm]   r22 -- r79;
// [Asm]   r26 -- r35;
// [Asm]   r21 -- r77;
// [Asm]   r13 -- r34;
// [Asm]   r18 -- r19;
// [Asm]   r22 -- r30;
// [Asm]   r19 -- r23;
// [Asm]   r21 -- r31;
// [Asm]   r5 -- r46;
// [Asm]   r8 -- r13;
// [Asm]   r10 -- r84;
// [Asm]   r12 -- r31;
// [Asm]   r8 -- r85;
// [Asm]   r13 -- r96;
// [Asm]   r10 -- r90;
// [Asm]   r3 -- r64;
// [Asm]   r23 -- r28;
// [Asm]   r10 -- r52;
// [Asm]   r6 -- r42;
// [Asm]   r3 -- r81;
// [Asm]   r12 -- r100;
// [Asm]   r35 -- r40;
// [Asm]   r54 -- r58;
// [Asm]   r3 -- r75;
// [Asm]   r13 -- r62;
// [Asm]   r11 -- r69;
// [Asm]   r7 -- r31;
// [Asm]   r23 -- r44;
// [Asm]   r13 -- r73;
// [Asm]   r10 -- r80;
// [Asm]   r1 -- r36;
// [Asm]   r2 -- r3;
// [Asm]   r8 -- r46;
// [Asm]   r3 -- r63;
// [Asm]   r24 -- r33;
// [Asm]   r12 -- r26;
// [Asm]   r5 -- r40;
// [Asm]   r19 -- r20;
// [Asm]   r10 -- r14;
// [Asm]   r12 -- r70;
// [Asm]   r2 -- r31;
// [Asm]   r3 -- r52;
// [Asm]   r11 -- r61;
// [Asm]   r14 -- r68;
// [Asm]   r9 -- r53;
// [Asm]   r20 -- r78;
// [Asm]   r1 -- r26;
// [Asm]   r6 -- r75;
// [Asm]   r3 -- r15;
// [Asm]   r24 -- r40;
// [Asm]   r13 -- r76;
// [Asm]   r23 -- r51;
// [Asm]   r12 -- r57;
// [Asm]   r3 -- r16;
// [Asm]   r8 -- r104;
// [Asm]   r3 -- r53;
// [Asm]   r2 -- r49;
// [Asm]   r7 -- r25;
// [Asm]   r3 -- r62;
// [Asm]   r12 -- r85;
// [Asm]   r6 -- r84;
// [Asm]   r3 -- r11;
// [Asm]   r9 -- r26;
// [Asm]   r1 -- r102;
// [Asm]   r10 -- r69;
// [Asm]   r2 -- r7;
// [Asm]   r27 -- r34;
// [Asm]   r18 -- r45;
// [Asm]   r2 -- r42;
// [Asm]   r17 -- r19;
// [Asm]   r1 -- r50;
// [Asm]   r11 -- r19;
// [Asm]   r9 -- r82;
// [Asm]   r10 -- r93;
// [Asm]   r6 -- r86;
// [Asm]   r10 -- r67;
// [Asm]   r3 -- r8;
// [Asm]   r3 -- r85;
// [Asm]   r9 -- r56;
// [Asm]   r9 -- r88;
// [Asm]   r1 -- r9;
// [Asm]   r19 -- r45;
// [Asm]   r22 -- r25;
// [Asm]   r9 -- r75;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r48;
// [Asm]   r11 -- r97;
// [Asm]   r9 -- r66;
// [Asm]   r53 -- r71;
// [Asm]   r1 -- r64;
// [Asm]   r3 -- r74;
// [Asm]   r23 -- r77;
// [Asm]   r6 -- r104;
// [Asm]   r9 -- r12;
// [Asm]   r94 -- r97;
// [Asm]   r5 -- r58;
// [Asm]   r22 -- r27;
// [Asm]   r8 -- r23;
// [Asm]   r5 -- r54;
// [Asm]   r12 -- r58;
// [Asm]   r5 -- r60;
// [Asm]   r10 -- r22;
// [Asm]   r8 -- r59;
// [Asm]   r8 -- r72;
// [Asm]   r3 -- r71;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r8 -- r103;
// [Asm]   r1 -- r51;
// [Asm]   r20 -- r67;
// [Asm]   r13 -- r93;
// [Asm]   r3 -- r17;
// [Asm]   r39 -- r40;
// [Asm]   r35 -- r37;
// [Asm]   r6 -- r72;
// [Asm]   r11 -- r15;
// [Asm]   r18 -- r20;
// [Asm]   r6 -- r50;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r13 -- r72;
// [Asm]   r2 -- r96;
// [Asm]   r2 -- r22;
// [Asm]   r8 -- r32;
// [Asm]   r1 -- r5;
// [Asm]   r24 -- r25;
// [Asm]   r21 -- r46;
// [Asm]   r18 -- r83;
// [Asm]   r14 -- r44;
// [Asm]   r5 -- r36;
// [Asm]   r2 -- r86;
// [Asm]   r3 -- r94;
// [Asm]   r4 -- r13;
// [Asm]   r36 -- r40;
// [Asm]   r3 -- r25;
// [Asm]   r34 -- r35;
// [Asm]   r14 -- r26;
// [Asm]   r6 -- r41;
// [Asm]   r1 -- r75;
// [Asm]   r19 -- r30;
// [Asm]   r13 -- r88;
// [Asm]   r9 -- r40;
// [Asm]   r9 -- r93;
// [Asm]   r6 -- r98;
// [Asm]   r2 -- r84;
// [Asm]   r93 -- r98;
// [Asm]   r13 -- r16;
// [Asm]   r8 -- r76;
// [Asm]   r21 -- r83;
// [Asm]   r6 -- r53;
// [Asm]   r11 -- r23;
// [Asm]   r13 -- r80;
// [Asm]   r13 -- r48;
// [Asm]   r54 -- r71;
// [Asm]   r12 -- r89;
// [Asm]   r11 -- r46;
// [Asm]   r8 -- r25;
// [Asm]   r11 -- r51;
// [Asm]   r11 -- r85;
// [Asm]   r11 -- r94;
// [Asm]   r5 -- r38;
// [Asm]   r6 -- r59;
// [Asm]   r23 -- r82;
// [Asm]   r13 -- r91;
// [Asm]   r24 -- r26;
// [Asm]   r23 -- r45;
// [Asm]   r13 -- r19;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r82 -- r83;
// [Asm]   r23 -- r26;
// [Asm]   r8 -- r81;
// [Asm]   r6 -- r19;
// [Asm]   r21 -- r62;
// [Asm]   r12 -- r63;
// [Asm]   r12 -- r55;
// [Asm]   r8 -- r62;
// [Asm]   r13 -- r78;
// [Asm]   r23 -- r30;
// [Asm]   r1 -- r79;
// [Asm]   r2 -- r89;
// [Asm]   r13 -- r86;
// [Asm]   r1 -- r97;
// [Asm]   r13 -- r14;
// [Asm]   r5 -- r68;
// [Asm]   r12 -- r22;
// [Asm]   r3 -- r29;
// [Asm]   r11 -- r41;
// [Asm]   r10 -- r57;
// [Asm]   r1 -- r89;
// [Asm]   r3 -- r66;
// [Asm]   r5 -- r81;
// [Asm]   r1 -- r95;
// [Asm]   r22 -- r32;
// [Asm]   r6 -- r39;
// [Asm]   r2 -- r75;
// [Asm]   r5 -- r25;
// [Asm]   r20 -- r42;
// [Asm]   r2 -- r93;
// [Asm]   r9 -- r58;
// [Asm]   r6 -- r74;
// [Asm]   r12 -- r87;
// [Asm]   r13 -- r39;
// [Asm]   r4 -- r10;
// [Asm]   r20 -- r75;
// [Asm]   r11 -- r28;
// [Asm]   r2 -- r27;
// [Asm]   r11 -- r90;
// [Asm]   r11 -- r56;
// [Asm]   r21 -- r63;
// [Asm]   r11 -- r29;
// [Asm]   r1 -- r42;
// [Asm]   r6 -- r52;
// [Asm]   r10 -- r86;
// [Asm]   r36 -- r38;
// [Asm]   r24 -- r39;
// [Asm]   r2 -- r62;
// [Asm]   r3 -- r67;
// [Asm]   r6 -- r36;
// [Asm]   r10 -- r60;
// [Asm]   r13 -- r44;
// [Asm]   r1 -- r37;
// [Asm]   r37 -- r38;
// [Asm]   r18 -- r82;
// [Asm]   r1 -- r98;
// [Asm]   r93 -- r100;
// [Asm]   r5 -- r95;
// [Asm]   r56 -- r71;
// [Asm]   r10 -- r88;
// [Asm]   r19 -- r83;
// [Asm]   r1 -- r88;
// [Asm]   r21 -- r67;
// [Asm]   r10 -- r13;
// [Asm]   r24 -- r32;
// [Asm]   r6 -- r63;
// [Asm]   r5 -- r42;
// [Asm]   r18 -- r27;
// [Asm]   r2 -- r16;
// [Asm]   r13 -- r28;
// [Asm]   r10 -- r47;
// [Asm]   r5 -- r92;
// [Asm]   r11 -- r99;
// [Asm]   r1 -- r62;
// [Asm]   r8 -- r98;
// [Asm]   r22 -- r63;
// [Asm]   r11 -- r53;
// [Asm]   r1 -- r67;
// [Asm]   r14 -- r30;
// [Asm]   r8 -- r79;
// [Asm]   r2 -- r101;
// [Asm]   r2 -- r59;
// [Asm]   r2 -- r54;
// [Asm]   r12 -- r52;
// [Asm]   r2 -- r92;
// [Asm]   r8 -- r71;
// [Asm]   r2 -- r68;
// [Asm]   r10 -- r20;
// [Asm]   r18 -- r26;
// [Asm]   r3 -- r30;
// [Asm]   r12 -- r93;
// [Asm]   r20 -- r82;
// [Asm]   r5 -- r83;
// [Asm]   r20 -- r76;
// [Asm]   r12 -- r28;
// [Asm]   r9 -- r28;
// [Asm]   r8 -- r77;
// [Asm]   r3 -- r13;
// [Asm]   r20 -- r32;
// [Asm]   r18 -- r81;
// [Asm]   r6 -- r43;
// [Asm]   r13 -- r84;
// [Asm]   r6 -- r10;
// [Asm]   r23 -- r81;
// [Asm]   r12 -- r40;
// [Asm]   r23 -- r32;
// [Asm]   r19 -- r90;
// [Asm]   r11 -- r54;
// [Asm]   r3 -- r10;
// [Asm]   r5 -- r91;
// [Asm]   r12 -- r59;
// [Asm]   r10 -- r75;
// [Asm]   r8 -- r63;
// [Asm]   r5 -- r90;
// [Asm]   r1 -- r6;
// [Asm]   r11 -- r47;
// [Asm]   r21 -- r22;
// [Asm]   r12 -- r78;
// [Asm]   r9 -- r95;
// [Asm]   r9 -- r47;
// [Asm]   r2 -- r23;
// [Asm]   r93 -- r95;
// [Asm]   r9 -- r104;
// [Asm]   r6 -- r92;
// [Asm]   r5 -- r89;
// [Asm]   r25 -- r33;
// [Asm]   r10 -- r95;
// [Asm]   r55 -- r58;
// [Asm]   r8 -- r82;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r52;
// [Asm]   r6 -- r11;
// [Asm]   r25 -- r36;
// [Asm]   r20 -- r31;
// [Asm]   r4 -- r5;
// [Asm]   r21 -- r75;
// [Asm]   r8 -- r66;
// [Asm]   r19 -- r79;
// [Asm]   r9 -- r57;
// [Asm]   r13 -- r42;
// [Asm]   r8 -- r56;
// [Asm]   r6 -- r49;
// [Asm]   r12 -- r51;
// [Asm]   r5 -- r48;
// [Asm]   r1 -- r53;
// [Asm]   r18 -- r29;
// [Asm]   r11 -- r49;
// [Asm]   r19 -- r89;
// [Asm]   r8 -- r19;
// [Asm]   r13 -- r85;
// [Asm]   r26 -- r36;
// [Asm]   r5 -- r79;
// [Asm]   r13 -- r26;
// [Asm]   r22 -- r77;
// [Asm]   r8 -- r43;
// [Asm]   r3 -- r87;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r47;
// [Asm]   r10 -- r102;
// [Asm]   r42 -- r46;
// [Asm]   r10 -- r41;
// [Asm]   r2 -- r55;
// [Asm]   r6 -- r12;
// [Asm]   r13 -- r25;
// [Asm]   r24 -- r38;
// [Asm]   r6 -- r24;
// [Asm]   r24 -- r30;
// [Asm]   r9 -- r51;
// [Asm]   r11 -- r83;
// [Asm]   r23 -- r83;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r6 -- r37;
// [Asm]   r10 -- r28;
// [Asm]   r19 -- r32;
// [Asm]   r9 -- r34;
// [Asm]   r10 -- r63;
// [Asm]   r11 -- r98;
// [Asm]   r5 -- r26;
// [Asm]   r34 -- r37;
// [Asm]   r9 -- r33;
// [Asm]   r0 -- r8;
// [Asm]   r10 -- r73;
// [Asm]   r6 -- r28;
// [Asm]   r1 -- r59;
// [Asm]   r11 -- r39;
// [Asm]   r9 -- r69;
// [Asm]   r1 -- r74;
// [Asm]   r11 -- r50;
// [Asm]   r6 -- r67;
// [Asm]   r7 -- r11;
// [Asm]   r21 -- r42;
// [Asm]   r11 -- r89;
// [Asm]   r8 -- r88;
// [Asm]   r95 -- r97;
// [Asm]   r9 -- r37;
// [Asm]   r6 -- r90;
// [Asm]   r13 -- r53;
// [Asm]   r8 -- r73;
// [Asm]   r14 -- r45;
// [Asm]   r7 -- r43;
// [Asm]   r11 -- r26;
// [Asm]   r12 -- r37;
// [Asm]   r2 -- r100;
// [Asm]   r8 -- r58;
// [Asm]   r22 -- r83;
// [Asm]   r9 -- r32;
// [Asm]   r0 -- r12;
// [Asm]   r11 -- r58;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r27;
// [Asm]   r31 -- r32;
// [Asm]   r3 -- r54;
// [Asm]   r3 -- r93;
// [Asm]   r20 -- r77;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r30;
// [Asm]   r1 -- r92;
// [Asm]   r10 -- r96;
// [Asm]   r1 -- r82;
// [Asm]   r9 -- r50;
// [Asm]   r4 -- r52;
// [Asm]   r10 -- r66;
// [Asm]   r20 -- r80;
// [Asm]   r11 -- r21;
// [Asm]   r2 -- r64;
// [Asm]   r12 -- r60;
// [Asm]   r18 -- r75;
// [Asm]   r2 -- r32;
// [Asm]   r33 -- r40;
// [Asm]   r11 -- r76;
// [Asm]   r4 -- r68;
// [Asm]   r6 -- r73;
// [Asm]   r26 -- r39;
// [Asm]   r3 -- r98;
// [Asm]   r12 -- r79;
// [Asm]   r6 -- r35;
// [Asm]   r20 -- r74;
// [Asm]   r12 -- r77;
// [Asm]   r1 -- r86;
// [Asm]   r14 -- r43;
// [Asm]   r9 -- r79;
// [Asm]   r1 -- r57;
// [Asm]   r5 -- r72;
// [Asm]   r13 -- r59;
// [Asm]   r11 -- r14;
// [Asm]   r13 -- r36;
// [Asm]   r5 -- r17;
// [Asm]   r18 -- r42;
// [Asm]   r3 -- r42;
// [Asm]   r2 -- r43;
// [Asm]   r11 -- r66;
// [Asm]   r5 -- r59;
// [Asm]   r5 -- r18;
// [Asm]   r5 -- r47;
// [Asm]   r2 -- r99;
// [Asm]   r18 -- r21;
// [Asm]   r11 -- r45;
// [Asm]   r1 -- r16;
// [Asm]   r23 -- r75;
// [Asm]   r3 -- r68;
// [Asm]   r9 -- r49;
// [Asm]   r7 -- r27;
// [Asm]   r13 -- r74;
// [Asm]   r6 -- r85;
// [Asm]   r11 -- r102;
// [Asm]   r13 -- r69;
// [Asm]   r20 -- r79;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r45;
// [Asm]   r18 -- r28;
// [Asm]   r5 -- r62;
// [Asm]   r3 -- r78;
// [Asm]   r93 -- r102;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r57;
// [Asm]   r6 -- r80;
// [Asm]   r6 -- r91;
// [Asm]   r11 -- r13;
// [Asm]   r21 -- r82;
// [Asm]   r10 -- r45;
// [Asm]   r21 -- r79;
// [Asm]   r0 -- r9;
// [Asm]   r9 -- r23;
// [Asm]   r19 -- r22;
// [Asm]   r5 -- r78;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r18 -- r46;
// [Asm]   r13 -- r41;
// [Asm]   r5 -- r67;
// [Asm]   r8 -- r48;
// [Asm]   r6 -- r83;
// [Asm]   r20 -- r50;
// [Asm]   r13 -- r58;
// [Asm]   r11 -- r93;
// [Asm]   r10 -- r42;
// [Asm]   r42 -- r68;
// [Asm]   r21 -- r84;
// [Asm]   r0 -- r10;
// [Asm]   r6 -- r64;
// [Asm]   r19 -- r81;
// [Asm]   r5 -- r66;
// [Asm]   r0 -- r4;
// [Asm]   r14 -- r69;
// [Asm]   r20 -- r45;
// [Asm]   r13 -- r77;
// [Asm]   r8 -- r86;
// [Asm]   r22 -- r80;
// [Asm]   r8 -- r30;
// [Asm]   r11 -- r84;
// [Asm]   r14 -- r32;
// [Asm]   r22 -- r43;
// [Asm]   r10 -- r59;
// [Asm]   r6 -- r76;
// [Asm]   r26 -- r34;
// [Asm]   r3 -- r19;
// [Asm]   r53 -- r54;
// [Asm]   r7 -- r29;
// [Asm]   r11 -- r104;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r77;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r101;
// [Asm]   r11 -- r64;
// [Asm]   r1 -- r47;
// [Asm]   r5 -- r71;
// [Asm]   r12 -- r88;
// [Asm]   r2 -- r90;
// [Asm]   r30 -- r32;
// [Asm]   r12 -- r101;
// [Asm]   r11 -- r16;
// [Asm]   r18 -- r74;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r13 -- r102;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r52;
// [Asm]   r20 -- r29;
// [Asm]   r11 -- r12;
// [Asm]   r12 -- r64;
// [Asm]   r1 -- r13;
// [Asm]   r9 -- r64;
// [Asm]   r18 -- r62;
// [Asm]   r34 -- r39;
// [Asm]   r10 -- r48;
// [Asm]   r11 -- r22;
// [Asm]   r10 -- r70;
// [Asm]   r1 -- r104;
// [Asm]   r12 -- r82;
// [Asm]   r31 -- r42;
// [Asm]   r8 -- r20;
// [Asm]   r24 -- r28;
// [Asm]   r8 -- r47;
// [Asm]   r14 -- r46;
// [Asm]   r6 -- r99;
// [Asm]   r23 -- r80;
// [Asm]   r6 -- r20;
// [Asm]   r9 -- r52;
// [Asm]   r21 -- r23;
// [Asm]   r34 -- r38;
// [Asm]   r3 -- r50;
// [Asm]   r8 -- r41;
// [Asm]   r9 -- r85;
// [Asm]   r19 -- r28;
// [Asm]   r9 -- r97;
// [Asm]   r20 -- r81;
// [Asm]   r2 -- r102;
// [Asm]   r8 -- r53;
// [Asm]   r5 -- r9;
// [Asm]   r12 -- r73;
// [Asm]   r21 -- r30;
// [Asm]   r3 -- r21;
// [Asm]   r12 -- r76;
// [Asm]   r28 -- r42;
// [Asm]   r4 -- r32;
// [Asm]   r29 -- r42;
// [Asm]   r1 -- r29;
// [Asm]   r5 -- r45;
// [Asm]   r10 -- r11;
// [Asm]   r22 -- r78;
// [Asm]   r3 -- r20;
// [Asm]   r8 -- r92;
// [Asm]   r2 -- r77;
// [Asm]   r10 -- r85;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r25;
// [Asm]   r23 -- r78;
// [Asm]   r5 -- r56;
// [Asm]   r5 -- r94;
// [Asm]   r19 -- r43;
// [Asm]   r12 -- r66;
// [Asm]   r5 -- r61;
// [Asm]   r1 -- r61;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r3 -- r73;
// [Asm]   r23 -- r84;
// [Asm]   r8 -- r26;
// [Asm]   r27 -- r33;
// [Asm]   r8 -- r83;
// [Asm]   r10 -- r54;
// [Asm]   r11 -- r72;
// [Asm]   r2 -- r9;
// [Asm]   r13 -- r87;
// [Asm]   r4 -- r6;
// [Asm]   r9 -- r13;
// [Asm]   r13 -- r79;
// [Asm]   r8 -- r50;
// [Asm]   r1 -- r100;
// [Asm]   r18 -- r23;
// [Asm]   r1 -- r76;
// [Asm]   r2 -- r20;
// [Asm]   r21 -- r43;
// [Asm]   r8 -- r57;
// [Asm]   r91 -- r92;
// [Asm]   r26 -- r33;
// [Asm]   r5 -- r41;
// [Asm]   r0 -- r13;
// [Asm]   r17 -- r21;
// [Asm]   r13 -- r97;
// [Asm]   r8 -- r89;
// [Asm]   r1 -- r71;
// [Asm]   r14 -- r27;
// [Asm]   r9 -- r27;
// [Asm]   r3 -- r43;
// [Asm]   r9 -- r77;
// [Asm]   r2 -- r85;
// [Asm]   r1 -- r7;
// [Asm]   r18 -- r25;
// [Asm]   r18 -- r76;
// [Asm]   r3 -- r60;
// [Asm]   r1 -- r56;
// [Asm]   r3 -- r79;
// [Asm]   r1 -- r63;
// [Asm]   r13 -- r49;
// [Asm]   r5 -- r96;
// [Asm]   r11 -- r31;
// [Asm]   r6 -- r29;
// [Asm]   r5 -- r49;
// [Asm]   r5 -- r99;
// [Asm]   r19 -- r31;
// [Asm]   r1 -- r91;
// [Asm]   r4 -- r27;
// [Asm]   r10 -- r77;
// [Asm]   r19 -- r21;
// [Asm]   r4 -- r42;
// [Asm]   r21 -- r81;
// [Asm]   r29 -- r36;
// [Asm]   r22 -- r50;
// [Asm]   r12 -- r19;
// [Asm]   r2 -- r76;
// [Asm]   r6 -- r13;
// [Asm]   r3 -- r76;
// [Asm]   r12 -- r44;
// [Asm]   r25 -- r38;
// [Asm]   r8 -- r17;
// [Asm]   r11 -- r81;
// [Asm]   r3 -- r96;
// [Asm]   r3 -- r4;
// [Asm]   r54 -- r55;
// [Asm]   r8 -- r69;
// [Asm]   r12 -- r67;
// [Asm]   r19 -- r27;
// [Asm]   r5 -- r75;
// [Asm]   r12 -- r46;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r13 -- r89;
// [Asm]   r6 -- r93;
// [Asm]   r21 -- r27;
// [Asm]   r10 -- r74;
// [Asm]   r2 -- r8;
// [Asm]   r13 -- r51;
// [Asm]   r22 -- r74;
// [Asm]   r6 -- r103;
// [Asm]   r6 -- r31;
// [Asm]   r8 -- r44;
// [Asm]   r6 -- r78;
// [Asm]   r8 -- r80;
// [Asm]   r95 -- r96;
// [Asm]   r10 -- r30;
// [Asm]   r6 -- r45;
// [Asm]   r12 -- r95;
// [Asm]   r9 -- r10;
// [Asm]   r12 -- r47;
// [Asm]   r1 -- r44;
// [Asm]   r3 -- r61;
// [Asm]   r93 -- r96;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r8 -- r87;
// [Asm]   r24 -- r37;
// [Asm]   r13 -- r29;
// [Asm]   r22 -- r46;
// [Asm]   r6 -- r61;
// [Asm]   r6 -- r97;
// [Asm]   r4 -- r9;
// [Asm]   r3 -- r88;
// [Asm]   r2 -- r53;
// [Asm]   r29 -- r35;
// [Asm]   r2 -- r61;
// [Asm]   r36 -- r37;
// [Asm]   r12 -- r92;
// [Asm]   r9 -- r90;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r10 -- r83;
// [Asm]   r10 -- r87;
// [Asm]   r5 -- r100;
// [Asm]   r11 -- r17;
// [Asm]   r5 -- r20;
// [Asm]   r7 -- r45;
// [Asm]   r36 -- r39;
// [Asm]   r9 -- r96;
// [Asm]   r10 -- r68;
// [Asm]   r23 -- r74;
// [Asm]   r10 -- r78;
// [Asm]   r13 -- r45;
// [Asm]   r5 -- r13;
// [Asm]   r22 -- r29;
// [Asm]   r1 -- r32;
// [Asm]   r7 -- r13;
// [Asm]   r10 -- r71;
// [Asm]   r10 -- r76;
// [Asm]   r8 -- r55;
// [Asm]   r12 -- r56;
// [Asm]   r13 -- r70;
// [Asm]   r23 -- r76;
// [Asm]   r2 -- r82;
// [Asm]   r7 -- r30;
// [Asm]   r12 -- r96;
// [Asm]   r18 -- r22;
// [Asm]   r19 -- r26;
// [Asm]   r23 -- r27;
// [Asm]   r3 -- r90;
// [Asm]   r6 -- r26;
// [Asm]   r21 -- r44;
// [Asm]   r5 -- r16;
// [Asm]   r8 -- r49;
// [Asm]   r1 -- r101;
// [Asm]   r13 -- r20;
// [Asm]   r3 -- r77;
// [Asm]   r4 -- r70;
// [Asm]   r22 -- r45;
// [Asm]   r32 -- r42;
// [Asm]   r33 -- r34;
// [Asm]   r13 -- r81;
// [Asm]   r9 -- r22;
// [Asm]   r9 -- r92;
// [Asm]   r1 -- r96;
// [Asm]   r17 -- r23;
// [Asm]   r4 -- r46;
// [Asm]   r12 -- r75;
// [Asm]   r11 -- r75;
// [Asm]   r4 -- r45;
// [Asm]   r21 -- r80;
// [Asm]   r5 -- r37;
// [Asm]   r8 -- r74;
// [Asm]   r29 -- r37;
// [Asm]   r11 -- r95;
// [Asm]   r8 -- r40;
// [Asm]   r10 -- r44;
// [Asm]   r2 -- r66;
// [Asm]   r9 -- r43;
// [Asm]   r3 -- r72;
// [Asm]   r10 -- r97;
// [Asm]   r28 -- r35;
// [Asm]   r3 -- r41;
// [Asm]   r2 -- r21;
// [Asm]   r21 -- r51;
// [Asm]   r5 -- r102;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r21 -- r26;
// [Asm]   r9 -- r55;
// [Asm]   r11 -- r88;
// [Asm]   r29 -- r34;
// [Asm]   r10 -- r82;
// [Asm]   r3 -- r59;
// [Asm]   r11 -- r38;
// [Asm]   r26 -- r37;
// [Asm]   r5 -- r27;
// [Asm]   r23 -- r43;
// [Asm]   r38 -- r39;
// [Asm]   r12 -- r48;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r26;
// [Asm]   r9 -- r71;
// [Asm]   r2 -- r19;
// [Asm]   r20 -- r44;
// [Asm]   r93 -- r99;
// [Asm]   r22 -- r51;
// [Asm]   r12 -- r83;
// [Asm]   r13 -- r27;
// [Asm]   r5 -- r15;
// [Asm]   r93 -- r97;
// [Asm]   comment = "0:v47-> 1:v16-> 2:v21-> 3:v22-> 4:v41-> 5:v17-> 6:s11-> 7:v39-> 8:v18-> 9:zero-> 10:v23-> 11:v20-> 13:v15-> 12:v19-> 14:v40-> 15:v49-> 16:v50-> 25:a7-> 42:a0-> 26:t0-> 27:a5-> 20:v75-> 22:v74-> 28:a4-> 18:v78-> 19:v73-> 21:v77-> 23:v76-> 29:a6-> 30:a2-> 31:a1-> 32:a3-> 43:t1-> 44:t2-> 45:t3-> 46:t4-> 50:v104-> 51:v105-> 62:v79-> 63:v133-> 74:v88-> 75:v90-> 76:v91-> 77:v92-> 78:v95-> 79:v97-> 80:v98-> 81:v100-> 82:v102-> 83:v120-> 84:v86-> 17:v108-> 67:v111-> 68:v14-> 52:v42-> 69:v45-> 70:v46-> 89:v11-> 90:v12-> 104:v137-> 41:v53-> 47:v35-> 48:v37-> 49:v13-> 53:v27-> 57:v113-> 54:v28-> 55:v29-> 56:v30-> 71:v31-> 58:v115-> 64:v57-> 66:v82-> 72:v83-> 73:v84-> 85:v34-> 87:v24-> 88:v162-> 91:v54-> 92:v55-> 93:v60-> 94:v61-> 95:v62-> 96:v63-> 97:v64-> 98:v65-> 99:v66-> 100:v140-> 101:v67-> 102:v68-> 103:v69-> 24:v2-> 33:v3-> 34:v4-> 35:v5-> 36:v6-> 37:v7-> 38:v8-> 39:v9-> 40:v10-> 59:v81-> 60:v33-> 61:v59-> 86:v52-> 65:v26"
// [Asm]   comment = "v47<-a0;v3<-a1;v81<-a0;v91<-a0;v52<-a0;v27<-a0;v30<-a4;v23<-s7;v17<-s4;v28<-a2;v2<-a0;v98<-a1;v162<-a1;v66<-a2;v9<-a7;v108<-a0;v26<-a0;v42<-a0;v97<-a1;v75<-s5;v59<-a0;v76<-s9;v22<-s2;v102<-a0;v111<-a0;v92<-a1;v90<-a0;v79<-a0;v10<-t0;v20<-s8;v115<-a0;v4<-a2;v120<-a1;v69<-a0;v40<-s4;v105<-a0;v63<-a3;v95<-a0;v29<-a3;v50<-a0;v77<-s6;v33<-a0;v84<-a0;v60<-a0;v8<-a6;v83<-a0;v137<-a1;v24<-a0;v140<-a3;v34<-a0;v35<-a0;v15<-s9;v41<-s3;v62<-a2;v5<-a3;v39<-s5;v57<-a0;v18<-s6;v6<-a4;v82<-a0;v49<-a0;v13<-a1;v88<-a0;v113<-a1;v14<-a1;v65<-a2;v54<-a0;v46<-a0;v37<-a0;v19<-s3;v7<-a5;v68<-a1;v16<-s0;v53<-a0;v31<-a1;v74<-s10;v45<-a0;v86<-a0;v11<-a0;v104<-a0;v55<-a1;v133<-a1;v21<-s1;v78<-s1;v73<-s0;v12<-a1;v64<-a3;v100<-a0;v61<-a1;v67<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of compute40.505"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v47, 0(v40) ->   lw a0, 0(s4)
// [Asm] subst   sw v47, 0(v39) ->   sw a0, 0(s5)
// [Asm] subst   lw v49, 0(v41) ->   lw a0, 0(s3)
// [Asm] subst   addi v50, v49, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v50, 0(v41) ->   sw a0, 0(s3)
// [Asm] subst   j .compute40.505_31 ->   j .compute40.505_31
// [Asm] subst   sw zero, 0(v75) ->   sw zero, 0(s5)
// [Asm] subst   mv v108, zero ->   mv a0, zero
// [Asm] subst   j .compute40.505_53 ->   j .compute40.505_53
// [Asm] subst   mv v15, v2 ->   mv s9, a0
// [Asm] subst   mv v16, v3 ->   mv s0, a1
// [Asm] subst   mv v17, v4 ->   mv s4, a2
// [Asm] subst   mv v18, v5 ->   mv s6, a3
// [Asm] subst   mv v19, v6 ->   mv s3, a4
// [Asm] subst   mv v20, v7 ->   mv s8, a5
// [Asm] subst   mv v21, v8 ->   mv s1, a6
// [Asm] subst   mv v22, v9 ->   mv s2, a7
// [Asm] subst   mv v23, v10 ->   mv s7, t0
// [Asm] subst   j .compute40.505_46 ->   j .compute40.505_46
// [Asm] subst   mv a0, v15 ->   mv a0, s9
// [Asm] subst   mv a1, v18 ->   mv a1, s6
// [Asm] subst   call init_count59.507 ->   call init_count59.507
// [Asm] subst   sw zero, 0(v19) ->   sw zero, 0(s3)
// [Asm] subst   lw v37, 0(v17) ->   lw a0, 0(s4)
// [Asm] subst   addi v13, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v13, -8 ->   andi s11, a1, -8
// [Asm] subst   sw v37, 0(v13) ->   sw a0, 0(a1)
// [Asm] subst   lw v104, 0(v76) ->   lw a0, 0(s9)
// [Asm] subst   addi v105, v104, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v105, 0(v76) ->   sw a0, 0(s9)
// [Asm] subst   mv v108, zero ->   mv a0, zero
// [Asm] subst   lw v42, 0(v39) ->   lw a0, 0(s5)
// [Asm] subst   beq v42, zero, .compute40.505_32 ->   beq a0, zero, .compute40.505_32
// [Asm] subst   mv v27, zero ->   mv a0, zero
// [Asm] subst   mv v28, v16 ->   mv a2, s0
// [Asm] subst   mv v29, v17 ->   mv a3, s4
// [Asm] subst   mv v30, v21 ->   mv a4, s1
// [Asm] subst   th.lurw v113, v30, v27, 2 ->   th.lurw a1, a4, a0, 2
// [Asm] subst   th.surw v113, v29, v27, 2 ->   th.surw a1, a3, a0, 2
// [Asm] subst   addi v115, v27, 1 ->   addi a0, a0, 1
// [Asm] subst   j .compute40.505_40 ->   j .compute40.505_40
// [Asm] subst   mv v81, zero ->   mv a0, zero
// [Asm] subst   mv v33, zero ->   mv a0, zero
// [Asm] subst   mv v59, zero ->   mv a0, zero
// [Asm] subst   j .compute40.505_5 ->   j .compute40.505_5
// [Asm] subst   lw v79, 0(v75) ->   lw a0, 0(s5)
// [Asm] subst   li v133, 1 ->   li a1, 1
// [Asm] subst   bne v79, v133, .compute40.505_48 ->   bne a0, a1, .compute40.505_48
// [Asm] subst   lw v57, 0(v19) ->   lw a0, 0(s3)
// [Asm] subst   sw v57, 0(v23) ->   sw a0, 0(s7)
// [Asm] subst   mv v59, zero ->   mv a0, zero
// [Asm] subst   mv v26, zero ->   mv a0, zero
// [Asm] subst   mv v111, zero ->   mv a0, zero
// [Asm] subst   addi v14, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v14, -8 ->   andi s11, a1, -8
// [Asm] subst   sw zero, 0(v14) ->   sw zero, 0(a1)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a2, v39 ->   mv a2, s5
// [Asm] subst   mv a3, v40 ->   mv a3, s4
// [Asm] subst   call flip_loop99.509 ->   call flip_loop99.509
// [Asm] subst   addi v31, v28, -1 ->   addi a1, a2, -1
// [Asm] subst   blt v31, v27, .compute40.505_42 ->   blt a1, a0, .compute40.505_42
// [Asm] subst   lw v83, 0(v20) ->   lw a0, 0(s8)
// [Asm] subst   addi v84, v83, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v84, 0(v20) ->   sw a0, 0(s8)
// [Asm] subst   j .compute40.505_0 ->   j .compute40.505_0
// [Asm] subst   lw v88, 0(v78) ->   lw a0, 0(s1)
// [Asm] subst   sw v88, 0(v74) ->   sw a0, 0(s10)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v76 ->   mv a1, s9
// [Asm] subst   mv a2, v78 ->   mv a2, s1
// [Asm] subst   call move_perm1_forward197.511 ->   call move_perm1_forward197.511
// [Asm] subst   lw v91, 0(v76) ->   lw a0, 0(s9)
// [Asm] subst   lw v92, 0(v74) ->   lw a1, 0(s10)
// [Asm] subst   th.surw v92, v78, v91, 2 ->   th.surw a1, s1, a0, 2
// [Asm] subst   lw v95, 0(v76) ->   lw a0, 0(s9)
// [Asm] subst   th.lurw v97, v77, v95, 2 ->   th.lurw a1, s6, a0, 2
// [Asm] subst   addi v98, v97, -1 ->   addi a1, a1, -1
// [Asm] subst   th.surw v98, v77, v95, 2 ->   th.surw a1, s6, a0, 2
// [Asm] subst   lw v100, 0(v76) ->   lw a0, 0(s9)
// [Asm] subst   th.lurw v102, v77, v100, 2 ->   th.lurw a0, s6, a0, 2
// [Asm] subst   li v120, 1 ->   li a1, 1
// [Asm] subst   bge v102, v120, .compute40.505_51 ->   bge a0, a1, .compute40.505_51
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v86, 0(v76) ->   lw a0, 0(s9)
// [Asm] subst   beq v86, v73, .compute40.505_49 ->   beq a0, s0, .compute40.505_49
// [Asm] subst   sw zero, 0(v75) ->   sw zero, 0(s5)
// [Asm] subst   sw zero, 0(v76) ->   sw zero, 0(s9)
// [Asm] subst   mv v111, zero ->   mv a0, zero
// [Asm] subst   j .compute40.505_54 ->   j .compute40.505_54
// [Asm] subst   mv v52, zero ->   mv a0, zero
// [Asm] subst   lw v24, 0(v15) ->   lw a0, 0(s9)
// [Asm] subst   li v162, 1 ->   li a1, 1
// [Asm] subst   blt v24, v162, .compute40.505_2 ->   blt a0, a1, .compute40.505_2
// [Asm] subst   mv v74, v12 ->   mv s10, a1
// [Asm] subst   mv v75, v11 ->   mv s5, a0
// [Asm] subst   lw v54, 0(v23) ->   lw a0, 0(s7)
// [Asm] subst   lw v55, 0(v19) ->   lw a1, 0(s3)
// [Asm] subst   blt v55, v54, .compute40.505_4 ->   blt a1, a0, .compute40.505_4
// [Asm] subst   mv v39, v13 ->   mv s5, a1
// [Asm] subst   lw v60, 0(v22) ->   lw a0, 0(s2)
// [Asm] subst   lw v61, 0(v19) ->   lw a1, 0(s3)
// [Asm] subst   lw v62, 0(v20) ->   lw a2, 0(s8)
// [Asm] subst   srai v63, v62, 1 ->   srai a3, a2, 1
// [Asm] subst   slli v64, v63, 1 ->   slli a3, a3, 1
// [Asm] subst   sub v65, v62, v64 ->   sub a2, a2, a3
// [Asm] subst   slli v66, v65, 1 ->   slli a2, a2, 1
// [Asm] subst   li v140, 1 ->   li a3, 1
// [Asm] subst   sub v67, v140, v66 ->   sub a2, a3, a2
// [Asm] subst   mul v68, v61, v67 ->   mul a1, a1, a2
// [Asm] subst   add v69, v60, v68 ->   add a0, a0, a1
// [Asm] subst   sw v69, 0(v22) ->   sw a0, 0(s2)
// [Asm] subst   addi v11, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi s11, v11, -8 ->   andi s11, a0, -8
// [Asm] subst   li v137, 1 ->   li a1, 1
// [Asm] subst   sw v137, 0(v11) ->   sw a1, 0(a0)
// [Asm] subst   addi v12, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v12, -8 ->   andi s11, a1, -8
// [Asm] subst   sw zero, 0(v12) ->   sw zero, 0(a1)
// [Asm] pre_assigned_registers: Mem(fref=f9, mref=m4) -> v3, Insn(iref=%15) -> v25, Self(fref=f9) -> v0, Insn(iref=%9) -> v19, Insn(iref=%8) -> v18, Insn(iref=%10) -> v20, Mem(fref=f9, mref=m7) -> v8, Insn(iref=%14) -> v24, Mem(fref=f9, mref=m2) -> v6, Insn(iref=%5) -> v15, Insn(iref=%0) -> v10, Insn(iref=%4) -> v14, Insn(iref=%3) -> v13, Insn(iref=%13) -> v23, Mem(fref=f9, mref=m5) -> v5, Insn(iref=%7) -> v17, Mem(fref=f9, mref=m1) -> v4, Insn(iref=%2) -> v12, Insn(iref=%1) -> v11, Insn(iref=%11) -> v21, Mem(fref=f9, mref=m0) -> v9, Mem(fref=f9, mref=m3) -> v7, Mem(fref=f9, mref=m6) -> v2, Insn(iref=%6) -> v16, Insn(iref=%12) -> v22
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [v43]
// [Asm] live_set: [zero, v43, s11]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: [v43]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v10, zero, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v10, zero, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v10, zero, v4, v9]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v10, zero, v4, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v4, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v4, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v4, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v4, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v4, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v4, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v4, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v4, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v4, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v10, zero, v4, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v10, zero, v4, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v4, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v10, zero, v7, v4, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v10, zero, v7, v4, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v7, v4, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v10, zero, v7, v4, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v10, zero, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v10, zero, v7, v4, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v10, zero, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2, v5, v10, v7, v4, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, v10, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v2, v5, v10, v7, v36, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v10, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v10, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v10, a0, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v5, v10, a0, v7, v4, v6, s11, v9, v33, v3]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, v10, a0, v7, v4, v6, a1, s11, v9, v3]
// [Asm] move_origin: [v33]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, v10, a0, v7, a2, v4, v6, a1, s11, v3]
// [Asm] move_origin: [v9]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v5, v10, a0, v7, a2, a1, v6, a3, s11, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v5, v10, a0, a4, v7, a2, a1, s11, a3, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v10, a5, a0, a4, v7, a2, a1, s11, a3, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a5 is X
// [Asm] defs: [a6]
// [Asm] live_set: [a5, a0, a4, v7, a6, a2, a1, s11, a3, v3]
// [Asm] move_origin: [v10]
// [Asm] defined: a6 is X
// [Asm] defs: [a7]
// [Asm] live_set: [a7, a5, a0, a4, v7, a6, a2, a1, s11, a3, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a7 is X
// [Asm] defs: [t0]
// [Asm] live_set: [a7, t0, a5, a0, a4, v7, a6, a2, a1, s11, a3, v3]
// [Asm] move_origin: [v7]
// [Asm] defined: t0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v7, s11, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v7, s11, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v19, s11, v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v19, v20, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v19, v20, v8]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v20, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v22, v8]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v22, v23]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v22, v23]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v22]
// [Asm] move_origin: [v23]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v22]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v24]
// [Asm] live_set: [v22]
// [Asm] move_origin: [a0]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v22]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v22]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v22]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v25]
// [Asm] live_set: [v25]
// [Asm] move_origin: [a0]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v25]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main262.502"];
// [Asm]   r0 [label="v43 ← a0", color=green];
// [Asm]   r33 [label="v25 ← a0", color=green];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r26 [label="v18 ← a0", color=green];
// [Asm]   r6 [label="t2", color=blue];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="t0", color=blue];
// [Asm]   r29 [label="v8 ← a1", color=green];
// [Asm]   r7 [label="t3", color=blue];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r8 [label="t4", color=blue];
// [Asm]   r5 [label="t1", color=blue];
// [Asm]   r32 [label="v24 ← a0", color=green];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r24 [label="v36 ← a1", color=green];
// [Asm]   r31 [label="v23 ← a0", color=green];
// [Asm]   r17 [label="v9 ← a2", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r20 [label="v7 ← s0", color=green];
// [Asm]   r23 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   r27 [label="v19 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v20 ← a2", color=green];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r22 [label="v5 ← a5", color=green];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r30 [label="v22 ← s0", color=green];
// [Asm]   r25 [label="v33 ← a1", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="v10 ← a6", color=green];
// [Asm]   r18 [label="v4 ← a3", color=green];
// [Asm]   r19 [label="v6 ← a4", color=green];
// [Asm]   r21 [label="v3 ← s1", color=green];
// [Asm]   r10 -- r14;
// [Asm]   r18 -- r23;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r21 -- r24;
// [Asm]   r5 -- r21;
// [Asm]   r16 -- r20;
// [Asm]   r17 -- r21;
// [Asm]   r16 -- r25;
// [Asm]   r14 -- r20;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r27 -- r29;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r18 -- r25;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r30 -- r31;
// [Asm]   r10 -- r19;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r18 -- r21;
// [Asm]   r2 -- r16;
// [Asm]   r27 -- r28;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r19 -- r21;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r19;
// [Asm]   r16 -- r17;
// [Asm]   r11 -- r19;
// [Asm]   r9 -- r18;
// [Asm]   r9 -- r14;
// [Asm]   r14 -- r30;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r20 -- r23;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r22 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r20 -- r22;
// [Asm]   r10 -- r20;
// [Asm]   r13 -- r30;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r10 -- r12;
// [Asm]   r3 -- r13;
// [Asm]   r21 -- r27;
// [Asm]   r19 -- r22;
// [Asm]   r9 -- r12;
// [Asm]   r17 -- r22;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r10 -- r22;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r28 -- r29;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r10 -- r30;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r11 -- r15;
// [Asm]   r18 -- r20;
// [Asm]   r16 -- r21;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r2 -- r24;
// [Asm]   r21 -- r22;
// [Asm]   r13 -- r21;
// [Asm]   r16 -- r24;
// [Asm]   r11 -- r30;
// [Asm]   r4 -- r14;
// [Asm]   r16 -- r23;
// [Asm]   r15 -- r30;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r14 -- r15;
// [Asm]   r16 -- r22;
// [Asm]   r8 -- r30;
// [Asm]   r17 -- r20;
// [Asm]   r18 -- r24;
// [Asm]   r4 -- r13;
// [Asm]   r17 -- r18;
// [Asm]   r3 -- r19;
// [Asm]   r20 -- r24;
// [Asm]   r3 -- r25;
// [Asm]   r13 -- r15;
// [Asm]   r2 -- r26;
// [Asm]   r11 -- r20;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r20;
// [Asm]   r9 -- r15;
// [Asm]   r2 -- r18;
// [Asm]   r20 -- r26;
// [Asm]   r29 -- r30;
// [Asm]   r12 -- r15;
// [Asm]   r30 -- r32;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r16 -- r19;
// [Asm]   r7 -- r20;
// [Asm]   r13 -- r16;
// [Asm]   r11 -- r12;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r17 -- r24;
// [Asm]   r4 -- r20;
// [Asm]   r9 -- r30;
// [Asm]   r19 -- r24;
// [Asm]   r11 -- r22;
// [Asm]   r7 -- r30;
// [Asm]   r4 -- r30;
// [Asm]   r2 -- r11;
// [Asm]   r18 -- r22;
// [Asm]   r17 -- r25;
// [Asm]   r8 -- r20;
// [Asm]   r16 -- r18;
// [Asm]   r22 -- r24;
// [Asm]   r20 -- r25;
// [Asm]   r13 -- r20;
// [Asm]   r6 -- r20;
// [Asm]   r10 -- r16;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r9 -- r22;
// [Asm]   r12 -- r20;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r17 -- r23;
// [Asm]   r4 -- r11;
// [Asm]   r18 -- r19;
// [Asm]   r19 -- r23;
// [Asm]   r12 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r15 -- r21;
// [Asm]   r14 -- r21;
// [Asm]   r21 -- r25;
// [Asm]   r13 -- r14;
// [Asm]   r10 -- r15;
// [Asm]   r12 -- r22;
// [Asm]   r22 -- r23;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r21 -- r26;
// [Asm]   r2 -- r17;
// [Asm]   r12 -- r30;
// [Asm]   r9 -- r16;
// [Asm]   r12 -- r16;
// [Asm]   r12 -- r14;
// [Asm]   r9 -- r19;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r9 -- r13;
// [Asm]   r15 -- r20;
// [Asm]   r5 -- r30;
// [Asm]   r19 -- r25;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r2 -- r27;
// [Asm]   r10 -- r21;
// [Asm]   r11 -- r21;
// [Asm]   r9 -- r21;
// [Asm]   r19 -- r20;
// [Asm]   comment = "0:v43-> 1:zero-> 2:s11-> 3:a0-> 4:t0-> 9:a1-> 10:a2-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 20:v7-> 21:v3-> 16:v10-> 22:v5-> 19:v6-> 18:v4-> 17:v9-> 25:v33-> 30:v22-> 23:v2-> 24:v36-> 5:t1-> 6:t2-> 7:t3-> 8:t4-> 26:v18-> 27:v19-> 29:v8-> 28:v20-> 31:v23-> 32:v24-> 33:v25"
// [Asm]   comment = "v43<-a0;v25<-a0;v18<-a0;v8<-a1;v24<-a0;v36<-a1;v23<-a0;v9<-a2;v7<-s0;v2<-a0;v19<-a0;v20<-a2;v5<-a5;v22<-s0;v33<-a1;v10<-a6;v4<-a3;v6<-a4;v3<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main262.502"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v43, 9 ->   li a0, 9
// [Asm] subst   call gen_perm14.503 ->   call gen_perm14.503
// [Asm] subst   mv v10, a0 ->   mv a6, a0
// [Asm] subst   addi v9, s11, -36 ->   addi a2, s11, -36
// [Asm] subst   andi s11, v9, -8 ->   andi s11, a2, -8
// [Asm] subst   sw zero, 0(v9) ->   sw zero, 0(a2)
// [Asm] subst   sw zero, 4(v9) ->   sw zero, 4(a2)
// [Asm] subst   sw zero, 8(v9) ->   sw zero, 8(a2)
// [Asm] subst   sw zero, 12(v9) ->   sw zero, 12(a2)
// [Asm] subst   sw zero, 16(v9) ->   sw zero, 16(a2)
// [Asm] subst   sw zero, 20(v9) ->   sw zero, 20(a2)
// [Asm] subst   sw zero, 24(v9) ->   sw zero, 24(a2)
// [Asm] subst   sw zero, 28(v9) ->   sw zero, 28(a2)
// [Asm] subst   sw zero, 32(v9) ->   sw zero, 32(a2)
// [Asm] subst   addi v4, s11, -36 ->   addi a3, s11, -36
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a3, -8
// [Asm] subst   sw zero, 0(v4) ->   sw zero, 0(a3)
// [Asm] subst   sw zero, 4(v4) ->   sw zero, 4(a3)
// [Asm] subst   sw zero, 8(v4) ->   sw zero, 8(a3)
// [Asm] subst   sw zero, 12(v4) ->   sw zero, 12(a3)
// [Asm] subst   sw zero, 16(v4) ->   sw zero, 16(a3)
// [Asm] subst   sw zero, 20(v4) ->   sw zero, 20(a3)
// [Asm] subst   sw zero, 24(v4) ->   sw zero, 24(a3)
// [Asm] subst   sw zero, 28(v4) ->   sw zero, 28(a3)
// [Asm] subst   sw zero, 32(v4) ->   sw zero, 32(a3)
// [Asm] subst   addi v6, s11, -4 ->   addi a4, s11, -4
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a4, -8
// [Asm] subst   sw zero, 0(v6) ->   sw zero, 0(a4)
// [Asm] subst   addi v7, s11, -4 ->   addi s0, s11, -4
// [Asm] subst   andi s11, v7, -8 ->   andi s11, s0, -8
// [Asm] subst   sw zero, 0(v7) ->   sw zero, 0(s0)
// [Asm] subst   addi v3, s11, -4 ->   addi s1, s11, -4
// [Asm] subst   andi s11, v3, -8 ->   andi s11, s1, -8
// [Asm] subst   sw zero, 0(v3) ->   sw zero, 0(s1)
// [Asm] subst   addi v5, s11, -4 ->   addi a5, s11, -4
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a5, -8
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a5)
// [Asm] subst   addi v2, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   li v36, 9 ->   li a1, 9
// [Asm] subst   sw v36, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   li v33, 9 ->   li a1, 9
// [Asm] subst   mv a7, v3 ->   mv a7, s1
// [Asm] subst   mv t0, v7 ->   mv t0, s0
// [Asm] subst   call compute40.505 ->   call compute40.505
// [Asm] subst   lw v19, 0(v7) ->   lw a0, 0(s0)
// [Asm] subst   lw v20, 0(v3) ->   lw a2, 0(s1)
// [Asm] subst   addi v8, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v8, -8 ->   andi s11, a1, -8
// [Asm] subst   sw v19, 0(v8) ->   sw a0, 0(a1)
// [Asm] subst   sw v20, 4(v8) ->   sw a2, 4(a1)
// [Asm] subst   lw v22, 0(v8) ->   lw s0, 0(a1)
// [Asm] subst   lw v23, 4(v8) ->   lw a0, 4(a1)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v22 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v13, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v12, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v8, Insn(iref=%4) -> v11
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v6, zero, v13, v7]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v13]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init_arr9.504"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="v5 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r2 [label="v6 ← a1", color=green];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r6 [label="v10 ← a0", color=green];
// [Asm]   r4 [label="v7 ← a2", color=green];
// [Asm]   r1 [label="v13 ← a0", color=green];
// [Asm]   r11 [label="v4 ← a2", color=green];
// [Asm]   r7 [label="v2 ← a0", color=green];
// [Asm]   r10 [label="v3 ← a1", color=green];
// [Asm]   r12 [label="v8 ← a3", color=green];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r8 -- r10;
// [Asm]   r3 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r7 -- r9;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r10;
// [Asm]   r5 -- r11;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r1 -- r4;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r2 -- r12;
// [Asm]   r10 -- r11;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:a0-> 1:v13-> 2:v6-> 3:zero-> 4:v7-> 5:v5-> 12:v8-> 11:v4-> 10:v3-> 7:v2-> 8:a2-> 9:a1-> 6:v10"
// [Asm]   comment = "v5<-a0;v6<-a1;v10<-a0;v7<-a2;v13<-a0;v4<-a2;v2<-a0;v3<-a1;v8<-a3;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init_arr9.504"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   th.surw v5, v6, v5, 2 ->   th.surw a0, a1, a0, 2
// [Asm] subst   addi v13, v5, 1 ->   addi a0, a0, 1
// [Asm] subst   j .init_arr9.504_0 ->   j .init_arr9.504_0
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   addi v8, v7, -1 ->   addi a3, a2, -1
// [Asm] subst   blt v8, v5, .init_arr9.504_2 ->   blt a3, a0, .init_arr9.504_2
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v5, Mem(fref=f1, mref=m0) -> v3, Self(fref=f1) -> v0, FnParam(fref=f1, fpref=$f.0) -> v2, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, a0, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of gen_perm14.503"];
// [Asm]   r0 [label="v2 ← a2", color=green];
// [Asm]   r3 [label="v7 ← a0", color=green];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r4 [label="v3 ← s0", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r14 [label="a4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="a5", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a6", color=blue];
// [Asm]   r18 [label="v5 ← a0", color=green];
// [Asm]   r17 [label="a7", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r11;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r6 -- r14;
// [Asm]   r6 -- r10;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r7;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r18;
// [Asm]   r4 -- r17;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r6 -- r12;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r6 -- r13;
// [Asm]   comment = "0:v2-> 1:s11-> 2:zero-> 3:v7-> 4:v3-> 5:a1-> 6:a0-> 7:a2-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a3-> 14:a4-> 15:a5-> 16:a6-> 17:a7-> 18:v5"
// [Asm]   comment = "v2<-a2;v7<-a0;v3<-s0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of gen_perm14.503"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv a2, a0
// [Asm] subst   slliw v7, v2, 2 ->   slliw a0, a2, 2
// [Asm] subst   sub v3, s11, v7 ->   sub s0, s11, a0
// [Asm] subst   andi s11, v3, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a1, v2 ->   mv a1, a2
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   call init_arr9.504 ->   call init_arr9.504
// [Asm] subst   mv a0, v3 ->   mv a0, s0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v7, Insn(iref=%7) -> v11, FnParam(fref=f3, fpref=$f.1) -> v3, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%2) -> v6, Insn(iref=%9) -> v13, Insn(iref=%8) -> v12, Insn(iref=%1) -> v5, Insn(iref=%10) -> v8, FnParam(fref=f3, fpref=$f.0) -> v2, Insn(iref=%6) -> v10, Insn(iref=%5) -> v9, Self(fref=f3) -> v0, Insn(iref=%0) -> v4
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%3), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=1)])
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v7, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v13]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] move_origin: [v13]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v2, v4, zero, v20, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init_count59.507"];
// [Asm]   r0 [label="v6 ← a0", color=green];
// [Asm]   r20 [label="v13 ← a0", color=green];
// [Asm]   r23 [label="v20 ← a3", color=green];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="v11 ← a0", color=green];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="v7 ← a3", color=green];
// [Asm]   r1 [label="v2 ← a2", color=green];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r22 [label="v4 ← a0", color=green];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="v10 ← a0", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r21 [label="v14 ← a0", color=green];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r2 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r2 -- r20;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r7 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r2 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r18;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r23;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r22 -- r23;
// [Asm]   r7 -- r11;
// [Asm]   r1 -- r22;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r7 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r7 -- r16;
// [Asm]   r2 -- r22;
// [Asm]   r7 -- r18;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r7 -- r9;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r7 -- r14;
// [Asm]   r3 -- r23;
// [Asm]   comment = "0:v6-> 1:v2-> 2:zero-> 3:v3-> 4:v7-> 5:v10-> 6:v11-> 22:v4-> 23:v20-> 7:a0-> 8:a1-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:a2-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 20:v13-> 21:v14"
// [Asm]   comment = "v6<-a0;v13<-a0;v20<-a3;v3<-a1;v11<-a0;v7<-a3;v2<-a2;v4<-a0;v10<-a0;v14<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init_count59.507"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v6, 0(v2) ->   lw a0, 0(a2)
// [Asm] subst   addi v7, v6, -1 ->   addi a3, a0, -1
// [Asm] subst   th.surw v6, v3, v7, 2 ->   th.surw a0, a1, a3, 2
// [Asm] subst   lw v10, 0(v2) ->   lw a0, 0(a2)
// [Asm] subst   addi v11, v10, -1 ->   addi a0, a0, -1
// [Asm] subst   sw v11, 0(v2) ->   sw a0, 0(a2)
// [Asm] subst   mv a0, v2 ->   mv a0, a2
// [Asm] subst   call init_count59.507 ->   call init_count59.507
// [Asm] subst   mv v2, a0 ->   mv a2, a0
// [Asm] subst   lw v4, 0(v2) ->   lw a0, 0(a2)
// [Asm] subst   li v20, 1 ->   li a3, 1
// [Asm] subst   beq v4, v20, .init_count59.507_1 ->   beq a0, a3, .init_count59.507_1
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   j .init_count59.507_3 ->   j .init_count59.507_3
// [Asm] pre_assigned_registers: Self(fref=f20) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main262.502 ->   call main262.502
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] move_perm1_forward197.511:
// [Asm] # block info: defs: [v3, v4, v5, v6, v2], uses: [v2, v5, a0, a2, a1, v6, v3], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v3, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward197.511_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm]   lw v5, 0(v3)  # live: [v2, v4, v5, zero, v3]
// [Asm]   addi v6, v5, -1  # live: [v2, v4, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v6, v2, .move_perm1_forward197.511_2  # live: [v2, v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v10, a0, zero, v8, v4, a2, a1, v3], upward_exposed: [v3, v4, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v4, zero, v3], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward197.511_1:
// [Asm]   addi v8, v2, 1  # live: [v8, v2, v4, zero, v3]
// [Asm]   th.lurw v10, v4, v8, 2  # live: [v8, v2, v4, v10, zero, v3]
// [Asm]   th.surw v10, v4, v2, 2  # live: [v8, v4, zero, v3]
// [Asm]   # save_ctx2  # live: [v8, v4, zero, v3]
// [Asm]   mv a0, v8  # live: [v4, zero, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, zero, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, zero, a0]
// [Asm]   call move_perm1_forward197.511  # live: [zero, a0]
// [Asm]   mv v13, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .move_perm1_forward197.511_3:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward197.511_2:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm]   j .move_perm1_forward197.511_3  # live: [v14]
// [Asm] 
// [Asm] # leaf false
// [Asm] main262.502:
// [Asm] # block info: defs: [v22, a1, s11, fa1, v33, fa2, ft6, a4, fa6, v20, a6, ft5, ft10, v6, ft4, v5, ft9, v10, fa4, ft2, v43, a3, a7, fa7, fa3, ft3, t2, v3, v25, t1, v7, ft0, ft1, v8, v19, v4, ft7, a5, a0, v36, a2, v24, v9, ft8, t3, t0, fa5, v18, v23, fa0, t4, v2], uses: [v2, v25, v22, v7, a1, s11, v33, zero, a4, v20, v8, a6, v19, v4, v6, v5, v10, a5, a0, v36, a2, v43, a3, v9, a7, t0, v23, v3], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main262.502_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   # save_ctx2  # live: [zero, s11]
// [Asm]   li v43, 9  # live: [zero, v43, s11]
// [Asm]   mv a0, v43  # live: [zero, a0, s11]
// [Asm]   call gen_perm14.503  # live: [zero, a0, s11]
// [Asm]   mv v10, a0  # live: [v10, zero, s11]
// [Asm]   # restore_ctx2  # live: [v10, zero, s11]
// [Asm]   addi v9, s11, -36  # live: [v10, zero, v9]
// [Asm]   andi s11, v9, -8  # live: [v10, zero, s11, v9]
// [Asm]   sw zero, 0(v9)  # live: [v10, zero, s11, v9]
// [Asm]   sw zero, 4(v9)  # live: [v10, zero, s11, v9]
// [Asm]   sw zero, 8(v9)  # live: [v10, zero, s11, v9]
// [Asm]   sw zero, 12(v9)  # live: [v10, zero, s11, v9]
// [Asm]   sw zero, 16(v9)  # live: [v10, zero, s11, v9]
// [Asm]   sw zero, 20(v9)  # live: [v10, zero, s11, v9]
// [Asm]   sw zero, 24(v9)  # live: [v10, zero, s11, v9]
// [Asm]   sw zero, 28(v9)  # live: [v10, zero, s11, v9]
// [Asm]   sw zero, 32(v9)  # live: [v10, zero, s11, v9]
// [Asm]   addi v4, s11, -36  # live: [v10, zero, v4, v9]
// [Asm]   andi s11, v4, -8  # live: [v10, zero, v4, s11, v9]
// [Asm]   sw zero, 0(v4)  # live: [v10, zero, v4, s11, v9]
// [Asm]   sw zero, 4(v4)  # live: [v10, zero, v4, s11, v9]
// [Asm]   sw zero, 8(v4)  # live: [v10, zero, v4, s11, v9]
// [Asm]   sw zero, 12(v4)  # live: [v10, zero, v4, s11, v9]
// [Asm]   sw zero, 16(v4)  # live: [v10, zero, v4, s11, v9]
// [Asm]   sw zero, 20(v4)  # live: [v10, zero, v4, s11, v9]
// [Asm]   sw zero, 24(v4)  # live: [v10, zero, v4, s11, v9]
// [Asm]   sw zero, 28(v4)  # live: [v10, zero, v4, s11, v9]
// [Asm]   sw zero, 32(v4)  # live: [v10, zero, v4, s11, v9]
// [Asm]   addi v6, s11, -4  # live: [v10, zero, v4, v6, v9]
// [Asm]   andi s11, v6, -8  # live: [v10, zero, v4, v6, s11, v9]
// [Asm]   sw zero, 0(v6)  # live: [v10, zero, v4, v6, s11, v9]
// [Asm]   addi v7, s11, -4  # live: [v10, zero, v7, v4, v6, v9]
// [Asm]   andi s11, v7, -8  # live: [v10, zero, v7, v4, v6, s11, v9]
// [Asm]   sw zero, 0(v7)  # live: [v10, zero, v7, v4, v6, s11, v9]
// [Asm]   addi v3, s11, -4  # live: [v10, zero, v7, v4, v6, v9, v3]
// [Asm]   andi s11, v3, -8  # live: [v10, zero, v7, v4, v6, s11, v9, v3]
// [Asm]   sw zero, 0(v3)  # live: [v10, zero, v7, v4, v6, s11, v9, v3]
// [Asm]   addi v5, s11, -4  # live: [v5, v10, zero, v7, v4, v6, v9, v3]
// [Asm]   andi s11, v5, -8  # live: [v5, v10, zero, v7, v4, v6, s11, v9, v3]
// [Asm]   sw zero, 0(v5)  # live: [v5, v10, v7, v4, v6, s11, v9, v3]
// [Asm]   addi v2, s11, -4  # live: [v2, v5, v10, v7, v4, v6, v9, v3]
// [Asm]   andi s11, v2, -8  # live: [v2, v5, v10, v7, v4, v6, s11, v9, v3]
// [Asm]   li v36, 9  # live: [v2, v5, v10, v7, v36, v4, v6, s11, v9, v3]
// [Asm]   sw v36, 0(v2)  # live: [v2, v5, v10, v7, v4, v6, s11, v9, v3]
// [Asm]   # save_ctx2  # live: [v2, v5, v10, v7, v4, v6, s11, v9, v3]
// [Asm]   mv a0, v2  # live: [v5, v10, a0, v7, v4, v6, s11, v9, v3]
// [Asm]   li v33, 9  # live: [v5, v10, a0, v7, v4, v6, s11, v9, v33, v3]
// [Asm]   mv a1, v33  # live: [v5, v10, a0, v7, v4, v6, a1, s11, v9, v3]
// [Asm]   mv a2, v9  # live: [v5, v10, a0, v7, a2, v4, v6, a1, s11, v3]
// [Asm]   mv a3, v4  # live: [v5, v10, a0, v7, a2, a1, v6, a3, s11, v3]
// [Asm]   mv a4, v6  # live: [v5, v10, a0, a4, v7, a2, a1, s11, a3, v3]
// [Asm]   mv a5, v5  # live: [v10, a5, a0, a4, v7, a2, a1, s11, a3, v3]
// [Asm]   mv a6, v10  # live: [a5, a0, a4, v7, a6, a2, a1, s11, a3, v3]
// [Asm]   mv a7, v3  # live: [a7, a5, a0, a4, v7, a6, a2, a1, s11, a3, v3]
// [Asm]   mv t0, v7  # live: [a7, t0, a5, a0, a4, v7, a6, a2, a1, s11, a3, v3]
// [Asm]   call compute40.505  # live: [v7, s11, a0, v3]
// [Asm]   mv v18, a0  # live: [v7, s11, v3]
// [Asm]   # restore_ctx2  # live: [v7, s11, v3]
// [Asm]   lw v19, 0(v7)  # live: [v19, s11, v3]
// [Asm]   lw v20, 0(v3)  # live: [v19, s11, v20]
// [Asm]   addi v8, s11, -8  # live: [v19, v20, v8]
// [Asm]   andi s11, v8, -8  # live: [v19, v20, v8]
// [Asm]   sw v19, 0(v8)  # live: [v20, v8]
// [Asm]   sw v20, 4(v8)  # live: [v8]
// [Asm]   lw v22, 0(v8)  # live: [v22, v8]
// [Asm]   lw v23, 4(v8)  # live: [v22, v23]
// [Asm]   # save_ctx2  # live: [v22, v23]
// [Asm]   mv a0, v23  # live: [a0, v22]
// [Asm]   call minimbt_print_int  # live: [a0, v22]
// [Asm]   mv v24, a0  # live: [v22]
// [Asm]   # restore_ctx2  # live: [v22]
// [Asm]   # save_ctx2  # live: [v22]
// [Asm]   mv a0, v22  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v25, a0  # live: [v25]
// [Asm]   # restore_ctx2  # live: [v25]
// [Asm] # control
// [Asm]   mv a0, v25  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] init_arr9.504:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .init_arr9.504_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v5, v7], upward_exposed: [v5, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .init_arr9.504_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v5, v6, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v5, .init_arr9.504_2  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v5, v13], uses: [v5, v6, v13, v7], upward_exposed: [v5, v6, v7], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .init_arr9.504_1:
// [Asm]   th.surw v5, v6, v5, 2  # live: [v6, v5, zero, v7]
// [Asm]   addi v13, v5, 1  # live: [v6, zero, v13, v7]
// [Asm] # control
// [Asm]   mv v5, v13  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .init_arr9.504_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .init_arr9.504_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .init_arr9.504_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] flip_loop99.509:
// [Asm] # block info: defs: [v2, v5, v7, v8, v4, v6, v9, v3], uses: [v2, v5, a0, a2, v4, a1, a3, v3], upward_exposed: [a2, a1, a3, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, zero], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .flip_loop99.509_5:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, v5, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, v5, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, v5, zero, v8]
// [Asm]   mv v9, v5  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v11, v10], uses: [v11, v6, v10, v8], upward_exposed: [v6, v8], params_defs: [v8, v6, v9, v7]
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: [v6, v7, v8, v9]
// [Asm] .flip_loop99.509_0:
// [Asm]   lw v10, 0(v8)  # live: [v10, zero, v7, v8, v6, v9]
// [Asm]   srai v11, v10, 1  # live: [v11, zero, v7, v8, v6, v9]
// [Asm] # control
// [Asm]   blt v11, v6, .flip_loop99.509_2  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v18, v23, v20, v22, v27, v17, v6, v24, v15], uses: [v9, v18, v20, v22, v23, v27, v7, v8, v6, v17, v15, v24], upward_exposed: [v8, v6, v9, v7], params_defs: []
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .flip_loop99.509_1:
// [Asm]   th.lurw v15, v9, v6, 2  # live: [zero, v8, v7, v6, v15, v9]
// [Asm]   sw v15, 0(v7)  # live: [zero, v8, v7, v6, v9]
// [Asm]   lw v17, 0(v8)  # live: [zero, v8, v7, v6, v17, v9]
// [Asm]   sub v18, v17, v6  # live: [v18, zero, v8, v7, v6, v9]
// [Asm]   th.lurw v20, v9, v18, 2  # live: [zero, v20, v8, v7, v6, v9]
// [Asm]   th.surw v20, v9, v6, 2  # live: [zero, v8, v7, v6, v9]
// [Asm]   lw v22, 0(v8)  # live: [zero, v22, v8, v7, v6, v9]
// [Asm]   sub v23, v22, v6  # live: [zero, v23, v8, v7, v6, v9]
// [Asm]   lw v24, 0(v7)  # live: [zero, v23, v8, v7, v6, v24, v9]
// [Asm]   th.surw v24, v9, v23, 2  # live: [v8, v6, v9, zero, v7]
// [Asm]   addi v27, v6, 1  # live: [v7, v8, v9, zero, v27]
// [Asm] # control
// [Asm]   mv v6, v27  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v7, v7  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v9, v9  # live: [v7, v6, v9, zero, v8]
// [Asm]   j .flip_loop99.509_0  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .flip_loop99.509_2:
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .flip_loop99.509_3:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] gen_perm14.503:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, zero, v7, a2, a1, s11, v3], upward_exposed: [s11, a0, zero], params_defs: []
// [Asm] # live_in: [s11, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .gen_perm14.503_0:
// [Asm]   # save_ctx1  # live: [s11, zero, a0]
// [Asm]   mv v2, a0  # live: [s11, zero, v2]
// [Asm]   slliw v7, v2, 2  # live: [v7, s11, zero, v2]
// [Asm]   sub v3, s11, v7  # live: [v2, zero, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, zero, v3]
// [Asm]   mv a1, v2  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, zero  # live: [v2, a0, v3]
// [Asm]   mv a1, v3  # live: [v2, a1, a0, v3]
// [Asm]   mv a2, v2  # live: [a2, a1, a0, v3]
// [Asm]   call init_arr9.504  # live: [a0, v3]
// [Asm]   mv v5, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] compute40.505:
// [Asm] # block info: defs: [v3, v5, v16, v10, v21, v22, v7, v17, v9, v18, v20, v23, v8, v19, v4, v6, v15, v2], uses: [v2, v5, v10, a5, a0, v7, a2, a1, a3, v9, a7, t0, a4, v8, a6, v4, v6, v3], upward_exposed: [a7, t0, a5, a0, a4, a6, a2, a1, a3], params_defs: []
// [Asm] # live_in: [a7, t0, a5, a0, zero, a4, a6, a2, a1, a3, s11], live_out: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] # block parameters: []
// [Asm] .compute40.505_8:
// [Asm]   # save_ctx1  # live: [a7, t0, a5, zero, a0, a4, a6, a2, a1, s11, a3]
// [Asm]   mv v2, a0  # live: [a7, t0, a5, zero, a4, a6, a2, a1, s11, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a7, t0, a5, zero, a4, a6, a2, s11, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a7, t0, a5, zero, a4, a6, v4, s11, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, a7, t0, v5, a5, zero, a4, a6, v4, s11, v3]
// [Asm]   mv v6, a4  # live: [v2, a7, t0, v5, a5, zero, a6, v4, v6, s11, v3]
// [Asm]   mv v7, a5  # live: [v2, a7, t0, v5, zero, v7, a6, v4, v6, s11, v3]
// [Asm]   mv v8, a6  # live: [v2, a7, t0, v5, zero, v8, v7, v4, v6, s11, v3]
// [Asm]   mv v9, a7  # live: [v2, t0, v5, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm]   mv v10, t0  # live: [v2, v5, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] # control
// [Asm]   mv v15, v2  # live: [v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm]   mv v16, v3  # live: [v16, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9]
// [Asm]   mv v17, v4  # live: [v16, v5, v10, zero, v8, v7, v17, v6, s11, v15, v9]
// [Asm]   mv v18, v5  # live: [v16, v18, v10, zero, v8, v7, v17, v6, s11, v15, v9]
// [Asm]   mv v19, v6  # live: [v16, v18, v10, zero, v8, v7, v19, v17, v15, s11, v9]
// [Asm]   mv v20, v7  # live: [v16, v18, v10, zero, v20, v8, v19, v17, v15, s11, v9]
// [Asm]   mv v21, v8  # live: [v16, v18, v21, v10, zero, v20, v19, v17, v15, s11, v9]
// [Asm]   mv v22, v9  # live: [v16, v18, v21, v10, zero, v20, v22, v19, v17, v15, s11]
// [Asm]   mv v23, v10  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v162, v24], uses: [v162, v15, v24], upward_exposed: [v15], params_defs: [v16, v18, v21, v20, v22, v23, v19, v17, v15]
// [Asm] # live_in: [v16, v18, v21, zero, v23, v20, v22, v19, v17, v15, s11], live_out: [v16, v21, v18, zero, v23, v22, v20, v19, v17, v15, s11]
// [Asm] # block parameters: [v15, v16, v17, v18, v19, v20, v21, v22, v23]
// [Asm] .compute40.505_0:
// [Asm]   lw v24, 0(v15)  # live: [v16, v18, v21, zero, v22, v20, v23, v19, v17, s11, v24, v15]
// [Asm] # control
// [Asm]   li v162, 1  # live: [v16, v162, v18, v21, zero, v22, v20, v23, v19, v17, s11, v24, v15]
// [Asm]   blt v24, v162, .compute40.505_2  # live: [v16, v21, v18, zero, v23, v22, v20, v19, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v16, v21, v18, zero, v23, v22, v20, v19, v17, v15, s11], live_out: [v16, v21, v18, zero, v23, v22, v20, v19, v17, v15, s11]
// [Asm] # block parameters: []
// [Asm] .compute40.505_1:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v28, v29, v27, v30], uses: [v16, v17, v21, zero], upward_exposed: [v16, v17, v21, zero], params_defs: []
// [Asm] # live_in: [v16, v21, v18, zero, v23, v22, v20, v19, v17, v15, s11], live_out: [v16, v21, v30, v22, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm] # block parameters: []
// [Asm] .compute40.505_45:
// [Asm] # control
// [Asm]   mv v27, zero  # live: [v16, v21, v22, v17, s11, v18, zero, v27, v23, v20, v19, v15]
// [Asm]   mv v28, v16  # live: [v16, v21, v22, v17, s11, v28, v18, zero, v27, v23, v20, v19, v15]
// [Asm]   mv v29, v17  # live: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm]   mv v30, v21  # live: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v31], uses: [v28, v31, v27], upward_exposed: [v28, v27], params_defs: [v28, v29, v27, v30]
// [Asm] # live_in: [v16, v21, v30, v22, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15], live_out: [v16, v21, v30, v22, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm] # block parameters: [v27, v28, v29, v30]
// [Asm] .compute40.505_40:
// [Asm]   addi v31, v28, -1  # live: [v16, v21, v22, v30, v17, s11, v28, v31, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm] # control
// [Asm]   blt v31, v27, .compute40.505_42  # live: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v115, v113, v27], uses: [v115, v29, v30, v27, v28, v113], upward_exposed: [v28, v29, v30, v27], params_defs: []
// [Asm] # live_in: [v16, v21, v30, v22, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15], live_out: [v16, v21, v30, v22, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm] # block parameters: []
// [Asm] .compute40.505_41:
// [Asm]   th.lurw v113, v30, v27, 2  # live: [v16, v21, v22, v30, v17, s11, v28, v113, v18, v29, zero, v23, v20, v27, v19, v15]
// [Asm]   th.surw v113, v29, v27, 2  # live: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v23, v20, v27, v19, v15]
// [Asm]   addi v115, v27, 1  # live: [v16, v21, v22, v30, v17, s11, v28, v115, v18, v29, zero, v23, v20, v19, v15]
// [Asm] # control
// [Asm]   mv v27, v115  # live: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm]   mv v28, v28  # live: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm]   mv v29, v29  # live: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm]   mv v30, v30  # live: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm]   j .compute40.505_40  # live: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v33], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v18, v21, zero, v23, v20, v22, v19, v17, v15, s11], live_out: [v16, v18, v21, zero, v23, v20, v22, v19, v17, v15, s11, v33]
// [Asm] # block parameters: []
// [Asm] .compute40.505_42:
// [Asm] # control
// [Asm]   mv v33, zero  # live: [v16, v18, v21, zero, v23, v20, v22, v19, v17, v15, s11, v33]
// [Asm] 
// [Asm] # block info: defs: [v34], uses: [v33], upward_exposed: [v33], params_defs: [v33]
// [Asm] # live_in: [v16, v18, v21, zero, v23, v20, v22, v19, v17, v15, s11, v33], live_out: [v16, v18, v21, zero, v23, v20, v22, v19, v17, v15, s11, v34]
// [Asm] # block parameters: [v33]
// [Asm] .compute40.505_43:
// [Asm] # control
// [Asm]   mv v34, v33  # live: [v16, v18, v21, zero, v23, v20, v22, v19, v17, v15, s11, v34]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v37, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, v35, t4, t2], uses: [v18, a0, zero, v13, v19, v37, a1, v17, v15, s11], upward_exposed: [v19, v17, v15, v18, s11, zero], params_defs: [v34]
// [Asm] # live_in: [v16, v18, v21, zero, v23, v20, v22, v19, v17, v15, s11, v34], live_out: [v16, v21, v18, v13, zero, v23, v20, v22, v19, v17, s11, v15]
// [Asm] # block parameters: [v34]
// [Asm] .compute40.505_9:
// [Asm]   # save_ctx2  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   mv a0, v15  # live: [v16, v21, a0, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   mv a1, v18  # live: [v16, v21, a0, v22, v17, a1, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   call init_count59.507  # live: [v16, v21, a0, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   mv v35, a0  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   # restore_ctx2  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   sw zero, 0(v19)  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   lw v37, 0(v17)  # live: [v16, v21, v22, v37, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   addi v13, s11, -4  # live: [v16, v21, v13, v22, v37, v17, v18, zero, v23, v20, v19, v15]
// [Asm]   andi s11, v13, -8  # live: [v16, v21, v13, v22, v37, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   sw v37, 0(v13)  # live: [v16, v21, v18, v13, zero, v23, v20, v22, v19, v17, s11, v15]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v41, v39, v40], uses: [v19, v17, v13], upward_exposed: [v19, v17, v13], params_defs: []
// [Asm] # live_in: [v16, v21, v18, v13, zero, v23, v20, v22, v19, v17, s11, v15], live_out: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] # block parameters: []
// [Asm] .compute40.505_36:
// [Asm] # control
// [Asm]   mv v39, v13  # live: [v16, v21, v22, v17, s11, v39, v18, zero, v23, v20, v19, v15]
// [Asm]   mv v40, v17  # live: [v16, v21, v22, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm]   mv v41, v19  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] 
// [Asm] # block info: defs: [v42], uses: [v42, zero, v39], upward_exposed: [zero, v39], params_defs: [v41, v39, v40]
// [Asm] # live_in: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40], live_out: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] # block parameters: [v39, v40, v41]
// [Asm] .compute40.505_31:
// [Asm]   lw v42, 0(v39)  # live: [v16, v21, v42, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] # control
// [Asm]   beq v42, zero, .compute40.505_32  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v46, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, v45, t4, t2], uses: [v14, zero, a0, v45, a2, a1, s11, a3, v39, v40], upward_exposed: [s11, zero, v39, v40], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40], live_out: [v46, v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] # block parameters: []
// [Asm] .compute40.505_33:
// [Asm]   addi v14, s11, -4  # live: [v16, v14, v21, v22, v41, v17, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm]   andi s11, v14, -8  # live: [v16, v14, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm]   sw zero, 0(v14)  # live: [v16, v14, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm]   # save_ctx2  # live: [v16, v14, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm]   mv a0, zero  # live: [v16, v14, v21, a0, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm]   mv a1, v14  # live: [v16, v21, a0, v22, v41, a1, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm]   mv a2, v39  # live: [v16, v21, a0, v22, v41, a2, a1, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm]   mv a3, v40  # live: [v16, v21, a0, v22, v41, a2, a1, v17, s11, a3, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm]   call flip_loop99.509  # live: [v16, v21, a0, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm]   mv v45, a0  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v45, v19, v15, v40]
// [Asm]   # restore_ctx2  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v45, v19, v15, v40]
// [Asm] # control
// [Asm]   mv v46, v45  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] 
// [Asm] # block info: defs: [v47, v49, v50], uses: [v49, v50, v47, v41, v39, v40], upward_exposed: [v41, v39, v40], params_defs: [v46]
// [Asm] # live_in: [v46, v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40], live_out: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] # block parameters: [v46]
// [Asm] .compute40.505_37:
// [Asm]   lw v47, 0(v40)  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v47, v15, v40]
// [Asm]   sw v47, 0(v39)  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm]   lw v49, 0(v41)  # live: [v16, v21, v49, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm]   addi v50, v49, 1  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v50, v19, v15, v40]
// [Asm]   sw v50, 0(v41)  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] # control
// [Asm]   mv v39, v39  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm]   mv v40, v40  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm]   mv v41, v41  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm]   j .compute40.505_31  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v23, v20, v19, v15, v40]
// [Asm] 
// [Asm] # block info: defs: [v26], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v26]
// [Asm] # block parameters: []
// [Asm] .compute40.505_2:
// [Asm] # control
// [Asm]   mv v26, zero  # live: [v26]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v26, a0], upward_exposed: [v26], params_defs: [v26]
// [Asm] # live_in: [v26], live_out: []
// [Asm] # block parameters: [v26]
// [Asm] .compute40.505_6:
// [Asm] # control
// [Asm]   mv a0, v26  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v52], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v18, v21, zero, v20, v23, v22, v19, v17, s11, v15], live_out: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v52, s11, v15]
// [Asm] # block parameters: []
// [Asm] .compute40.505_32:
// [Asm] # control
// [Asm]   mv v52, zero  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v52, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [v53], uses: [v52], upward_exposed: [v52], params_defs: [v52]
// [Asm] # live_in: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v52, s11, v15], live_out: [v16, v53, v18, v21, zero, v23, v20, v22, v19, v17, v15, s11]
// [Asm] # block parameters: [v52]
// [Asm] .compute40.505_34:
// [Asm] # control
// [Asm]   mv v53, v52  # live: [v16, v53, v18, v21, zero, v23, v20, v22, v19, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v54, v55], uses: [v19, v55, v54, v23], upward_exposed: [v19, v23], params_defs: [v53]
// [Asm] # live_in: [v16, v53, v18, v21, zero, v23, v22, v20, v19, v17, v15, s11], live_out: [v16, v18, v21, zero, v22, v23, v20, v19, v17, s11, v15]
// [Asm] # block parameters: [v53]
// [Asm] .compute40.505_10:
// [Asm]   lw v54, 0(v23)  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, s11, v15, v54]
// [Asm]   lw v55, 0(v19)  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, s11, v15, v55, v54]
// [Asm] # control
// [Asm]   blt v55, v54, .compute40.505_4  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [v59, v57], uses: [v19, v57, zero, v23], upward_exposed: [v19, zero, v23], params_defs: []
// [Asm] # live_in: [v16, v18, v21, zero, v20, v23, v22, v19, v17, s11, v15], live_out: [v16, v18, v21, zero, v22, v20, v23, v19, v59, v17, v15, s11]
// [Asm] # block parameters: []
// [Asm] .compute40.505_3:
// [Asm]   lw v57, 0(v19)  # live: [v16, v18, v21, zero, v22, v20, v23, v19, v17, v15, s11, v57]
// [Asm]   sw v57, 0(v23)  # live: [v16, v18, v21, zero, v22, v20, v23, v19, v17, v15, s11]
// [Asm] # control
// [Asm]   mv v59, zero  # live: [v16, v18, v21, zero, v22, v20, v23, v19, v59, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v62, v66, v11, v69, v67, v65, s11, v12, v64, v60, v63, v68, v140, v61, v137], uses: [v62, v66, v11, v69, v22, v67, v65, s11, v12, v64, v60, v63, v68, zero, v20, v19, v140, v61, v137], upward_exposed: [v19, s11, zero, v22, v20], params_defs: [v59]
// [Asm] # live_in: [v16, v18, v21, zero, v22, v20, v23, v19, v59, v17, v15, s11], live_out: [v11, v16, v21, v22, v17, v12, s11, v18, zero, v20, v23, v19, v15]
// [Asm] # block parameters: [v59]
// [Asm] .compute40.505_5:
// [Asm]   lw v60, 0(v22)  # live: [v16, v21, v22, v17, s11, v60, v18, zero, v23, v20, v19, v15]
// [Asm]   lw v61, 0(v19)  # live: [v16, v21, v22, v17, s11, v60, v18, zero, v23, v20, v19, v15, v61]
// [Asm]   lw v62, 0(v20)  # live: [v62, v16, v21, v22, v17, s11, v60, v18, zero, v23, v20, v19, v15, v61]
// [Asm]   srai v63, v62, 1  # live: [v62, v16, v21, v22, v17, s11, v60, v63, v18, zero, v23, v20, v19, v15, v61]
// [Asm]   slli v64, v63, 1  # live: [v62, v16, v21, v22, v17, s11, v64, v60, v18, zero, v23, v20, v19, v15, v61]
// [Asm]   sub v65, v62, v64  # live: [v16, v21, v22, v65, v17, s11, v60, v18, zero, v23, v20, v19, v15, v61]
// [Asm]   slli v66, v65, 1  # live: [v66, v16, v21, v22, v17, s11, v60, v18, zero, v23, v20, v19, v15, v61]
// [Asm]   li v140, 1  # live: [v66, v16, v21, v22, v17, s11, v60, v18, zero, v23, v20, v19, v140, v15, v61]
// [Asm]   sub v67, v140, v66  # live: [v16, v21, v22, v67, v17, s11, v60, v18, zero, v23, v20, v19, v15, v61]
// [Asm]   mul v68, v61, v67  # live: [v16, v21, v22, v17, s11, v60, v18, zero, v68, v23, v20, v19, v15]
// [Asm]   add v69, v60, v68  # live: [v16, v69, v21, v22, v17, s11, v18, zero, v20, v23, v19, v15]
// [Asm]   sw v69, 0(v22)  # live: [v16, v21, v22, v17, s11, v18, zero, v20, v23, v19, v15]
// [Asm]   addi v11, s11, -4  # live: [v11, v16, v21, v22, v17, v18, zero, v20, v23, v19, v15]
// [Asm]   andi s11, v11, -8  # live: [v11, v16, v21, v22, v17, s11, v18, zero, v20, v23, v19, v15]
// [Asm]   li v137, 1  # live: [v11, v16, v21, v22, v17, s11, v18, zero, v20, v23, v19, v15, v137]
// [Asm]   sw v137, 0(v11)  # live: [v11, v16, v21, v22, v17, s11, v18, zero, v20, v23, v19, v15]
// [Asm]   addi v12, s11, -4  # live: [v11, v16, v21, v22, v17, v12, v18, zero, v20, v23, v19, v15]
// [Asm]   andi s11, v12, -8  # live: [v11, v16, v21, v22, v17, v12, s11, v18, zero, v20, v23, v19, v15]
// [Asm]   sw zero, 0(v12)  # live: [v11, v16, v21, v18, zero, v22, v20, v23, v19, v17, v12, s11, v15]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v76, v73, v74, v75, v77, v78], uses: [v11, v16, v12, v15, v18, v21], upward_exposed: [v11, v16, v12, v15, v18, v21], params_defs: []
// [Asm] # live_in: [v11, v16, v21, v22, v17, v12, s11, v18, zero, v20, v23, v19, v15], live_out: [v16, v21, v78, v22, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] # block parameters: []
// [Asm] .compute40.505_57:
// [Asm] # control
// [Asm]   mv v73, v16  # live: [v11, v16, v21, v22, v17, s11, v12, v73, v18, zero, v20, v23, v19, v15]
// [Asm]   mv v74, v12  # live: [v11, v16, v21, v22, v17, s11, v73, v18, zero, v20, v23, v19, v74, v15]
// [Asm]   mv v75, v11  # live: [v16, v21, v22, v17, s11, v73, v75, v18, zero, v20, v23, v19, v74, v15]
// [Asm]   mv v76, v15  # live: [v16, v21, v22, v17, s11, v73, v75, v18, zero, v20, v23, v19, v74, v15, v76]
// [Asm]   mv v77, v18  # live: [v16, v21, v22, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm]   mv v78, v21  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] 
// [Asm] # block info: defs: [v79, v133], uses: [v75, v79, v133], upward_exposed: [v75], params_defs: [v76, v73, v74, v75, v77, v78]
// [Asm] # live_in: [v16, v21, v78, v22, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76], live_out: [v16, v21, v78, v22, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] # block parameters: [v73, v74, v75, v76, v77, v78]
// [Asm] .compute40.505_46:
// [Asm]   lw v79, 0(v75)  # live: [v16, v21, v79, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] # control
// [Asm]   li v133, 1  # live: [v16, v21, v79, v22, v78, v133, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm]   bne v79, v133, .compute40.505_48  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] 
// [Asm] # block info: defs: [v86], uses: [v73, v86, v76], upward_exposed: [v73, v76], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76], live_out: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] # block parameters: []
// [Asm] .compute40.505_47:
// [Asm]   lw v86, 0(v76)  # live: [v16, v21, v78, v22, v17, s11, v86, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] # control
// [Asm]   beq v86, v73, .compute40.505_49  # live: [v16, v21, v78, v22, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] 
// [Asm] # block info: defs: [t1, v91, v120, v95, ft0, ft1, a1, fa1, v98, fa2, ft6, v97, fa6, a4, a6, ft10, v90, ft5, v102, ft7, ft4, ft9, a5, a0, fa4, v88, ft2, v92, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v100], uses: [v91, a0, v78, v120, v88, v95, v92, a2, a1, v98, zero, v97, v77, v74, v102, v100, v76], upward_exposed: [v76, v74, zero, v78, v77], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76], live_out: [v16, v21, v78, v22, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] # block parameters: []
// [Asm] .compute40.505_50:
// [Asm]   lw v88, 0(v78)  # live: [v16, v21, v22, v78, v88, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm]   sw v88, 0(v74)  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm]   # save_ctx2  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm]   mv a0, zero  # live: [v16, v21, a0, v22, v78, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm]   mv a1, v76  # live: [v16, v21, a0, v22, v78, v17, a1, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm]   mv a2, v78  # live: [v16, v21, a0, v22, v78, a2, v17, a1, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm]   call move_perm1_forward197.511  # live: [v16, v21, a0, v22, v78, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm]   mv v90, a0  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm]   # restore_ctx2  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm]   lw v91, 0(v76)  # live: [v16, v91, v21, v22, v78, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm]   lw v92, 0(v74)  # live: [v16, v91, v21, v22, v78, v92, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm]   th.surw v92, v78, v91, 2  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm]   lw v95, 0(v76)  # live: [v16, v21, v22, v78, v95, v17, s11, v73, v75, v18, zero, v20, v23, v77, v19, v74, v15, v76]
// [Asm]   th.lurw v97, v77, v95, 2  # live: [v16, v21, v22, v78, v95, v17, s11, v73, v75, v18, zero, v97, v20, v23, v77, v19, v74, v15, v76]
// [Asm]   addi v98, v97, -1  # live: [v16, v21, v22, v78, v95, v17, s11, v73, v98, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm]   th.surw v98, v77, v95, 2  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm]   lw v100, 0(v76)  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v100, v76]
// [Asm]   th.lurw v102, v77, v100, 2  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v102, v76]
// [Asm] # control
// [Asm]   li v120, 1  # live: [v16, v21, v22, v78, v120, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v102, v76]
// [Asm]   bge v102, v120, .compute40.505_51  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] 
// [Asm] # block info: defs: [v104, v105, v108], uses: [v104, v105, zero, v76], upward_exposed: [zero, v76], params_defs: []
// [Asm] # live_in: [v16, v21, v78, v22, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76], live_out: [v16, v21, v78, v22, v108, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] # block parameters: []
// [Asm] .compute40.505_52:
// [Asm]   lw v104, 0(v76)  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v104, v74, v15, v76]
// [Asm]   addi v105, v104, 1  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v105, v74, v15, v76]
// [Asm]   sw v105, 0(v76)  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] # control
// [Asm]   mv v108, zero  # live: [v16, v21, v22, v78, v17, v108, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] 
// [Asm] # block info: defs: [v111], uses: [zero], upward_exposed: [zero], params_defs: [v108]
// [Asm] # live_in: [v16, v21, v78, v22, v108, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76], live_out: [v16, v21, v78, v22, v111, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] # block parameters: [v108]
// [Asm] .compute40.505_53:
// [Asm] # control
// [Asm]   mv v111, zero  # live: [v16, v21, v22, v78, v17, v111, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v76, v73, v74, v75, v77, v78], upward_exposed: [v76, v73, v74, v75, v77, v78], params_defs: [v111]
// [Asm] # live_in: [v16, v21, v78, v22, v111, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76], live_out: [v16, v21, v78, v22, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] # block parameters: [v111]
// [Asm] .compute40.505_54:
// [Asm] # control
// [Asm]   mv v73, v73  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm]   mv v74, v74  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm]   mv v75, v75  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm]   mv v76, v76  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm]   mv v77, v77  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm]   mv v78, v78  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm]   j .compute40.505_46  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] 
// [Asm] # block info: defs: [v108], uses: [v75, zero], upward_exposed: [v75, zero], params_defs: []
// [Asm] # live_in: [v16, v21, v78, v22, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76], live_out: [v16, v21, v78, v22, v108, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] # block parameters: []
// [Asm] .compute40.505_51:
// [Asm]   sw zero, 0(v75)  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] # control
// [Asm]   mv v108, zero  # live: [v16, v21, v22, v78, v17, v108, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm]   j .compute40.505_53  # live: [v16, v21, v22, v78, v17, v108, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] 
// [Asm] # block info: defs: [v111], uses: [v75, zero, v76], upward_exposed: [v75, zero, v76], params_defs: []
// [Asm] # live_in: [v16, v21, v78, v22, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76], live_out: [v16, v21, v78, v22, v111, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] # block parameters: []
// [Asm] .compute40.505_49:
// [Asm]   sw zero, 0(v75)  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm]   sw zero, 0(v76)  # live: [v16, v21, v22, v78, v17, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] # control
// [Asm]   mv v111, zero  # live: [v16, v21, v22, v78, v17, v111, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm]   j .compute40.505_54  # live: [v16, v21, v22, v78, v17, v111, s11, v73, v75, v18, zero, v77, v20, v23, v19, v74, v15, v76]
// [Asm] 
// [Asm] # block info: defs: [v81], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v18, v21, zero, v20, v22, v23, v19, v17, v15, s11], live_out: [v16, v18, v21, zero, v20, v22, v23, v19, v81, v17, v15, s11]
// [Asm] # block parameters: []
// [Asm] .compute40.505_48:
// [Asm] # control
// [Asm]   mv v81, zero  # live: [v16, v18, v21, zero, v20, v22, v23, v19, v81, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v82], uses: [v81], upward_exposed: [v81], params_defs: [v81]
// [Asm] # live_in: [v16, v18, v21, zero, v20, v22, v23, v19, v81, v17, v15, s11], live_out: [v82, v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] # block parameters: [v81]
// [Asm] .compute40.505_55:
// [Asm] # control
// [Asm]   mv v82, v81  # live: [v82, v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v84, v83], uses: [v16, v18, v21, v20, v22, v23, v19, v84, v17, v83, v15], upward_exposed: [v16, v18, v21, v20, v22, v23, v19, v17, v15], params_defs: [v82]
// [Asm] # live_in: [v82, v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11], live_out: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] # block parameters: [v82]
// [Asm] .compute40.505_11:
// [Asm]   lw v83, 0(v20)  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, s11, v15, v83]
// [Asm]   addi v84, v83, 1  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v84, v17, s11, v15]
// [Asm]   sw v84, 0(v20)  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] # control
// [Asm]   mv v15, v15  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v16, v16  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v17, v17  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v18, v18  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v19, v19  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v20, v20  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v21, v21  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v22, v22  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v23, v23  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   j .compute40.505_0  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v59], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v18, v21, zero, v22, v20, v23, v19, v17, s11, v15], live_out: [v16, v18, v21, zero, v22, v20, v23, v19, v59, v17, v15, s11]
// [Asm] # block parameters: []
// [Asm] .compute40.505_4:
// [Asm] # control
// [Asm]   mv v59, zero  # live: [v16, v18, v21, zero, v22, v20, v23, v19, v59, v17, v15, s11]
// [Asm]   j .compute40.505_5  # live: [v16, v18, v21, zero, v22, v20, v23, v19, v59, v17, v15, s11]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main262.502  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] init_count59.507:
// [Asm] # block info: defs: [v3, v4, v20, v2], uses: [v4, a1, a0, v20, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v3, zero, v2]
// [Asm] # block parameters: []
// [Asm] .init_count59.507_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm]   lw v4, 0(v2)  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   li v20, 1  # live: [v2, v4, zero, v20, v3]
// [Asm]   beq v4, v20, .init_count59.507_1  # live: [v2, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, v11, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v11, v10, a0, v13, v7, v6, a1, v3], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, zero, v3], live_out: [v14, zero]
// [Asm] # block parameters: []
// [Asm] .init_count59.507_2:
// [Asm]   lw v6, 0(v2)  # live: [v2, v6, zero, v3]
// [Asm]   addi v7, v6, -1  # live: [v2, v7, v6, zero, v3]
// [Asm]   th.surw v6, v3, v7, 2  # live: [v2, zero, v3]
// [Asm]   lw v10, 0(v2)  # live: [v2, v10, zero, v3]
// [Asm]   addi v11, v10, -1  # live: [v2, v11, zero, v3]
// [Asm]   sw v11, 0(v2)  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [zero, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, zero, a0]
// [Asm]   call init_count59.507  # live: [zero, a0]
// [Asm]   mv v13, a0  # live: [zero, v13]
// [Asm]   # restore_ctx2  # live: [zero, v13]
// [Asm] # control
// [Asm]   mv v14, v13  # live: [v14, zero]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: [v14]
// [Asm] # live_in: [v14, zero], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .init_count59.507_3:
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14, zero]
// [Asm] # block parameters: []
// [Asm] .init_count59.507_1:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14, zero]
// [Asm]   j .init_count59.507_3  # live: [v14, zero]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("fannkuch", Tuple([Int, Int])), args: [("n", Int)], body: LetRec({name: ("gen_perm1", Array(Int)), args: [("len", Int)], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))}, Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("gen_perm1", Array(Int)), args: [("len", Int)], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))}, Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr")))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))
// [Knf] build_knf: App(Var("init_arr"), [Int(0)])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))))
// [Knf] build_knf: App(Var("gen_perm1"), [Var("n")])
// [Knf] build_knf: Var("gen_perm1")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))
// [Knf] build_knf: Array(Int(1), Var("n"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))
// [Knf] build_knf: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i")))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm1"), Var("i"))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("copy_perm")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))
// [Knf] build_knf: App(Var("copy_perm"), [Int(0)])
// [Knf] build_knf: Var("copy_perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)
// [Knf] build_knf: If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit)
// [Knf] build_knf: If(Eq(Get(Var("r"), Int(0)), Int(1)), Unit, Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), [])))
// [Knf] build_knf: Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))
// [Knf] build_knf: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("init_count"), [])
// [Knf] build_knf: Var("init_count")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))
// [Knf] build_knf: App(Var("init_count"), [])
// [Knf] build_knf: Var("init_count")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))
// [Knf] build_knf: Put(Var("flips"), Int(0), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))
// [Knf] build_knf: Array(Int(1), Get(Var("perm"), Int(0)))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("perm"), Int(0))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))
// [Knf] build_knf: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)
// [Knf] build_knf: If(Eq(Get(Var("k"), Int(0)), Int(0)), Unit, Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Put(Var("t"), Int(0), Get(Var("perm"), Var("i")))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm"), Var("i"))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0)))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("t"), Int(0))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("flip_loop")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))))
// [Knf] build_knf: App(Var("flip_loop"), [Int(0)])
// [Knf] build_knf: Var("flip_loop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))
// [Knf] build_knf: Put(Var("k"), Int(0), Get(Var("perm"), Int(0)))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm"), Int(0))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))
// [Knf] build_knf: Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("do_flip"), [Var("k")])
// [Knf] build_knf: Var("do_flip")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))
// [Knf] build_knf: App(Var("do_flip"), [Var("k")])
// [Knf] build_knf: Var("do_flip")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))
// [Knf] build_knf: If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit)
// [Knf] build_knf: Get(Var("max_flips"), Int(0))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0)))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))
// [Knf] build_knf: Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int)))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("check_sum"), Int(0))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int))
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))
// [Knf] build_knf: Array(Int(1), Bool(true))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))
// [Knf] build_knf: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)
// [Knf] build_knf: Get(Var("go"), Int(0))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), []))
// [Knf] build_knf: If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))))))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit))
// [Knf] build_knf: Put(Var("go"), Int(0), Bool(false))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)
// [Knf] build_knf: Put(Var("r"), Int(0), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))
// [Knf] build_knf: Put(Var("t"), Int(0), Get(Var("perm1"), Int(0)))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm1"), Int(0))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit))
// [Knf] build_knf: Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)
// [Knf] build_knf: App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("move_perm1_forward")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))
// [Knf] build_knf: App(Var("move_perm1_forward"), [Int(0)])
// [Knf] build_knf: Var("move_perm1_forward")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))
// [Knf] build_knf: Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0)))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("t"), Int(0))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))
// [Knf] build_knf: Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("count"), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)
// [Knf] build_knf: If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("count"), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Put(Var("go"), Int(0), Bool(false))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("go_loop"), [])
// [Knf] build_knf: Var("go_loop")
// [Knf] build_knf: Unit
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))
// [Knf] build_knf: App(Var("go_loop"), [])
// [Knf] build_knf: Var("go_loop")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))
// [Knf] build_knf: Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("compute"), [Var("r")])
// [Knf] build_knf: Var("compute")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))
// [Knf] build_knf: App(Var("compute"), [Var("r")])
// [Knf] build_knf: Var("compute")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])
// [Knf] build_knf: Get(Var("max_flips"), Int(0))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("check_sum"), Int(0))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))}, App(Var("main"), []))
// [Knf] build_knf: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))
// [Knf] build_knf: App(Var("fannkuch"), [Int(9)])
// [Knf] build_knf: Var("fannkuch")
// [Knf] build_knf: Int(9)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")]))
// [Knf] build_knf: App(Var("print_int"), [Var("check_sum")])
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: App(Var("print_int"), [Var("max_flips")])
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl move_perm1_forward197.511
// [Main]   .type move_perm1_forward197.511, @function
// [Main] # leaf false
// [Main] move_perm1_forward197.511:
// [Main] .move_perm1_forward197.511_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a3, a0
// [Main]   lw a0, 0(a1)
// [Main]   addi a0, a0, -1
// [Main]   blt a0, a3, .move_perm1_forward197.511_2
// [Main] 
// [Main] .move_perm1_forward197.511_1:
// [Main]   addi a0, a3, 1
// [Main]   th.lurw a4, a2, a0, 2
// [Main]   th.surw a4, a2, a3, 2
// [Main]   call move_perm1_forward197.511
// [Main]   mv a0, zero
// [Main] 
// [Main] .move_perm1_forward197.511_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .move_perm1_forward197.511_2:
// [Main]   mv a0, zero
// [Main]   j .move_perm1_forward197.511_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main262.502
// [Main]   .type main262.502, @function
// [Main] # leaf false
// [Main] main262.502:
// [Main] .main262.502_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   li a0, 9
// [Main]   call gen_perm14.503
// [Main]   mv a6, a0
// [Main]   addi a2, s11, -36
// [Main]   andi s11, a2, -8
// [Main]   sw zero, 0(a2)
// [Main]   sw zero, 4(a2)
// [Main]   sw zero, 8(a2)
// [Main]   sw zero, 12(a2)
// [Main]   sw zero, 16(a2)
// [Main]   sw zero, 20(a2)
// [Main]   sw zero, 24(a2)
// [Main]   sw zero, 28(a2)
// [Main]   sw zero, 32(a2)
// [Main]   addi a3, s11, -36
// [Main]   andi s11, a3, -8
// [Main]   sw zero, 0(a3)
// [Main]   sw zero, 4(a3)
// [Main]   sw zero, 8(a3)
// [Main]   sw zero, 12(a3)
// [Main]   sw zero, 16(a3)
// [Main]   sw zero, 20(a3)
// [Main]   sw zero, 24(a3)
// [Main]   sw zero, 28(a3)
// [Main]   sw zero, 32(a3)
// [Main]   addi a4, s11, -4
// [Main]   andi s11, a4, -8
// [Main]   sw zero, 0(a4)
// [Main]   addi s0, s11, -4
// [Main]   andi s11, s0, -8
// [Main]   sw zero, 0(s0)
// [Main]   addi s1, s11, -4
// [Main]   andi s11, s1, -8
// [Main]   sw zero, 0(s1)
// [Main]   addi a5, s11, -4
// [Main]   andi s11, a5, -8
// [Main]   sw zero, 0(a5)
// [Main]   addi a0, s11, -4
// [Main]   andi s11, a0, -8
// [Main]   li a1, 9
// [Main]   sw a1, 0(a0)
// [Main]   li a1, 9
// [Main]   mv a7, s1
// [Main]   mv t0, s0
// [Main]   call compute40.505
// [Main]   lw a0, 0(s0)
// [Main]   lw a2, 0(s1)
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   sw a0, 0(a1)
// [Main]   sw a2, 4(a1)
// [Main]   lw s0, 0(a1)
// [Main]   lw a0, 4(a1)
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_arr9.504
// [Main]   .type init_arr9.504, @function
// [Main] # leaf true
// [Main] init_arr9.504:
// [Main] .init_arr9.504_5:
// [Main] 
// [Main] .init_arr9.504_0:
// [Main]   addi a3, a2, -1
// [Main]   blt a3, a0, .init_arr9.504_2
// [Main] 
// [Main] .init_arr9.504_1:
// [Main]   th.surw a0, a1, a0, 2
// [Main]   addi a0, a0, 1
// [Main]   j .init_arr9.504_0
// [Main] 
// [Main] .init_arr9.504_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .init_arr9.504_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl flip_loop99.509
// [Main]   .type flip_loop99.509, @function
// [Main] # leaf true
// [Main] flip_loop99.509:
// [Main] .flip_loop99.509_5:
// [Main] 
// [Main] .flip_loop99.509_0:
// [Main]   lw a4, 0(a2)
// [Main]   srai a4, a4, 1
// [Main]   blt a4, a0, .flip_loop99.509_2
// [Main] 
// [Main] .flip_loop99.509_1:
// [Main]   th.lurw a4, a3, a0, 2
// [Main]   sw a4, 0(a1)
// [Main]   lw a4, 0(a2)
// [Main]   sub a4, a4, a0
// [Main]   th.lurw a4, a3, a4, 2
// [Main]   th.surw a4, a3, a0, 2
// [Main]   lw a4, 0(a2)
// [Main]   sub a4, a4, a0
// [Main]   lw a5, 0(a1)
// [Main]   th.surw a5, a3, a4, 2
// [Main]   addi a0, a0, 1
// [Main]   j .flip_loop99.509_0
// [Main] 
// [Main] .flip_loop99.509_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .flip_loop99.509_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl gen_perm14.503
// [Main]   .type gen_perm14.503, @function
// [Main] # leaf false
// [Main] gen_perm14.503:
// [Main] .gen_perm14.503_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a2, a0
// [Main]   slliw a0, a2, 2
// [Main]   sub s0, s11, a0
// [Main]   andi s11, s0, -8
// [Main]   mv a1, a2
// [Main]   mv a0, zero
// [Main]   mv a1, s0
// [Main]   call init_arr9.504
// [Main]   mv a0, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl compute40.505
// [Main]   .type compute40.505, @function
// [Main] # leaf false
// [Main] compute40.505:
// [Main] .compute40.505_8:
// [Main]   addi sp, sp, -96
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   sd s8, 72(sp)
// [Main]   sd s9, 80(sp)
// [Main]   sd s10, 88(sp)
// [Main]   mv s9, a0
// [Main]   mv s0, a1
// [Main]   mv s4, a2
// [Main]   mv s6, a3
// [Main]   mv s3, a4
// [Main]   mv s8, a5
// [Main]   mv s1, a6
// [Main]   mv s2, a7
// [Main]   mv s7, t0
// [Main] 
// [Main] .compute40.505_0:
// [Main]   lw a0, 0(s9)
// [Main]   li a1, 1
// [Main]   blt a0, a1, .compute40.505_2
// [Main] 
// [Main] .compute40.505_1:
// [Main] 
// [Main] .compute40.505_45:
// [Main]   mv a0, zero
// [Main]   mv a2, s0
// [Main]   mv a3, s4
// [Main]   mv a4, s1
// [Main] 
// [Main] .compute40.505_40:
// [Main]   addi a1, a2, -1
// [Main]   blt a1, a0, .compute40.505_42
// [Main] 
// [Main] .compute40.505_41:
// [Main]   th.lurw a1, a4, a0, 2
// [Main]   th.surw a1, a3, a0, 2
// [Main]   addi a0, a0, 1
// [Main]   j .compute40.505_40
// [Main] 
// [Main] .compute40.505_42:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.505_43:
// [Main] 
// [Main] .compute40.505_9:
// [Main]   mv a0, s9
// [Main]   mv a1, s6
// [Main]   call init_count59.507
// [Main]   sw zero, 0(s3)
// [Main]   lw a0, 0(s4)
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw a0, 0(a1)
// [Main] 
// [Main] .compute40.505_36:
// [Main]   mv s5, a1
// [Main] 
// [Main] .compute40.505_31:
// [Main]   lw a0, 0(s5)
// [Main]   beq a0, zero, .compute40.505_32
// [Main] 
// [Main] .compute40.505_33:
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw zero, 0(a1)
// [Main]   mv a0, zero
// [Main]   mv a2, s5
// [Main]   mv a3, s4
// [Main]   call flip_loop99.509
// [Main] 
// [Main] .compute40.505_37:
// [Main]   lw a0, 0(s4)
// [Main]   sw a0, 0(s5)
// [Main]   lw a0, 0(s3)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s3)
// [Main]   j .compute40.505_31
// [Main] 
// [Main] .compute40.505_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.505_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   ld s8, 72(sp)
// [Main]   ld s9, 80(sp)
// [Main]   ld s10, 88(sp)
// [Main]   addi sp, sp, 96
// [Main]   ret
// [Main] 
// [Main] .compute40.505_32:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.505_34:
// [Main] 
// [Main] .compute40.505_10:
// [Main]   lw a0, 0(s7)
// [Main]   lw a1, 0(s3)
// [Main]   blt a1, a0, .compute40.505_4
// [Main] 
// [Main] .compute40.505_3:
// [Main]   lw a0, 0(s3)
// [Main]   sw a0, 0(s7)
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.505_5:
// [Main]   lw a0, 0(s2)
// [Main]   lw a1, 0(s3)
// [Main]   lw a2, 0(s8)
// [Main]   srai a3, a2, 1
// [Main]   slli a3, a3, 1
// [Main]   sub a2, a2, a3
// [Main]   slli a2, a2, 1
// [Main]   li a3, 1
// [Main]   sub a2, a3, a2
// [Main]   mul a1, a1, a2
// [Main]   add a0, a0, a1
// [Main]   sw a0, 0(s2)
// [Main]   addi a0, s11, -4
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw zero, 0(a1)
// [Main] 
// [Main] .compute40.505_57:
// [Main]   mv s10, a1
// [Main]   mv s5, a0
// [Main] 
// [Main] .compute40.505_46:
// [Main]   lw a0, 0(s5)
// [Main]   li a1, 1
// [Main]   bne a0, a1, .compute40.505_48
// [Main] 
// [Main] .compute40.505_47:
// [Main]   lw a0, 0(s9)
// [Main]   beq a0, s0, .compute40.505_49
// [Main] 
// [Main] .compute40.505_50:
// [Main]   lw a0, 0(s1)
// [Main]   sw a0, 0(s10)
// [Main]   mv a0, zero
// [Main]   mv a1, s9
// [Main]   mv a2, s1
// [Main]   call move_perm1_forward197.511
// [Main]   lw a0, 0(s9)
// [Main]   lw a1, 0(s10)
// [Main]   th.surw a1, s1, a0, 2
// [Main]   lw a0, 0(s9)
// [Main]   th.lurw a1, s6, a0, 2
// [Main]   addi a1, a1, -1
// [Main]   th.surw a1, s6, a0, 2
// [Main]   lw a0, 0(s9)
// [Main]   th.lurw a0, s6, a0, 2
// [Main]   li a1, 1
// [Main]   bge a0, a1, .compute40.505_51
// [Main] 
// [Main] .compute40.505_52:
// [Main]   lw a0, 0(s9)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s9)
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.505_53:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.505_54:
// [Main]   j .compute40.505_46
// [Main] 
// [Main] .compute40.505_51:
// [Main]   sw zero, 0(s5)
// [Main]   mv a0, zero
// [Main]   j .compute40.505_53
// [Main] 
// [Main] .compute40.505_49:
// [Main]   sw zero, 0(s5)
// [Main]   sw zero, 0(s9)
// [Main]   mv a0, zero
// [Main]   j .compute40.505_54
// [Main] 
// [Main] .compute40.505_48:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.505_55:
// [Main] 
// [Main] .compute40.505_11:
// [Main]   lw a0, 0(s8)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s8)
// [Main]   j .compute40.505_0
// [Main] 
// [Main] .compute40.505_4:
// [Main]   mv a0, zero
// [Main]   j .compute40.505_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main262.502
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_count59.507
// [Main]   .type init_count59.507, @function
// [Main] # leaf false
// [Main] init_count59.507:
// [Main] .init_count59.507_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a2, a0
// [Main]   lw a0, 0(a2)
// [Main]   li a3, 1
// [Main]   beq a0, a3, .init_count59.507_1
// [Main] 
// [Main] .init_count59.507_2:
// [Main]   lw a0, 0(a2)
// [Main]   addi a3, a0, -1
// [Main]   th.surw a0, a1, a3, 2
// [Main]   lw a0, 0(a2)
// [Main]   addi a0, a0, -1
// [Main]   sw a0, 0(a2)
// [Main]   mv a0, a2
// [Main]   call init_count59.507
// [Main] 
// [Main] .init_count59.507_3:
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .init_count59.507_1:
// [Main]   mv a0, zero
// [Main]   j .init_count59.507_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function move_perm1_forward197.511
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f6, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f6, fpref=$f.2), offset=Insn(iref=%3), width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f6, fpref=$f.2), offset=FnParam(fref=f6, fpref=$f.0), width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[Insn(iref=%3), FnParam(fref=f6, fpref=$f.1), FnParam(fref=f6, fpref=$f.2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.1), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f6, fpref=$f.0), Insn(iref=%1)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function move_perm1_forward197.511 to wasm
// [Wasm] Lowering function flip_loop99.509
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32), val=Insn(iref=%3))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=Insn(iref=%6), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%9), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=Insn(iref=%10), width=@32), val=Insn(iref=%11))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%13), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%0), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f4, fpref=$f.0), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2), FnParam(fref=f4, fpref=$f.3)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function flip_loop99.509 to wasm
// [Wasm] Lowering function compute40.505
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b40, bpref=$b.3), offset=BlockParam(bref=b40, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b40, bpref=$b.2), offset=BlockParam(bref=b40, bpref=$b.0), width=@32), val=Insn(iref=%42))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b40, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering control Jump(target=b40, args=[Insn(iref=%44), BlockParam(bref=b40, bpref=$b.1), BlockParam(bref=b40, bpref=$b.2), BlockParam(bref=b40, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Lowering control Jump(target=b46, args=[BlockParam(bref=b46, bpref=$b.0), BlockParam(bref=b46, bpref=$b.1), BlockParam(bref=b46, bpref=$b.2), BlockParam(bref=b46, bpref=$b.3), BlockParam(bref=b46, bpref=$b.4), BlockParam(bref=b46, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.0) -> $b46.$b.0
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.0) -> $b46.$b.0
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.1) -> $b46.$b.1
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.1) -> $b46.$b.1
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.2) -> $b46.$b.2
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.2) -> $b46.$b.2
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.4) -> $b46.$b.4
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.4) -> $b46.$b.4
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.5) -> $b46.$b.5
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.5) -> $b46.$b.5
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b46, bpref=$b.2), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.2) -> $b46.$b.2
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.3), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Lowering control Jump(target=b54, args=[Unit])
// [Wasm] Lowering control Jump(target=b54, args=[Unit])
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b46, bpref=$b.2), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.2) -> $b46.$b.2
// [Wasm] Lowering control Jump(target=b53, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%66), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.3), index=0, width=@32), val=Insn(iref=%67))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Lowering control Jump(target=b53, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.5), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.5) -> $b46.$b.5
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.1), index=0, width=@32), val=Insn(iref=%51))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.1) -> $b46.$b.1
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[Int32(val=0), BlockParam(bref=b46, bpref=$b.3), BlockParam(bref=b46, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.5) -> $b46.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.1) -> $b46.$b.1
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b46, bpref=$b.5), offset=Insn(iref=%54), width=@32), val=Insn(iref=%55))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.5) -> $b46.$b.5
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b46, bpref=$b.4), offset=Insn(iref=%57), width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.4) -> $b46.$b.4
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%59), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b46, bpref=$b.4), offset=Insn(iref=%57), width=@32), val=Insn(iref=%60))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.4) -> $b46.$b.4
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b46, bpref=$b.4), offset=Insn(iref=%62), width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.4) -> $b46.$b.4
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Get Local name Insn(iref=%63) -> $%63
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%63)])
// [Wasm] Get Local name Insn(iref=%63) -> $%63
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering control Branch(cond=Insn(iref=%64), t=b51, t_args=[], f=b52, f_args=[])
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b46, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%47), BlockParam(bref=b46, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.0) -> $b46.$b.0
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering control Branch(cond=Insn(iref=%48), t=b49, t_args=[], f=b50, f_args=[])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%28), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32), val=Insn(iref=%29))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5), BlockParam(bref=b0, bpref=$b.6), BlockParam(bref=b0, bpref=$b.7), BlockParam(bref=b0, bpref=$b.8)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Lowering control Jump(target=b11, args=[BlockParam(bref=b55, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b55, args=[Unit])
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b46, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.2) -> $b46.$b.2
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%45), Bool(val=true)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering control Branch(cond=Insn(iref=%46), t=b47, t_args=[], f=b48, f_args=[])
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering control Jump(target=b56, args=[BlockParam(bref=b0, bpref=$b.1), Mem(fref=f8, mref=m2), Mem(fref=f8, mref=m1), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.6)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.0) -> $b46.$b.0
// [Wasm] Get Local name Mem(fref=f8, mref=m2) -> $f8.m2
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.1) -> $b46.$b.1
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.2) -> $b46.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.4) -> $b46.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name BlockParam(bref=b46, bpref=$b.5) -> $b46.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.7), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%15), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%17), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%15), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%19), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=1), Insn(iref=%20)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%14), Insn(iref=%21)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%13), Insn(iref=%22)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.7), index=0, width=@32), val=Insn(iref=%23))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Init(val=Bool(val=true))])
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m2) -> $f8.m2
// [Wasm] Lowering control Jump(target=b57, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.8), index=0, width=@32), val=Insn(iref=%11))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.8), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%8), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Branch(cond=Insn(iref=%10), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b10, args=[BlockParam(bref=b34, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b34, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.0), index=0, width=@32), val=Insn(iref=%35))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%37), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.2), index=0, width=@32), val=Insn(iref=%38))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering control Jump(target=b31, args=[BlockParam(bref=b31, bpref=$b.0), BlockParam(bref=b31, bpref=$b.1), BlockParam(bref=b31, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m31, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m31) -> $f8.m31
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Int32(val=0), Mem(fref=f8, mref=m31), BlockParam(bref=b31, bpref=$b.0), BlockParam(bref=b31, bpref=$b.1)])
// [Wasm] Get Local name Mem(fref=f8, mref=m31) -> $f8.m31
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Lowering control Jump(target=b37, args=[Insn(iref=%34)])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%31), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering control Branch(cond=Insn(iref=%32), t=b32, t_args=[], f=b33, f_args=[])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering control Jump(target=b35, args=[Mem(fref=f8, mref=m0), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Insn(iref=%5))])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Lowering control Jump(target=b36, args=[])
// [Wasm] Lowering control Jump(target=b9, args=[BlockParam(bref=b43, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b43, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b40, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b40, bpref=$b.0), Insn(iref=%40)])
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering control Branch(cond=Insn(iref=%41), t=b41, t_args=[], f=b42, f_args=[])
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering control Jump(target=b44, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.6)])
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Lowering control Jump(target=b45, args=[])
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f8, fpref=$f.0), FnParam(fref=f8, fpref=$f.1), FnParam(fref=f8, fpref=$f.2), FnParam(fref=f8, fpref=$f.3), FnParam(fref=f8, fpref=$f.4), FnParam(fref=f8, fpref=$f.5), FnParam(fref=f8, fpref=$f.6), FnParam(fref=f8, fpref=$f.7), FnParam(fref=f8, fpref=$f.8)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.7) -> $$f.7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.8) -> $$f.8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.7) -> $$f.7
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.8) -> $$f.8
// [Wasm] Local BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%63) -> $%63
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Local BlockParam(bref=b46, bpref=$b.5) -> $b46.$b.5
// [Wasm] Local BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%64) -> $%64
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%54) -> $%54
// [Wasm] Local Insn(iref=%60) -> $%60
// [Wasm] Local Insn(iref=%67) -> $%67
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%55) -> $%55
// [Wasm] Local Insn(iref=%66) -> $%66
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Mem(fref=f8, mref=m2) -> $f8.m2
// [Wasm] Local BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Local BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Local BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Local BlockParam(bref=b46, bpref=$b.1) -> $b46.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local BlockParam(bref=b46, bpref=$b.3) -> $b46.$b.3
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%57) -> $%57
// [Wasm] Local BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Insn(iref=%62) -> $%62
// [Wasm] Local Mem(fref=f8, mref=m31) -> $f8.m31
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local BlockParam(bref=b46, bpref=$b.4) -> $b46.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local BlockParam(bref=b46, bpref=$b.0) -> $b46.$b.0
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local BlockParam(bref=b46, bpref=$b.2) -> $b46.$b.2
// [Wasm] Lowered function compute40.505 to wasm
// [Wasm] Lowering function main262.502
// [Wasm] Lowering insn Call(ty=Array(elem=Int32), f=f1, args=[Int32(val=9)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m2) -> $f9.m2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m3, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m3) -> $f9.m3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m4, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m4) -> $f9.m4
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m5, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m6, fills=[Init(val=Int32(val=9))])
// [Wasm] Get Local name Mem(fref=f9, mref=m6) -> $f9.m6
// [Wasm] Lowering insn Call(ty=Unit, f=f8, args=[Mem(fref=f9, mref=m6), Int32(val=9), Mem(fref=f9, mref=m0), Mem(fref=f9, mref=m1), Mem(fref=f9, mref=m2), Mem(fref=f9, mref=m5), Insn(iref=%0), Mem(fref=f9, mref=m4), Mem(fref=f9, mref=m3)])
// [Wasm] Get Local name Mem(fref=f9, mref=m6) -> $f9.m6
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Get Local name Mem(fref=f9, mref=m2) -> $f9.m2
// [Wasm] Get Local name Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f9, mref=m4) -> $f9.m4
// [Wasm] Get Local name Mem(fref=f9, mref=m3) -> $f9.m3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m3), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m3) -> $f9.m3
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m4), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f9, mref=m4) -> $f9.m4
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m7, fills=[Field(index=0, val=Insn(iref=%9)), Field(index=1, val=Insn(iref=%10))])
// [Wasm] Get Local name Mem(fref=f9, mref=m7) -> $f9.m7
// [Wasm] Get Local name Mem(fref=f9, mref=m7) -> $f9.m7
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Mem(fref=f9, mref=m7) -> $f9.m7
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m7), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Mem(fref=f9, mref=m7) -> $f9.m7
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f9, mref=m7), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Mem(fref=f9, mref=m7) -> $f9.m7
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Return(args=[Insn(iref=%15)])
// [Wasm] Local Mem(fref=f9, mref=m4) -> $f9.m4
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Mem(fref=f9, mref=m5) -> $f9.m5
// [Wasm] Local Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Local Mem(fref=f9, mref=m7) -> $f9.m7
// [Wasm] Local Mem(fref=f9, mref=m2) -> $f9.m2
// [Wasm] Local Mem(fref=f9, mref=m3) -> $f9.m3
// [Wasm] Local Mem(fref=f9, mref=m6) -> $f9.m6
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main262.502 to wasm
// [Wasm] Lowering function init_arr9.504
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=BlockParam(bref=b0, bpref=$b.0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function init_arr9.504 to wasm
// [Wasm] Lowering function gen_perm14.503
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[Int32(val=0), Mem(fref=f1, mref=m0), FnParam(fref=f1, fpref=$f.0)])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Lowering control Return(args=[Mem(fref=f1, mref=m0)])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowered function gen_perm14.503 to wasm
// [Wasm] Lowering function init_count59.507
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%2), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.1), offset=Insn(iref=%3), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%6), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.0), index=0, width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%9)])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function init_count59.507 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f9, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] freq: {fannkuch1: Once, gen_perm14: Once, init_arr9: Many(2), compute40: Many(2), copy_perm46: Many(2), init_count59: Many(2), do_flip90: Many(2), flip_loop99: Many(2), go_loop179: Many(2), move_perm1_forward197: Many(2), main262: Once}
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(gen_perm14)
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 43
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 43
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 83
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 83
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 119
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 119
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 375
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 375
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(fannkuch1)
// [KnfOpt] Numbers of let rec: 10 10 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %14: Call(ty=Unit, f=f4, args=[Insn(iref=%13), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2), FnParam(fref=f4, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %31: Call(ty=Unit, f=f8, args=[FnParam(fref=f8, fpref=$f.0), FnParam(fref=f8, fpref=$f.1), FnParam(fref=f8, fpref=$f.2), FnParam(fref=f8, fpref=$f.3), FnParam(fref=f8, fpref=$f.4), FnParam(fref=f8, fpref=$f.5), FnParam(fref=f8, fpref=$f.6), FnParam(fref=f8, fpref=$f.7), FnParam(fref=f8, fpref=$f.8)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f0, args=[Insn(iref=%3), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f5, args=[FnParam(fref=f5, fpref=$f.0), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f2, args=[Insn(iref=%4), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %24: Call(ty=Unit, f=f7, args=[FnParam(fref=f7, fpref=$f.0), FnParam(fref=f7, fpref=$f.1), FnParam(fref=f7, fpref=$f.2), FnParam(fref=f7, fpref=$f.3), FnParam(fref=f7, fpref=$f.4), FnParam(fref=f7, fpref=$f.5)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Multiple, f4: Once, f8: Once, f9: Once, f0: Once, f1: Once, f5: Once, f2: Once, f3: Multiple, f7: Once, f20: Once})
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] compute40.505 is inlining Call(ty=Unit, f=f5, args=[Mem(fref=f8, mref=m0), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.4)])
// [CoreOpt] shifted callee .fn do_flip90.508 #f5 : fn(array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b36 {
// [CoreOpt]   .bb #b31 (array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %31: int32 = load int32 field($b31.0, 0 * @32)
// [CoreOpt]     let %32: bool = eq(%31, 0)
// [CoreOpt]     br %32 b32() b33()
// [CoreOpt]   }
// [CoreOpt]   .bb #b32 () {
// [CoreOpt]     jump b34(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b33 () {
// [CoreOpt]     let _ = alloc <m31: array[int32] heap(1)> <- [..] = 0
// [CoreOpt]     let %34: unit = call f4(0, f5.m31, $b31.0, $b31.1)
// [CoreOpt]     jump b37(%34)
// [CoreOpt]   }
// [CoreOpt]   .bb #b34 (unit) {
// [CoreOpt]     return $b34.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b35 pre #Some(b36) header #b31 {
// [CoreOpt]     .block #b32
// [CoreOpt]     .block #b33
// [CoreOpt]     .block #b34
// [CoreOpt]   }
// [CoreOpt]   .bb #b36 () {
// [CoreOpt]     jump b35($f0, $f1, $f2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b37 (unit) {
// [CoreOpt]     let %35: int32 = load int32 field($b31.1, 0 * @32)
// [CoreOpt]     let _ = store int32 field($b31.0, 0 * @32) <- %35
// [CoreOpt]     let %37: int32 = load int32 field($b31.2, 0 * @32)
// [CoreOpt]     let %38: int32 = add(%37, 1)
// [CoreOpt]     let _ = store int32 field($b31.2, 0 * @32) <- %38
// [CoreOpt]     jump b31($b31.0, $b31.1, $b31.2)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] compute40.505 is inlining Call(ty=Unit, f=f2, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.6)])
// [CoreOpt] shifted callee .fn copy_perm46.506 #f2 : fn(int32, int32, array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b45 {
// [CoreOpt]   .bb #b40 (int32, int32, array[int32], array[int32]) {
// [CoreOpt]     let %40: int32 = sub($b40.1, 1)
// [CoreOpt]     let %41: bool = le($b40.0, %40)
// [CoreOpt]     br %41 b41() b42()
// [CoreOpt]   }
// [CoreOpt]   .bb #b41 () {
// [CoreOpt]     let %42: int32 = load int32 offset($b40.3, $b40.0 * @32)
// [CoreOpt]     let _ = store int32 offset($b40.2, $b40.0 * @32) <- %42
// [CoreOpt]     let %44: int32 = add($b40.0, 1)
// [CoreOpt]     jump b40(%44, $b40.1, $b40.2, $b40.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b42 () {
// [CoreOpt]     jump b43(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b43 (unit) {
// [CoreOpt]     return $b43.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b44 pre #Some(b45) header #b40 {
// [CoreOpt]     .block #b41
// [CoreOpt]     .block #b42
// [CoreOpt]     .block #b43
// [CoreOpt]   }
// [CoreOpt]   .bb #b45 () {
// [CoreOpt]     jump b44($f0, $f1, $f2, $f3)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] compute40.505 is inlining Call(ty=Unit, f=f7, args=[BlockParam(bref=b0, bpref=$b.1), Mem(fref=f8, mref=m2), Mem(fref=f8, mref=m1), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.6)])
// [CoreOpt] shifted callee .fn go_loop179.510 #f7 : fn(int32, array[int32], array[bool], array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b57 {
// [CoreOpt]   .bb #b46 (int32, array[int32], array[bool], array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %45: bool = load bool field($b46.2, 0 * @32)
// [CoreOpt]     let %46: bool = eq(%45, true)
// [CoreOpt]     br %46 b47() b48()
// [CoreOpt]   }
// [CoreOpt]   .bb #b47 () {
// [CoreOpt]     let %47: int32 = load int32 field($b46.3, 0 * @32)
// [CoreOpt]     let %48: bool = eq(%47, $b46.0)
// [CoreOpt]     br %48 b49() b50()
// [CoreOpt]   }
// [CoreOpt]   .bb #b48 () {
// [CoreOpt]     jump b55(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b49 () {
// [CoreOpt]     let _ = store bool field($b46.2, 0 * @32) <- false
// [CoreOpt]     let _ = store int32 field($b46.3, 0 * @32) <- 0
// [CoreOpt]     jump b54(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b50 () {
// [CoreOpt]     let %51: int32 = load int32 field($b46.5, 0 * @32)
// [CoreOpt]     let _ = store int32 field($b46.1, 0 * @32) <- %51
// [CoreOpt]     let %53: unit = call f6(0, $b46.3, $b46.5)
// [CoreOpt]     let %54: int32 = load int32 field($b46.3, 0 * @32)
// [CoreOpt]     let %55: int32 = load int32 field($b46.1, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($b46.5, %54 * @32) <- %55
// [CoreOpt]     let %57: int32 = load int32 field($b46.3, 0 * @32)
// [CoreOpt]     let %58: int32 = load int32 field($b46.3, 0 * @32)
// [CoreOpt]     let %59: int32 = load int32 offset($b46.4, %58 * @32)
// [CoreOpt]     let %60: int32 = sub(%59, 1)
// [CoreOpt]     let _ = store int32 offset($b46.4, %57 * @32) <- %60
// [CoreOpt]     let %62: int32 = load int32 field($b46.3, 0 * @32)
// [CoreOpt]     let %63: int32 = load int32 offset($b46.4, %62 * @32)
// [CoreOpt]     let %64: bool = le(1, %63)
// [CoreOpt]     br %64 b51() b52()
// [CoreOpt]   }
// [CoreOpt]   .bb #b51 () {
// [CoreOpt]     let _ = store bool field($b46.2, 0 * @32) <- false
// [CoreOpt]     jump b53(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b52 () {
// [CoreOpt]     let %66: int32 = load int32 field($b46.3, 0 * @32)
// [CoreOpt]     let %67: int32 = add(%66, 1)
// [CoreOpt]     let _ = store int32 field($b46.3, 0 * @32) <- %67
// [CoreOpt]     jump b53(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b53 (unit) {
// [CoreOpt]     jump b54(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b54 (unit) {
// [CoreOpt]     jump b46($b46.0, $b46.1, $b46.2, $b46.3, $b46.4, $b46.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b55 (unit) {
// [CoreOpt]     return $b55.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b56 pre #Some(b57) header #b46 {
// [CoreOpt]     .block #b52
// [CoreOpt]     .block #b50
// [CoreOpt]     .block #b54
// [CoreOpt]     .block #b55
// [CoreOpt]     .block #b47
// [CoreOpt]     .block #b51
// [CoreOpt]     .block #b48
// [CoreOpt]     .block #b49
// [CoreOpt]     .block #b53
// [CoreOpt]   }
// [CoreOpt]   .bb #b57 () {
// [CoreOpt]     jump b56($f0, $f1, $f2, $f3, $f4, $f5)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] do_flip90.508 is inlining Call(ty=Unit, f=f4, args=[Int32(val=0), Mem(fref=f5, mref=m0), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [CoreOpt] shifted callee .fn flip_loop99.509 #f4 : fn(int32, array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b14 {
// [CoreOpt]   .bb #b9 (int32, array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %9: int32 = load int32 field($b9.2, 0 * @32)
// [CoreOpt]     let %10: int32 = div(%9, 2)
// [CoreOpt]     let %11: bool = le($b9.0, %10)
// [CoreOpt]     br %11 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     let %12: int32 = load int32 offset($b9.3, $b9.0 * @32)
// [CoreOpt]     let _ = store int32 field($b9.1, 0 * @32) <- %12
// [CoreOpt]     let %14: int32 = load int32 field($b9.2, 0 * @32)
// [CoreOpt]     let %15: int32 = sub(%14, $b9.0)
// [CoreOpt]     let %16: int32 = load int32 offset($b9.3, %15 * @32)
// [CoreOpt]     let _ = store int32 offset($b9.3, $b9.0 * @32) <- %16
// [CoreOpt]     let %18: int32 = load int32 field($b9.2, 0 * @32)
// [CoreOpt]     let %19: int32 = sub(%18, $b9.0)
// [CoreOpt]     let %20: int32 = load int32 field($b9.1, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($b9.3, %19 * @32) <- %20
// [CoreOpt]     let %22: int32 = add($b9.0, 1)
// [CoreOpt]     jump b9(%22, $b9.1, $b9.2, $b9.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     jump b12(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 (unit) {
// [CoreOpt]     return $b12.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b13 pre #Some(b14) header #b9 {
// [CoreOpt]     .block #b10
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b12
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     jump b13($f0, $f1, $f2, $f3)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f5
// [CoreOpt] Remove dead function: f2
// [CoreOpt] Remove dead function: f7
// [CoreOpt] LVN subst Insn(iref=%6) with Insn(iref=%3)
// [CoreOpt] LVN subst Insn(iref=%16) with Insn(iref=%15)
// [CoreOpt] LVN subst Insn(iref=%58) with Insn(iref=%57)
// [CoreOpt] LVN subst Insn(iref=%4) with Insn(iref=%2)
// [CoreOpt2] LVN subst Insn(iref=%20) with Insn(iref=%23)
// [CoreOpt2] LVN subst Insn(iref=%70) with Insn(iref=%71)
// [CoreOpt2] LVN subst Insn(iref=%78) with Insn(iref=%80)
