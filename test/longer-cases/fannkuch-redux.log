// [Asm] pre_assigned_registers: Insn(iref=%3) -> v11, Self(fref=f9) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v9, Insn(iref=%2) -> v10, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%1) -> v8, BlockParam(bref=b0, bpref=$b.0) -> v6, FreeVar(fvref=^3) -> v5, FnParam(fref=f9, fpref=$f.0) -> v2, Insn(iref=%0) -> v7, Insn(iref=%4) -> v12
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [v7]
// [Asm] live_set: [v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v9 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v4, v6, v17, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, v10, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v5, v10, zero, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v5, v12, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: [v12]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v0, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of copy_perm46_9"];
// [Asm]   r8 [label="v17 ← a0", color=green];
// [Asm]   r0 [label="v7 ← a0", color=green];
// [Asm]   r5 [label="v3 ← a4", color=green];
// [Asm]   r15 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="v4 ← a2", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r9 [label="v10 ← a0", color=green];
// [Asm]   r6 [label="v9 ← a0", color=green];
// [Asm]   r13 [label="v0 ← a1", color=green];
// [Asm]   r4 [label="v6 ← a3", color=green];
// [Asm]   r1 [label="v5 ← a1", color=green];
// [Asm]   r11 [label="v15 ← a5", color=green];
// [Asm]   r7 [label="v16 ← a0", color=green];
// [Asm]   r10 [label="v14 ← a5", color=green];
// [Asm]   r12 [label="v12 ← a0", color=green];
// [Asm]   r14 [label="a0", color=blue];
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r13;
// [Asm]   r13 -- r14;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v7-> 1:v5-> 2:zero-> 3:v4-> 4:v6-> 5:v3-> 7:v16-> 8:v17-> 9:v10-> 10:v14-> 11:v15-> 12:v12-> 15:v2-> 13:v0-> 14:a0-> 6:v9"
// [Asm]   comment = "v17<-a0;v7<-a0;v3<-a4;v2<-a0;v4<-a2;v10<-a0;v9<-a0;v0<-a1;v6<-a3;v5<-a1;v15<-a5;v16<-a0;v14<-a5;v12<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of copy_perm46_9"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v7, v3, -1 ->   addi a0, a4, -1
// [Asm] subst   blt v7, v6, .copy_perm46_9_2 ->   blt a0, a3, .copy_perm46_9_2
// [Asm] subst   mv v9, zero ->   mv a0, zero
// [Asm] subst   slliw v16, v6, 2 ->   slliw a0, a3, 2
// [Asm] subst   add v17, v4, v16 ->   add a0, a2, a0
// [Asm] subst   lw v10, 0(v17) ->   lw a0, 0(a0)
// [Asm] subst   slliw v14, v6, 2 ->   slliw a5, a3, 2
// [Asm] subst   add v15, v5, v14 ->   add a5, a1, a5
// [Asm] subst   sw v10, 0(v15) ->   sw a0, 0(a5)
// [Asm] subst   addi v12, v6, 1 ->   addi a0, a3, 1
// [Asm] subst   mv v6, v12 ->   mv a3, a0
// [Asm] subst   j .copy_perm46_9_0 ->   j .copy_perm46_9_0
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a4, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld a2, 16(a1)
// [Asm] subst   ld v5, 24(v0) ->   ld a1, 24(a1)
// [Asm] subst   mv v6, v2 ->   mv a3, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v23, FreeVar(fvref=^5) -> v6, BlockParam(bref=b7, bpref=$b.0) -> v33, Insn(iref=%8) -> v16, FreeVar(fvref=^1) -> v2, FreeVar(fvref=^2) -> v3, Insn(iref=%10) -> v18, Insn(iref=%14) -> v22, FreeVar(fvref=^4) -> v5, Insn(iref=%4) -> v34, Mem(fref=f17, mref=m0) -> v8, Insn(iref=%1) -> v10, Insn(iref=%11) -> v19, Insn(iref=%6) -> v14, BlockParam(bref=b9, bpref=$b.0) -> v11, Insn(iref=%9) -> v17, Insn(iref=%16) -> v24, Insn(iref=%24) -> v31, BlockParam(bref=b8, bpref=$b.0) -> v36, Insn(iref=%5) -> v35, Insn(iref=%0) -> v9, Insn(iref=%19) -> v27, FreeVar(fvref=^6) -> v7, Insn(iref=%3) -> v13, Insn(iref=%18) -> v26, Insn(iref=%13) -> v21, Insn(iref=%7) -> v15, Insn(iref=%22) -> v29, Insn(iref=%17) -> v25, Insn(iref=%23) -> v30, Self(fref=f17) -> v0, Insn(iref=%2) -> v12, Insn(iref=%20) -> v28, FreeVar(fvref=^3) -> v4, Insn(iref=%21) -> v32, Insn(iref=%12) -> v20
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%19)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%2), FreeVar(fvref=^3)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Bool(val=true)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v36]
// [Asm] live_set: [v2, v5, zero, v36, v7, v4, v6, s11, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v36, v7, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v3, v5, zero, v29, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v3, v5, zero, v30, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v33, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v33 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v3, v5, v14, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v58]
// [Asm] live_set: [v3, v5, v58, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v58 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v3, v5, zero, v7, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm] move_origin: [v8]
// [Asm] defined: s11 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v3, v5, zero, v7, v8, v4, v6, s11, v60, v2]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v3, v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm] move_origin: [v8]
// [Asm] defined: s10 is X
// [Asm] defs: [v56]
// [Asm] live_set: [v3, v5, v56, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, v56, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v5, v56, zero, a0, v7, v4, v6, s11, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v5, zero, a0, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v3, v5, v18, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v3, v5, v18, zero, v7, v19, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v3, v5, zero, v7, v19, v4, v6, s11, v52, v2]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v3, v5, v53, zero, v7, v19, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v3, v5, v21, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v3, v5, v21, zero, v22, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v3, v5, v21, zero, v7, v4, v47, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v3, v5, v21, v48, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v3, v5, v21, zero, v23, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v3, v5, v21, zero, v7, v4, v6, s11, v24, v2]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v24, v44, v2]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v3, v5, zero, v7, v45, v4, v6, s11, v24, v2]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v3, v5, zero, v26, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v3, v40, v5, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v3, v5, zero, v7, v4, v41, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v3, v5, zero, v27, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v3, v5, zero, v27, v7, v4, v6, s11, v39, v2]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v3, v63, v5, zero, v7, v4, v6, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v63 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v12, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [zero]
// [Asm] defined: v11 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v2, v5, zero, v36, v7, v4, v6, s11, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [zero, s11, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [zero, v0, s11]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v0, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v0, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, zero, v0, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, zero, v0, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v5, zero, v0, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v33, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, s11, v33, v2]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of go_loop179_17"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r46 [label="v41 ← a0", color=green];
// [Asm]   r38 [label="v47 ← a1", color=green];
// [Asm]   r33 [label="v19 ← a1", color=green];
// [Asm]   r9 [label="v3 ← s5", color=green];
// [Asm]   r26 [label="a3", color=blue];
// [Asm]   r47 [label="v27 ← a0", color=green];
// [Asm]   r6 [label="v4 ← s3", color=green];
// [Asm]   r44 [label="v26 ← a0", color=green];
// [Asm]   r13 [label="v14 ← a0", color=green];
// [Asm]   r53 [label="v0 ← a0", color=green];
// [Asm]   r42 [label="v44 ← a0", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="a6", color=blue];
// [Asm]   r35 [label="v53 ← a0", color=green];
// [Asm]   r7 [label="v6 ← s4", color=green];
// [Asm]   r10 [label="v29 ← a0", color=green];
// [Asm]   r8 [label="s11", color=blue];
// [Asm]   r5 [label="v7 ← s2", color=green];
// [Asm]   r36 [label="v21 ← a0", color=green];
// [Asm]   r32 [label="v18 ← a0", color=green];
// [Asm]   r15 [label="v8 ← a1", color=green];
// [Asm]   r24 [label="a1", color=blue];
// [Asm]   r49 [label="v9 ← a0", color=green];
// [Asm]   r43 [label="v45 ← a0", color=green];
// [Asm]   r31 [label="v17 ← a0", color=green];
// [Asm]   r39 [label="v48 ← a1", color=green];
// [Asm]   r17 [label="s10", color=blue];
// [Asm]   r52 [label="v11 ← a0", color=green];
// [Asm]   r48 [label="v39 ← a1", color=green];
// [Asm]   r12 [label="v33 ← a0", color=green];
// [Asm]   r37 [label="v22 ← a1", color=green];
// [Asm]   r20 [label="t1", color=blue];
// [Asm]   r23 [label="t4", color=blue];
// [Asm]   r3 [label="v5 ← s1", color=green];
// [Asm]   r27 [label="a4", color=blue];
// [Asm]   r40 [label="v23 ← a1", color=green];
// [Asm]   r1 [label="v36 ← a0", color=green];
// [Asm]   r28 [label="a5", color=blue];
// [Asm]   r41 [label="v24 ← a1", color=green];
// [Asm]   r11 [label="v30 ← a0", color=green];
// [Asm]   r34 [label="v52 ← a0", color=green];
// [Asm]   r22 [label="t3", color=blue];
// [Asm]   r14 [label="v58 ← a0", color=green];
// [Asm]   r50 [label="v63 ← a1", color=green];
// [Asm]   r30 [label="a7", color=blue];
// [Asm]   r51 [label="v12 ← a0", color=green];
// [Asm]   r45 [label="v40 ← a0", color=green];
// [Asm]   r25 [label="a2", color=blue];
// [Asm]   r2 [label="v2 ← s0", color=green];
// [Asm]   r16 [label="v60 ← a0", color=green];
// [Asm]   r18 [label="v56 ← a1", color=green];
// [Asm]   r19 [label="t0", color=blue];
// [Asm]   r21 [label="t2", color=blue];
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   r3 -- r44;
// [Asm]   r4 -- r53;
// [Asm]   r8 -- r31;
// [Asm]   r7 -- r51;
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r38;
// [Asm]   r2 -- r31;
// [Asm]   r6 -- r48;
// [Asm]   r5 -- r21;
// [Asm]   r9 -- r53;
// [Asm]   r5 -- r33;
// [Asm]   r8 -- r51;
// [Asm]   r6 -- r35;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r4 -- r51;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r53;
// [Asm]   r8 -- r36;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r49;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r2 -- r43;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r0 -- r28;
// [Asm]   r4 -- r44;
// [Asm]   r3 -- r9;
// [Asm]   r5 -- r47;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r48;
// [Asm]   r9 -- r26;
// [Asm]   r5 -- r29;
// [Asm]   r0 -- r23;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r51;
// [Asm]   r2 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r26;
// [Asm]   r9 -- r49;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r27;
// [Asm]   r2 -- r41;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r7 -- r32;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r2 -- r34;
// [Asm]   r9 -- r14;
// [Asm]   r0 -- r6;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r45;
// [Asm]   r3 -- r48;
// [Asm]   r8 -- r34;
// [Asm]   r8 -- r24;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r5 -- r35;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r26;
// [Asm]   r8 -- r16;
// [Asm]   r2 -- r48;
// [Asm]   r3 -- r39;
// [Asm]   r0 -- r9;
// [Asm]   r9 -- r23;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r38;
// [Asm]   r2 -- r12;
// [Asm]   r8 -- r23;
// [Asm]   r5 -- r32;
// [Asm]   r8 -- r48;
// [Asm]   r1 -- r2;
// [Asm]   r41 -- r42;
// [Asm]   r4 -- r29;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r9 -- r20;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r3 -- r49;
// [Asm]   r2 -- r36;
// [Asm]   r5 -- r51;
// [Asm]   r6 -- r50;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r8 -- r32;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r7 -- r42;
// [Asm]   r9 -- r39;
// [Asm]   r4 -- r14;
// [Asm]   r3 -- r46;
// [Asm]   r8 -- r30;
// [Asm]   r5 -- r36;
// [Asm]   r0 -- r18;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r7 -- r44;
// [Asm]   r3 -- r45;
// [Asm]   r7 -- r29;
// [Asm]   r36 -- r40;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r3 -- r38;
// [Asm]   r6 -- r41;
// [Asm]   r2 -- r4;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r47 -- r48;
// [Asm]   r9 -- r40;
// [Asm]   r8 -- r9;
// [Asm]   r6 -- r33;
// [Asm]   r6 -- r30;
// [Asm]   r7 -- r20;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r6 -- r46;
// [Asm]   r6 -- r53;
// [Asm]   r9 -- r30;
// [Asm]   r33 -- r35;
// [Asm]   r4 -- r18;
// [Asm]   r7 -- r48;
// [Asm]   r6 -- r22;
// [Asm]   r2 -- r11;
// [Asm]   r7 -- r49;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r42;
// [Asm]   r8 -- r25;
// [Asm]   r8 -- r47;
// [Asm]   r0 -- r19;
// [Asm]   r5 -- r38;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r50;
// [Asm]   r7 -- r17;
// [Asm]   r8 -- r41;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r44;
// [Asm]   r6 -- r27;
// [Asm]   r2 -- r40;
// [Asm]   r7 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r32 -- r33;
// [Asm]   r8 -- r53;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r7 -- r15;
// [Asm]   r9 -- r24;
// [Asm]   r8 -- r18;
// [Asm]   r8 -- r35;
// [Asm]   r5 -- r45;
// [Asm]   r3 -- r29;
// [Asm]   r9 -- r36;
// [Asm]   r0 -- r29;
// [Asm]   r7 -- r36;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r4 -- r36;
// [Asm]   r7 -- r41;
// [Asm]   r41 -- r43;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r6 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r8 -- r26;
// [Asm]   r7 -- r16;
// [Asm]   r6 -- r38;
// [Asm]   r9 -- r46;
// [Asm]   r7 -- r18;
// [Asm]   r9 -- r48;
// [Asm]   r2 -- r35;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r0 -- r30;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r0 -- r20;
// [Asm]   r7 -- r14;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r8 -- r50;
// [Asm]   r7 -- r46;
// [Asm]   r9 -- r21;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   r36 -- r38;
// [Asm]   r2 -- r39;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r38;
// [Asm]   r5 -- r41;
// [Asm]   r2 -- r45;
// [Asm]   r9 -- r25;
// [Asm]   r4 -- r41;
// [Asm]   r7 -- r21;
// [Asm]   r6 -- r36;
// [Asm]   r6 -- r47;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r9 -- r27;
// [Asm]   r3 -- r43;
// [Asm]   r7 -- r40;
// [Asm]   r1 -- r7;
// [Asm]   r0 -- r25;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r7 -- r53;
// [Asm]   r3 -- r32;
// [Asm]   r5 -- r49;
// [Asm]   r5 -- r42;
// [Asm]   r9 -- r31;
// [Asm]   r9 -- r45;
// [Asm]   r0 -- r22;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r4 -- r40;
// [Asm]   r3 -- r18;
// [Asm]   r9 -- r41;
// [Asm]   r4 -- r42;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r4 -- r35;
// [Asm]   r9 -- r18;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r7 -- r34;
// [Asm]   r4 -- r33;
// [Asm]   r2 -- r33;
// [Asm]   r3 -- r30;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r43;
// [Asm]   r0 -- r2;
// [Asm]   r9 -- r28;
// [Asm]   r8 -- r37;
// [Asm]   r2 -- r46;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r18;
// [Asm]   r4 -- r28;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r47;
// [Asm]   r3 -- r40;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r6 -- r31;
// [Asm]   r8 -- r44;
// [Asm]   r3 -- r27;
// [Asm]   r8 -- r39;
// [Asm]   r8 -- r29;
// [Asm]   r8 -- r22;
// [Asm]   r6 -- r45;
// [Asm]   r4 -- r50;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r50;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r24;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r49;
// [Asm]   r2 -- r23;
// [Asm]   r36 -- r41;
// [Asm]   r9 -- r47;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r32;
// [Asm]   r2 -- r53;
// [Asm]   r5 -- r34;
// [Asm]   r36 -- r37;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r9 -- r35;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r9 -- r15;
// [Asm]   r4 -- r37;
// [Asm]   r7 -- r45;
// [Asm]   r6 -- r49;
// [Asm]   r0 -- r24;
// [Asm]   r36 -- r39;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r48;
// [Asm]   r5 -- r23;
// [Asm]   r6 -- r44;
// [Asm]   r9 -- r29;
// [Asm]   r8 -- r19;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r6 -- r51;
// [Asm]   r0 -- r21;
// [Asm]   r8 -- r43;
// [Asm]   r9 -- r42;
// [Asm]   r4 -- r20;
// [Asm]   r3 -- r47;
// [Asm]   r5 -- r44;
// [Asm]   r6 -- r16;
// [Asm]   r7 -- r30;
// [Asm]   r8 -- r38;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r8 -- r33;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r40;
// [Asm]   r8 -- r49;
// [Asm]   r6 -- r24;
// [Asm]   r7 -- r28;
// [Asm]   r9 -- r51;
// [Asm]   r9 -- r44;
// [Asm]   r6 -- r8;
// [Asm]   r33 -- r34;
// [Asm]   r6 -- r34;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r22;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r4 -- r46;
// [Asm]   r9 -- r34;
// [Asm]   r9 -- r38;
// [Asm]   r4 -- r45;
// [Asm]   r5 -- r46;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r8;
// [Asm]   r9 -- r33;
// [Asm]   r7 -- r33;
// [Asm]   r5 -- r37;
// [Asm]   r6 -- r28;
// [Asm]   r8 -- r40;
// [Asm]   r9 -- r43;
// [Asm]   r6 -- r42;
// [Asm]   r7 -- r11;
// [Asm]   r7 -- r47;
// [Asm]   r9 -- r37;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r41;
// [Asm]   r6 -- r17;
// [Asm]   r7 -- r39;
// [Asm]   r4 -- r47;
// [Asm]   r7 -- r43;
// [Asm]   r3 -- r14;
// [Asm]   r9 -- r16;
// [Asm]   r7 -- r31;
// [Asm]   r9 -- r32;
// [Asm]   r4 -- r39;
// [Asm]   r3 -- r36;
// [Asm]   r5 -- r27;
// [Asm]   r9 -- r19;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r50;
// [Asm]   r7 -- r23;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r43;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r27;
// [Asm]   r15 -- r16;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r49 -- r50;
// [Asm]   r8 -- r46;
// [Asm]   r9 -- r50;
// [Asm]   r5 -- r40;
// [Asm]   comment = "0:a0-> 2:v2-> 3:v5-> 4:zero-> 5:v7-> 6:v4-> 7:v6-> 8:s11-> 9:v3-> 18:v56-> 19:t0-> 20:t1-> 21:t2-> 22:t3-> 23:t4-> 24:a1-> 25:a2-> 26:a3-> 27:a4-> 28:a5-> 29:a6-> 30:a7-> 10:v29-> 11:v30-> 13:v14-> 16:v60-> 15:v8-> 17:s10-> 31:v17-> 32:v18-> 33:v19-> 34:v52-> 35:v53-> 36:v21-> 37:v22-> 38:v47-> 39:v48-> 40:v23-> 41:v24-> 42:v44-> 43:v45-> 44:v26-> 45:v40-> 46:v41-> 47:v27-> 48:v39-> 49:v9-> 50:v63-> 51:v12-> 1:v36-> 12:v33-> 14:v58-> 53:v0-> 52:v11"
// [Asm]   comment = "v41<-a0;v47<-a1;v19<-a1;v3<-s5;v27<-a0;v4<-s3;v26<-a0;v14<-a0;v0<-a0;v44<-a0;v53<-a0;v6<-s4;v29<-a0;v7<-s2;v21<-a0;v18<-a0;v8<-a1;v9<-a0;v45<-a0;v17<-a0;v48<-a1;v11<-a0;v39<-a1;v33<-a0;v22<-a1;v5<-s1;v23<-a1;v36<-a0;v24<-a1;v30<-a0;v52<-a0;v58<-a0;v63<-a1;v12<-a0;v40<-a0;v2<-s0;v60<-a0;v56<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of go_loop179_17"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   sw zero, 0(v2) ->   sw zero, 0(s0)
// [Asm] subst   sw zero, 0(v3) ->   sw zero, 0(s5)
// [Asm] subst   mv v36, zero ->   mv a0, zero
// [Asm] subst   j .go_loop179_17_8 ->   j .go_loop179_17_8
// [Asm] subst   j .go_loop179_17_0 ->   j .go_loop179_17_0
// [Asm] subst   lw v29, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   addi v30, v29, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v30, 0(v3) ->   sw a0, 0(s5)
// [Asm] subst   mv v33, zero ->   mv a0, zero
// [Asm] subst   lw v14, 0(v5) ->   lw a0, 0(s1)
// [Asm] subst   sw v14, 0(v6) ->   sw a0, 0(s4)
// [Asm] subst   addi v58, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi v8, v58, -8 ->   andi a1, a0, -8
// [Asm] subst   mv s11, v8 ->   mv s11, a1
// [Asm] subst   la v60, move_perm1_forward197_19 ->   la a0, move_perm1_forward197_19
// [Asm] subst   sd v60, 0(v8) ->   sd a0, 0(a1)
// [Asm] subst   sd v3, 8(v8) ->   sd s5, 8(a1)
// [Asm] subst   sd v5, 16(v8) ->   sd s1, 16(a1)
// [Asm] subst   mv s10, v8 ->   mv s10, a1
// [Asm] subst   ld v56, 0(v8) ->   ld a1, 0(a1)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v56 ->   jalr a1
// [Asm] subst   lw v18, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   lw v19, 0(v6) ->   lw a1, 0(s4)
// [Asm] subst   slliw v52, v18, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v53, v5, v52 ->   add a0, s1, a0
// [Asm] subst   sw v19, 0(v53) ->   sw a1, 0(a0)
// [Asm] subst   lw v21, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   lw v22, 0(v3) ->   lw a1, 0(s5)
// [Asm] subst   slliw v47, v22, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v48, v7, v47 ->   add a1, s2, a1
// [Asm] subst   lw v23, 0(v48) ->   lw a1, 0(a1)
// [Asm] subst   addi v24, v23, -1 ->   addi a1, a1, -1
// [Asm] subst   slliw v44, v21, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v45, v7, v44 ->   add a0, s2, a0
// [Asm] subst   sw v24, 0(v45) ->   sw a1, 0(a0)
// [Asm] subst   lw v26, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   slliw v40, v26, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v41, v7, v40 ->   add a0, s2, a0
// [Asm] subst   lw v27, 0(v41) ->   lw a0, 0(a0)
// [Asm] subst   li v39, 1 ->   li a1, 1
// [Asm] subst   bge v27, v39, .go_loop179_17_5 ->   bge a0, a1, .go_loop179_17_5
// [Asm] subst   lw v9, 0(v2) ->   lw a0, 0(s0)
// [Asm] subst   li v63, 1 ->   li a1, 1
// [Asm] subst   bne v9, v63, .go_loop179_17_2 ->   bne a0, a1, .go_loop179_17_2
// [Asm] subst   lw v12, 0(v3) ->   lw a0, 0(s5)
// [Asm] subst   beq v12, v4, .go_loop179_17_3 ->   beq a0, s3, .go_loop179_17_3
// [Asm] subst   mv v11, zero ->   mv a0, zero
// [Asm] subst   mv v36, zero ->   mv a0, zero
// [Asm] subst   mv v0, s10 ->   mv a0, s10
// [Asm] subst   ld v2, 8(v0) ->   ld s0, 8(a0)
// [Asm] subst   ld v3, 16(v0) ->   ld s5, 16(a0)
// [Asm] subst   lw v4, 24(v0) ->   lw s3, 24(a0)
// [Asm] subst   ld v5, 32(v0) ->   ld s1, 32(a0)
// [Asm] subst   ld v6, 40(v0) ->   ld s4, 40(a0)
// [Asm] subst   ld v7, 48(v0) ->   ld s2, 48(a0)
// [Asm] subst   sw zero, 0(v2) ->   sw zero, 0(s0)
// [Asm] subst   mv v33, zero ->   mv a0, zero
// [Asm] subst   j .go_loop179_17_7 ->   j .go_loop179_17_7
// [Asm] pre_assigned_registers: Mem(fref=f0, mref=m9) -> v6, Mem(fref=f0, mref=m8) -> v5, Self(fref=f0) -> v0, Mem(fref=f0, mref=m6) -> v3, Insn(iref=%9) -> v22, Mem(fref=f0, mref=m2) -> v10, Insn(iref=%8) -> v21, Insn(iref=%10) -> v23, Mem(fref=f0, mref=m7) -> v12, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v18, Insn(iref=%0) -> v13, Insn(iref=%4) -> v17, Mem(fref=f0, mref=m5) -> v9, Insn(iref=%3) -> v16, Insn(iref=%13) -> v26, Insn(iref=%7) -> v20, Mem(fref=f0, mref=m1) -> v8, Mem(fref=f0, mref=m4) -> v4, Mem(fref=f0, mref=m3) -> v11, Mem(fref=f0, mref=m0) -> v7, Insn(iref=%2) -> v15, Insn(iref=%1) -> v14, Insn(iref=%11) -> v24, Insn(iref=%6) -> v19, Insn(iref=%12) -> v25
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v54]
// [Asm] live_set: [zero, v54, v2]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v7, s11, v2]
// [Asm] move_origin: [v7]
// [Asm] defined: s11 is X
// [Asm] defs: [v56]
// [Asm] live_set: [v56, zero, v7, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [zero, v7, s11, v2]
// [Asm] move_origin: [v7]
// [Asm] defined: s10 is X
// [Asm] defs: [v52]
// [Asm] live_set: [zero, s11, v52, v2]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: []
// [Asm] live_set: [zero, s11, v52, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, s11, v52, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v49]
// [Asm] live_set: [v14, v49, zero, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v14, zero, v50, v2]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v14, zero, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v14, zero, v8, s11, v2]
// [Asm] move_origin: [v8]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v14, zero, v8, a1, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v14, zero, a0, v8, a1, s11, v2]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v14, zero, a0, v8, a2, a1, s11, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v14, zero, v8, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v46]
// [Asm] live_set: [v14, v46, zero, v8, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v14, zero, v8, v47, v2]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v14, v10, zero, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v14, v10, zero, v8, s11, v2]
// [Asm] move_origin: [v10]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v14, v10, zero, v8, a1, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v14, v10, zero, a0, v8, a1, s11, v2]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v14, v10, zero, a0, v8, a2, a1, s11, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v14, v10, zero, v8, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v44]
// [Asm] live_set: [v14, v10, zero, v8, v44, v2]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v14, v10, zero, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v14, v10, zero, v8, s11, v2]
// [Asm] move_origin: [v11]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v10, zero, v8, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v42]
// [Asm] live_set: [v11, v14, v10, zero, v42, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v11, v14, v10, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v14, v10, zero, v8, v4, s11, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v10, zero, v8, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [v40, v11, v14, v10, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v11, v14, v10, zero, v8, v4, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v14, v10, zero, v8, v4, s11, v9, v2]
// [Asm] move_origin: [v9]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v10, zero, v8, v4, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v38]
// [Asm] live_set: [v11, v14, v10, zero, v8, v4, v38, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v11, v14, v10, zero, v8, v4, s11, v9, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, v8, v4, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v36]
// [Asm] live_set: [v2, v11, v14, v10, v8, v36, v4, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v2, v11, v14, v10, v8, v4, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v11, v14, v10, v8, v4, v12, s11, v9, v3]
// [Asm] move_origin: [v12]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v14, v10, v8, v4, v12, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v2, v11, v14, v10, v8, v4, v12, v9, v33, v3]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v11, v5, v14, v10, v8, v4, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v11, v5, v14, v10, v8, v4, s11, v12, v9, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v2, v11, v5, v14, v10, v8, v35, v4, s11, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v5, v14, v10, v8, v4, s11, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v14, v10, v8, v4, s11, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v8, v4, s11, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v4, s11, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v4, s11, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v4, s11, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v4, s11, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v4, s11, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5, s11, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, v5, s11, v12, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v4, s11, v12, v31, v9]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v12, v31, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, s11, v31, v9, a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, s11, v9, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v23]
// [Asm] live_set: [v4, s11, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v24, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v24, s11]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v25, v24, v27]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v25, v6, v24]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v25, v6, v24]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v6]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of fannkuch1_0"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r46 [label="v6 ← a2", color=green];
// [Asm]   r38 [label="v33 ← a3", color=green];
// [Asm]   r33 [label="v9 ← s2", color=green];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r26 [label="v47 ← a0", color=green];
// [Asm]   r6 [label="s10", color=blue];
// [Asm]   r44 [label="v25 ← a1", color=green];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r42 [label="v23 ← a0", color=green];
// [Asm]   r4 [label="v7 ← a1", color=green];
// [Asm]   r29 [label="v11 ← a0", color=green];
// [Asm]   r35 [label="v3 ← a1", color=green];
// [Asm]   r7 [label="v52 ← a1", color=green];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r8 [label="a0", color=blue];
// [Asm]   r5 [label="v56 ← a0", color=green];
// [Asm]   r36 [label="v36 ← a2", color=green];
// [Asm]   r15 [label="a2", color=blue];
// [Asm]   r24 [label="v8 ← s4", color=green];
// [Asm]   r32 [label="v40 ← a1", color=green];
// [Asm]   r43 [label="v24 ← a0", color=green];
// [Asm]   r31 [label="v4 ← s1", color=green];
// [Asm]   r39 [label="v5 ← a4", color=green];
// [Asm]   r17 [label="a4", color=blue];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r37 [label="v12 ← a2", color=green];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="v50 ← a0", color=green];
// [Asm]   r3 [label="v54 ← a0", color=green];
// [Asm]   r27 [label="v10 ← s5", color=green];
// [Asm]   r40 [label="v35 ← a3", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r41 [label="v31 ← a1", color=green];
// [Asm]   r28 [label="v44 ← a0", color=green];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r34 [label="v38 ← a1", color=green];
// [Asm]   r22 [label="v49 ← a0", color=green];
// [Asm]   r14 [label="a1", color=blue];
// [Asm]   r30 [label="v42 ← a1", color=green];
// [Asm]   r45 [label="v27 ← a2", color=green];
// [Asm]   r25 [label="v46 ← a0", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="a3", color=blue];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r21 [label="v14 ← s3", color=green];
// [Asm]   r21 -- r24;
// [Asm]   r37 -- r39;
// [Asm]   r8 -- r31;
// [Asm]   r20 -- r33;
// [Asm]   r2 -- r31;
// [Asm]   r33 -- r40;
// [Asm]   r0 -- r36;
// [Asm]   r1 -- r26;
// [Asm]   r0 -- r32;
// [Asm]   r1 -- r30;
// [Asm]   r24 -- r40;
// [Asm]   r21 -- r38;
// [Asm]   r15 -- r31;
// [Asm]   r27 -- r36;
// [Asm]   r2 -- r43;
// [Asm]   r0 -- r28;
// [Asm]   r13 -- r31;
// [Asm]   r0 -- r23;
// [Asm]   r18 -- r21;
// [Asm]   r27 -- r28;
// [Asm]   r2 -- r37;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r27 -- r34;
// [Asm]   r0 -- r16;
// [Asm]   r2 -- r41;
// [Asm]   r2 -- r42;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r31 -- r35;
// [Asm]   r8 -- r24;
// [Asm]   r33 -- r42;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r0 -- r26;
// [Asm]   r13 -- r33;
// [Asm]   r21 -- r33;
// [Asm]   r8 -- r16;
// [Asm]   r0 -- r9;
// [Asm]   r16 -- r33;
// [Asm]   r35 -- r38;
// [Asm]   r10 -- r33;
// [Asm]   r29 -- r33;
// [Asm]   r2 -- r12;
// [Asm]   r10 -- r31;
// [Asm]   r1 -- r2;
// [Asm]   r20 -- r27;
// [Asm]   r0 -- r38;
// [Asm]   r29 -- r40;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r11;
// [Asm]   r39 -- r40;
// [Asm]   r35 -- r37;
// [Asm]   r18 -- r33;
// [Asm]   r16 -- r21;
// [Asm]   r2 -- r22;
// [Asm]   r27 -- r35;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r39;
// [Asm]   r1 -- r35;
// [Asm]   r0 -- r4;
// [Asm]   r17 -- r31;
// [Asm]   r24 -- r25;
// [Asm]   r16 -- r24;
// [Asm]   r17 -- r27;
// [Asm]   r14 -- r15;
// [Asm]   r27 -- r31;
// [Asm]   r0 -- r18;
// [Asm]   r18 -- r24;
// [Asm]   r0 -- r15;
// [Asm]   r27 -- r40;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r34;
// [Asm]   r8 -- r27;
// [Asm]   r21 -- r28;
// [Asm]   r29 -- r30;
// [Asm]   r21 -- r29;
// [Asm]   r8 -- r9;
// [Asm]   r0 -- r34;
// [Asm]   r6 -- r33;
// [Asm]   r1 -- r22;
// [Asm]   r0 -- r14;
// [Asm]   r33 -- r36;
// [Asm]   r31 -- r41;
// [Asm]   r1 -- r13;
// [Asm]   r17 -- r24;
// [Asm]   r21 -- r34;
// [Asm]   r33 -- r35;
// [Asm]   r2 -- r11;
// [Asm]   r31 -- r42;
// [Asm]   r43 -- r45;
// [Asm]   r8 -- r20;
// [Asm]   r24 -- r28;
// [Asm]   r24 -- r29;
// [Asm]   r0 -- r19;
// [Asm]   r24 -- r26;
// [Asm]   r21 -- r23;
// [Asm]   r0 -- r31;
// [Asm]   r8 -- r41;
// [Asm]   r2 -- r44;
// [Asm]   r2 -- r40;
// [Asm]   r14 -- r33;
// [Asm]   r31 -- r40;
// [Asm]   r27 -- r38;
// [Asm]   r31 -- r37;
// [Asm]   r12 -- r33;
// [Asm]   r2 -- r14;
// [Asm]   r21 -- r30;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r29;
// [Asm]   r14 -- r21;
// [Asm]   r24 -- r34;
// [Asm]   r9 -- r24;
// [Asm]   r33 -- r37;
// [Asm]   r8 -- r18;
// [Asm]   r0 -- r39;
// [Asm]   r0 -- r29;
// [Asm]   r0 -- r37;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r19 -- r33;
// [Asm]   r33 -- r41;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r15 -- r24;
// [Asm]   r15 -- r33;
// [Asm]   r27 -- r33;
// [Asm]   r31 -- r33;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r0 -- r30;
// [Asm]   r43 -- r44;
// [Asm]   r0 -- r20;
// [Asm]   r20 -- r21;
// [Asm]   r2 -- r27;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r2 -- r20;
// [Asm]   r24 -- r39;
// [Asm]   r0 -- r13;
// [Asm]   r33 -- r43;
// [Asm]   r44 -- r46;
// [Asm]   r21 -- r35;
// [Asm]   r17 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r2 -- r15;
// [Asm]   r14 -- r27;
// [Asm]   r9 -- r27;
// [Asm]   r27 -- r29;
// [Asm]   r1 -- r4;
// [Asm]   r37 -- r38;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r25;
// [Asm]   r2 -- r10;
// [Asm]   r24 -- r32;
// [Asm]   r11 -- r31;
// [Asm]   r27 -- r32;
// [Asm]   r31 -- r36;
// [Asm]   r29 -- r31;
// [Asm]   r18 -- r27;
// [Asm]   r19 -- r31;
// [Asm]   r44 -- r45;
// [Asm]   r1 -- r17;
// [Asm]   r9 -- r31;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r0 -- r22;
// [Asm]   r11 -- r24;
// [Asm]   r19 -- r21;
// [Asm]   r27 -- r39;
// [Asm]   r17 -- r33;
// [Asm]   r29 -- r36;
// [Asm]   r31 -- r39;
// [Asm]   r27 -- r30;
// [Asm]   r37 -- r40;
// [Asm]   r1 -- r31;
// [Asm]   r29 -- r38;
// [Asm]   r35 -- r39;
// [Asm]   r12 -- r24;
// [Asm]   r2 -- r33;
// [Asm]   r24 -- r31;
// [Asm]   r8 -- r17;
// [Asm]   r0 -- r40;
// [Asm]   r19 -- r27;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r21 -- r27;
// [Asm]   r24 -- r36;
// [Asm]   r21 -- r32;
// [Asm]   r43 -- r46;
// [Asm]   r2 -- r8;
// [Asm]   r24 -- r27;
// [Asm]   r1 -- r27;
// [Asm]   r6 -- r31;
// [Asm]   r8 -- r21;
// [Asm]   r0 -- r11;
// [Asm]   r14 -- r31;
// [Asm]   r8 -- r11;
// [Asm]   r18 -- r31;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r24;
// [Asm]   r31 -- r34;
// [Asm]   r21 -- r22;
// [Asm]   r21 -- r36;
// [Asm]   r13 -- r21;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r24 -- r37;
// [Asm]   r21 -- r37;
// [Asm]   r27 -- r37;
// [Asm]   r16 -- r27;
// [Asm]   r29 -- r35;
// [Asm]   r35 -- r36;
// [Asm]   r13 -- r24;
// [Asm]   r16 -- r31;
// [Asm]   r20 -- r24;
// [Asm]   r29 -- r32;
// [Asm]   r20 -- r31;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r18;
// [Asm]   r0 -- r24;
// [Asm]   r1 -- r23;
// [Asm]   r21 -- r40;
// [Asm]   r8 -- r19;
// [Asm]   r1 -- r32;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r19 -- r24;
// [Asm]   r31 -- r38;
// [Asm]   r33 -- r39;
// [Asm]   r10 -- r27;
// [Asm]   r8 -- r33;
// [Asm]   r14 -- r24;
// [Asm]   r0 -- r35;
// [Asm]   r15 -- r27;
// [Asm]   r24 -- r38;
// [Asm]   r1 -- r28;
// [Asm]   r24 -- r30;
// [Asm]   r33 -- r34;
// [Asm]   r2 -- r29;
// [Asm]   r6 -- r37;
// [Asm]   r11 -- r33;
// [Asm]   r0 -- r33;
// [Asm]   r21 -- r31;
// [Asm]   r8 -- r13;
// [Asm]   r15 -- r21;
// [Asm]   r12 -- r31;
// [Asm]   r0 -- r8;
// [Asm]   r9 -- r33;
// [Asm]   r29 -- r37;
// [Asm]   r21 -- r25;
// [Asm]   r24 -- r35;
// [Asm]   r29 -- r39;
// [Asm]   r2 -- r21;
// [Asm]   r35 -- r40;
// [Asm]   r21 -- r26;
// [Asm]   r29 -- r34;
// [Asm]   r0 -- r12;
// [Asm]   r12 -- r27;
// [Asm]   r31 -- r32;
// [Asm]   r11 -- r27;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r27;
// [Asm]   r10 -- r21;
// [Asm]   r10 -- r24;
// [Asm]   r24 -- r33;
// [Asm]   r13 -- r27;
// [Asm]   r37 -- r41;
// [Asm]   r33 -- r38;
// [Asm]   r11 -- r21;
// [Asm]   comment = "0:v2-> 1:zero-> 2:s11-> 5:v56-> 4:v7-> 6:s10-> 31:v4-> 33:v9-> 8:a0-> 9:t0-> 21:v14-> 24:v8-> 27:v10-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:a1-> 15:a2-> 16:a3-> 17:a4-> 18:a5-> 19:a6-> 20:a7-> 29:v11-> 35:v3-> 37:v12-> 40:v35-> 39:v5-> 38:v33-> 34:v38-> 36:v36-> 32:v40-> 30:v42-> 25:v46-> 28:v44-> 41:v31-> 7:v52-> 22:v49-> 26:v47-> 23:v50-> 42:v23-> 3:v54-> 43:v24-> 44:v25-> 45:v27-> 46:v6"
// [Asm]   comment = "v2<-s0;v6<-a2;v33<-a3;v9<-s2;v47<-a0;v25<-a1;v23<-a0;v7<-a1;v11<-a0;v3<-a1;v52<-a1;v56<-a0;v36<-a2;v8<-s4;v40<-a1;v24<-a0;v4<-s1;v5<-a4;v12<-a2;v50<-a0;v54<-a0;v10<-s5;v35<-a3;v31<-a1;v44<-a0;v38<-a1;v49<-a0;v42<-a1;v27<-a2;v46<-a0;v14<-s3;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of fannkuch1_0"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   addi v54, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi v7, v54, -8 ->   andi a1, a0, -8
// [Asm] subst   mv s11, v7 ->   mv s11, a1
// [Asm] subst   la v56, gen_perm14_3 ->   la a0, gen_perm14_3
// [Asm] subst   sd v56, 0(v7) ->   sd a0, 0(a1)
// [Asm] subst   mv s10, v7 ->   mv s10, a1
// [Asm] subst   ld v52, 0(v7) ->   ld a1, 0(a1)
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   jalr v52 ->   jalr a1
// [Asm] subst   mv v14, a0 ->   mv s3, a0
// [Asm] subst   slliw v49, v2, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v50, s11, v49 ->   sub a0, s11, a0
// [Asm] subst   andi v8, v50, -8 ->   andi s4, a0, -8
// [Asm] subst   mv s11, v8 ->   mv s11, s4
// [Asm] subst   mv a1, v2 ->   mv a1, s0
// [Asm] subst   mv a0, v8 ->   mv a0, s4
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   slliw v46, v2, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v47, s11, v46 ->   sub a0, s11, a0
// [Asm] subst   andi v10, v47, -8 ->   andi s5, a0, -8
// [Asm] subst   mv s11, v10 ->   mv s11, s5
// [Asm] subst   mv a1, v2 ->   mv a1, s0
// [Asm] subst   mv a0, v10 ->   mv a0, s5
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   addi v44, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi v11, v44, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v11 ->   mv s11, a0
// [Asm] subst   sw zero, 0(v11) ->   sw zero, 0(a0)
// [Asm] subst   addi v42, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi v4, v42, -8 ->   andi s1, a1, -8
// [Asm] subst   mv s11, v4 ->   mv s11, s1
// [Asm] subst   sw zero, 0(v4) ->   sw zero, 0(s1)
// [Asm] subst   addi v40, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi v9, v40, -8 ->   andi s2, a1, -8
// [Asm] subst   mv s11, v9 ->   mv s11, s2
// [Asm] subst   sw zero, 0(v9) ->   sw zero, 0(s2)
// [Asm] subst   addi v38, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi v3, v38, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a1
// [Asm] subst   sw zero, 0(v3) ->   sw zero, 0(a1)
// [Asm] subst   addi v36, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi v12, v36, -8 ->   andi a2, a2, -8
// [Asm] subst   mv s11, v12 ->   mv s11, a2
// [Asm] subst   sw v2, 0(v12) ->   sw s0, 0(a2)
// [Asm] subst   addi v33, s11, -72 ->   addi a3, s11, -72
// [Asm] subst   andi v5, v33, -8 ->   andi a4, a3, -8
// [Asm] subst   mv s11, v5 ->   mv s11, a4
// [Asm] subst   la v35, compute40_7 ->   la a3, compute40_7
// [Asm] subst   sd v35, 0(v5) ->   sd a3, 0(a4)
// [Asm] subst   sd v2, 8(v5) ->   sd s0, 8(a4)
// [Asm] subst   sd v14, 16(v5) ->   sd s3, 16(a4)
// [Asm] subst   sd v8, 24(v5) ->   sd s4, 24(a4)
// [Asm] subst   sd v10, 32(v5) ->   sd s5, 32(a4)
// [Asm] subst   sd v11, 40(v5) ->   sd a0, 40(a4)
// [Asm] subst   sd v4, 48(v5) ->   sd s1, 48(a4)
// [Asm] subst   sd v9, 56(v5) ->   sd s2, 56(a4)
// [Asm] subst   sd v3, 64(v5) ->   sd a1, 64(a4)
// [Asm] subst   mv s10, v5 ->   mv s10, a4
// [Asm] subst   ld v31, 0(v5) ->   ld a1, 0(a4)
// [Asm] subst   mv a0, v12 ->   mv a0, a2
// [Asm] subst   jalr v31 ->   jalr a1
// [Asm] subst   lw v24, 0(v4) ->   lw a0, 0(s1)
// [Asm] subst   lw v25, 0(v9) ->   lw a1, 0(s2)
// [Asm] subst   addi v27, s11, -8 ->   addi a2, s11, -8
// [Asm] subst   andi v6, v27, -8 ->   andi a2, a2, -8
// [Asm] subst   mv s11, v6 ->   mv s11, a2
// [Asm] subst   sw v24, 0(v6) ->   sw a0, 0(a2)
// [Asm] subst   sw v25, 4(v6) ->   sw a1, 4(a2)
// [Asm] subst   mv a0, v6 ->   mv a0, a2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Mem(fref=f13, mref=m1) -> v6, BlockParam(bref=b3, bpref=$b.0) -> v18, Insn(iref=%9) -> v17, FnParam(fref=f13, fpref=$f.0) -> v2, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%8) -> v16, BlockParam(bref=b0, bpref=$b.0) -> v7, Insn(iref=%5) -> v13, Insn(iref=%0) -> v8, Insn(iref=%4) -> v12, Insn(iref=%3) -> v11, Insn(iref=%7) -> v15, Insn(iref=%2) -> v10, Insn(iref=%1) -> v9, Mem(fref=f13, mref=m0) -> v5, Self(fref=f13) -> v0, Insn(iref=%6) -> v14
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=0)])
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [zero]
// [Asm] defined: v18 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v18]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, s11, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v4, s11, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v7, v8, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [zero, v27, v7, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v7, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v7, v4, s11, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v5, zero, v7, v4, v24, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v7, v4, v6, s11, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v5, zero, v26, v7, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [zero, v7, v4, v6, s11, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: s10 is X
// [Asm] defs: [v22]
// [Asm] live_set: [zero, v22, v7, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v22, v7, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v22, v7, v4, s11, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v7, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [zero, v7, v4, s11, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13, v7, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [zero, v7, v4, s11, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16, zero, v7, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v4, s11, zero, v3]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v7, v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of do_flip90_13"];
// [Asm]   r0 [label="v18 ← a0", color=green];
// [Asm]   r9 [label="v8 ← a0", color=green];
// [Asm]   r26 [label="a5", color=blue];
// [Asm]   r6 [label="v3 ← s0", color=green];
// [Asm]   r13 [label="v6 ← a2", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="v12 ← a0", color=green];
// [Asm]   r7 [label="v4 ← s1", color=green];
// [Asm]   r10 [label="v27 ← a0", color=green];
// [Asm]   r8 [label="v7 ← s2", color=green];
// [Asm]   r5 [label="v2 ← a0", color=green];
// [Asm]   r24 [label="a3", color=blue];
// [Asm]   r32 [label="v16 ← a0", color=green];
// [Asm]   r15 [label="s10", color=blue];
// [Asm]   r31 [label="v15 ← a0", color=green];
// [Asm]   r17 [label="t0", color=blue];
// [Asm]   r12 [label="v24 ← a1", color=green];
// [Asm]   r20 [label="t3", color=blue];
// [Asm]   r23 [label="a2", color=blue];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r27 [label="a6", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r28 [label="a7", color=blue];
// [Asm]   r11 [label="v5 ← a0", color=green];
// [Asm]   r22 [label="a1", color=blue];
// [Asm]   r14 [label="v26 ← a1", color=green];
// [Asm]   r30 [label="v13 ← a0", color=green];
// [Asm]   r25 [label="a4", color=blue];
// [Asm]   r2 [label="v0 ← a1", color=green];
// [Asm]   r16 [label="v22 ← a1", color=green];
// [Asm]   r18 [label="t1", color=blue];
// [Asm]   r19 [label="t2", color=blue];
// [Asm]   r21 [label="t4", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r8 -- r31;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r7 -- r25;
// [Asm]   r1 -- r19;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r27;
// [Asm]   r7 -- r32;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r4 -- r21;
// [Asm]   r3 -- r8;
// [Asm]   r8 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r11 -- r13;
// [Asm]   r1 -- r21;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r8 -- r23;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r4 -- r29;
// [Asm]   r6 -- r31;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r8 -- r29;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r22;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r8 -- r32;
// [Asm]   r6 -- r23;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r32;
// [Asm]   r8 -- r30;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r29;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r9;
// [Asm]   r7 -- r26;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r11 -- r12;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r7 -- r30;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r6 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r8 -- r20;
// [Asm]   r6 -- r26;
// [Asm]   r8 -- r25;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r8 -- r28;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r7 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r8 -- r13;
// [Asm]   r3 -- r21;
// [Asm]   r8 -- r15;
// [Asm]   r4 -- r32;
// [Asm]   r6 -- r28;
// [Asm]   r7 -- r15;
// [Asm]   r13 -- r14;
// [Asm]   r8 -- r18;
// [Asm]   r3 -- r29;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r1 -- r25;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r7 -- r31;
// [Asm]   r8 -- r26;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r23;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r7 -- r14;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:v18-> 1:a0-> 2:v0-> 3:s11-> 4:zero-> 6:v3-> 5:v2-> 7:v4-> 8:v7-> 16:v22-> 17:t0-> 18:t1-> 19:t2-> 20:t3-> 21:t4-> 22:a1-> 23:a2-> 24:a3-> 25:a4-> 26:a5-> 27:a6-> 28:a7-> 9:v8-> 11:v5-> 14:v26-> 13:v6-> 12:v24-> 15:s10-> 29:v12-> 30:v13-> 31:v15-> 32:v16-> 10:v27"
// [Asm]   comment = "v18<-a0;v8<-a0;v3<-s0;v6<-a2;v12<-a0;v4<-s1;v27<-a0;v7<-s2;v2<-a0;v16<-a0;v15<-a0;v24<-a1;v5<-a0;v26<-a1;v13<-a0;v0<-a1;v22<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of do_flip90_13"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v18, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld s0, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s1, 16(a1)
// [Asm] subst   mv v7, v2 ->   mv s2, a0
// [Asm] subst   lw v8, 0(v7) ->   lw a0, 0(s2)
// [Asm] subst   beq v8, zero, .do_flip90_13_1 ->   beq a0, zero, .do_flip90_13_1
// [Asm] subst   addi v27, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi v5, v27, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v5 ->   mv s11, a0
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a0)
// [Asm] subst   addi v24, s11, -32 ->   addi a1, s11, -32
// [Asm] subst   andi v6, v24, -8 ->   andi a2, a1, -8
// [Asm] subst   mv s11, v6 ->   mv s11, a2
// [Asm] subst   la v26, flip_loop99_15 ->   la a1, flip_loop99_15
// [Asm] subst   sd v26, 0(v6) ->   sd a1, 0(a2)
// [Asm] subst   sd v7, 8(v6) ->   sd s2, 8(a2)
// [Asm] subst   sd v3, 16(v6) ->   sd s0, 16(a2)
// [Asm] subst   sd v5, 24(v6) ->   sd a0, 24(a2)
// [Asm] subst   mv s10, v6 ->   mv s10, a2
// [Asm] subst   ld v22, 0(v6) ->   ld a1, 0(a2)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v22 ->   jalr a1
// [Asm] subst   lw v13, 0(v3) ->   lw a0, 0(s0)
// [Asm] subst   sw v13, 0(v7) ->   sw a0, 0(s2)
// [Asm] subst   lw v15, 0(v4) ->   lw a0, 0(s1)
// [Asm] subst   addi v16, v15, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v16, 0(v4) ->   sw a0, 0(s1)
// [Asm] subst   j .do_flip90_13_0 ->   j .do_flip90_13_0
// [Asm] pre_assigned_registers: FnParam(fref=f19, fpref=$f.0) -> v2, Insn(iref=%3) -> v8, Insn(iref=%7) -> v12, Self(fref=f19) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v13, Insn(iref=%2) -> v7, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%1) -> v6, Insn(iref=%6) -> v11, Insn(iref=%5) -> v10, Insn(iref=%0) -> v5, Insn(iref=%4) -> v9
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f19, fpref=$f.0), Insn(iref=%1)])
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v0, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v0, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v0, v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v0, v4, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v0, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v0, v19, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v0, v4, zero, v20, v2]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v0, v4, zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v0, v4, v17, zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v0, v18, zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v0, zero]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v11, v0, zero]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, zero]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v14, zero, a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of move_perm1_forward197_19"];
// [Asm]   r0 [label="v13 ← a0", color=green];
// [Asm]   r20 [label="t2", color=blue];
// [Asm]   r23 [label="a1", color=blue];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   r9 [label="v8 ← a2", color=green];
// [Asm]   r26 [label="a4", color=blue];
// [Asm]   r27 [label="a5", color=blue];
// [Asm]   r6 [label="v4 ← a3", color=green];
// [Asm]   r13 [label="v17 ← a4", color=green];
// [Asm]   r4 [label="v2 ← a0", color=green];
// [Asm]   r29 [label="a7", color=blue];
// [Asm]   r1 [label="v0 ← a1", color=green];
// [Asm]   r28 [label="a6", color=blue];
// [Asm]   r11 [label="v20 ← a2", color=green];
// [Asm]   r7 [label="v5 ← a2", color=green];
// [Asm]   r10 [label="v19 ← a2", color=green];
// [Asm]   r22 [label="t4", color=blue];
// [Asm]   r14 [label="v18 ← a3", color=green];
// [Asm]   r8 [label="v6 ← a2", color=green];
// [Asm]   r30 [label="v12 ← a0", color=green];
// [Asm]   r5 [label="v3 ← a2", color=green];
// [Asm]   r24 [label="a2", color=blue];
// [Asm]   r15 [label="v11 ← a0", color=green];
// [Asm]   r25 [label="a3", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="s10", color=blue];
// [Asm]   r18 [label="t0", color=blue];
// [Asm]   r19 [label="t1", color=blue];
// [Asm]   r21 [label="t3", color=blue];
// [Asm]   r17 [label="v14 ← a1", color=green];
// [Asm]   r12 [label="v9 ← a2", color=green];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r6 -- r12;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r12 -- r13;
// [Asm]   r15 -- r17;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r8;
// [Asm]   r2 -- r30;
// [Asm]   r12 -- r14;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r24;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r15 -- r16;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v13-> 1:v0-> 2:zero-> 3:a0-> 4:v2-> 5:v3-> 6:v4-> 7:v5-> 8:v6-> 9:v8-> 10:v19-> 11:v20-> 12:v9-> 13:v17-> 14:v18-> 15:v11-> 17:v14-> 16:s10-> 18:t0-> 19:t1-> 20:t2-> 21:t3-> 22:t4-> 23:a1-> 24:a2-> 25:a3-> 26:a4-> 27:a5-> 28:a6-> 29:a7-> 30:v12"
// [Asm]   comment = "v13<-a0;v8<-a2;v4<-a3;v17<-a4;v2<-a0;v0<-a1;v20<-a2;v5<-a2;v19<-a2;v18<-a3;v6<-a2;v12<-a0;v3<-a2;v11<-a0;v14<-a1;v9<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of move_perm1_forward197_19"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   j .move_perm1_forward197_19_3 ->   j .move_perm1_forward197_19_3
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld a2, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld a3, 16(a1)
// [Asm] subst   lw v5, 0(v3) ->   lw a2, 0(a2)
// [Asm] subst   addi v6, v5, -1 ->   addi a2, a2, -1
// [Asm] subst   blt v6, v2, .move_perm1_forward197_19_2 ->   blt a2, a0, .move_perm1_forward197_19_2
// [Asm] subst   addi v8, v2, 1 ->   addi a2, a0, 1
// [Asm] subst   slliw v19, v8, 2 ->   slliw a2, a2, 2
// [Asm] subst   add v20, v4, v19 ->   add a2, a3, a2
// [Asm] subst   lw v9, 0(v20) ->   lw a2, 0(a2)
// [Asm] subst   slliw v17, v2, 2 ->   slliw a4, a0, 2
// [Asm] subst   add v18, v4, v17 ->   add a3, a3, a4
// [Asm] subst   sw v9, 0(v18) ->   sw a2, 0(a3)
// [Asm] subst   addi v11, v2, 1 ->   addi a0, a0, 1
// [Asm] subst   mv s10, v0 ->   mv s10, a1
// [Asm] subst   ld v14, 0(v0) ->   ld a1, 0(a1)
// [Asm] subst   jalr v14 ->   jalr a1
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%9) -> v17, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%8) -> v16, Insn(iref=%10) -> v18, BlockParam(bref=b0, bpref=$b.0) -> v6, Insn(iref=%5) -> v13, Insn(iref=%0) -> v7, Insn(iref=%4) -> v12, Insn(iref=%3) -> v11, Insn(iref=%13) -> v21, FnParam(fref=f15, fpref=$f.0) -> v2, Insn(iref=%7) -> v15, Self(fref=f15) -> v0, Insn(iref=%2) -> v9, Insn(iref=%1) -> v8, Insn(iref=%11) -> v19, FreeVar(fvref=^3) -> v5, Insn(iref=%6) -> v14, Insn(iref=%12) -> v20
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%1)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v35]
// [Asm] live_set: [v5, zero, v35, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v5, zero, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v5, zero, v13, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v5, zero, v30, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v5, zero, v4, v6, v31, v3]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v5, zero, v4, v6, v15, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v5, zero, v29, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v4, v6, v17, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v18, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v5, v18, zero, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v5, zero, v23, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v5, zero, v19, v4, v6, v24, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v4, v5, v21, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: [v21]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v5, zero, v7, v4, v38, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v0, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of flip_loop99_15"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v24 ← a3", color=green];
// [Asm]   r23 [label="v7 ← a3", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v13 ← a3", color=green];
// [Asm]   r26 [label="v0 ← a1", color=green];
// [Asm]   r27 [label="v2 ← a3", color=green];
// [Asm]   r6 [label="v3 ← a2", color=green];
// [Asm]   r13 [label="v15 ← a3", color=green];
// [Asm]   r4 [label="v4 ← a0", color=green];
// [Asm]   r1 [label="v35 ← a3", color=green];
// [Asm]   r11 [label="v30 ← a3", color=green];
// [Asm]   r7 [label="v36 ← a3", color=green];
// [Asm]   r10 [label="v14 ← a3", color=green];
// [Asm]   r22 [label="v10 ← a0", color=green];
// [Asm]   r14 [label="v28 ← a5", color=green];
// [Asm]   r8 [label="v11 ← a3", color=green];
// [Asm]   r5 [label="v6 ← a4", color=green];
// [Asm]   r15 [label="v29 ← a5", color=green];
// [Asm]   r24 [label="v38 ← a5", color=green];
// [Asm]   r25 [label="v8 ← a3", color=green];
// [Asm]   r2 [label="v5 ← a1", color=green];
// [Asm]   r16 [label="v17 ← a3", color=green];
// [Asm]   r18 [label="v19 ← a5", color=green];
// [Asm]   r19 [label="v23 ← a3", color=green];
// [Asm]   r17 [label="v18 ← a3", color=green];
// [Asm]   r21 [label="v21 ← a3", color=green];
// [Asm]   r12 [label="v31 ← a3", color=green];
// [Asm]   r6 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r25;
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r26;
// [Asm]   r3 -- r4;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r27;
// [Asm]   r23 -- r24;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r18 -- r20;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r24;
// [Asm]   r6 -- r23;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r17 -- r18;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r13 -- r15;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r19;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r18 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r13 -- r14;
// [Asm]   r3 -- r20;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r25;
// [Asm]   r4 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:a0-> 26:v0-> 3:zero-> 4:v4-> 6:v3-> 27:v2-> 2:v5-> 1:v35-> 5:v6-> 7:v36-> 8:v11-> 9:v13-> 10:v14-> 11:v30-> 12:v31-> 13:v15-> 14:v28-> 15:v29-> 16:v17-> 17:v18-> 18:v19-> 19:v23-> 20:v24-> 23:v7-> 24:v38-> 25:v8-> 21:v21-> 22:v10"
// [Asm]   comment = "v24<-a3;v7<-a3;v13<-a3;v0<-a1;v2<-a3;v3<-a2;v15<-a3;v4<-a0;v35<-a3;v30<-a3;v36<-a3;v14<-a3;v10<-a0;v28<-a5;v11<-a3;v6<-a4;v29<-a5;v38<-a5;v8<-a3;v5<-a1;v17<-a3;v19<-a5;v23<-a3;v18<-a3;v21<-a3;v31<-a3;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of flip_loop99_15"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   mv v2, a0 ->   mv a3, a0
// [Asm] subst   ld v3, 8(v0) ->   ld a2, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld a0, 16(a1)
// [Asm] subst   ld v5, 24(v0) ->   ld a1, 24(a1)
// [Asm] subst   mv v6, v2 ->   mv a4, a3
// [Asm] subst   slliw v35, v6, 2 ->   slliw a3, a4, 2
// [Asm] subst   add v36, v4, v35 ->   add a3, a0, a3
// [Asm] subst   lw v11, 0(v36) ->   lw a3, 0(a3)
// [Asm] subst   sw v11, 0(v5) ->   sw a3, 0(a1)
// [Asm] subst   lw v13, 0(v3) ->   lw a3, 0(a2)
// [Asm] subst   sub v14, v13, v6 ->   sub a3, a3, a4
// [Asm] subst   slliw v30, v14, 2 ->   slliw a3, a3, 2
// [Asm] subst   add v31, v4, v30 ->   add a3, a0, a3
// [Asm] subst   lw v15, 0(v31) ->   lw a3, 0(a3)
// [Asm] subst   slliw v28, v6, 2 ->   slliw a5, a4, 2
// [Asm] subst   add v29, v4, v28 ->   add a5, a0, a5
// [Asm] subst   sw v15, 0(v29) ->   sw a3, 0(a5)
// [Asm] subst   lw v17, 0(v3) ->   lw a3, 0(a2)
// [Asm] subst   sub v18, v17, v6 ->   sub a3, a3, a4
// [Asm] subst   lw v19, 0(v5) ->   lw a5, 0(a1)
// [Asm] subst   slliw v23, v18, 2 ->   slliw a3, a3, 2
// [Asm] subst   add v24, v4, v23 ->   add a3, a0, a3
// [Asm] subst   sw v19, 0(v24) ->   sw a5, 0(a3)
// [Asm] subst   addi v21, v6, 1 ->   addi a3, a4, 1
// [Asm] subst   mv v6, v21 ->   mv a4, a3
// [Asm] subst   j .flip_loop99_15_0 ->   j .flip_loop99_15_0
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   lw v7, 0(v3) ->   lw a3, 0(a2)
// [Asm] subst   li v38, 2 ->   li a5, 2
// [Asm] subst   div v8, v7, v38 ->   div a3, a3, a5
// [Asm] subst   blt v8, v6, .flip_loop99_15_2 ->   blt a3, a4, .flip_loop99_15_2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v7, Insn(iref=%7) -> v11, Self(fref=f11) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%9) -> v13, Insn(iref=%2) -> v6, FreeVar(fvref=^2) -> v3, Insn(iref=%8) -> v12, Insn(iref=%1) -> v5, FreeVar(fvref=^1) -> v2, Insn(iref=%6) -> v10, Insn(iref=%5) -> v9, Insn(iref=%0) -> v4, Insn(iref=%4) -> v8
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=1)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v0, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v2, v0, v4, v24, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v0, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v0, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v7, v0, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v3, v7, v0, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v8, v3, v0, v19, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v8, v0, zero, v20, v2]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v0, v10, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v0, v11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v0, zero]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v0, zero]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v15, zero]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v15, zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v13]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] move_origin: [v13]
// [Asm] defined: v14 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init_count59_11"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="t3", color=blue];
// [Asm]   r23 [label="a2", color=blue];
// [Asm]   r3 [label="v2 ← a1", color=green];
// [Asm]   r9 [label="v7 ← a3", color=green];
// [Asm]   r26 [label="a5", color=blue];
// [Asm]   r27 [label="a6", color=blue];
// [Asm]   r6 [label="v24 ← a4", color=green];
// [Asm]   r13 [label="v10 ← a2", color=green];
// [Asm]   r4 [label="v3 ← a2", color=green];
// [Asm]   r29 [label="v13 ← a0", color=green];
// [Asm]   r1 [label="v0 ← a0", color=green];
// [Asm]   r28 [label="a7", color=blue];
// [Asm]   r11 [label="v19 ← a3", color=green];
// [Asm]   r7 [label="v14 ← a0", color=green];
// [Asm]   r10 [label="v8 ← a4", color=green];
// [Asm]   r22 [label="a1", color=blue];
// [Asm]   r14 [label="v11 ← a2", color=green];
// [Asm]   r8 [label="v6 ← a3", color=green];
// [Asm]   r5 [label="v4 ← a3", color=green];
// [Asm]   r24 [label="a3", color=blue];
// [Asm]   r15 [label="s10", color=blue];
// [Asm]   r25 [label="a4", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v15 ← a0", color=green];
// [Asm]   r18 [label="t1", color=blue];
// [Asm]   r19 [label="t2", color=blue];
// [Asm]   r17 [label="t0", color=blue];
// [Asm]   r21 [label="t4", color=blue];
// [Asm]   r12 [label="v20 ← a2", color=green];
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r0 -- r24;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r28;
// [Asm]   r0 -- r25;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r0 -- r21;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r0 -- r23;
// [Asm]   r2 -- r16;
// [Asm]   r0 -- r22;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r0 -- r19;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r26;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r10 -- r12;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r10;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r24;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r27;
// [Asm]   r0 -- r20;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r27;
// [Asm]   r2 -- r23;
// [Asm]   r0 -- r18;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:a0-> 2:zero-> 17:t0-> 18:t1-> 19:t2-> 20:t3-> 21:t4-> 22:a1-> 23:a2-> 24:a3-> 25:a4-> 26:a5-> 27:a6-> 28:a7-> 1:v0-> 3:v2-> 4:v3-> 5:v4-> 6:v24-> 8:v6-> 9:v7-> 10:v8-> 11:v19-> 12:v20-> 13:v10-> 14:v11-> 7:v14-> 15:s10-> 16:v15-> 29:v13"
// [Asm]   comment = "v2<-a1;v7<-a3;v24<-a4;v10<-a2;v3<-a2;v13<-a0;v0<-a0;v19<-a3;v14<-a0;v8<-a4;v11<-a2;v6<-a3;v4<-a3;v15<-a0;v20<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init_count59_11"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v0, s10 ->   mv a0, s10
// [Asm] subst   ld v2, 8(v0) ->   ld a1, 8(a0)
// [Asm] subst   ld v3, 16(v0) ->   ld a2, 16(a0)
// [Asm] subst   lw v4, 0(v2) ->   lw a3, 0(a1)
// [Asm] subst   li v24, 1 ->   li a4, 1
// [Asm] subst   beq v4, v24, .init_count59_11_1 ->   beq a3, a4, .init_count59_11_1
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   j .init_count59_11_3 ->   j .init_count59_11_3
// [Asm] subst   lw v6, 0(v2) ->   lw a3, 0(a1)
// [Asm] subst   addi v7, v6, -1 ->   addi a3, a3, -1
// [Asm] subst   lw v8, 0(v2) ->   lw a4, 0(a1)
// [Asm] subst   slliw v19, v7, 2 ->   slliw a3, a3, 2
// [Asm] subst   add v20, v3, v19 ->   add a2, a2, a3
// [Asm] subst   sw v8, 0(v20) ->   sw a4, 0(a2)
// [Asm] subst   lw v10, 0(v2) ->   lw a2, 0(a1)
// [Asm] subst   addi v11, v10, -1 ->   addi a2, a2, -1
// [Asm] subst   sw v11, 0(v2) ->   sw a2, 0(a1)
// [Asm] subst   mv s10, v0 ->   mv s10, a0
// [Asm] subst   ld v15, 0(v0) ->   ld a0, 0(a0)
// [Asm] subst   jalr v15 ->   jalr a0
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v6, Insn(iref=%1) -> v3, Insn(iref=%3) -> v5, Self(fref=f1) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main262_1"];
// [Asm]   r0 [label="v11 ← a0", color=green];
// [Asm]   r3 [label="t1", color=blue];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="t4", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="t2", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r14 [label="v2 ← a0", color=green];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="t3", color=blue];
// [Asm]   r15 [label="v3 ← s0", color=green];
// [Asm]   r2 [label="t0", color=blue];
// [Asm]   r16 [label="v4 ← a0", color=green];
// [Asm]   r18 [label="v6 ← a0", color=green];
// [Asm]   r17 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r4 -- r15;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r15 -- r17;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r8 -- r15;
// [Asm]   r9 -- r15;
// [Asm]   r1 -- r4;
// [Asm]   r7 -- r15;
// [Asm]   r10 -- r15;
// [Asm]   r12 -- r15;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r11 -- r15;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r3;
// [Asm]   r15 -- r16;
// [Asm]   r14 -- r15;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v11-> 1:a0-> 2:t0-> 15:v3-> 3:t1-> 4:t2-> 5:t3-> 6:t4-> 7:a1-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:v2-> 16:v4-> 17:v5-> 18:v6"
// [Asm]   comment = "v11<-a0;v2<-a0;v3<-s0;v4<-a0;v6<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main262_1"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v11, 9 ->   li a0, 9
// [Asm] subst   call fannkuch1_0 ->   call fannkuch1_0
// [Asm] subst   lw v3, 0(v2) ->   lw s0, 0(a0)
// [Asm] subst   lw v4, 4(v2) ->   lw a0, 4(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v3 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v10, FnParam(fref=f5, fpref=$f.0) -> v2, Self(fref=f5) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v8, Insn(iref=%2) -> v9, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%1) -> v7, BlockParam(bref=b0, bpref=$b.0) -> v5, Insn(iref=%0) -> v6
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v5, v12, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v4, v5, zero, v13, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v4, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v10]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [zero]
// [Asm] defined: v8 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init_arr9_5"];
// [Asm]   r0 [label="v12 ← a0", color=green];
// [Asm]   r5 [label="v13 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r2 [label="v5 ← a2", color=green];
// [Asm]   r9 [label="v0 ← a1", color=green];
// [Asm]   r6 [label="v10 ← a0", color=green];
// [Asm]   r4 [label="v3 ← a3", color=green];
// [Asm]   r1 [label="v4 ← a1", color=green];
// [Asm]   r11 [label="v2 ← a0", color=green];
// [Asm]   r7 [label="v8 ← a0", color=green];
// [Asm]   r10 [label="a0", color=blue];
// [Asm]   r8 [label="v6 ← a0", color=green];
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r9;
// [Asm]   r3 -- r8;
// [Asm]   comment = "0:v12-> 1:v4-> 2:v5-> 3:zero-> 4:v3-> 5:v13-> 8:v6-> 6:v10-> 11:v2-> 9:v0-> 10:a0-> 7:v8"
// [Asm]   comment = "v12<-a0;v13<-a0;v5<-a2;v0<-a1;v10<-a0;v3<-a3;v4<-a1;v2<-a0;v8<-a0;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init_arr9_5"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v12, v5, 2 ->   slliw a0, a2, 2
// [Asm] subst   add v13, v4, v12 ->   add a0, a1, a0
// [Asm] subst   sw v5, 0(v13) ->   sw a2, 0(a0)
// [Asm] subst   addi v10, v5, 1 ->   addi a0, a2, 1
// [Asm] subst   mv v5, v10 ->   mv a2, a0
// [Asm] subst   j .init_arr9_5_0 ->   j .init_arr9_5_0
// [Asm] subst   mv v8, zero ->   mv a0, zero
// [Asm] subst   addi v6, v3, -1 ->   addi a0, a3, -1
// [Asm] subst   blt v6, v5, .init_arr9_5_2 ->   blt a0, a2, .init_arr9_5_2
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a3, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld a1, 16(a1)
// [Asm] subst   mv v5, v2 ->   mv a2, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v7, Insn(iref=%1) -> v6, Mem(fref=f3, mref=m0) -> v3, FnParam(fref=f3, fpref=$f.0) -> v2, Mem(fref=f3, mref=m1) -> v4, Self(fref=f3) -> v0, Insn(iref=%0) -> v5
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s11, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, zero, s11, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, zero, a1, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v3, zero, a0, a1, s11, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v3, zero, a0, a2, a1, s11, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v2, v4, v12, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v8, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of gen_perm14_3"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r20 [label="v10 ← a0", color=green];
// [Asm]   r23 [label="s10", color=blue];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r6 [label="v14 ← a0", color=green];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r4 [label="v2 ← s0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r7 [label="v3 ← s1", color=green];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r22 [label="v12 ← a1", color=green];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="v13 ← a0", color=green];
// [Asm]   r24 [label="v8 ← a1", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r25 [label="v7 ← a0", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r21 [label="v4 ← a0", color=green];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r7 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r23;
// [Asm]   r7 -- r24;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r18;
// [Asm]   r7 -- r25;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r4 -- r22;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r7 -- r9;
// [Asm]   r3 -- r5;
// [Asm]   r7 -- r17;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r7 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r7 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r15;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r6;
// [Asm]   r7 -- r16;
// [Asm]   r3 -- r7;
// [Asm]   r7 -- r18;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r23;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r2 -- r19;
// [Asm]   r7 -- r12;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   comment = "0:v0-> 1:zero-> 2:a0-> 3:s11-> 4:v2-> 7:v3-> 8:a1-> 9:a2-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 5:v13-> 20:v10-> 21:v4-> 22:v12-> 24:v8-> 6:v14-> 23:s10-> 25:v7"
// [Asm]   comment = "v0<-a1;v10<-a0;v14<-a0;v2<-s0;v3<-s1;v12<-a1;v13<-a0;v8<-a1;v7<-a0;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of gen_perm14_3"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   slliw v13, v2, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v14, s11, v13 ->   sub a0, s11, a0
// [Asm] subst   andi v3, v14, -8 ->   andi s1, a0, -8
// [Asm] subst   mv s11, v3 ->   mv s11, s1
// [Asm] subst   mv a1, v2 ->   mv a1, s0
// [Asm] subst   mv a0, v3 ->   mv a0, s1
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   addi v10, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi v4, v10, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v4 ->   mv s11, a0
// [Asm] subst   la v12, init_arr9_5 ->   la a1, init_arr9_5
// [Asm] subst   sd v12, 0(v4) ->   sd a1, 0(a0)
// [Asm] subst   sd v2, 8(v4) ->   sd s0, 8(a0)
// [Asm] subst   sd v3, 16(v4) ->   sd s1, 16(a0)
// [Asm] subst   mv s10, v4 ->   mv s10, a0
// [Asm] subst   ld v8, 0(v4) ->   ld a1, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v8 ->   jalr a1
// [Asm] subst   mv a0, v3 ->   mv a0, s1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Mem(fref=f7, mref=m0) -> v17, Insn(iref=%15) -> v35, FreeVar(fvref=^5) -> v7, Insn(iref=%33) -> v54, Self(fref=f7) -> v0, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%8) -> v28, Mem(fref=f7, mref=m5) -> v14, Insn(iref=%10) -> v30, Insn(iref=%27) -> v48, Insn(iref=%14) -> v34, Insn(iref=%25) -> v46, FreeVar(fvref=^4) -> v6, Insn(iref=%4) -> v24, Insn(iref=%32) -> v53, Mem(fref=f7, mref=m1) -> v13, BlockParam(bref=b6, bpref=$b.0) -> v21, FnParam(fref=f7, fpref=$f.0) -> v2, Insn(iref=%1) -> v20, Insn(iref=%11) -> v31, Insn(iref=%26) -> v47, Insn(iref=%6) -> v26, Insn(iref=%31) -> v52, Insn(iref=%28) -> v49, Insn(iref=%9) -> v29, Insn(iref=%16) -> v37, Insn(iref=%24) -> v45, BlockParam(bref=b0, bpref=$b.0) -> v18, FreeVar(fvref=^7) -> v9, Insn(iref=%29) -> v50, Insn(iref=%5) -> v25, Insn(iref=%0) -> v19, Insn(iref=%19) -> v40, FreeVar(fvref=^6) -> v8, Insn(iref=%3) -> v23, Insn(iref=%18) -> v39, Insn(iref=%13) -> v33, Mem(fref=f7, mref=m2) -> v15, FreeVar(fvref=^8) -> v10, Insn(iref=%7) -> v27, Mem(fref=f7, mref=m6) -> v11, BlockParam(bref=b5, bpref=$b.0) -> v36, Mem(fref=f7, mref=m3) -> v16, Insn(iref=%22) -> v43, Insn(iref=%17) -> v38, Insn(iref=%23) -> v44, Insn(iref=%2) -> v22, Insn(iref=%20) -> v41, Insn(iref=%30) -> v51, Mem(fref=f7, mref=m4) -> v12, FreeVar(fvref=^3) -> v5, Insn(iref=%21) -> v42, Insn(iref=%34) -> v55, Insn(iref=%12) -> v32
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%11), Insn(iref=%12)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%0)])
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s11, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [zero, a0, v0, s11]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v0, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v0, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, v0, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v0, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, zero, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v5, zero, v8, v7, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v5, zero, v8, v7, v0, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v5, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v18 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v9, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v36]
// [Asm] live_set: [v5, v10, v18, zero, v7, v36, v8, v4, v6, s11, v9, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v36 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [zero]
// [Asm] defined: v21 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v5, v10, v18, zero, v7, v36, v8, v4, v6, s11, v9, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v18, zero, v7, v36, v8, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v5, v10, v7, v37, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v5, v10, v7, v37, s11, v9, v18, zero, v8, v4, v38, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v5, v10, v7, v37, s11, v9, v39, v18, zero, v8, v4, v38, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v40, v5, v10, v7, v37, s11, v9, v39, v18, zero, v8, v4, v38, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v77]
// [Asm] live_set: [v40, v5, v10, v7, v37, s11, v9, v39, v18, zero, v77, v8, v4, v38, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v77 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v5, v10, v7, v37, v41, s11, v9, v39, v18, zero, v8, v4, v38, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v5, v10, v7, v37, v41, s11, v9, v39, v18, v75, zero, v8, v4, v38, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v5, v10, v42, v7, v37, s11, v9, v39, v18, zero, v8, v4, v38, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v5, v10, v7, v37, v43, s11, v9, v18, zero, v8, v4, v38, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v5, v10, v7, v37, v43, s11, v9, v72, v18, zero, v8, v4, v38, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v5, v10, v7, v37, s11, v44, v9, v18, zero, v8, v4, v38, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [v70]
// [Asm] live_set: [v5, v10, v7, v37, s11, v44, v9, v18, zero, v8, v4, v38, v6, v70, v3]
// [Asm] move_origin: []
// [Asm] defined: v70 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v5, v10, v7, v37, s11, v9, v18, zero, v8, v45, v4, v38, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v5, v46, v10, v7, v37, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v5, v10, v7, s11, v9, v18, zero, v8, v4, v47, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v65]
// [Asm] live_set: [v5, v10, v7, v65, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v10, v7, v12, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v10, v7, v12, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: [v12]
// [Asm] defined: s11 is X
// [Asm] defs: [v67]
// [Asm] live_set: [v5, v10, v67, v7, v12, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v12, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v63]
// [Asm] live_set: [v5, v10, v7, v12, v9, v63, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v63 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, v10, v7, v12, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v14, v10, v7, v12, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: [v14]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v14, v10, v7, v12, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v60]
// [Asm] live_set: [v5, v14, v10, v7, v12, v9, v60, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v14, v10, v7, v12, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, v14, v10, v7, s11, v12, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: [v11]
// [Asm] defined: s11 is X
// [Asm] defs: [v62]
// [Asm] live_set: [v11, v62, v5, v14, v10, v7, s11, v12, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v14, v10, v7, s11, v12, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v14, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v14, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v14, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v14, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v18, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v18, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v11, v5, v10, v18, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: [v11]
// [Asm] defined: s10 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v5, v58, v10, v18, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v58 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v58, v10, v18, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v18, v10, zero, a0, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v52]
// [Asm] live_set: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v52 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v53]
// [Asm] live_set: [v5, v18, v10, v53, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v54, v3]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: [v18]
// [Asm] defs: []
// [Asm] live_set: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v101]
// [Asm] live_set: [v5, v10, v7, v9, v101, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v101 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v5, v10, v7, v17, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v10, v7, v17, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: [v17]
// [Asm] defined: s11 is X
// [Asm] defs: [v103]
// [Asm] live_set: [v5, v10, v7, v17, s11, v9, v18, zero, v8, v103, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v103 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v17, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v17, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v17, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v17, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v10, v7, v17, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: [v17]
// [Asm] defined: s10 is X
// [Asm] defs: [v99]
// [Asm] live_set: [v5, v10, v7, s11, v9, v18, v99, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v99 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, s11, v9, v18, v99, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v10, a0, v7, s11, v9, v18, v99, zero, v8, v4, v6, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v10, a0, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v23]
// [Asm] live_set: [v5, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v96]
// [Asm] live_set: [v5, v10, v7, v9, v18, v96, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v96 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v5, v10, v13, v7, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v10, v13, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: [v13]
// [Asm] defined: s11 is X
// [Asm] defs: [v98]
// [Asm] live_set: [v5, v10, v13, v7, s11, v9, v98, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v98 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v13, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v13, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v13, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v10, v13, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: [v13]
// [Asm] defined: s10 is X
// [Asm] defs: [v94]
// [Asm] live_set: [v5, v10, v7, s11, v9, v94, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v94 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, s11, v9, v94, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v10, a0, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v25]
// [Asm] live_set: [v5, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v5, v10, v7, s11, v9, v18, zero, v27, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v91]
// [Asm] live_set: [v5, v91, v10, v7, v9, v18, zero, v27, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v91 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v5, v10, v7, v9, v18, zero, v27, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v10, v7, s11, v9, v18, zero, v27, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v15]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, s11, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v88]
// [Asm] live_set: [v5, v10, v7, v88, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v88 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, v10, v7, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v16, v10, v7, s11, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v16]
// [Asm] defined: s11 is X
// [Asm] defs: [v90]
// [Asm] live_set: [v5, v16, v10, v7, s11, v9, v18, zero, v8, v4, v90, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v90 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v16, v10, v7, s11, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v16, v10, v7, s11, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v16, v10, v7, s11, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v16, v18, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: [v16]
// [Asm] defined: s10 is X
// [Asm] defs: [v86]
// [Asm] live_set: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v15, v86, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v86 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v15, v86, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v10, v18, zero, a0, v7, v8, v4, v6, s11, v86, v9, v3]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v10, v18, zero, a0, v7, v8, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v30]
// [Asm] live_set: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v9, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v31, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v5, v10, v18, zero, v7, v8, v4, v32, v6, s11, v31, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v21]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v5, v18, v10, zero, v8, v7, v19, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v104]
// [Asm] live_set: [v5, v18, v10, zero, v8, v7, v19, v104, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v104 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of compute40_7"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r46 [label="t4", color=blue];
// [Asm]   r33 [label="v12 ← a0", color=green];
// [Asm]   r76 [label="v32 ← a1", color=green];
// [Asm]   r59 [label="v103 ← a0", color=green];
// [Asm]   r9 [label="v7 ← s4", color=green];
// [Asm]   r26 [label="v72 ← a3", color=green];
// [Asm]   r44 [label="t2", color=blue];
// [Asm]   r53 [label="a7", color=blue];
// [Asm]   r56 [label="v54 ← a0", color=green];
// [Asm]   r10 [label="v8 ← s5", color=green];
// [Asm]   r5 [label="v3 ← s0", color=green];
// [Asm]   r54 [label="v52 ← a0", color=green];
// [Asm]   r24 [label="v42 ← a3", color=green];
// [Asm]   r43 [label="t1", color=blue];
// [Asm]   r31 [label="v47 ← a0", color=green];
// [Asm]   r39 [label="v62 ← a2", color=green];
// [Asm]   r17 [label="v37 ← a0", color=green];
// [Asm]   r52 [label="a6", color=blue];
// [Asm]   r65 [label="v94 ← a0", color=green];
// [Asm]   r20 [label="v40 ← a3", color=green];
// [Asm]   r61 [label="v23 ← a0", color=green];
// [Asm]   r23 [label="v75 ← a4", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r67 [label="v27 ← a1", color=green];
// [Asm]   r75 [label="v31 ← a0", color=green];
// [Asm]   r77 [label="v19 ← a0", color=green];
// [Asm]   r27 [label="v44 ← a2", color=green];
// [Asm]   r62 [label="v96 ← a0", color=green];
// [Asm]   r40 [label="s10", color=blue];
// [Asm]   r11 [label="v9 ← s6", color=green];
// [Asm]   r58 [label="v17 ← a1", color=green];
// [Asm]   r34 [label="v67 ← a1", color=green];
// [Asm]   r14 [label="v34 ← a0", color=green];
// [Asm]   r51 [label="a5", color=blue];
// [Asm]   r78 [label="v104 ← a1", color=green];
// [Asm]   r55 [label="v53 ← a0", color=green];
// [Asm]   r16 [label="v21 ← a0", color=green];
// [Asm]   r21 [label="v77 ← a4", color=green];
// [Asm]   r60 [label="v99 ← a1", color=green];
// [Asm]   r73 [label="v86 ← a1", color=green];
// [Asm]   r38 [label="v11 ← a3", color=green];
// [Asm]   r72 [label="v90 ← a1", color=green];
// [Asm]   r47 [label="a1", color=blue];
// [Asm]   r6 [label="v4 ← s1", color=green];
// [Asm]   r13 [label="v18 ← s8", color=green];
// [Asm]   r42 [label="t0", color=blue];
// [Asm]   r4 [label="v2 ← a0", color=green];
// [Asm]   r29 [label="v45 ← a2", color=green];
// [Asm]   r35 [label="v63 ← a1", color=green];
// [Asm]   r7 [label="v5 ← s2", color=green];
// [Asm]   r64 [label="v98 ← a0", color=green];
// [Asm]   r8 [label="v6 ← s3", color=green];
// [Asm]   r36 [label="v14 ← a1", color=green];
// [Asm]   r66 [label="v25 ← a0", color=green];
// [Asm]   r32 [label="v65 ← a0", color=green];
// [Asm]   r15 [label="v36 ← a0", color=green];
// [Asm]   r49 [label="a3", color=blue];
// [Asm]   r57 [label="v101 ← a0", color=green];
// [Asm]   r74 [label="v30 ← a0", color=green];
// [Asm]   r68 [label="v91 ← a0", color=green];
// [Asm]   r70 [label="v88 ← a1", color=green];
// [Asm]   r12 [label="v10 ← s7", color=green];
// [Asm]   r48 [label="a2", color=blue];
// [Asm]   r37 [label="v60 ← a2", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v70 ← a3", color=green];
// [Asm]   r41 [label="v58 ← a0", color=green];
// [Asm]   r71 [label="v16 ← a2", color=green];
// [Asm]   r69 [label="v15 ← a0", color=green];
// [Asm]   r22 [label="v41 ← a3", color=green];
// [Asm]   r50 [label="a4", color=blue];
// [Asm]   r30 [label="v46 ← a1", color=green];
// [Asm]   r45 [label="t3", color=blue];
// [Asm]   r25 [label="v43 ← a2", color=green];
// [Asm]   r63 [label="v13 ← a1", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r18 [label="v38 ← a1", color=green];
// [Asm]   r19 [label="v39 ← a2", color=green];
// [Asm]   r12 -- r25;
// [Asm]   r5 -- r69;
// [Asm]   r10 -- r64;
// [Asm]   r6 -- r70;
// [Asm]   r6 -- r48;
// [Asm]   r10 -- r53;
// [Asm]   r11 -- r78;
// [Asm]   r11 -- r35;
// [Asm]   r8 -- r36;
// [Asm]   r6 -- r68;
// [Asm]   r69 -- r72;
// [Asm]   r3 -- r9;
// [Asm]   r9 -- r78;
// [Asm]   r7 -- r78;
// [Asm]   r13 -- r67;
// [Asm]   r5 -- r65;
// [Asm]   r2 -- r51;
// [Asm]   r11 -- r55;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r62;
// [Asm]   r7 -- r32;
// [Asm]   r1 -- r68;
// [Asm]   r9 -- r73;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r48;
// [Asm]   r9 -- r62;
// [Asm]   r6 -- r69;
// [Asm]   r5 -- r35;
// [Asm]   r13 -- r30;
// [Asm]   r13 -- r33;
// [Asm]   r2 -- r48;
// [Asm]   r10 -- r18;
// [Asm]   r13 -- r71;
// [Asm]   r12 -- r54;
// [Asm]   r5 -- r32;
// [Asm]   r11 -- r73;
// [Asm]   r1 -- r2;
// [Asm]   r11 -- r43;
// [Asm]   r1 -- r11;
// [Asm]   r12 -- r43;
// [Asm]   r12 -- r23;
// [Asm]   r5 -- r51;
// [Asm]   r1 -- r35;
// [Asm]   r17 -- r27;
// [Asm]   r6 -- r56;
// [Asm]   r9 -- r39;
// [Asm]   r12 -- r62;
// [Asm]   r6 -- r25;
// [Asm]   r7 -- r44;
// [Asm]   r11 -- r62;
// [Asm]   r2 -- r73;
// [Asm]   r6 -- r62;
// [Asm]   r1 -- r55;
// [Asm]   r12 -- r34;
// [Asm]   r11 -- r70;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r6 -- r46;
// [Asm]   r9 -- r76;
// [Asm]   r17 -- r24;
// [Asm]   r9 -- r30;
// [Asm]   r33 -- r35;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r42;
// [Asm]   r12 -- r50;
// [Asm]   r7 -- r75;
// [Asm]   r5 -- r74;
// [Asm]   r9 -- r11;
// [Asm]   r3 -- r65;
// [Asm]   r11 -- r52;
// [Asm]   r9 -- r63;
// [Asm]   r9 -- r24;
// [Asm]   r10 -- r15;
// [Asm]   r33 -- r37;
// [Asm]   r8 -- r18;
// [Asm]   r8 -- r35;
// [Asm]   r9 -- r36;
// [Asm]   r7 -- r36;
// [Asm]   r1 -- r72;
// [Asm]   r13 -- r52;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r60;
// [Asm]   r6 -- r38;
// [Asm]   r12 -- r17;
// [Asm]   r9 -- r46;
// [Asm]   r10 -- r32;
// [Asm]   r13 -- r68;
// [Asm]   r3 -- r23;
// [Asm]   r7 -- r46;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r5 -- r12;
// [Asm]   r10 -- r62;
// [Asm]   r12 -- r35;
// [Asm]   r11 -- r44;
// [Asm]   r2 -- r45;
// [Asm]   r9 -- r25;
// [Asm]   r11 -- r68;
// [Asm]   r5 -- r63;
// [Asm]   r5 -- r8;
// [Asm]   r13 -- r61;
// [Asm]   r69 -- r70;
// [Asm]   r7 -- r56;
// [Asm]   r3 -- r56;
// [Asm]   r6 -- r66;
// [Asm]   r8 -- r68;
// [Asm]   r7 -- r77;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r19;
// [Asm]   r6 -- r54;
// [Asm]   r1 -- r17;
// [Asm]   r9 -- r45;
// [Asm]   r9 -- r31;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r60;
// [Asm]   r3 -- r18;
// [Asm]   r9 -- r41;
// [Asm]   r6 -- r77;
// [Asm]   r1 -- r70;
// [Asm]   r1 -- r31;
// [Asm]   r10 -- r56;
// [Asm]   r11 -- r48;
// [Asm]   r2 -- r46;
// [Asm]   r58 -- r59;
// [Asm]   r13 -- r43;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r63;
// [Asm]   r8 -- r78;
// [Asm]   r3 -- r40;
// [Asm]   r9 -- r59;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r69;
// [Asm]   r13 -- r18;
// [Asm]   r8 -- r29;
// [Asm]   r13 -- r57;
// [Asm]   r5 -- r7;
// [Asm]   r13 -- r22;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r10 -- r25;
// [Asm]   r3 -- r7;
// [Asm]   r69 -- r73;
// [Asm]   r12 -- r68;
// [Asm]   r12 -- r53;
// [Asm]   r6 -- r32;
// [Asm]   r11 -- r25;
// [Asm]   r17 -- r20;
// [Asm]   r10 -- r17;
// [Asm]   r67 -- r68;
// [Asm]   r13 -- r24;
// [Asm]   r12 -- r38;
// [Asm]   r9 -- r60;
// [Asm]   r13 -- r46;
// [Asm]   r11 -- r57;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r9 -- r29;
// [Asm]   r7 -- r71;
// [Asm]   r1 -- r60;
// [Asm]   r25 -- r26;
// [Asm]   r33 -- r39;
// [Asm]   r10 -- r27;
// [Asm]   r1 -- r65;
// [Asm]   r1 -- r66;
// [Asm]   r9 -- r67;
// [Asm]   r1 -- r39;
// [Asm]   r9 -- r44;
// [Asm]   r8 -- r54;
// [Asm]   r12 -- r42;
// [Asm]   r7 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r9 -- r38;
// [Asm]   r8 -- r52;
// [Asm]   r7 -- r33;
// [Asm]   r8 -- r67;
// [Asm]   r12 -- r49;
// [Asm]   r10 -- r23;
// [Asm]   r3 -- r55;
// [Asm]   r22 -- r23;
// [Asm]   r12 -- r39;
// [Asm]   r12 -- r30;
// [Asm]   r9 -- r65;
// [Asm]   r1 -- r73;
// [Asm]   r9 -- r19;
// [Asm]   r7 -- r50;
// [Asm]   r11 -- r27;
// [Asm]   r7 -- r68;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r43;
// [Asm]   r7 -- r69;
// [Asm]   r9 -- r54;
// [Asm]   r5 -- r76;
// [Asm]   r10 -- r21;
// [Asm]   r33 -- r38;
// [Asm]   r12 -- r18;
// [Asm]   r3 -- r44;
// [Asm]   r8 -- r31;
// [Asm]   r7 -- r51;
// [Asm]   r12 -- r29;
// [Asm]   r12 -- r32;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r8 -- r51;
// [Asm]   r10 -- r61;
// [Asm]   r1 -- r30;
// [Asm]   r13 -- r66;
// [Asm]   r11 -- r74;
// [Asm]   r5 -- r10;
// [Asm]   r13 -- r32;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r45;
// [Asm]   r12 -- r69;
// [Asm]   r13 -- r31;
// [Asm]   r11 -- r67;
// [Asm]   r1 -- r52;
// [Asm]   r5 -- r29;
// [Asm]   r13 -- r64;
// [Asm]   r11 -- r18;
// [Asm]   r10 -- r40;
// [Asm]   r9 -- r68;
// [Asm]   r3 -- r5;
// [Asm]   r8 -- r12;
// [Asm]   r8 -- r61;
// [Asm]   r8 -- r24;
// [Asm]   r13 -- r38;
// [Asm]   r8 -- r75;
// [Asm]   r6 -- r60;
// [Asm]   r13 -- r63;
// [Asm]   r10 -- r38;
// [Asm]   r13 -- r55;
// [Asm]   r10 -- r12;
// [Asm]   r1 -- r77;
// [Asm]   r10 -- r31;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r9 -- r74;
// [Asm]   r8 -- r70;
// [Asm]   r5 -- r55;
// [Asm]   r3 -- r49;
// [Asm]   r13 -- r35;
// [Asm]   r6 -- r55;
// [Asm]   r12 -- r21;
// [Asm]   r6 -- r23;
// [Asm]   r7 -- r42;
// [Asm]   r11 -- r36;
// [Asm]   r3 -- r46;
// [Asm]   r7 -- r67;
// [Asm]   r7 -- r65;
// [Asm]   r18 -- r24;
// [Asm]   r3 -- r45;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r43;
// [Asm]   r1 -- r34;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r12 -- r72;
// [Asm]   r8 -- r9;
// [Asm]   r6 -- r33;
// [Asm]   r33 -- r36;
// [Asm]   r10 -- r29;
// [Asm]   r6 -- r22;
// [Asm]   r10 -- r51;
// [Asm]   r8 -- r64;
// [Asm]   r2 -- r44;
// [Asm]   r6 -- r27;
// [Asm]   r12 -- r20;
// [Asm]   r12 -- r41;
// [Asm]   r11 -- r65;
// [Asm]   r9 -- r70;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r12 -- r33;
// [Asm]   r10 -- r43;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r13 -- r23;
// [Asm]   r11 -- r59;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r57;
// [Asm]   r5 -- r70;
// [Asm]   r10 -- r46;
// [Asm]   r7 -- r41;
// [Asm]   r13 -- r65;
// [Asm]   r11 -- r34;
// [Asm]   r5 -- r39;
// [Asm]   r7 -- r57;
// [Asm]   r13 -- r47;
// [Asm]   r7 -- r18;
// [Asm]   r9 -- r48;
// [Asm]   r7 -- r12;
// [Asm]   r7 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   r1 -- r54;
// [Asm]   r8 -- r60;
// [Asm]   r6 -- r71;
// [Asm]   r6 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r6 -- r47;
// [Asm]   r7 -- r40;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r13 -- r75;
// [Asm]   r1 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r11 -- r32;
// [Asm]   r1 -- r69;
// [Asm]   r13 -- r50;
// [Asm]   r1 -- r20;
// [Asm]   r3 -- r24;
// [Asm]   r5 -- r73;
// [Asm]   r10 -- r58;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r9 -- r18;
// [Asm]   r13 -- r37;
// [Asm]   r13 -- r40;
// [Asm]   r1 -- r46;
// [Asm]   r10 -- r49;
// [Asm]   r7 -- r34;
// [Asm]   r7 -- r55;
// [Asm]   r10 -- r37;
// [Asm]   r8 -- r37;
// [Asm]   r5 -- r53;
// [Asm]   r13 -- r54;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r47;
// [Asm]   r12 -- r74;
// [Asm]   r17 -- r22;
// [Asm]   r7 -- r70;
// [Asm]   r1 -- r27;
// [Asm]   r8 -- r39;
// [Asm]   r11 -- r63;
// [Asm]   r7 -- r61;
// [Asm]   r8 -- r22;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r12 -- r61;
// [Asm]   r5 -- r50;
// [Asm]   r1 -- r49;
// [Asm]   r8 -- r14;
// [Asm]   r10 -- r55;
// [Asm]   r11 -- r30;
// [Asm]   r7 -- r64;
// [Asm]   r6 -- r58;
// [Asm]   r13 -- r60;
// [Asm]   r9 -- r72;
// [Asm]   r12 -- r45;
// [Asm]   r17 -- r18;
// [Asm]   r1 -- r58;
// [Asm]   r10 -- r72;
// [Asm]   r11 -- r40;
// [Asm]   r6 -- r15;
// [Asm]   r9 -- r35;
// [Asm]   r11 -- r71;
// [Asm]   r9 -- r15;
// [Asm]   r6 -- r44;
// [Asm]   r5 -- r77;
// [Asm]   r12 -- r15;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r6 -- r51;
// [Asm]   r1 -- r78;
// [Asm]   r5 -- r52;
// [Asm]   r9 -- r42;
// [Asm]   r5 -- r44;
// [Asm]   r19 -- r24;
// [Asm]   r8 -- r38;
// [Asm]   r3 -- r28;
// [Asm]   r8 -- r65;
// [Asm]   r7 -- r9;
// [Asm]   r10 -- r34;
// [Asm]   r6 -- r40;
// [Asm]   r7 -- r66;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r13 -- r56;
// [Asm]   r6 -- r8;
// [Asm]   r5 -- r64;
// [Asm]   r6 -- r34;
// [Asm]   r8 -- r28;
// [Asm]   r12 -- r71;
// [Asm]   r10 -- r50;
// [Asm]   r11 -- r42;
// [Asm]   r77 -- r78;
// [Asm]   r11 -- r33;
// [Asm]   r18 -- r19;
// [Asm]   r13 -- r34;
// [Asm]   r19 -- r23;
// [Asm]   r5 -- r46;
// [Asm]   r8 -- r13;
// [Asm]   r12 -- r31;
// [Asm]   r3 -- r64;
// [Asm]   r10 -- r52;
// [Asm]   r6 -- r42;
// [Asm]   r10 -- r39;
// [Asm]   r3 -- r75;
// [Asm]   r7 -- r58;
// [Asm]   r13 -- r62;
// [Asm]   r11 -- r69;
// [Asm]   r7 -- r31;
// [Asm]   r13 -- r73;
// [Asm]   r17 -- r30;
// [Asm]   r1 -- r36;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r24;
// [Asm]   r8 -- r46;
// [Asm]   r17 -- r28;
// [Asm]   r5 -- r40;
// [Asm]   r12 -- r26;
// [Asm]   r19 -- r20;
// [Asm]   r10 -- r14;
// [Asm]   r12 -- r70;
// [Asm]   r3 -- r52;
// [Asm]   r11 -- r61;
// [Asm]   r9 -- r53;
// [Asm]   r1 -- r26;
// [Asm]   r6 -- r75;
// [Asm]   r3 -- r15;
// [Asm]   r13 -- r76;
// [Asm]   r12 -- r57;
// [Asm]   r3 -- r53;
// [Asm]   r2 -- r49;
// [Asm]   r7 -- r25;
// [Asm]   r12 -- r65;
// [Asm]   r7 -- r72;
// [Asm]   r3 -- r11;
// [Asm]   r9 -- r26;
// [Asm]   r27 -- r28;
// [Asm]   r2 -- r7;
// [Asm]   r10 -- r69;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r17 -- r19;
// [Asm]   r1 -- r50;
// [Asm]   r11 -- r19;
// [Asm]   r10 -- r67;
// [Asm]   r3 -- r8;
// [Asm]   r9 -- r56;
// [Asm]   r8 -- r34;
// [Asm]   r1 -- r9;
// [Asm]   r9 -- r75;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r48;
// [Asm]   r1 -- r64;
// [Asm]   r9 -- r66;
// [Asm]   r3 -- r74;
// [Asm]   r3 -- r39;
// [Asm]   r10 -- r33;
// [Asm]   r69 -- r71;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r59;
// [Asm]   r5 -- r58;
// [Asm]   r5 -- r54;
// [Asm]   r8 -- r23;
// [Asm]   r12 -- r58;
// [Asm]   r5 -- r60;
// [Asm]   r10 -- r22;
// [Asm]   r8 -- r72;
// [Asm]   r8 -- r59;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r51;
// [Asm]   r3 -- r17;
// [Asm]   r6 -- r72;
// [Asm]   r18 -- r20;
// [Asm]   r11 -- r15;
// [Asm]   r1 -- r38;
// [Asm]   r6 -- r50;
// [Asm]   r1 -- r41;
// [Asm]   r13 -- r72;
// [Asm]   r1 -- r5;
// [Asm]   r8 -- r32;
// [Asm]   r5 -- r36;
// [Asm]   r3 -- r25;
// [Asm]   r6 -- r41;
// [Asm]   r1 -- r75;
// [Asm]   r9 -- r40;
// [Asm]   r7 -- r20;
// [Asm]   r9 -- r61;
// [Asm]   r8 -- r76;
// [Asm]   r6 -- r53;
// [Asm]   r11 -- r23;
// [Asm]   r13 -- r48;
// [Asm]   r11 -- r46;
// [Asm]   r8 -- r25;
// [Asm]   r11 -- r51;
// [Asm]   r5 -- r38;
// [Asm]   r11 -- r37;
// [Asm]   r6 -- r59;
// [Asm]   r13 -- r19;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r12 -- r63;
// [Asm]   r12 -- r55;
// [Asm]   r8 -- r62;
// [Asm]   r7 -- r19;
// [Asm]   r13 -- r78;
// [Asm]   r13 -- r14;
// [Asm]   r12 -- r22;
// [Asm]   r5 -- r68;
// [Asm]   r3 -- r29;
// [Asm]   r11 -- r41;
// [Asm]   r10 -- r57;
// [Asm]   r3 -- r66;
// [Asm]   r6 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r10 -- r36;
// [Asm]   r9 -- r58;
// [Asm]   r6 -- r74;
// [Asm]   r13 -- r39;
// [Asm]   r4 -- r10;
// [Asm]   r11 -- r28;
// [Asm]   r11 -- r56;
// [Asm]   r11 -- r29;
// [Asm]   r1 -- r42;
// [Asm]   r6 -- r52;
// [Asm]   r36 -- r38;
// [Asm]   r3 -- r67;
// [Asm]   r6 -- r36;
// [Asm]   r10 -- r60;
// [Asm]   r13 -- r44;
// [Asm]   r1 -- r37;
// [Asm]   r1 -- r19;
// [Asm]   r10 -- r13;
// [Asm]   r18 -- r27;
// [Asm]   r5 -- r42;
// [Asm]   r6 -- r63;
// [Asm]   r13 -- r28;
// [Asm]   r10 -- r47;
// [Asm]   r1 -- r62;
// [Asm]   r11 -- r53;
// [Asm]   r1 -- r67;
// [Asm]   r12 -- r52;
// [Asm]   r8 -- r71;
// [Asm]   r10 -- r20;
// [Asm]   r18 -- r26;
// [Asm]   r3 -- r30;
// [Asm]   r12 -- r28;
// [Asm]   r9 -- r28;
// [Asm]   r8 -- r77;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r10;
// [Asm]   r12 -- r40;
// [Asm]   r11 -- r54;
// [Asm]   r3 -- r10;
// [Asm]   r12 -- r59;
// [Asm]   r4 -- r12;
// [Asm]   r10 -- r75;
// [Asm]   r8 -- r63;
// [Asm]   r1 -- r6;
// [Asm]   r11 -- r47;
// [Asm]   r10 -- r35;
// [Asm]   r7 -- r54;
// [Asm]   r12 -- r78;
// [Asm]   r9 -- r47;
// [Asm]   r7 -- r52;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r8 -- r66;
// [Asm]   r9 -- r57;
// [Asm]   r13 -- r42;
// [Asm]   r8 -- r56;
// [Asm]   r6 -- r49;
// [Asm]   r12 -- r51;
// [Asm]   r5 -- r48;
// [Asm]   r1 -- r53;
// [Asm]   r12 -- r36;
// [Asm]   r18 -- r29;
// [Asm]   r11 -- r49;
// [Asm]   r8 -- r19;
// [Asm]   r13 -- r26;
// [Asm]   r17 -- r26;
// [Asm]   r8 -- r43;
// [Asm]   r3 -- r47;
// [Asm]   r10 -- r41;
// [Asm]   r6 -- r12;
// [Asm]   r13 -- r25;
// [Asm]   r6 -- r24;
// [Asm]   r9 -- r51;
// [Asm]   r7 -- r73;
// [Asm]   r6 -- r37;
// [Asm]   r10 -- r28;
// [Asm]   r9 -- r34;
// [Asm]   r10 -- r63;
// [Asm]   r7 -- r60;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r9 -- r33;
// [Asm]   r0 -- r8;
// [Asm]   r10 -- r73;
// [Asm]   r6 -- r28;
// [Asm]   r1 -- r59;
// [Asm]   r11 -- r39;
// [Asm]   r9 -- r69;
// [Asm]   r1 -- r74;
// [Asm]   r11 -- r50;
// [Asm]   r7 -- r11;
// [Asm]   r6 -- r67;
// [Asm]   r7 -- r47;
// [Asm]   r9 -- r37;
// [Asm]   r13 -- r53;
// [Asm]   r8 -- r73;
// [Asm]   r7 -- r39;
// [Asm]   r7 -- r43;
// [Asm]   r12 -- r37;
// [Asm]   r11 -- r26;
// [Asm]   r8 -- r58;
// [Asm]   r9 -- r32;
// [Asm]   r11 -- r58;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r27;
// [Asm]   r3 -- r54;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r30;
// [Asm]   r9 -- r50;
// [Asm]   r10 -- r66;
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r60;
// [Asm]   r11 -- r76;
// [Asm]   r6 -- r73;
// [Asm]   r6 -- r35;
// [Asm]   r12 -- r77;
// [Asm]   r1 -- r57;
// [Asm]   r5 -- r72;
// [Asm]   r13 -- r59;
// [Asm]   r13 -- r36;
// [Asm]   r11 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r2 -- r43;
// [Asm]   r5 -- r59;
// [Asm]   r11 -- r66;
// [Asm]   r5 -- r18;
// [Asm]   r5 -- r47;
// [Asm]   r18 -- r21;
// [Asm]   r11 -- r45;
// [Asm]   r9 -- r17;
// [Asm]   r1 -- r33;
// [Asm]   r9 -- r49;
// [Asm]   r7 -- r27;
// [Asm]   r13 -- r74;
// [Asm]   r13 -- r69;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r45;
// [Asm]   r18 -- r28;
// [Asm]   r5 -- r62;
// [Asm]   r3 -- r78;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r57;
// [Asm]   r71 -- r72;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r45;
// [Asm]   r0 -- r9;
// [Asm]   r9 -- r23;
// [Asm]   r19 -- r22;
// [Asm]   r5 -- r78;
// [Asm]   r7 -- r38;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r13 -- r41;
// [Asm]   r5 -- r67;
// [Asm]   r8 -- r48;
// [Asm]   r13 -- r58;
// [Asm]   r10 -- r42;
// [Asm]   r0 -- r10;
// [Asm]   r6 -- r64;
// [Asm]   r5 -- r66;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r65;
// [Asm]   r13 -- r77;
// [Asm]   r8 -- r30;
// [Asm]   r10 -- r59;
// [Asm]   r6 -- r76;
// [Asm]   r7 -- r76;
// [Asm]   r3 -- r19;
// [Asm]   r7 -- r29;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r77;
// [Asm]   r1 -- r8;
// [Asm]   r17 -- r29;
// [Asm]   r11 -- r64;
// [Asm]   r1 -- r47;
// [Asm]   r5 -- r71;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r2 -- r52;
// [Asm]   r11 -- r12;
// [Asm]   r12 -- r64;
// [Asm]   r1 -- r13;
// [Asm]   r9 -- r64;
// [Asm]   r11 -- r22;
// [Asm]   r10 -- r48;
// [Asm]   r7 -- r74;
// [Asm]   r10 -- r70;
// [Asm]   r7 -- r48;
// [Asm]   r17 -- r25;
// [Asm]   r7 -- r49;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r47;
// [Asm]   r6 -- r20;
// [Asm]   r9 -- r52;
// [Asm]   r3 -- r50;
// [Asm]   r7 -- r17;
// [Asm]   r8 -- r41;
// [Asm]   r8 -- r53;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r12 -- r73;
// [Asm]   r12 -- r76;
// [Asm]   r1 -- r29;
// [Asm]   r5 -- r45;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r13 -- r17;
// [Asm]   r5 -- r56;
// [Asm]   r5 -- r61;
// [Asm]   r12 -- r66;
// [Asm]   r1 -- r61;
// [Asm]   r8 -- r10;
// [Asm]   r3 -- r73;
// [Asm]   r8 -- r26;
// [Asm]   r10 -- r54;
// [Asm]   r11 -- r72;
// [Asm]   r10 -- r65;
// [Asm]   r63 -- r64;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r9 -- r13;
// [Asm]   r8 -- r50;
// [Asm]   r18 -- r23;
// [Asm]   r1 -- r76;
// [Asm]   r8 -- r57;
// [Asm]   r5 -- r41;
// [Asm]   r17 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r71;
// [Asm]   r9 -- r27;
// [Asm]   r3 -- r43;
// [Asm]   r9 -- r77;
// [Asm]   r1 -- r7;
// [Asm]   r18 -- r25;
// [Asm]   r1 -- r56;
// [Asm]   r3 -- r60;
// [Asm]   r1 -- r63;
// [Asm]   r13 -- r49;
// [Asm]   r6 -- r29;
// [Asm]   r11 -- r31;
// [Asm]   r7 -- r53;
// [Asm]   r5 -- r49;
// [Asm]   r10 -- r77;
// [Asm]   r19 -- r21;
// [Asm]   r67 -- r69;
// [Asm]   r12 -- r19;
// [Asm]   r12 -- r24;
// [Asm]   r75 -- r76;
// [Asm]   r6 -- r13;
// [Asm]   r3 -- r76;
// [Asm]   r12 -- r44;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r67;
// [Asm]   r8 -- r69;
// [Asm]   r5 -- r75;
// [Asm]   r0 -- r2;
// [Asm]   r12 -- r46;
// [Asm]   r1 -- r21;
// [Asm]   r10 -- r74;
// [Asm]   r2 -- r8;
// [Asm]   r13 -- r51;
// [Asm]   r40 -- r69;
// [Asm]   r6 -- r31;
// [Asm]   r8 -- r44;
// [Asm]   r6 -- r78;
// [Asm]   r10 -- r30;
// [Asm]   r6 -- r45;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r12 -- r47;
// [Asm]   r1 -- r44;
// [Asm]   r3 -- r61;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r13 -- r29;
// [Asm]   r6 -- r61;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r53;
// [Asm]   r5 -- r34;
// [Asm]   r36 -- r37;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r11 -- r17;
// [Asm]   r5 -- r20;
// [Asm]   r7 -- r45;
// [Asm]   r36 -- r39;
// [Asm]   r10 -- r68;
// [Asm]   r10 -- r78;
// [Asm]   r13 -- r45;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r10 -- r71;
// [Asm]   r10 -- r76;
// [Asm]   r8 -- r55;
// [Asm]   r12 -- r56;
// [Asm]   r13 -- r70;
// [Asm]   r7 -- r30;
// [Asm]   r8 -- r33;
// [Asm]   r18 -- r22;
// [Asm]   r6 -- r26;
// [Asm]   r8 -- r49;
// [Asm]   r13 -- r20;
// [Asm]   r3 -- r77;
// [Asm]   r33 -- r34;
// [Asm]   r9 -- r22;
// [Asm]   r17 -- r23;
// [Asm]   r12 -- r75;
// [Asm]   r11 -- r75;
// [Asm]   r5 -- r37;
// [Asm]   r8 -- r74;
// [Asm]   r8 -- r40;
// [Asm]   r9 -- r43;
// [Asm]   r10 -- r44;
// [Asm]   r3 -- r72;
// [Asm]   r3 -- r41;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r9 -- r55;
// [Asm]   r3 -- r59;
// [Asm]   r11 -- r38;
// [Asm]   r5 -- r27;
// [Asm]   r38 -- r39;
// [Asm]   r12 -- r48;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r9 -- r71;
// [Asm]   r13 -- r27;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v0-> 1:zero-> 2:a0-> 3:s11-> 5:v3-> 6:v4-> 7:v5-> 8:v6-> 9:v7-> 10:v8-> 11:v9-> 4:v2-> 12:v10-> 13:v18-> 42:t0-> 43:t1-> 44:t2-> 45:t3-> 46:t4-> 47:a1-> 48:a2-> 49:a3-> 50:a4-> 51:a5-> 52:a6-> 53:a7-> 60:v99-> 73:v86-> 69:v15-> 40:s10-> 67:v27-> 72:v90-> 71:v16-> 14:v34-> 17:v37-> 18:v38-> 19:v39-> 20:v40-> 21:v77-> 22:v41-> 23:v75-> 24:v42-> 25:v43-> 26:v72-> 27:v44-> 28:v70-> 29:v45-> 30:v46-> 31:v47-> 33:v12-> 34:v67-> 36:v14-> 39:v62-> 38:v11-> 37:v60-> 35:v63-> 41:v58-> 54:v52-> 55:v53-> 56:v54-> 59:v103-> 58:v17-> 61:v23-> 64:v98-> 63:v13-> 65:v94-> 66:v25-> 68:v91-> 70:v88-> 74:v30-> 75:v31-> 76:v32-> 77:v19-> 78:v104-> 15:v36-> 32:v65-> 57:v101-> 62:v96-> 16:v21"
// [Asm]   comment = "v0<-a1;v12<-a0;v32<-a1;v103<-a0;v7<-s4;v72<-a3;v54<-a0;v8<-s5;v3<-s0;v52<-a0;v42<-a3;v47<-a0;v62<-a2;v37<-a0;v94<-a0;v40<-a3;v23<-a0;v75<-a4;v27<-a1;v31<-a0;v19<-a0;v44<-a2;v96<-a0;v9<-s6;v17<-a1;v67<-a1;v34<-a0;v104<-a1;v53<-a0;v21<-a0;v77<-a4;v99<-a1;v86<-a1;v11<-a3;v90<-a1;v4<-s1;v18<-s8;v2<-a0;v45<-a2;v63<-a1;v5<-s2;v98<-a0;v6<-s3;v14<-a1;v25<-a0;v65<-a0;v36<-a0;v101<-a0;v30<-a0;v91<-a0;v88<-a1;v10<-s7;v60<-a2;v70<-a3;v58<-a0;v16<-a2;v15<-a0;v41<-a3;v46<-a1;v43<-a2;v13<-a1;v38<-a1;v39<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of compute40_7"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw s0, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s1, 16(a1)
// [Asm] subst   ld v5, 24(v0) ->   ld s2, 24(a1)
// [Asm] subst   ld v6, 32(v0) ->   ld s3, 32(a1)
// [Asm] subst   ld v7, 40(v0) ->   ld s4, 40(a1)
// [Asm] subst   ld v8, 48(v0) ->   ld s5, 48(a1)
// [Asm] subst   ld v9, 56(v0) ->   ld s6, 56(a1)
// [Asm] subst   ld v10, 64(v0) ->   ld s7, 64(a1)
// [Asm] subst   mv v18, v2 ->   mv s8, a0
// [Asm] subst   lw v34, 0(v7) ->   lw a0, 0(s4)
// [Asm] subst   sw v34, 0(v8) ->   sw a0, 0(s5)
// [Asm] subst   mv v36, zero ->   mv a0, zero
// [Asm] subst   mv v21, zero ->   mv a0, zero
// [Asm] subst   mv v36, zero ->   mv a0, zero
// [Asm] subst   j .compute40_7_5 ->   j .compute40_7_5
// [Asm] subst   lw v37, 0(v9) ->   lw a0, 0(s6)
// [Asm] subst   lw v38, 0(v7) ->   lw a1, 0(s4)
// [Asm] subst   lw v39, 0(v10) ->   lw a2, 0(s7)
// [Asm] subst   lw v40, 0(v10) ->   lw a3, 0(s7)
// [Asm] subst   li v77, 2 ->   li a4, 2
// [Asm] subst   div v41, v40, v77 ->   div a3, a3, a4
// [Asm] subst   li v75, 2 ->   li a4, 2
// [Asm] subst   mul v42, v41, v75 ->   mul a3, a3, a4
// [Asm] subst   sub v43, v39, v42 ->   sub a2, a2, a3
// [Asm] subst   li v72, 2 ->   li a3, 2
// [Asm] subst   mul v44, v43, v72 ->   mul a2, a2, a3
// [Asm] subst   li v70, 1 ->   li a3, 1
// [Asm] subst   sub v45, v70, v44 ->   sub a2, a3, a2
// [Asm] subst   mul v46, v38, v45 ->   mul a1, a1, a2
// [Asm] subst   add v47, v37, v46 ->   add a0, a0, a1
// [Asm] subst   sw v47, 0(v9) ->   sw a0, 0(s6)
// [Asm] subst   addi v65, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi v12, v65, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v12 ->   mv s11, a0
// [Asm] subst   li v67, 1 ->   li a1, 1
// [Asm] subst   sw v67, 0(v12) ->   sw a1, 0(a0)
// [Asm] subst   addi v63, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi v14, v63, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v14 ->   mv s11, a1
// [Asm] subst   sw zero, 0(v14) ->   sw zero, 0(a1)
// [Asm] subst   addi v60, s11, -56 ->   addi a2, s11, -56
// [Asm] subst   andi v11, v60, -8 ->   andi a3, a2, -8
// [Asm] subst   mv s11, v11 ->   mv s11, a3
// [Asm] subst   la v62, go_loop179_17 ->   la a2, go_loop179_17
// [Asm] subst   sd v62, 0(v11) ->   sd a2, 0(a3)
// [Asm] subst   sd v12, 8(v11) ->   sd a0, 8(a3)
// [Asm] subst   sd v18, 16(v11) ->   sd s8, 16(a3)
// [Asm] subst   sd v3, 24(v11) ->   sd s0, 24(a3)
// [Asm] subst   sd v4, 32(v11) ->   sd s1, 32(a3)
// [Asm] subst   sd v14, 40(v11) ->   sd a1, 40(a3)
// [Asm] subst   sd v6, 48(v11) ->   sd s3, 48(a3)
// [Asm] subst   mv s10, v11 ->   mv s10, a3
// [Asm] subst   ld v58, 0(v11) ->   ld a0, 0(a3)
// [Asm] subst   jalr v58 ->   jalr a0
// [Asm] subst   lw v53, 0(v10) ->   lw a0, 0(s7)
// [Asm] subst   addi v54, v53, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v54, 0(v10) ->   sw a0, 0(s7)
// [Asm] subst   j .compute40_7_0 ->   j .compute40_7_0
// [Asm] subst   addi v101, s11, -32 ->   addi a0, s11, -32
// [Asm] subst   andi v17, v101, -8 ->   andi a1, a0, -8
// [Asm] subst   mv s11, v17 ->   mv s11, a1
// [Asm] subst   la v103, copy_perm46_9 ->   la a0, copy_perm46_9
// [Asm] subst   sd v103, 0(v17) ->   sd a0, 0(a1)
// [Asm] subst   sd v3, 8(v17) ->   sd s0, 8(a1)
// [Asm] subst   sd v4, 16(v17) ->   sd s1, 16(a1)
// [Asm] subst   sd v5, 24(v17) ->   sd s2, 24(a1)
// [Asm] subst   mv s10, v17 ->   mv s10, a1
// [Asm] subst   ld v99, 0(v17) ->   ld a1, 0(a1)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v99 ->   jalr a1
// [Asm] subst   addi v96, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi v13, v96, -8 ->   andi a1, a0, -8
// [Asm] subst   mv s11, v13 ->   mv s11, a1
// [Asm] subst   la v98, init_count59_11 ->   la a0, init_count59_11
// [Asm] subst   sd v98, 0(v13) ->   sd a0, 0(a1)
// [Asm] subst   sd v18, 8(v13) ->   sd s8, 8(a1)
// [Asm] subst   sd v6, 16(v13) ->   sd s3, 16(a1)
// [Asm] subst   mv s10, v13 ->   mv s10, a1
// [Asm] subst   ld v94, 0(v13) ->   ld a0, 0(a1)
// [Asm] subst   jalr v94 ->   jalr a0
// [Asm] subst   sw zero, 0(v7) ->   sw zero, 0(s4)
// [Asm] subst   lw v27, 0(v5) ->   lw a1, 0(s2)
// [Asm] subst   addi v91, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi v15, v91, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v15 ->   mv s11, a0
// [Asm] subst   sw v27, 0(v15) ->   sw a1, 0(a0)
// [Asm] subst   addi v88, s11, -24 ->   addi a1, s11, -24
// [Asm] subst   andi v16, v88, -8 ->   andi a2, a1, -8
// [Asm] subst   mv s11, v16 ->   mv s11, a2
// [Asm] subst   la v90, do_flip90_13 ->   la a1, do_flip90_13
// [Asm] subst   sd v90, 0(v16) ->   sd a1, 0(a2)
// [Asm] subst   sd v5, 8(v16) ->   sd s2, 8(a2)
// [Asm] subst   sd v7, 16(v16) ->   sd s4, 16(a2)
// [Asm] subst   mv s10, v16 ->   mv s10, a2
// [Asm] subst   ld v86, 0(v16) ->   ld a1, 0(a2)
// [Asm] subst   jalr v86 ->   jalr a1
// [Asm] subst   lw v31, 0(v8) ->   lw a0, 0(s5)
// [Asm] subst   lw v32, 0(v7) ->   lw a1, 0(s4)
// [Asm] subst   blt v32, v31, .compute40_7_4 ->   blt a1, a0, .compute40_7_4
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v19, 0(v18) ->   lw a0, 0(s8)
// [Asm] subst   li v104, 1 ->   li a1, 1
// [Asm] subst   blt v19, v104, .compute40_7_2 ->   blt a0, a1, .compute40_7_2
// [Asm] pre_assigned_registers: Self(fref=f22) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_22"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_22"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main262_1 ->   call main262_1
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] gen_perm14_3:
// [Asm] # block info: defs: [v2, t1, v14, v13, v7, v0, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v14, v10, a0, v13, a2, a1, s11, v12, s10, zero, v8, v4, v3], upward_exposed: [s11, s10, a0, zero], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .gen_perm14_3_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s11, s10]
// [Asm]   mv v0, s10  # live: [zero, a0, s11]
// [Asm]   mv v2, a0  # live: [zero, s11, v2]
// [Asm]   slliw v13, v2, 2  # live: [zero, v13, s11, v2]
// [Asm]   sub v14, s11, v13  # live: [v14, zero, v2]
// [Asm]   andi v3, v14, -8  # live: [v3, zero, v2]
// [Asm]   mv s11, v3  # live: [v3, zero, s11, v2]
// [Asm]   mv a1, v2  # live: [v3, zero, a1, s11, v2]
// [Asm]   mv a0, v3  # live: [v3, zero, a0, a1, s11, v2]
// [Asm]   mv a2, zero  # live: [v3, zero, a0, a2, a1, s11, v2]
// [Asm]   call memseti32  # live: [v2, s11, zero, v3]
// [Asm]   addi v10, s11, -24  # live: [v2, v10, zero, v3]
// [Asm]   andi v4, v10, -8  # live: [v2, v4, zero, v3]
// [Asm]   mv s11, v4  # live: [v2, v4, zero, v3]
// [Asm]   la v12, init_arr9_5  # live: [v2, v4, v12, zero, v3]
// [Asm]   sd v12, 0(v4)  # live: [v2, v4, zero, v3]
// [Asm]   sd v2, 8(v4)  # live: [v4, zero, v3]
// [Asm]   sd v3, 16(v4)  # live: [v4, zero, v3]
// [Asm]   mv s10, v4  # live: [v4, zero, v3]
// [Asm]   ld v8, 0(v4)  # live: [v8, zero, v3]
// [Asm]   # save_ctx2  # live: [v8, zero, v3]
// [Asm]   mv a0, zero  # live: [v8, a0, v3]
// [Asm]   jalr v8  # live: [a0, v3]
// [Asm]   mv v7, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] go_loop179_17:
// [Asm] # block info: defs: [v2, v5, v7, v0, v4, v6, v3], uses: [v0, s10], upward_exposed: [s10], params_defs: []
// [Asm] # live_in: [s11, s10, zero], live_out: [v2, v5, zero, v7, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .go_loop179_17_10:
// [Asm]   # save_ctx1  # live: [zero, s11, s10]
// [Asm]   mv v0, s10  # live: [zero, v0, s11]
// [Asm]   ld v2, 8(v0)  # live: [zero, v0, s11, v2]
// [Asm]   ld v3, 16(v0)  # live: [v3, zero, v0, s11, v2]
// [Asm]   lw v4, 24(v0)  # live: [v3, zero, v0, v4, s11, v2]
// [Asm]   ld v5, 32(v0)  # live: [v3, v5, zero, v0, v4, s11, v2]
// [Asm]   ld v6, 40(v0)  # live: [v3, v5, zero, v0, v4, v6, s11, v2]
// [Asm]   ld v7, 48(v0)  # live: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v63, v9], uses: [v63, v9, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, s11, v3], live_out: [v2, v5, zero, v7, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .go_loop179_17_0:
// [Asm]   lw v9, 0(v2)  # live: [v3, v5, zero, v7, v4, v6, s11, v9, v2]
// [Asm] # control
// [Asm]   li v63, 1  # live: [v3, v63, v5, zero, v7, v4, v6, s11, v9, v2]
// [Asm]   bne v9, v63, .go_loop179_17_2  # live: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [v4, v12, v3], upward_exposed: [v4, v3], params_defs: []
// [Asm] # live_in: [v3, v5, zero, v7, v4, v6, s11, v2], live_out: [v2, v5, zero, v7, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .go_loop179_17_1:
// [Asm]   lw v12, 0(v3)  # live: [v3, v5, zero, v7, v4, v6, s11, v12, v2]
// [Asm] # control
// [Asm]   beq v12, v4, .go_loop179_17_3  # live: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] 
// [Asm] # block info: defs: [v58, v22, a1, s11, v44, fa1, v60, fa2, ft6, a4, fa6, v27, a6, ft10, ft5, ft4, ft9, fa4, ft2, v17, v52, a3, fa7, a7, v48, fa3, ft3, v45, t2, v40, t1, v14, v26, ft0, ft1, v41, v8, v19, v47, ft7, v53, v21, a5, a0, a2, v24, s10, v39, ft8, t3, t0, v56, v18, fa5, v23, fa0, t4], uses: [v3, v14, v58, v26, v22, v7, v41, s11, v44, v60, zero, v27, v8, v19, v47, v6, v5, v53, v21, a0, v52, v24, v39, v56, v18, v48, v23, v45, v40], upward_exposed: [v5, zero, v7, v6, s11, v3], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, s11, v3], live_out: [v2, v5, zero, v7, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .go_loop179_17_4:
// [Asm]   lw v14, 0(v5)  # live: [v3, v5, v14, zero, v7, v4, v6, s11, v2]
// [Asm]   sw v14, 0(v6)  # live: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm]   addi v58, s11, -24  # live: [v3, v5, v58, zero, v7, v4, v6, v2]
// [Asm]   andi v8, v58, -8  # live: [v3, v5, zero, v7, v8, v4, v6, v2]
// [Asm]   mv s11, v8  # live: [v3, v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm]   la v60, move_perm1_forward197_19  # live: [v3, v5, zero, v7, v8, v4, v6, s11, v60, v2]
// [Asm]   sd v60, 0(v8)  # live: [v3, v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm]   sd v3, 8(v8)  # live: [v3, v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm]   sd v5, 16(v8)  # live: [v3, v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm]   mv s10, v8  # live: [v3, v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm]   ld v56, 0(v8)  # live: [v3, v5, v56, zero, v7, v4, v6, s11, v2]
// [Asm]   # save_ctx2  # live: [v3, v5, v56, zero, v7, v4, v6, s11, v2]
// [Asm]   mv a0, zero  # live: [v3, v5, v56, zero, a0, v7, v4, v6, s11, v2]
// [Asm]   jalr v56  # live: [v3, v5, zero, a0, v7, v4, v6, s11, v2]
// [Asm]   mv v17, a0  # live: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm]   # restore_ctx2  # live: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm]   lw v18, 0(v3)  # live: [v3, v5, v18, zero, v7, v4, v6, s11, v2]
// [Asm]   lw v19, 0(v6)  # live: [v3, v5, v18, zero, v7, v19, v4, v6, s11, v2]
// [Asm]   slliw v52, v18, 2  # live: [v3, v5, zero, v7, v19, v4, v6, s11, v52, v2]
// [Asm]   add v53, v5, v52  # live: [v3, v5, v53, zero, v7, v19, v4, v6, s11, v2]
// [Asm]   sw v19, 0(v53)  # live: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm]   lw v21, 0(v3)  # live: [v3, v5, v21, zero, v7, v4, v6, s11, v2]
// [Asm]   lw v22, 0(v3)  # live: [v3, v5, v21, zero, v22, v7, v4, v6, s11, v2]
// [Asm]   slliw v47, v22, 2  # live: [v3, v5, v21, zero, v7, v4, v47, v6, s11, v2]
// [Asm]   add v48, v7, v47  # live: [v3, v5, v21, v48, zero, v7, v4, v6, s11, v2]
// [Asm]   lw v23, 0(v48)  # live: [v3, v5, v21, zero, v23, v7, v4, v6, s11, v2]
// [Asm]   addi v24, v23, -1  # live: [v3, v5, v21, zero, v7, v4, v6, s11, v24, v2]
// [Asm]   slliw v44, v21, 2  # live: [v3, v5, zero, v7, v4, v6, s11, v24, v44, v2]
// [Asm]   add v45, v7, v44  # live: [v3, v5, zero, v7, v45, v4, v6, s11, v24, v2]
// [Asm]   sw v24, 0(v45)  # live: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm]   lw v26, 0(v3)  # live: [v3, v5, zero, v26, v7, v4, v6, s11, v2]
// [Asm]   slliw v40, v26, 2  # live: [v3, v40, v5, zero, v7, v4, v6, s11, v2]
// [Asm]   add v41, v7, v40  # live: [v3, v5, zero, v7, v4, v41, v6, s11, v2]
// [Asm]   lw v27, 0(v41)  # live: [v3, v5, zero, v27, v7, v4, v6, s11, v2]
// [Asm] # control
// [Asm]   li v39, 1  # live: [v3, v5, zero, v27, v7, v4, v6, s11, v39, v2]
// [Asm]   bge v27, v39, .go_loop179_17_5  # live: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] 
// [Asm] # block info: defs: [v29, v33, v30], uses: [v3, v29, zero, v30], upward_exposed: [zero, v3], params_defs: []
// [Asm] # live_in: [v3, v5, zero, v7, v4, v6, s11, v2], live_out: [v2, v5, zero, v7, v4, v6, s11, v33, v3]
// [Asm] # block parameters: []
// [Asm] .go_loop179_17_6:
// [Asm]   lw v29, 0(v3)  # live: [v3, v5, zero, v29, v7, v4, v6, s11, v2]
// [Asm]   addi v30, v29, 1  # live: [v3, v5, zero, v30, v7, v4, v6, s11, v2]
// [Asm]   sw v30, 0(v3)  # live: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] # control
// [Asm]   mv v33, zero  # live: [v3, v5, zero, v7, v4, v6, s11, v33, v2]
// [Asm] 
// [Asm] # block info: defs: [v36], uses: [zero], upward_exposed: [zero], params_defs: [v33]
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, s11, v33, v3], live_out: [v3, v5, zero, v36, v7, v4, v6, s11, v2]
// [Asm] # block parameters: [v33]
// [Asm] .go_loop179_17_7:
// [Asm] # control
// [Asm]   mv v36, zero  # live: [v2, v5, zero, v36, v7, v4, v6, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: [v36]
// [Asm] # live_in: [v3, v5, zero, v36, v7, v4, v6, s11, v2], live_out: [v2, v5, zero, v7, v4, v6, s11, v3]
// [Asm] # block parameters: [v36]
// [Asm] .go_loop179_17_8:
// [Asm] # control
// [Asm]   j .go_loop179_17_0  # live: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .go_loop179_17_2:
// [Asm] # control
// [Asm]   mv v11, zero  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .go_loop179_17_9:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v36], uses: [v3, zero, v2], upward_exposed: [v3, zero, v2], params_defs: []
// [Asm] # live_in: [v3, v5, zero, v7, v4, v6, s11, v2], live_out: [v3, v5, zero, v36, v7, v4, v6, s11, v2]
// [Asm] # block parameters: []
// [Asm] .go_loop179_17_3:
// [Asm]   sw zero, 0(v2)  # live: [v2, v5, zero, v7, v4, v6, s11, v3]
// [Asm]   sw zero, 0(v3)  # live: [v2, v5, zero, v7, v4, v6, s11, v3]
// [Asm] # control
// [Asm]   mv v36, zero  # live: [v2, v5, zero, v36, v7, v4, v6, s11, v3]
// [Asm]   j .go_loop179_17_8  # live: [v2, v5, zero, v36, v7, v4, v6, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v33], uses: [zero, v2], upward_exposed: [zero, v2], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, s11, v3], live_out: [v2, v5, zero, v7, v4, v6, s11, v33, v3]
// [Asm] # block parameters: []
// [Asm] .go_loop179_17_5:
// [Asm]   sw zero, 0(v2)  # live: [v3, v5, zero, v7, v4, v6, s11, v2]
// [Asm] # control
// [Asm]   mv v33, zero  # live: [v3, v5, zero, v7, v4, v6, s11, v33, v2]
// [Asm]   j .go_loop179_17_7  # live: [v3, v5, zero, v7, v4, v6, s11, v33, v2]
// [Asm] 
// [Asm] # leaf true
// [Asm] flip_loop99_15:
// [Asm] # block info: defs: [v3, v0, v4, v5, v6, v2], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v4, v6, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .flip_loop99_15_4:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   ld v3, 8(v0)  # live: [v2, v0, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v0, v4, zero, v3]
// [Asm]   ld v5, 24(v0)  # live: [v2, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v8, v38, v7], uses: [v7, v8, v38, v6, v3], upward_exposed: [v6, v3], params_defs: [v6]
// [Asm] # live_in: [v4, v6, v5, zero, v3], live_out: [v4, v6, v5, zero, v3]
// [Asm] # block parameters: [v6]
// [Asm] .flip_loop99_15_0:
// [Asm]   lw v7, 0(v3)  # live: [v5, zero, v7, v4, v6, v3]
// [Asm]   li v38, 2  # live: [v5, zero, v7, v4, v38, v6, v3]
// [Asm]   div v8, v7, v38  # live: [v5, zero, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   blt v8, v6, .flip_loop99_15_2  # live: [v4, v6, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v11, v14, v21, v13, v30, v36, v17, v24, v28, v31, v18, v29, v23, v35, v19, v6, v15], uses: [v11, v5, v14, v21, v13, v30, v36, v17, v24, v31, v28, v18, v29, v23, v35, v19, v4, v6, v15, v3], upward_exposed: [v4, v6, v5, v3], params_defs: []
// [Asm] # live_in: [v4, v6, v5, zero, v3], live_out: [v4, v6, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .flip_loop99_15_1:
// [Asm]   slliw v35, v6, 2  # live: [v5, zero, v35, v4, v6, v3]
// [Asm]   add v36, v4, v35  # live: [v5, zero, v36, v4, v6, v3]
// [Asm]   lw v11, 0(v36)  # live: [v11, v5, zero, v4, v6, v3]
// [Asm]   sw v11, 0(v5)  # live: [v5, zero, v4, v6, v3]
// [Asm]   lw v13, 0(v3)  # live: [v5, zero, v13, v4, v6, v3]
// [Asm]   sub v14, v13, v6  # live: [v5, v14, zero, v4, v6, v3]
// [Asm]   slliw v30, v14, 2  # live: [v5, zero, v30, v4, v6, v3]
// [Asm]   add v31, v4, v30  # live: [v5, zero, v4, v6, v31, v3]
// [Asm]   lw v15, 0(v31)  # live: [v5, zero, v4, v6, v15, v3]
// [Asm]   slliw v28, v6, 2  # live: [v5, zero, v4, v6, v15, v28, v3]
// [Asm]   add v29, v4, v28  # live: [v5, zero, v29, v4, v6, v15, v3]
// [Asm]   sw v15, 0(v29)  # live: [v5, zero, v4, v6, v3]
// [Asm]   lw v17, 0(v3)  # live: [v5, zero, v4, v6, v17, v3]
// [Asm]   sub v18, v17, v6  # live: [v5, v18, zero, v4, v6, v3]
// [Asm]   lw v19, 0(v5)  # live: [v5, v18, zero, v19, v4, v6, v3]
// [Asm]   slliw v23, v18, 2  # live: [v5, zero, v23, v19, v4, v6, v3]
// [Asm]   add v24, v4, v23  # live: [v5, zero, v19, v4, v6, v24, v3]
// [Asm]   sw v19, 0(v24)  # live: [v4, v5, v6, zero, v3]
// [Asm]   addi v21, v6, 1  # live: [v4, v5, v21, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v21  # live: [v4, v6, v5, zero, v3]
// [Asm]   j .flip_loop99_15_0  # live: [v4, v6, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .flip_loop99_15_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .flip_loop99_15_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] init_arr9_5:
// [Asm] # block info: defs: [v3, v0, v4, v5, v2], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .init_arr9_5_4:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v0, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v6, v5, v3], upward_exposed: [v5, v3], params_defs: [v5]
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: [v5]
// [Asm] .init_arr9_5_0:
// [Asm]   addi v6, v3, -1  # live: [v4, v5, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v6, v5, .init_arr9_5_2  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v5, v12, v10, v13], uses: [v4, v5, v12, v10, v13], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .init_arr9_5_1:
// [Asm]   slliw v12, v5, 2  # live: [v4, v5, v12, zero, v3]
// [Asm]   add v13, v4, v12  # live: [v4, v5, zero, v13, v3]
// [Asm]   sw v5, 0(v13)  # live: [v4, v5, zero, v3]
// [Asm]   addi v10, v5, 1  # live: [v4, v10, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v10  # live: [v4, v5, zero, v3]
// [Asm]   j .init_arr9_5_0  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .init_arr9_5_2:
// [Asm] # control
// [Asm]   mv v8, zero  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v8], upward_exposed: [v8], params_defs: [v8]
// [Asm] # live_in: [v8], live_out: []
// [Asm] # block parameters: [v8]
// [Asm] .init_arr9_5_3:
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main262_1:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v2, v11, a0, v4, v6, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main262_1_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v11, 9  # live: [v11]
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   call fannkuch1_0  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm]   lw v3, 0(v2)  # live: [v2, v3]
// [Asm]   lw v4, 4(v2)  # live: [v4, v3]
// [Asm]   # save_ctx2  # live: [v4, v3]
// [Asm]   mv a0, v4  # live: [a0, v3]
// [Asm]   call minimbt_print_int  # live: [a0, v3]
// [Asm]   mv v5, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm]   # save_ctx2  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] compute40_7:
// [Asm] # block info: defs: [v2, v5, v10, v18, v7, v8, v0, v4, v6, v9, v3], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: [v5, v18, v10, zero, v7, v8, v4, v6, s11, v9, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_7_7:
// [Asm]   # save_ctx1  # live: [zero, a0, s11, s10]
// [Asm]   mv v0, s10  # live: [zero, a0, v0, s11]
// [Asm]   mv v2, a0  # live: [zero, v0, s11, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, zero, v0, s11, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, zero, v0, v4, s11, v3]
// [Asm]   ld v5, 24(v0)  # live: [v2, v5, zero, v0, v4, s11, v3]
// [Asm]   ld v6, 32(v0)  # live: [v2, v5, zero, v0, v4, v6, s11, v3]
// [Asm]   ld v7, 40(v0)  # live: [v2, v5, zero, v7, v0, v4, v6, s11, v3]
// [Asm]   ld v8, 48(v0)  # live: [v2, v5, zero, v8, v7, v0, v4, v6, s11, v3]
// [Asm]   ld v9, 56(v0)  # live: [v2, v5, zero, v8, v7, v0, v4, v6, s11, v9, v3]
// [Asm]   ld v10, 64(v0)  # live: [v2, v5, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] # control
// [Asm]   mv v18, v2  # live: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v19, v104], uses: [v19, v104, v18], upward_exposed: [v18], params_defs: [v18]
// [Asm] # live_in: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v3], live_out: [v5, v18, v10, zero, v7, v8, v4, v6, s11, v9, v3]
// [Asm] # block parameters: [v18]
// [Asm] .compute40_7_0:
// [Asm]   lw v19, 0(v18)  # live: [v5, v18, v10, zero, v8, v7, v19, v4, v6, s11, v9, v3]
// [Asm] # control
// [Asm]   li v104, 1  # live: [v5, v18, v10, zero, v8, v7, v19, v104, v4, v6, s11, v9, v3]
// [Asm]   blt v19, v104, .compute40_7_2  # live: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v91, a1, s11, fa1, v99, fa2, ft6, a4, fa6, v27, a6, ft5, ft10, ft4, ft9, fa4, ft2, v17, a3, v31, v101, a7, fa7, v96, fa3, ft3, t2, v25, t1, v16, v13, ft0, ft1, v32, v86, v98, v103, v90, ft7, a5, a0, v30, v88, a2, s10, ft8, t3, t0, v94, fa5, v23, fa0, t4, v15], uses: [v91, v16, v13, v7, v32, s11, v86, v98, v99, zero, v27, v8, v103, v90, v4, v6, v5, a0, v88, v17, v31, v101, v94, v18, v96, v15, v3], upward_exposed: [v5, v18, zero, v7, v8, v4, v6, s11, v3], params_defs: []
// [Asm] # live_in: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v3], live_out: [v5, v10, v18, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_7_1:
// [Asm]   addi v101, s11, -32  # live: [v5, v10, v7, v9, v101, v18, zero, v8, v4, v6, v3]
// [Asm]   andi v17, v101, -8  # live: [v5, v10, v7, v17, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   mv s11, v17  # live: [v5, v10, v7, v17, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   la v103, copy_perm46_9  # live: [v5, v10, v7, v17, s11, v9, v18, zero, v8, v103, v4, v6, v3]
// [Asm]   sd v103, 0(v17)  # live: [v5, v10, v7, v17, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   sd v3, 8(v17)  # live: [v5, v10, v7, v17, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   sd v4, 16(v17)  # live: [v5, v10, v7, v17, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   sd v5, 24(v17)  # live: [v5, v10, v7, v17, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   mv s10, v17  # live: [v5, v10, v7, v17, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   ld v99, 0(v17)  # live: [v5, v10, v7, s11, v9, v18, v99, zero, v8, v4, v6, v3]
// [Asm]   # save_ctx2  # live: [v5, v10, v7, s11, v9, v18, v99, zero, v8, v4, v6, v3]
// [Asm]   mv a0, zero  # live: [v5, v10, a0, v7, s11, v9, v18, v99, zero, v8, v4, v6, v3]
// [Asm]   jalr v99  # live: [v5, v10, a0, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   mv v23, a0  # live: [v5, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   # restore_ctx2  # live: [v5, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   addi v96, s11, -24  # live: [v5, v10, v7, v9, v18, v96, zero, v8, v4, v6, v3]
// [Asm]   andi v13, v96, -8  # live: [v5, v10, v13, v7, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   mv s11, v13  # live: [v5, v10, v13, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   la v98, init_count59_11  # live: [v5, v10, v13, v7, s11, v9, v98, v18, zero, v8, v4, v6, v3]
// [Asm]   sd v98, 0(v13)  # live: [v5, v10, v13, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   sd v18, 8(v13)  # live: [v5, v10, v13, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   sd v6, 16(v13)  # live: [v5, v10, v13, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   mv s10, v13  # live: [v5, v10, v13, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   ld v94, 0(v13)  # live: [v5, v10, v7, s11, v9, v94, v18, zero, v8, v4, v6, v3]
// [Asm]   # save_ctx2  # live: [v5, v10, v7, s11, v9, v94, v18, zero, v8, v4, v6, v3]
// [Asm]   jalr v94  # live: [v5, v10, a0, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   mv v25, a0  # live: [v5, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   # restore_ctx2  # live: [v5, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   sw zero, 0(v7)  # live: [v5, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   lw v27, 0(v5)  # live: [v5, v10, v7, s11, v9, v18, zero, v27, v8, v4, v6, v3]
// [Asm]   addi v91, s11, -4  # live: [v5, v91, v10, v7, v9, v18, zero, v27, v8, v4, v6, v3]
// [Asm]   andi v15, v91, -8  # live: [v5, v10, v7, v9, v18, zero, v27, v8, v4, v6, v15, v3]
// [Asm]   mv s11, v15  # live: [v5, v10, v7, s11, v9, v18, zero, v27, v8, v4, v6, v15, v3]
// [Asm]   sw v27, 0(v15)  # live: [v5, v10, v7, s11, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   addi v88, s11, -24  # live: [v5, v10, v7, v88, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   andi v16, v88, -8  # live: [v5, v16, v10, v7, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   mv s11, v16  # live: [v5, v16, v10, v7, s11, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   la v90, do_flip90_13  # live: [v5, v16, v10, v7, s11, v9, v18, zero, v8, v4, v90, v6, v15, v3]
// [Asm]   sd v90, 0(v16)  # live: [v5, v16, v10, v7, s11, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   sd v5, 8(v16)  # live: [v5, v16, v10, v7, s11, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   sd v7, 16(v16)  # live: [v5, v16, v10, v7, s11, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   mv s10, v16  # live: [v5, v16, v18, v10, zero, v7, v8, v4, v6, s11, v15, v9, v3]
// [Asm]   ld v86, 0(v16)  # live: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v15, v86, v9, v3]
// [Asm]   # save_ctx2  # live: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v15, v86, v9, v3]
// [Asm]   mv a0, v15  # live: [v5, v10, v18, zero, a0, v7, v8, v4, v6, s11, v86, v9, v3]
// [Asm]   jalr v86  # live: [v5, v10, v18, zero, a0, v7, v8, v4, v6, s11, v9, v3]
// [Asm]   mv v30, a0  # live: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v9, v3]
// [Asm]   # restore_ctx2  # live: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v9, v3]
// [Asm]   lw v31, 0(v8)  # live: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v31, v9, v3]
// [Asm]   lw v32, 0(v7)  # live: [v5, v10, v18, zero, v7, v8, v4, v32, v6, s11, v31, v9, v3]
// [Asm] # control
// [Asm]   blt v32, v31, .compute40_7_4  # live: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v34, v36], uses: [v8, v34, zero, v7], upward_exposed: [v8, zero, v7], params_defs: []
// [Asm] # live_in: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v9, v3], live_out: [v5, v10, v18, zero, v36, v7, v8, v4, v6, s11, v9, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_7_3:
// [Asm]   lw v34, 0(v7)  # live: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v9, v34, v3]
// [Asm]   sw v34, 0(v8)  # live: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v9, v3]
// [Asm] # control
// [Asm]   mv v36, zero  # live: [v5, v10, v18, zero, v7, v36, v8, v4, v6, s11, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v58, v67, a1, s11, v44, fa1, v60, v63, fa2, ft6, a4, fa6, a6, ft5, ft10, v54, v62, ft4, ft9, fa4, ft2, v37, v43, a3, v52, a7, fa7, v75, fa3, ft3, v45, t2, v40, t1, v14, v42, v41, ft0, ft1, v12, v47, ft7, v11, v46, v53, a5, a0, v65, a2, s10, v39, ft8, t3, v72, t0, fa5, v77, fa0, t4, v38, v70], uses: [v3, v14, v58, v42, v67, v7, v41, s11, v12, v44, v60, v63, zero, v47, v4, v6, v54, v11, v62, v46, v10, v53, a0, v37, v65, v43, v9, v39, v72, v75, v18, v77, v45, v38, v70, v40], upward_exposed: [v10, v18, zero, v7, v4, v6, s11, v9, v3], params_defs: [v36]
// [Asm] # live_in: [v5, v10, v18, zero, v7, v36, v8, v4, v6, s11, v9, v3], live_out: [v5, v18, v10, zero, v7, v8, v4, v6, s11, v9, v3]
// [Asm] # block parameters: [v36]
// [Asm] .compute40_7_5:
// [Asm]   lw v37, 0(v9)  # live: [v5, v10, v7, v37, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   lw v38, 0(v7)  # live: [v5, v10, v7, v37, s11, v9, v18, zero, v8, v4, v38, v6, v3]
// [Asm]   lw v39, 0(v10)  # live: [v5, v10, v7, v37, s11, v9, v39, v18, zero, v8, v4, v38, v6, v3]
// [Asm]   lw v40, 0(v10)  # live: [v40, v5, v10, v7, v37, s11, v9, v39, v18, zero, v8, v4, v38, v6, v3]
// [Asm]   li v77, 2  # live: [v40, v5, v10, v7, v37, s11, v9, v39, v18, zero, v77, v8, v4, v38, v6, v3]
// [Asm]   div v41, v40, v77  # live: [v5, v10, v7, v37, v41, s11, v9, v39, v18, zero, v8, v4, v38, v6, v3]
// [Asm]   li v75, 2  # live: [v5, v10, v7, v37, v41, s11, v9, v39, v18, v75, zero, v8, v4, v38, v6, v3]
// [Asm]   mul v42, v41, v75  # live: [v5, v10, v42, v7, v37, s11, v9, v39, v18, zero, v8, v4, v38, v6, v3]
// [Asm]   sub v43, v39, v42  # live: [v5, v10, v7, v37, v43, s11, v9, v18, zero, v8, v4, v38, v6, v3]
// [Asm]   li v72, 2  # live: [v5, v10, v7, v37, v43, s11, v9, v72, v18, zero, v8, v4, v38, v6, v3]
// [Asm]   mul v44, v43, v72  # live: [v5, v10, v7, v37, s11, v44, v9, v18, zero, v8, v4, v38, v6, v3]
// [Asm]   li v70, 1  # live: [v5, v10, v7, v37, s11, v44, v9, v18, zero, v8, v4, v38, v6, v70, v3]
// [Asm]   sub v45, v70, v44  # live: [v5, v10, v7, v37, s11, v9, v18, zero, v8, v45, v4, v38, v6, v3]
// [Asm]   mul v46, v38, v45  # live: [v5, v46, v10, v7, v37, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   add v47, v37, v46  # live: [v5, v10, v7, s11, v9, v18, zero, v8, v4, v47, v6, v3]
// [Asm]   sw v47, 0(v9)  # live: [v5, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   addi v65, s11, -4  # live: [v5, v10, v7, v65, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   andi v12, v65, -8  # live: [v5, v10, v7, v12, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   mv s11, v12  # live: [v5, v10, v7, v12, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   li v67, 1  # live: [v5, v10, v67, v7, v12, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   sw v67, 0(v12)  # live: [v5, v10, v7, v12, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   addi v63, s11, -4  # live: [v5, v10, v7, v12, v9, v63, v18, zero, v8, v4, v6, v3]
// [Asm]   andi v14, v63, -8  # live: [v5, v14, v10, v7, v12, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   mv s11, v14  # live: [v5, v14, v10, v7, v12, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   sw zero, 0(v14)  # live: [v5, v14, v10, v7, v12, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   addi v60, s11, -56  # live: [v5, v14, v10, v7, v12, v9, v60, v18, zero, v8, v4, v6, v3]
// [Asm]   andi v11, v60, -8  # live: [v11, v5, v14, v10, v7, v12, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   mv s11, v11  # live: [v11, v5, v14, v10, v7, s11, v12, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   la v62, go_loop179_17  # live: [v11, v62, v5, v14, v10, v7, s11, v12, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   sd v62, 0(v11)  # live: [v11, v5, v14, v10, v7, s11, v12, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   sd v12, 8(v11)  # live: [v11, v5, v14, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   sd v18, 16(v11)  # live: [v11, v5, v14, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   sd v3, 24(v11)  # live: [v11, v5, v14, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   sd v4, 32(v11)  # live: [v11, v5, v14, v10, v7, s11, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   sd v14, 40(v11)  # live: [v11, v5, v10, v18, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm]   sd v6, 48(v11)  # live: [v11, v5, v10, v18, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm]   mv s10, v11  # live: [v11, v5, v10, v18, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm]   ld v58, 0(v11)  # live: [v5, v58, v10, v18, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm]   # save_ctx2  # live: [v5, v58, v10, v18, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm]   jalr v58  # live: [v5, v18, v10, zero, a0, v8, v7, v4, v6, s11, v9, v3]
// [Asm]   mv v52, a0  # live: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm]   # restore_ctx2  # live: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm]   lw v53, 0(v10)  # live: [v5, v18, v10, v53, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm]   addi v54, v53, 1  # live: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v54, v3]
// [Asm]   sw v54, 0(v10)  # live: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] # control
// [Asm]   mv v18, v18  # live: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm]   j .compute40_7_0  # live: [v5, v18, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v21]
// [Asm] # block parameters: []
// [Asm] .compute40_7_2:
// [Asm] # control
// [Asm]   mv v21, zero  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v21, a0], upward_exposed: [v21], params_defs: [v21]
// [Asm] # live_in: [v21], live_out: []
// [Asm] # block parameters: [v21]
// [Asm] .compute40_7_6:
// [Asm] # control
// [Asm]   mv a0, v21  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v36], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, v10, v18, zero, v7, v8, v4, v6, s11, v9, v3], live_out: [v5, v10, v18, zero, v36, v7, v8, v4, v6, s11, v9, v3]
// [Asm] # block parameters: []
// [Asm] .compute40_7_4:
// [Asm] # control
// [Asm]   mv v36, zero  # live: [v5, v10, v18, zero, v7, v36, v8, v4, v6, s11, v9, v3]
// [Asm]   j .compute40_7_5  # live: [v5, v10, v18, zero, v7, v36, v8, v4, v6, s11, v9, v3]
// [Asm] 
// [Asm] # leaf false
// [Asm] move_perm1_forward197_19:
// [Asm] # block info: defs: [v3, v0, v4, v5, v6, v2], uses: [v2, v5, a0, v0, v6, s10, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v0, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward197_19_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   ld v3, 8(v0)  # live: [v3, v0, zero, v2]
// [Asm]   ld v4, 16(v0)  # live: [v3, v0, v4, zero, v2]
// [Asm]   lw v5, 0(v3)  # live: [v0, v4, v5, zero, v2]
// [Asm]   addi v6, v5, -1  # live: [v0, v4, v6, zero, v2]
// [Asm] # control
// [Asm]   blt v6, v2, .move_perm1_forward197_19_2  # live: [v0, v4, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, v20, a4, fa6, v8, v19, a6, ft10, ft5, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, s10, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v11, v14, v18, a0, zero, v20, v8, v0, v19, v4, v17, v9, v2], upward_exposed: [v0, v4, zero, v2], params_defs: []
// [Asm] # live_in: [v0, v4, zero, v2], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward197_19_1:
// [Asm]   addi v8, v2, 1  # live: [v8, v0, v4, zero, v2]
// [Asm]   slliw v19, v8, 2  # live: [v0, v19, v4, zero, v2]
// [Asm]   add v20, v4, v19  # live: [v0, v4, zero, v20, v2]
// [Asm]   lw v9, 0(v20)  # live: [v0, v4, zero, v9, v2]
// [Asm]   slliw v17, v2, 2  # live: [v0, v4, v17, zero, v9, v2]
// [Asm]   add v18, v4, v17  # live: [v0, v18, zero, v9, v2]
// [Asm]   sw v9, 0(v18)  # live: [v0, zero, v2]
// [Asm]   addi v11, v2, 1  # live: [v11, v0, zero]
// [Asm]   mv s10, v0  # live: [v11, v0, zero]
// [Asm]   ld v14, 0(v0)  # live: [v11, v14, zero]
// [Asm]   # save_ctx2  # live: [v11, v14, zero]
// [Asm]   mv a0, v11  # live: [v14, zero, a0]
// [Asm]   jalr v14  # live: [zero, a0]
// [Asm]   mv v12, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .move_perm1_forward197_19_3:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward197_19_2:
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v13]
// [Asm]   j .move_perm1_forward197_19_3  # live: [v13]
// [Asm] 
// [Asm] # leaf false
// [Asm] fannkuch1_0:
// [Asm] # block info: defs: [a1, s11, v44, fa1, v33, fa2, ft6, a4, fa6, v50, v27, a6, ft10, ft5, v6, v54, ft4, v5, v49, v10, ft9, fa4, ft2, v52, a3, v31, fa7, a7, fa3, ft3, t2, v40, v3, v25, t1, v14, v42, v7, ft0, ft1, v12, v8, v47, v4, ft7, v11, v46, a5, a0, v36, a2, v24, s10, v9, ft8, t3, t0, v56, fa5, v23, fa0, v35, t4, v38, v2], uses: [v3, v2, v25, v14, v42, v7, a1, s11, v12, v44, v33, zero, v50, v27, v8, v47, v4, v6, v54, v11, v46, v5, v49, v10, a0, v36, a2, v52, v24, v31, v9, v56, v35, v38, v40], upward_exposed: [s11, a0, zero], params_defs: []
// [Asm] # live_in: [s11, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .fannkuch1_0_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s11]
// [Asm]   mv v2, a0  # live: [zero, s11, v2]
// [Asm]   addi v54, s11, -8  # live: [zero, v54, v2]
// [Asm]   andi v7, v54, -8  # live: [zero, v7, v2]
// [Asm]   mv s11, v7  # live: [zero, v7, s11, v2]
// [Asm]   la v56, gen_perm14_3  # live: [v56, zero, v7, s11, v2]
// [Asm]   sd v56, 0(v7)  # live: [zero, v7, s11, v2]
// [Asm]   mv s10, v7  # live: [zero, v7, s11, v2]
// [Asm]   ld v52, 0(v7)  # live: [zero, s11, v52, v2]
// [Asm]   # save_ctx2  # live: [zero, s11, v52, v2]
// [Asm]   mv a0, v2  # live: [zero, a0, s11, v52, v2]
// [Asm]   jalr v52  # live: [zero, a0, s11, v2]
// [Asm]   mv v14, a0  # live: [v14, zero, s11, v2]
// [Asm]   # restore_ctx2  # live: [v14, zero, s11, v2]
// [Asm]   slliw v49, v2, 2  # live: [v14, v49, zero, s11, v2]
// [Asm]   sub v50, s11, v49  # live: [v14, zero, v50, v2]
// [Asm]   andi v8, v50, -8  # live: [v14, zero, v8, v2]
// [Asm]   mv s11, v8  # live: [v14, zero, v8, s11, v2]
// [Asm]   mv a1, v2  # live: [v14, zero, v8, a1, s11, v2]
// [Asm]   mv a0, v8  # live: [v14, zero, a0, v8, a1, s11, v2]
// [Asm]   mv a2, zero  # live: [v14, zero, a0, v8, a2, a1, s11, v2]
// [Asm]   call memseti32  # live: [v14, zero, v8, s11, v2]
// [Asm]   slliw v46, v2, 2  # live: [v14, v46, zero, v8, s11, v2]
// [Asm]   sub v47, s11, v46  # live: [v14, zero, v8, v47, v2]
// [Asm]   andi v10, v47, -8  # live: [v14, v10, zero, v8, v2]
// [Asm]   mv s11, v10  # live: [v14, v10, zero, v8, s11, v2]
// [Asm]   mv a1, v2  # live: [v14, v10, zero, v8, a1, s11, v2]
// [Asm]   mv a0, v10  # live: [v14, v10, zero, a0, v8, a1, s11, v2]
// [Asm]   mv a2, zero  # live: [v14, v10, zero, a0, v8, a2, a1, s11, v2]
// [Asm]   call memseti32  # live: [v14, v10, zero, v8, s11, v2]
// [Asm]   addi v44, s11, -4  # live: [v14, v10, zero, v8, v44, v2]
// [Asm]   andi v11, v44, -8  # live: [v11, v14, v10, zero, v8, v2]
// [Asm]   mv s11, v11  # live: [v11, v14, v10, zero, v8, s11, v2]
// [Asm]   sw zero, 0(v11)  # live: [v11, v14, v10, zero, v8, s11, v2]
// [Asm]   addi v42, s11, -4  # live: [v11, v14, v10, zero, v42, v8, v2]
// [Asm]   andi v4, v42, -8  # live: [v11, v14, v10, zero, v8, v4, v2]
// [Asm]   mv s11, v4  # live: [v11, v14, v10, zero, v8, v4, s11, v2]
// [Asm]   sw zero, 0(v4)  # live: [v11, v14, v10, zero, v8, v4, s11, v2]
// [Asm]   addi v40, s11, -4  # live: [v40, v11, v14, v10, zero, v8, v4, v2]
// [Asm]   andi v9, v40, -8  # live: [v11, v14, v10, zero, v8, v4, v9, v2]
// [Asm]   mv s11, v9  # live: [v11, v14, v10, zero, v8, v4, s11, v9, v2]
// [Asm]   sw zero, 0(v9)  # live: [v11, v14, v10, zero, v8, v4, s11, v9, v2]
// [Asm]   addi v38, s11, -4  # live: [v11, v14, v10, zero, v8, v4, v38, v9, v2]
// [Asm]   andi v3, v38, -8  # live: [v2, v11, v14, v10, zero, v8, v4, v9, v3]
// [Asm]   mv s11, v3  # live: [v2, v11, v14, v10, zero, v8, v4, s11, v9, v3]
// [Asm]   sw zero, 0(v3)  # live: [v2, v11, v14, v10, v8, v4, s11, v9, v3]
// [Asm]   addi v36, s11, -4  # live: [v2, v11, v14, v10, v8, v36, v4, v9, v3]
// [Asm]   andi v12, v36, -8  # live: [v2, v11, v14, v10, v8, v4, v12, v9, v3]
// [Asm]   mv s11, v12  # live: [v2, v11, v14, v10, v8, v4, v12, s11, v9, v3]
// [Asm]   sw v2, 0(v12)  # live: [v2, v11, v14, v10, v8, v4, v12, s11, v9, v3]
// [Asm]   addi v33, s11, -72  # live: [v2, v11, v14, v10, v8, v4, v12, v9, v33, v3]
// [Asm]   andi v5, v33, -8  # live: [v2, v11, v5, v14, v10, v8, v4, v12, v9, v3]
// [Asm]   mv s11, v5  # live: [v2, v11, v5, v14, v10, v8, v4, s11, v12, v9, v3]
// [Asm]   la v35, compute40_7  # live: [v2, v11, v5, v14, v10, v8, v35, v4, s11, v12, v9, v3]
// [Asm]   sd v35, 0(v5)  # live: [v2, v11, v5, v14, v10, v8, v4, s11, v12, v9, v3]
// [Asm]   sd v2, 8(v5)  # live: [v11, v5, v14, v10, v8, v4, s11, v12, v9, v3]
// [Asm]   sd v14, 16(v5)  # live: [v11, v5, v10, v8, v4, s11, v12, v9, v3]
// [Asm]   sd v8, 24(v5)  # live: [v11, v5, v10, v4, s11, v12, v9, v3]
// [Asm]   sd v10, 32(v5)  # live: [v11, v5, v4, s11, v12, v9, v3]
// [Asm]   sd v11, 40(v5)  # live: [v5, v4, s11, v12, v9, v3]
// [Asm]   sd v4, 48(v5)  # live: [v5, v4, s11, v12, v9, v3]
// [Asm]   sd v9, 56(v5)  # live: [v5, v4, s11, v12, v9, v3]
// [Asm]   sd v3, 64(v5)  # live: [v4, v5, s11, v12, v9]
// [Asm]   mv s10, v5  # live: [v4, v5, s11, v12, v9]
// [Asm]   ld v31, 0(v5)  # live: [v4, s11, v12, v31, v9]
// [Asm]   # save_ctx2  # live: [v4, s11, v12, v31, v9]
// [Asm]   mv a0, v12  # live: [v4, s11, v31, v9, a0]
// [Asm]   jalr v31  # live: [v4, s11, v9, a0]
// [Asm]   mv v23, a0  # live: [v4, s11, v9]
// [Asm]   # restore_ctx2  # live: [v4, s11, v9]
// [Asm]   lw v24, 0(v4)  # live: [v24, s11, v9]
// [Asm]   lw v25, 0(v9)  # live: [v25, v24, s11]
// [Asm]   addi v27, s11, -8  # live: [v25, v24, v27]
// [Asm]   andi v6, v27, -8  # live: [v25, v6, v24]
// [Asm]   mv s11, v6  # live: [v25, v6, v24]
// [Asm]   sw v24, 0(v6)  # live: [v25, v6]
// [Asm]   sw v25, 4(v6)  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] copy_perm46_9:
// [Asm] # block info: defs: [v3, v0, v4, v5, v6, v2], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v4, v6, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .copy_perm46_9_4:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v0, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v0, v4, zero, v3]
// [Asm]   ld v5, 24(v0)  # live: [v2, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v7], uses: [v7, v6, v3], upward_exposed: [v6, v3], params_defs: [v6]
// [Asm] # live_in: [v4, v6, v5, zero, v3], live_out: [v4, v6, v5, zero, v3]
// [Asm] # block parameters: [v6]
// [Asm] .copy_perm46_9_0:
// [Asm]   addi v7, v3, -1  # live: [v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   blt v7, v6, .copy_perm46_9_2  # live: [v4, v6, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v16, v14, v10, v17, v6, v12, v15], uses: [v16, v5, v14, v10, v4, v6, v17, v15, v12], upward_exposed: [v4, v6, v5], params_defs: []
// [Asm] # live_in: [v4, v6, v5, zero, v3], live_out: [v4, v6, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .copy_perm46_9_1:
// [Asm]   slliw v16, v6, 2  # live: [v5, v16, zero, v4, v6, v3]
// [Asm]   add v17, v4, v16  # live: [v5, zero, v4, v6, v17, v3]
// [Asm]   lw v10, 0(v17)  # live: [v5, v10, zero, v4, v6, v3]
// [Asm]   slliw v14, v6, 2  # live: [v5, v14, v10, zero, v4, v6, v3]
// [Asm]   add v15, v5, v14  # live: [v5, v10, zero, v4, v6, v15, v3]
// [Asm]   sw v10, 0(v15)  # live: [v4, v5, v6, zero, v3]
// [Asm]   addi v12, v6, 1  # live: [v4, v5, v12, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v12  # live: [v4, v6, v5, zero, v3]
// [Asm]   j .copy_perm46_9_0  # live: [v4, v6, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v9]
// [Asm] # block parameters: []
// [Asm] .copy_perm46_9_2:
// [Asm] # control
// [Asm]   mv v9, zero  # live: [v9]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v9, a0], upward_exposed: [v9], params_defs: [v9]
// [Asm] # live_in: [v9], live_out: []
// [Asm] # block parameters: [v9]
// [Asm] .copy_perm46_9_3:
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_22:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_22_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main262_1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_22  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] do_flip90_13:
// [Asm] # block info: defs: [v3, v7, v0, v4, v2], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: [v3, v4, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .do_flip90_13_4:
// [Asm]   # save_ctx1  # live: [s11, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, s11, zero, v2]
// [Asm]   ld v3, 8(v0)  # live: [v2, v0, s11, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v7, v4, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, zero, v7], upward_exposed: [zero, v7], params_defs: [v7]
// [Asm] # live_in: [v3, v4, s11, zero, v7], live_out: [v3, v4, s11, zero, v7]
// [Asm] # block parameters: [v7]
// [Asm] .do_flip90_13_0:
// [Asm]   lw v8, 0(v7)  # live: [zero, v7, v8, v4, s11, v3]
// [Asm] # control
// [Asm]   beq v8, zero, .do_flip90_13_1  # live: [v7, v4, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v26, v13, v22, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, v27, a4, fa6, a6, ft10, ft5, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v24, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v5, v16, v26, a0, v13, v22, v7, s11, v24, zero, v27, v4, v6, v15, v3], upward_exposed: [v3, v4, s11, zero, v7], params_defs: []
// [Asm] # live_in: [v7, v4, s11, zero, v3], live_out: [v3, v4, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .do_flip90_13_2:
// [Asm]   addi v27, s11, -4  # live: [zero, v27, v7, v4, v3]
// [Asm]   andi v5, v27, -8  # live: [v5, zero, v7, v4, v3]
// [Asm]   mv s11, v5  # live: [v5, zero, v7, v4, s11, v3]
// [Asm]   sw zero, 0(v5)  # live: [v5, zero, v7, v4, s11, v3]
// [Asm]   addi v24, s11, -32  # live: [v5, zero, v7, v4, v24, v3]
// [Asm]   andi v6, v24, -8  # live: [v5, zero, v7, v4, v6, v3]
// [Asm]   mv s11, v6  # live: [v5, zero, v7, v4, v6, s11, v3]
// [Asm]   la v26, flip_loop99_15  # live: [v5, zero, v26, v7, v4, v6, s11, v3]
// [Asm]   sd v26, 0(v6)  # live: [v5, zero, v7, v4, v6, s11, v3]
// [Asm]   sd v7, 8(v6)  # live: [v5, zero, v7, v4, v6, s11, v3]
// [Asm]   sd v3, 16(v6)  # live: [v5, zero, v7, v4, v6, s11, v3]
// [Asm]   sd v5, 24(v6)  # live: [zero, v7, v4, v6, s11, v3]
// [Asm]   mv s10, v6  # live: [zero, v7, v4, v6, s11, v3]
// [Asm]   ld v22, 0(v6)  # live: [zero, v22, v7, v4, s11, v3]
// [Asm]   # save_ctx2  # live: [zero, v22, v7, v4, s11, v3]
// [Asm]   mv a0, zero  # live: [zero, a0, v22, v7, v4, s11, v3]
// [Asm]   jalr v22  # live: [zero, a0, v7, v4, s11, v3]
// [Asm]   mv v12, a0  # live: [zero, v7, v4, s11, v3]
// [Asm]   # restore_ctx2  # live: [zero, v7, v4, s11, v3]
// [Asm]   lw v13, 0(v3)  # live: [zero, v13, v7, v4, s11, v3]
// [Asm]   sw v13, 0(v7)  # live: [zero, v7, v4, s11, v3]
// [Asm]   lw v15, 0(v4)  # live: [zero, v7, v4, s11, v15, v3]
// [Asm]   addi v16, v15, 1  # live: [v16, zero, v7, v4, s11, v3]
// [Asm]   sw v16, 0(v4)  # live: [v7, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v7  # live: [v7, v4, s11, zero, v3]
// [Asm]   j .do_flip90_13_0  # live: [v7, v4, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v18], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v18]
// [Asm] # block parameters: []
// [Asm] .do_flip90_13_1:
// [Asm] # control
// [Asm]   mv v18, zero  # live: [v18]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v18, a0], upward_exposed: [v18], params_defs: [v18]
// [Asm] # live_in: [v18], live_out: []
// [Asm] # block parameters: [v18]
// [Asm] .do_flip90_13_3:
// [Asm] # control
// [Asm]   mv a0, v18  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] init_count59_11:
// [Asm] # block info: defs: [v3, v0, v4, v24, v2], uses: [v0, v4, v24, s10, v2], upward_exposed: [s10], params_defs: []
// [Asm] # live_in: [s10, zero], live_out: [v3, v0, zero, v2]
// [Asm] # block parameters: []
// [Asm] .init_count59_11_0:
// [Asm]   # save_ctx1  # live: [zero, s10]
// [Asm]   mv v0, s10  # live: [v0, zero]
// [Asm]   ld v2, 8(v0)  # live: [v0, zero, v2]
// [Asm]   ld v3, 16(v0)  # live: [v2, v0, zero, v3]
// [Asm]   lw v4, 0(v2)  # live: [v2, v0, v4, zero, v3]
// [Asm] # control
// [Asm]   li v24, 1  # live: [v2, v0, v4, v24, zero, v3]
// [Asm]   beq v4, v24, .init_count59_11_1  # live: [v2, v0, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, v7, ft0, ft1, a1, fa1, fa2, ft6, v20, a4, fa6, v8, v19, a6, ft10, ft5, v6, ft7, v11, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v2, v11, v10, a0, v13, v20, v8, v7, v0, v19, v6, v15, v3], upward_exposed: [v3, v0, v2], params_defs: []
// [Asm] # live_in: [v2, v0, zero, v3], live_out: [v14, zero]
// [Asm] # block parameters: []
// [Asm] .init_count59_11_2:
// [Asm]   lw v6, 0(v2)  # live: [v3, v0, v6, zero, v2]
// [Asm]   addi v7, v6, -1  # live: [v3, v7, v0, zero, v2]
// [Asm]   lw v8, 0(v2)  # live: [v8, v3, v7, v0, zero, v2]
// [Asm]   slliw v19, v7, 2  # live: [v8, v3, v0, v19, zero, v2]
// [Asm]   add v20, v3, v19  # live: [v8, v0, zero, v20, v2]
// [Asm]   sw v8, 0(v20)  # live: [v0, zero, v2]
// [Asm]   lw v10, 0(v2)  # live: [v0, v10, zero, v2]
// [Asm]   addi v11, v10, -1  # live: [v0, v11, zero, v2]
// [Asm]   sw v11, 0(v2)  # live: [v0, zero]
// [Asm]   mv s10, v0  # live: [v0, zero]
// [Asm]   ld v15, 0(v0)  # live: [v15, zero]
// [Asm]   # save_ctx2  # live: [v15, zero]
// [Asm]   jalr v15  # live: [zero, a0]
// [Asm]   mv v13, a0  # live: [zero, v13]
// [Asm]   # restore_ctx2  # live: [zero, v13]
// [Asm] # control
// [Asm]   mv v14, v13  # live: [v14, zero]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: [v14]
// [Asm] # live_in: [v14, zero], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .init_count59_11_3:
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14, zero]
// [Asm] # block parameters: []
// [Asm] .init_count59_11_1:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14, zero]
// [Asm]   j .init_count59_11_3  # live: [v14, zero]
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("fannkuch", Tuple([Int, Int])), args: [("n", Int)], body: LetRec({name: ("gen_perm1", Array(Int)), args: [("len", Int)], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))}, Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("gen_perm1", Array(Int)), args: [("len", Int)], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))}, Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr")))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))
// [Knf] build_knf: App(Var("init_arr"), [Int(0)])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))))
// [Knf] build_knf: App(Var("gen_perm1"), [Var("n")])
// [Knf] build_knf: Var("gen_perm1")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))
// [Knf] build_knf: Array(Int(1), Var("n"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))
// [Knf] build_knf: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i")))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm1"), Var("i"))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("copy_perm")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))
// [Knf] build_knf: App(Var("copy_perm"), [Int(0)])
// [Knf] build_knf: Var("copy_perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)
// [Knf] build_knf: If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit)
// [Knf] build_knf: If(Eq(Get(Var("r"), Int(0)), Int(1)), Unit, Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), [])))
// [Knf] build_knf: Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))
// [Knf] build_knf: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("init_count"), [])
// [Knf] build_knf: Var("init_count")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))
// [Knf] build_knf: App(Var("init_count"), [])
// [Knf] build_knf: Var("init_count")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))
// [Knf] build_knf: Put(Var("flips"), Int(0), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))
// [Knf] build_knf: Array(Int(1), Get(Var("perm"), Int(0)))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("perm"), Int(0))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))
// [Knf] build_knf: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)
// [Knf] build_knf: If(Eq(Get(Var("k"), Int(0)), Int(0)), Unit, Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Put(Var("t"), Int(0), Get(Var("perm"), Var("i")))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm"), Var("i"))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0)))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("t"), Int(0))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("flip_loop")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))))
// [Knf] build_knf: App(Var("flip_loop"), [Int(0)])
// [Knf] build_knf: Var("flip_loop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))
// [Knf] build_knf: Put(Var("k"), Int(0), Get(Var("perm"), Int(0)))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm"), Int(0))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))
// [Knf] build_knf: Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("do_flip"), [Var("k")])
// [Knf] build_knf: Var("do_flip")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))
// [Knf] build_knf: App(Var("do_flip"), [Var("k")])
// [Knf] build_knf: Var("do_flip")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))
// [Knf] build_knf: If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit)
// [Knf] build_knf: Get(Var("max_flips"), Int(0))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0)))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))
// [Knf] build_knf: Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int)))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("check_sum"), Int(0))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int))
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))
// [Knf] build_knf: Array(Int(1), Bool(true))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))
// [Knf] build_knf: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)
// [Knf] build_knf: Get(Var("go"), Int(0))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), []))
// [Knf] build_knf: If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))))))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit))
// [Knf] build_knf: Put(Var("go"), Int(0), Bool(false))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)
// [Knf] build_knf: Put(Var("r"), Int(0), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))
// [Knf] build_knf: Put(Var("t"), Int(0), Get(Var("perm1"), Int(0)))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm1"), Int(0))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit))
// [Knf] build_knf: Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)
// [Knf] build_knf: App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("move_perm1_forward")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))
// [Knf] build_knf: App(Var("move_perm1_forward"), [Int(0)])
// [Knf] build_knf: Var("move_perm1_forward")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))
// [Knf] build_knf: Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0)))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("t"), Int(0))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))
// [Knf] build_knf: Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("count"), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)
// [Knf] build_knf: If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("count"), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Put(Var("go"), Int(0), Bool(false))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("go_loop"), [])
// [Knf] build_knf: Var("go_loop")
// [Knf] build_knf: Unit
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))
// [Knf] build_knf: App(Var("go_loop"), [])
// [Knf] build_knf: Var("go_loop")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))
// [Knf] build_knf: Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("compute"), [Var("r")])
// [Knf] build_knf: Var("compute")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))
// [Knf] build_knf: App(Var("compute"), [Var("r")])
// [Knf] build_knf: Var("compute")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])
// [Knf] build_knf: Get(Var("max_flips"), Int(0))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("check_sum"), Int(0))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))}, App(Var("main"), []))
// [Knf] build_knf: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))
// [Knf] build_knf: App(Var("fannkuch"), [Int(9)])
// [Knf] build_knf: Var("fannkuch")
// [Knf] build_knf: Int(9)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")]))
// [Knf] build_knf: App(Var("print_int"), [Var("check_sum")])
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: App(Var("print_int"), [Var("max_flips")])
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl gen_perm14_3
// [Main]   .type gen_perm14_3, @function
// [Main] # leaf false
// [Main] gen_perm14_3:
// [Main] .gen_perm14_3_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv a1, s10
// [Main]   mv s0, a0
// [Main]   slliw a0, s0, 2
// [Main]   sub a0, s11, a0
// [Main]   andi s1, a0, -8
// [Main]   mv s11, s1
// [Main]   mv a1, s0
// [Main]   mv a0, s1
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   addi a0, s11, -24
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   la a1, init_arr9_5
// [Main]   sd a1, 0(a0)
// [Main]   sd s0, 8(a0)
// [Main]   sd s1, 16(a0)
// [Main]   mv s10, a0
// [Main]   ld a1, 0(a0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a0, s1
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl go_loop179_17
// [Main]   .type go_loop179_17, @function
// [Main] # leaf false
// [Main] go_loop179_17:
// [Main] .go_loop179_17_10:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv a0, s10
// [Main]   ld s0, 8(a0)
// [Main]   ld s5, 16(a0)
// [Main]   lw s3, 24(a0)
// [Main]   ld s1, 32(a0)
// [Main]   ld s4, 40(a0)
// [Main]   ld s2, 48(a0)
// [Main] 
// [Main] .go_loop179_17_0:
// [Main]   lw a0, 0(s0)
// [Main]   li a1, 1
// [Main]   bne a0, a1, .go_loop179_17_2
// [Main] 
// [Main] .go_loop179_17_1:
// [Main]   lw a0, 0(s5)
// [Main]   beq a0, s3, .go_loop179_17_3
// [Main] 
// [Main] .go_loop179_17_4:
// [Main]   lw a0, 0(s1)
// [Main]   sw a0, 0(s4)
// [Main]   addi a0, s11, -24
// [Main]   andi a1, a0, -8
// [Main]   mv s11, a1
// [Main]   la a0, move_perm1_forward197_19
// [Main]   sd a0, 0(a1)
// [Main]   sd s5, 8(a1)
// [Main]   sd s1, 16(a1)
// [Main]   mv s10, a1
// [Main]   ld a1, 0(a1)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   lw a0, 0(s5)
// [Main]   lw a1, 0(s4)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s1, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s5)
// [Main]   lw a1, 0(s5)
// [Main]   slliw a1, a1, 2
// [Main]   add a1, s2, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s2, a0
// [Main]   sw a1, 0(a0)
// [Main]   lw a0, 0(s5)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s2, a0
// [Main]   lw a0, 0(a0)
// [Main]   li a1, 1
// [Main]   bge a0, a1, .go_loop179_17_5
// [Main] 
// [Main] .go_loop179_17_6:
// [Main]   lw a0, 0(s5)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s5)
// [Main]   mv a0, zero
// [Main] 
// [Main] .go_loop179_17_7:
// [Main]   mv a0, zero
// [Main] 
// [Main] .go_loop179_17_8:
// [Main]   j .go_loop179_17_0
// [Main] 
// [Main] .go_loop179_17_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .go_loop179_17_9:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .go_loop179_17_3:
// [Main]   sw zero, 0(s0)
// [Main]   sw zero, 0(s5)
// [Main]   mv a0, zero
// [Main]   j .go_loop179_17_8
// [Main] 
// [Main] .go_loop179_17_5:
// [Main]   sw zero, 0(s0)
// [Main]   mv a0, zero
// [Main]   j .go_loop179_17_7
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl flip_loop99_15
// [Main]   .type flip_loop99_15, @function
// [Main] # leaf true
// [Main] flip_loop99_15:
// [Main] .flip_loop99_15_4:
// [Main]   mv a1, s10
// [Main]   mv a3, a0
// [Main]   ld a2, 8(a1)
// [Main]   ld a0, 16(a1)
// [Main]   ld a1, 24(a1)
// [Main]   mv a4, a3
// [Main] 
// [Main] .flip_loop99_15_0:
// [Main]   lw a3, 0(a2)
// [Main]   li a5, 2
// [Main]   div a3, a3, a5
// [Main]   blt a3, a4, .flip_loop99_15_2
// [Main] 
// [Main] .flip_loop99_15_1:
// [Main]   slliw a3, a4, 2
// [Main]   add a3, a0, a3
// [Main]   lw a3, 0(a3)
// [Main]   sw a3, 0(a1)
// [Main]   lw a3, 0(a2)
// [Main]   sub a3, a3, a4
// [Main]   slliw a3, a3, 2
// [Main]   add a3, a0, a3
// [Main]   lw a3, 0(a3)
// [Main]   slliw a5, a4, 2
// [Main]   add a5, a0, a5
// [Main]   sw a3, 0(a5)
// [Main]   lw a3, 0(a2)
// [Main]   sub a3, a3, a4
// [Main]   lw a5, 0(a1)
// [Main]   slliw a3, a3, 2
// [Main]   add a3, a0, a3
// [Main]   sw a5, 0(a3)
// [Main]   addi a3, a4, 1
// [Main]   mv a4, a3
// [Main]   j .flip_loop99_15_0
// [Main] 
// [Main] .flip_loop99_15_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .flip_loop99_15_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_arr9_5
// [Main]   .type init_arr9_5, @function
// [Main] # leaf true
// [Main] init_arr9_5:
// [Main] .init_arr9_5_4:
// [Main]   mv a1, s10
// [Main]   lw a3, 8(a1)
// [Main]   ld a1, 16(a1)
// [Main]   mv a2, a0
// [Main] 
// [Main] .init_arr9_5_0:
// [Main]   addi a0, a3, -1
// [Main]   blt a0, a2, .init_arr9_5_2
// [Main] 
// [Main] .init_arr9_5_1:
// [Main]   slliw a0, a2, 2
// [Main]   add a0, a1, a0
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a2, 1
// [Main]   mv a2, a0
// [Main]   j .init_arr9_5_0
// [Main] 
// [Main] .init_arr9_5_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .init_arr9_5_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main262_1
// [Main]   .type main262_1, @function
// [Main] # leaf false
// [Main] main262_1:
// [Main] .main262_1_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   li a0, 9
// [Main]   call fannkuch1_0
// [Main]   lw s0, 0(a0)
// [Main]   lw a0, 4(a0)
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl compute40_7
// [Main]   .type compute40_7, @function
// [Main] # leaf false
// [Main] compute40_7:
// [Main] .compute40_7_7:
// [Main]   addi sp, sp, -80
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   sd s8, 72(sp)
// [Main]   mv a1, s10
// [Main]   lw s0, 8(a1)
// [Main]   ld s1, 16(a1)
// [Main]   ld s2, 24(a1)
// [Main]   ld s3, 32(a1)
// [Main]   ld s4, 40(a1)
// [Main]   ld s5, 48(a1)
// [Main]   ld s6, 56(a1)
// [Main]   ld s7, 64(a1)
// [Main]   mv s8, a0
// [Main] 
// [Main] .compute40_7_0:
// [Main]   lw a0, 0(s8)
// [Main]   li a1, 1
// [Main]   blt a0, a1, .compute40_7_2
// [Main] 
// [Main] .compute40_7_1:
// [Main]   addi a0, s11, -32
// [Main]   andi a1, a0, -8
// [Main]   mv s11, a1
// [Main]   la a0, copy_perm46_9
// [Main]   sd a0, 0(a1)
// [Main]   sd s0, 8(a1)
// [Main]   sd s1, 16(a1)
// [Main]   sd s2, 24(a1)
// [Main]   mv s10, a1
// [Main]   ld a1, 0(a1)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   addi a0, s11, -24
// [Main]   andi a1, a0, -8
// [Main]   mv s11, a1
// [Main]   la a0, init_count59_11
// [Main]   sd a0, 0(a1)
// [Main]   sd s8, 8(a1)
// [Main]   sd s3, 16(a1)
// [Main]   mv s10, a1
// [Main]   ld a0, 0(a1)
// [Main]   jalr a0
// [Main]   sw zero, 0(s4)
// [Main]   lw a1, 0(s2)
// [Main]   addi a0, s11, -4
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a1, s11, -24
// [Main]   andi a2, a1, -8
// [Main]   mv s11, a2
// [Main]   la a1, do_flip90_13
// [Main]   sd a1, 0(a2)
// [Main]   sd s2, 8(a2)
// [Main]   sd s4, 16(a2)
// [Main]   mv s10, a2
// [Main]   ld a1, 0(a2)
// [Main]   jalr a1
// [Main]   lw a0, 0(s5)
// [Main]   lw a1, 0(s4)
// [Main]   blt a1, a0, .compute40_7_4
// [Main] 
// [Main] .compute40_7_3:
// [Main]   lw a0, 0(s4)
// [Main]   sw a0, 0(s5)
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40_7_5:
// [Main]   lw a0, 0(s6)
// [Main]   lw a1, 0(s4)
// [Main]   lw a2, 0(s7)
// [Main]   lw a3, 0(s7)
// [Main]   li a4, 2
// [Main]   div a3, a3, a4
// [Main]   li a4, 2
// [Main]   mul a3, a3, a4
// [Main]   sub a2, a2, a3
// [Main]   li a3, 2
// [Main]   mul a2, a2, a3
// [Main]   li a3, 1
// [Main]   sub a2, a3, a2
// [Main]   mul a1, a1, a2
// [Main]   add a0, a0, a1
// [Main]   sw a0, 0(s6)
// [Main]   addi a0, s11, -4
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   addi a1, s11, -4
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   sw zero, 0(a1)
// [Main]   addi a2, s11, -56
// [Main]   andi a3, a2, -8
// [Main]   mv s11, a3
// [Main]   la a2, go_loop179_17
// [Main]   sd a2, 0(a3)
// [Main]   sd a0, 8(a3)
// [Main]   sd s8, 16(a3)
// [Main]   sd s0, 24(a3)
// [Main]   sd s1, 32(a3)
// [Main]   sd a1, 40(a3)
// [Main]   sd s3, 48(a3)
// [Main]   mv s10, a3
// [Main]   ld a0, 0(a3)
// [Main]   jalr a0
// [Main]   lw a0, 0(s7)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s7)
// [Main]   j .compute40_7_0
// [Main] 
// [Main] .compute40_7_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40_7_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   ld s8, 72(sp)
// [Main]   addi sp, sp, 80
// [Main]   ret
// [Main] 
// [Main] .compute40_7_4:
// [Main]   mv a0, zero
// [Main]   j .compute40_7_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl move_perm1_forward197_19
// [Main]   .type move_perm1_forward197_19, @function
// [Main] # leaf false
// [Main] move_perm1_forward197_19:
// [Main] .move_perm1_forward197_19_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, s10
// [Main]   ld a2, 8(a1)
// [Main]   ld a3, 16(a1)
// [Main]   lw a2, 0(a2)
// [Main]   addi a2, a2, -1
// [Main]   blt a2, a0, .move_perm1_forward197_19_2
// [Main] 
// [Main] .move_perm1_forward197_19_1:
// [Main]   addi a2, a0, 1
// [Main]   slliw a2, a2, 2
// [Main]   add a2, a3, a2
// [Main]   lw a2, 0(a2)
// [Main]   slliw a4, a0, 2
// [Main]   add a3, a3, a4
// [Main]   sw a2, 0(a3)
// [Main]   addi a0, a0, 1
// [Main]   mv s10, a1
// [Main]   ld a1, 0(a1)
// [Main]   jalr a1
// [Main]   mv a0, zero
// [Main] 
// [Main] .move_perm1_forward197_19_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .move_perm1_forward197_19_2:
// [Main]   mv a0, zero
// [Main]   j .move_perm1_forward197_19_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl fannkuch1_0
// [Main]   .type fannkuch1_0, @function
// [Main] # leaf false
// [Main] fannkuch1_0:
// [Main] .fannkuch1_0_0:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv s0, a0
// [Main]   addi a0, s11, -8
// [Main]   andi a1, a0, -8
// [Main]   mv s11, a1
// [Main]   la a0, gen_perm14_3
// [Main]   sd a0, 0(a1)
// [Main]   mv s10, a1
// [Main]   ld a1, 0(a1)
// [Main]   mv a0, s0
// [Main]   jalr a1
// [Main]   mv s3, a0
// [Main]   slliw a0, s0, 2
// [Main]   sub a0, s11, a0
// [Main]   andi s4, a0, -8
// [Main]   mv s11, s4
// [Main]   mv a1, s0
// [Main]   mv a0, s4
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   slliw a0, s0, 2
// [Main]   sub a0, s11, a0
// [Main]   andi s5, a0, -8
// [Main]   mv s11, s5
// [Main]   mv a1, s0
// [Main]   mv a0, s5
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   addi a0, s11, -4
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   sw zero, 0(a0)
// [Main]   addi a1, s11, -4
// [Main]   andi s1, a1, -8
// [Main]   mv s11, s1
// [Main]   sw zero, 0(s1)
// [Main]   addi a1, s11, -4
// [Main]   andi s2, a1, -8
// [Main]   mv s11, s2
// [Main]   sw zero, 0(s2)
// [Main]   addi a1, s11, -4
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   sw zero, 0(a1)
// [Main]   addi a2, s11, -4
// [Main]   andi a2, a2, -8
// [Main]   mv s11, a2
// [Main]   sw s0, 0(a2)
// [Main]   addi a3, s11, -72
// [Main]   andi a4, a3, -8
// [Main]   mv s11, a4
// [Main]   la a3, compute40_7
// [Main]   sd a3, 0(a4)
// [Main]   sd s0, 8(a4)
// [Main]   sd s3, 16(a4)
// [Main]   sd s4, 24(a4)
// [Main]   sd s5, 32(a4)
// [Main]   sd a0, 40(a4)
// [Main]   sd s1, 48(a4)
// [Main]   sd s2, 56(a4)
// [Main]   sd a1, 64(a4)
// [Main]   mv s10, a4
// [Main]   ld a1, 0(a4)
// [Main]   mv a0, a2
// [Main]   jalr a1
// [Main]   lw a0, 0(s1)
// [Main]   lw a1, 0(s2)
// [Main]   addi a2, s11, -8
// [Main]   andi a2, a2, -8
// [Main]   mv s11, a2
// [Main]   sw a0, 0(a2)
// [Main]   sw a1, 4(a2)
// [Main]   mv a0, a2
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl copy_perm46_9
// [Main]   .type copy_perm46_9, @function
// [Main] # leaf true
// [Main] copy_perm46_9:
// [Main] .copy_perm46_9_4:
// [Main]   mv a1, s10
// [Main]   lw a4, 8(a1)
// [Main]   ld a2, 16(a1)
// [Main]   ld a1, 24(a1)
// [Main]   mv a3, a0
// [Main] 
// [Main] .copy_perm46_9_0:
// [Main]   addi a0, a4, -1
// [Main]   blt a0, a3, .copy_perm46_9_2
// [Main] 
// [Main] .copy_perm46_9_1:
// [Main]   slliw a0, a3, 2
// [Main]   add a0, a2, a0
// [Main]   lw a0, 0(a0)
// [Main]   slliw a5, a3, 2
// [Main]   add a5, a1, a5
// [Main]   sw a0, 0(a5)
// [Main]   addi a0, a3, 1
// [Main]   mv a3, a0
// [Main]   j .copy_perm46_9_0
// [Main] 
// [Main] .copy_perm46_9_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .copy_perm46_9_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_22
// [Main]   .type T$start_22, @function
// [Main] # leaf false
// [Main] T$start_22:
// [Main] .T$start_22_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main262_1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_22
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl do_flip90_13
// [Main]   .type do_flip90_13, @function
// [Main] # leaf false
// [Main] do_flip90_13:
// [Main] .do_flip90_13_4:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv a1, s10
// [Main]   ld s0, 8(a1)
// [Main]   ld s1, 16(a1)
// [Main]   mv s2, a0
// [Main] 
// [Main] .do_flip90_13_0:
// [Main]   lw a0, 0(s2)
// [Main]   beq a0, zero, .do_flip90_13_1
// [Main] 
// [Main] .do_flip90_13_2:
// [Main]   addi a0, s11, -4
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   sw zero, 0(a0)
// [Main]   addi a1, s11, -32
// [Main]   andi a2, a1, -8
// [Main]   mv s11, a2
// [Main]   la a1, flip_loop99_15
// [Main]   sd a1, 0(a2)
// [Main]   sd s2, 8(a2)
// [Main]   sd s0, 16(a2)
// [Main]   sd a0, 24(a2)
// [Main]   mv s10, a2
// [Main]   ld a1, 0(a2)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   lw a0, 0(s0)
// [Main]   sw a0, 0(s2)
// [Main]   lw a0, 0(s1)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s1)
// [Main]   j .do_flip90_13_0
// [Main] 
// [Main] .do_flip90_13_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .do_flip90_13_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_count59_11
// [Main]   .type init_count59_11, @function
// [Main] # leaf false
// [Main] init_count59_11:
// [Main] .init_count59_11_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a0, s10
// [Main]   ld a1, 8(a0)
// [Main]   ld a2, 16(a0)
// [Main]   lw a3, 0(a1)
// [Main]   li a4, 1
// [Main]   beq a3, a4, .init_count59_11_1
// [Main] 
// [Main] .init_count59_11_2:
// [Main]   lw a3, 0(a1)
// [Main]   addi a3, a3, -1
// [Main]   lw a4, 0(a1)
// [Main]   slliw a3, a3, 2
// [Main]   add a2, a2, a3
// [Main]   sw a4, 0(a2)
// [Main]   lw a2, 0(a1)
// [Main]   addi a2, a2, -1
// [Main]   sw a2, 0(a1)
// [Main]   mv s10, a0
// [Main]   ld a0, 0(a0)
// [Main]   jalr a0
// [Main] 
// [Main] .init_count59_11_3:
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .init_count59_11_1:
// [Main]   mv a0, zero
// [Main]   j .init_count59_11_3
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function copy_perm46_9
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^3), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FreeVar(fvref=^1), Int32(val=1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f9, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local FreeVar(fvref=^3) -> $^3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function copy_perm46_9 to wasm
// [Wasm] Lowering function go_loop179_17
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Lowering control Jump(target=b0, args=[])
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=FreeVar(fvref=^1), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^2), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Jump(target=b8, args=[Unit])
// [Wasm] Lowering control Jump(target=b8, args=[Unit])
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=FreeVar(fvref=^1), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering control Jump(target=b7, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^2), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%22), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^2), index=0, width=@32), val=Insn(iref=%23))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering control Jump(target=b7, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^4), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32), val=Insn(iref=%6))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Unit), mref=m0, fills=[Field(index=0, val=Fn(fref=f19)), Field(index=1, val=FreeVar(fvref=^2)), Field(index=2, val=FreeVar(fvref=^4))])
// [Wasm] Get Local name Mem(fref=f17, mref=m0) -> $f17.m0
// [Wasm] Get Local name Mem(fref=f17, mref=m0) -> $f17.m0
// [Wasm] Get Local name Mem(fref=f17, mref=m0) -> $f17.m0
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Mem(fref=f17, mref=m0) -> $f17.m0
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f17, mref=m0), args=[Int32(val=0)])
// [Wasm] Get Local name Mem(fref=f17, mref=m0) -> $f17.m0
// [Wasm] Get Local name Mem(fref=f17, mref=m0) -> $f17.m0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^2), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^4), offset=Insn(iref=%10), width=@32), val=Insn(iref=%11))
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^2), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^2), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^6), offset=Insn(iref=%14), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%15), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^6), offset=Insn(iref=%13), width=@32), val=Insn(iref=%16))
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^2), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^6), offset=Insn(iref=%18), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%19)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Branch(cond=Insn(iref=%20), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^2), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%2), FreeVar(fvref=^3)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b9, args=[Unit])
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=FreeVar(fvref=^1), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Bool(val=true)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b0, args=[])
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local FreeVar(fvref=^5) -> $^5
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local FreeVar(fvref=^4) -> $^4
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local FreeVar(fvref=^6) -> $^6
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Mem(fref=f17, mref=m0) -> $f17.m0
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local FreeVar(fvref=^3) -> $^3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Lowered function go_loop179_17 to wasm
// [Wasm] Lowering function fannkuch1_0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Array(elem=Int32)), mref=m0, fills=[Field(index=0, val=Fn(fref=f3))])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowering insn Apply(ty=Array(elem=Int32), f=Mem(fref=f0, mref=m0), args=[FnParam(fref=f0, fpref=$f.0)])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f0, mref=m2) -> $f0.m2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m3, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f0, mref=m3) -> $f0.m3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m4, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f0, mref=m4) -> $f0.m4
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m5, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f0, mref=m5) -> $f0.m5
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m6, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f0, mref=m6) -> $f0.m6
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m7, fills=[Init(val=FnParam(fref=f0, fpref=$f.0))])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f0, mref=m7) -> $f0.m7
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Array(elem=Int32)], ty=Unit), mref=m8, fills=[Field(index=0, val=Fn(fref=f7)), Field(index=1, val=FnParam(fref=f0, fpref=$f.0)), Field(index=2, val=Insn(iref=%1)), Field(index=3, val=Mem(fref=f0, mref=m1)), Field(index=4, val=Mem(fref=f0, mref=m2)), Field(index=5, val=Mem(fref=f0, mref=m3)), Field(index=6, val=Mem(fref=f0, mref=m4)), Field(index=7, val=Mem(fref=f0, mref=m5)), Field(index=8, val=Mem(fref=f0, mref=m6))])
// [Wasm] Get Local name Mem(fref=f0, mref=m8) -> $f0.m8
// [Wasm] Get Local name Mem(fref=f0, mref=m8) -> $f0.m8
// [Wasm] Get Local name Mem(fref=f0, mref=m8) -> $f0.m8
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f0, mref=m8) -> $f0.m8
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Mem(fref=f0, mref=m8) -> $f0.m8
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m8) -> $f0.m8
// [Wasm] Get Local name Mem(fref=f0, mref=m2) -> $f0.m2
// [Wasm] Get Local name Mem(fref=f0, mref=m8) -> $f0.m8
// [Wasm] Get Local name Mem(fref=f0, mref=m3) -> $f0.m3
// [Wasm] Get Local name Mem(fref=f0, mref=m8) -> $f0.m8
// [Wasm] Get Local name Mem(fref=f0, mref=m4) -> $f0.m4
// [Wasm] Get Local name Mem(fref=f0, mref=m8) -> $f0.m8
// [Wasm] Get Local name Mem(fref=f0, mref=m5) -> $f0.m5
// [Wasm] Get Local name Mem(fref=f0, mref=m8) -> $f0.m8
// [Wasm] Get Local name Mem(fref=f0, mref=m6) -> $f0.m6
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f0, mref=m8), args=[Mem(fref=f0, mref=m7)])
// [Wasm] Get Local name Mem(fref=f0, mref=m8) -> $f0.m8
// [Wasm] Get Local name Mem(fref=f0, mref=m7) -> $f0.m7
// [Wasm] Get Local name Mem(fref=f0, mref=m8) -> $f0.m8
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m4), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f0, mref=m4) -> $f0.m4
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m5), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f0, mref=m5) -> $f0.m5
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m9, fills=[Field(index=0, val=Insn(iref=%11)), Field(index=1, val=Insn(iref=%12))])
// [Wasm] Get Local name Mem(fref=f0, mref=m9) -> $f0.m9
// [Wasm] Get Local name Mem(fref=f0, mref=m9) -> $f0.m9
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Mem(fref=f0, mref=m9) -> $f0.m9
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Return(args=[Mem(fref=f0, mref=m9)])
// [Wasm] Get Local name Mem(fref=f0, mref=m9) -> $f0.m9
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Local Mem(fref=f0, mref=m9) -> $f0.m9
// [Wasm] Local Mem(fref=f0, mref=m5) -> $f0.m5
// [Wasm] Local Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Local Mem(fref=f0, mref=m8) -> $f0.m8
// [Wasm] Local Mem(fref=f0, mref=m6) -> $f0.m6
// [Wasm] Local Mem(fref=f0, mref=m4) -> $f0.m4
// [Wasm] Local Mem(fref=f0, mref=m3) -> $f0.m3
// [Wasm] Local Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f0, mref=m2) -> $f0.m2
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Mem(fref=f0, mref=m7) -> $f0.m7
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function fannkuch1_0 to wasm
// [Wasm] Lowering function do_flip90_13
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f13, mref=m0) -> $f13.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Unit), mref=m1, fills=[Field(index=0, val=Fn(fref=f15)), Field(index=1, val=BlockParam(bref=b0, bpref=$b.0)), Field(index=2, val=FreeVar(fvref=^1)), Field(index=3, val=Mem(fref=f13, mref=m0))])
// [Wasm] Get Local name Mem(fref=f13, mref=m1) -> $f13.m1
// [Wasm] Get Local name Mem(fref=f13, mref=m1) -> $f13.m1
// [Wasm] Get Local name Mem(fref=f13, mref=m1) -> $f13.m1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f13, mref=m1) -> $f13.m1
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Mem(fref=f13, mref=m1) -> $f13.m1
// [Wasm] Get Local name Mem(fref=f13, mref=m0) -> $f13.m0
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f13, mref=m1), args=[Int32(val=0)])
// [Wasm] Get Local name Mem(fref=f13, mref=m1) -> $f13.m1
// [Wasm] Get Local name Mem(fref=f13, mref=m1) -> $f13.m1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^1), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), index=0, width=@32), val=Insn(iref=%5))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^2), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%7), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^2), index=0, width=@32), val=Insn(iref=%8))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f13, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Local Mem(fref=f13, mref=m1) -> $f13.m1
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f13, mref=m0) -> $f13.m0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function do_flip90_13 to wasm
// [Wasm] Lowering function move_perm1_forward197_19
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f19, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=Insn(iref=%3), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=FnParam(fref=f19, fpref=$f.0), width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f19, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Apply(ty=Unit, f=Self(fref=f19), args=[Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^1), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f19, fpref=$f.0), Insn(iref=%1)])
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function move_perm1_forward197_19 to wasm
// [Wasm] Lowering function flip_loop99_15
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^3), index=0, width=@32), val=Insn(iref=%3))
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^1), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=Insn(iref=%6), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^1), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%9), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^3), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=Insn(iref=%10), width=@32), val=Insn(iref=%11))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^1), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%0), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f15, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local FreeVar(fvref=^3) -> $^3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function flip_loop99_15 to wasm
// [Wasm] Lowering function init_count59_11
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^1), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%2), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^1), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=Insn(iref=%3), width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^1), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%6), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^1), index=0, width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Apply(ty=Unit, f=Self(fref=f11), args=[])
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%9)])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^1), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function init_count59_11 to wasm
// [Wasm] Lowering function main262_1
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Int32, Int32]), f=f0, args=[Int32(val=9)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%4)])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main262_1 to wasm
// [Wasm] Lowering function init_arr9_5
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=BlockParam(bref=b0, bpref=$b.0))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FreeVar(fvref=^1), Int32(val=1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f5, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function init_arr9_5 to wasm
// [Wasm] Lowering function gen_perm14_3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Unit), mref=m1, fills=[Field(index=0, val=Fn(fref=f5)), Field(index=1, val=FnParam(fref=f3, fpref=$f.0)), Field(index=2, val=Mem(fref=f3, mref=m0))])
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f3, mref=m1), args=[Int32(val=0)])
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Lowering control Return(args=[Mem(fref=f3, mref=m0)])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Local Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Local Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowered function gen_perm14_3 to wasm
// [Wasm] Lowering function compute40_7
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name FreeVar(fvref=^7) -> $^7
// [Wasm] Get Local name FreeVar(fvref=^8) -> $^8
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^7), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^7) -> $^7
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^8), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^8) -> $^8
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^8), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^8) -> $^8
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%19), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%20), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%18), Insn(iref=%21)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%22), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=1), Insn(iref=%23)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%17), Insn(iref=%24)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%16), Insn(iref=%25)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^7), index=0, width=@32), val=Insn(iref=%26))
// [Wasm] Get Local name FreeVar(fvref=^7) -> $^7
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m4, fills=[Init(val=Bool(val=true))])
// [Wasm] Get Local name Mem(fref=f7, mref=m4) -> $f7.m4
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m5, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f7, mref=m5) -> $f7.m5
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[], ty=Unit), mref=m6, fills=[Field(index=0, val=Fn(fref=f17)), Field(index=1, val=Mem(fref=f7, mref=m4)), Field(index=2, val=BlockParam(bref=b0, bpref=$b.0)), Field(index=3, val=FreeVar(fvref=^1)), Field(index=4, val=FreeVar(fvref=^2)), Field(index=5, val=Mem(fref=f7, mref=m5)), Field(index=6, val=FreeVar(fvref=^4))])
// [Wasm] Get Local name Mem(fref=f7, mref=m6) -> $f7.m6
// [Wasm] Get Local name Mem(fref=f7, mref=m6) -> $f7.m6
// [Wasm] Get Local name Mem(fref=f7, mref=m6) -> $f7.m6
// [Wasm] Get Local name Mem(fref=f7, mref=m4) -> $f7.m4
// [Wasm] Get Local name Mem(fref=f7, mref=m6) -> $f7.m6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f7, mref=m6) -> $f7.m6
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Mem(fref=f7, mref=m6) -> $f7.m6
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Mem(fref=f7, mref=m6) -> $f7.m6
// [Wasm] Get Local name Mem(fref=f7, mref=m5) -> $f7.m5
// [Wasm] Get Local name Mem(fref=f7, mref=m6) -> $f7.m6
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f7, mref=m6), args=[])
// [Wasm] Get Local name Mem(fref=f7, mref=m6) -> $f7.m6
// [Wasm] Get Local name Mem(fref=f7, mref=m6) -> $f7.m6
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^8), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^8) -> $^8
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%32), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^8), index=0, width=@32), val=Insn(iref=%33))
// [Wasm] Get Local name FreeVar(fvref=^8) -> $^8
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^6), index=0, width=@32), val=Insn(iref=%14))
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Unit), mref=m0, fills=[Field(index=0, val=Fn(fref=f9)), Field(index=1, val=FreeVar(fvref=^1)), Field(index=2, val=FreeVar(fvref=^2)), Field(index=3, val=FreeVar(fvref=^3))])
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f7, mref=m0), args=[Int32(val=0)])
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[], ty=Unit), mref=m1, fills=[Field(index=0, val=Fn(fref=f11)), Field(index=1, val=BlockParam(bref=b0, bpref=$b.0)), Field(index=2, val=FreeVar(fvref=^4))])
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f7, mref=m1), args=[])
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^3), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Init(val=Insn(iref=%7))])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Mem(fref=f7, mref=m2) -> $f7.m2
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Array(elem=Int32)], ty=Unit), mref=m3, fills=[Field(index=0, val=Fn(fref=f13)), Field(index=1, val=FreeVar(fvref=^3)), Field(index=2, val=FreeVar(fvref=^5))])
// [Wasm] Get Local name Mem(fref=f7, mref=m3) -> $f7.m3
// [Wasm] Get Local name Mem(fref=f7, mref=m3) -> $f7.m3
// [Wasm] Get Local name Mem(fref=f7, mref=m3) -> $f7.m3
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Mem(fref=f7, mref=m3) -> $f7.m3
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f7, mref=m3), args=[Mem(fref=f7, mref=m2)])
// [Wasm] Get Local name Mem(fref=f7, mref=m3) -> $f7.m3
// [Wasm] Get Local name Mem(fref=f7, mref=m2) -> $f7.m2
// [Wasm] Get Local name Mem(fref=f7, mref=m3) -> $f7.m3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^6), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%11), Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Branch(cond=Insn(iref=%13), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f7, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Local Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Local FreeVar(fvref=^5) -> $^5
// [Wasm] Local Insn(iref=%33) -> $%33
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Mem(fref=f7, mref=m5) -> $f7.m5
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local FreeVar(fvref=^4) -> $^4
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local FreeVar(fvref=^7) -> $^7
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local FreeVar(fvref=^6) -> $^6
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Mem(fref=f7, mref=m2) -> $f7.m2
// [Wasm] Local FreeVar(fvref=^8) -> $^8
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Mem(fref=f7, mref=m6) -> $f7.m6
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Mem(fref=f7, mref=m3) -> $f7.m3
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Mem(fref=f7, mref=m4) -> $f7.m4
// [Wasm] Local FreeVar(fvref=^3) -> $^3
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function compute40_7 to wasm
// [Wasm] Lowering function T$start_22
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_22 to wasm
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %5: Apply(ty=Unit, f=Self(fref=f9), args=[Insn(iref=%4)])
// [CoreOpt] eliminated tail rec call %25: Apply(ty=Unit, f=Self(fref=f17), args=[])
// [CoreOpt] eliminated tail rec call %10: Apply(ty=Unit, f=Self(fref=f13), args=[FnParam(fref=f13, fpref=$f.0)])
// [CoreOpt] eliminated tail rec call %14: Apply(ty=Unit, f=Self(fref=f15), args=[Insn(iref=%13)])
// [CoreOpt] eliminated tail rec call %4: Apply(ty=Unit, f=Self(fref=f5), args=[Insn(iref=%3)])
// [CoreOpt] eliminated tail rec call %35: Apply(ty=Unit, f=Self(fref=f7), args=[FnParam(fref=f7, fpref=$f.0)])
