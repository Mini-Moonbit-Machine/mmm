// [Asm] pre_assigned_registers: Insn(iref=%15) -> v26, Insn(iref=%9) -> v20, Insn(iref=%16) -> v27, Insn(iref=%8) -> v19, Mem(fref=f8, mref=m6) -> v2, Insn(iref=%10) -> v21, Mem(fref=f8, mref=m5) -> v7, Insn(iref=%14) -> v25, Mem(fref=f8, mref=m4) -> v3, Insn(iref=%5) -> v16, Mem(fref=f8, mref=m1) -> v6, Insn(iref=%0) -> v11, Insn(iref=%4) -> v15, Mem(fref=f8, mref=m8) -> v4, Insn(iref=%3) -> v14, Insn(iref=%13) -> v24, Insn(iref=%7) -> v18, Mem(fref=f8, mref=m0) -> v5, Mem(fref=f8, mref=m7) -> v10, Insn(iref=%2) -> v13, Insn(iref=%1) -> v12, Insn(iref=%11) -> v22, Mem(fref=f8, mref=m3) -> v9, Mem(fref=f8, mref=m2) -> v8, Self(fref=f8) -> v0, Insn(iref=%6) -> v17, Insn(iref=%12) -> v23
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v5, zero, a0, v45, s11]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, a1, s11]
// [Asm] move_origin: [v45]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, a2, a1, s11]
// [Asm] move_origin: [v5]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v5, zero, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v6]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v8, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v5, zero, v8, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v8, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v5, zero, v7, v8, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v7, v8, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2, v5, zero, v7, v8, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v7, v8, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v7, v8, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v5, v10, v7, v8, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, v10, v7, v8, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v2, v5, v10, v7, v8, v38, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v10, v7, v8, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v10, v7, v8, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v5, a0, v7, v8, v6, s11, v9, v3]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v2, v5, a0, v7, v8, v35, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v5, a0, v7, v8, a1, v6, s11, v9, v3]
// [Asm] move_origin: [v35]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a0, v7, v8, a2, a1, v6, s11, v9, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v2, a0, v7, v8, a2, a1, s11, a3, v9, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v2, a0, a4, v7, a2, a1, s11, a3, v9, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v2, a5, a0, a4, v7, a2, a1, s11, a3, v3]
// [Asm] move_origin: [v9]
// [Asm] defined: a5 is X
// [Asm] defs: [a6]
// [Asm] live_set: [a5, a0, a4, v7, a6, a2, a1, s11, a3, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a6 is X
// [Asm] defs: [a7]
// [Asm] live_set: [a7, a5, a0, a4, v7, a6, a2, a1, s11, a3, v3]
// [Asm] move_origin: [v7]
// [Asm] defined: a7 is X
// [Asm] defs: [t0]
// [Asm] live_set: [a7, t0, a5, a0, a4, v7, a6, a2, a1, s11, a3, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: t0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, s11, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v20]
// [Asm] live_set: [v3, s11, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v3, s11, v7]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v21, s11, v7]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v21, s11, v22]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v21, v22]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v21, v22]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v22]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v4, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v24]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v24]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v24, a0]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v24, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v26]
// [Asm] live_set: [v24]
// [Asm] move_origin: [a0]
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v24]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v24]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v24]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [v27]
// [Asm] move_origin: [a0]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v27]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v27]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("main262.513") clobbered_x: @hashset.of([a5, a0, s1, a4, a6, s2, a2, a1, s0, a3])
// [Asm] Label("main262.513") clobbered_f: @hashset.of([])
// [Asm] subst   addi v5, s11, -36 ->   addi s0, s11, -36
// [Asm] subst   andi s11, v5, -8 ->   andi s11, s0, -8
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(s0)
// [Asm] subst   sw zero, 4(v5) ->   sw zero, 4(s0)
// [Asm] subst   sw zero, 8(v5) ->   sw zero, 8(s0)
// [Asm] subst   sw zero, 12(v5) ->   sw zero, 12(s0)
// [Asm] subst   sw zero, 16(v5) ->   sw zero, 16(s0)
// [Asm] subst   sw zero, 20(v5) ->   sw zero, 20(s0)
// [Asm] subst   sw zero, 24(v5) ->   sw zero, 24(s0)
// [Asm] subst   sw zero, 28(v5) ->   sw zero, 28(s0)
// [Asm] subst   sw zero, 32(v5) ->   sw zero, 32(s0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v45, 9 ->   li a1, 9
// [Asm] subst   mv a2, v5 ->   mv a2, s0
// [Asm] subst   call init_arr9.514 ->   call init_arr9.514
// [Asm] subst   addi v6, s11, -36 ->   addi a3, s11, -36
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a3, -8
// [Asm] subst   sw zero, 0(v6) ->   sw zero, 0(a3)
// [Asm] subst   sw zero, 4(v6) ->   sw zero, 4(a3)
// [Asm] subst   sw zero, 8(v6) ->   sw zero, 8(a3)
// [Asm] subst   sw zero, 12(v6) ->   sw zero, 12(a3)
// [Asm] subst   sw zero, 16(v6) ->   sw zero, 16(a3)
// [Asm] subst   sw zero, 20(v6) ->   sw zero, 20(a3)
// [Asm] subst   sw zero, 24(v6) ->   sw zero, 24(a3)
// [Asm] subst   sw zero, 28(v6) ->   sw zero, 28(a3)
// [Asm] subst   sw zero, 32(v6) ->   sw zero, 32(a3)
// [Asm] subst   addi v8, s11, -36 ->   addi a4, s11, -36
// [Asm] subst   andi s11, v8, -8 ->   andi s11, a4, -8
// [Asm] subst   sw zero, 0(v8) ->   sw zero, 0(a4)
// [Asm] subst   sw zero, 4(v8) ->   sw zero, 4(a4)
// [Asm] subst   sw zero, 8(v8) ->   sw zero, 8(a4)
// [Asm] subst   sw zero, 12(v8) ->   sw zero, 12(a4)
// [Asm] subst   sw zero, 16(v8) ->   sw zero, 16(a4)
// [Asm] subst   sw zero, 20(v8) ->   sw zero, 20(a4)
// [Asm] subst   sw zero, 24(v8) ->   sw zero, 24(a4)
// [Asm] subst   sw zero, 28(v8) ->   sw zero, 28(a4)
// [Asm] subst   sw zero, 32(v8) ->   sw zero, 32(a4)
// [Asm] subst   addi v9, s11, -4 ->   addi a5, s11, -4
// [Asm] subst   andi s11, v9, -8 ->   andi s11, a5, -8
// [Asm] subst   sw zero, 0(v9) ->   sw zero, 0(a5)
// [Asm] subst   addi v3, s11, -4 ->   addi s1, s11, -4
// [Asm] subst   andi s11, v3, -8 ->   andi s11, s1, -8
// [Asm] subst   sw zero, 0(v3) ->   sw zero, 0(s1)
// [Asm] subst   addi v7, s11, -4 ->   addi s2, s11, -4
// [Asm] subst   andi s11, v7, -8 ->   andi s11, s2, -8
// [Asm] subst   sw zero, 0(v7) ->   sw zero, 0(s2)
// [Asm] subst   addi v2, s11, -4 ->   addi a6, s11, -4
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a6, -8
// [Asm] subst   sw zero, 0(v2) ->   sw zero, 0(a6)
// [Asm] subst   addi v10, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi s11, v10, -8 ->   andi s11, a0, -8
// [Asm] subst   li v38, 9 ->   li a1, 9
// [Asm] subst   sw v38, 0(v10) ->   sw a1, 0(a0)
// [Asm] subst   li v35, 9 ->   li a1, 9
// [Asm] subst   mv a2, v5 ->   mv a2, s0
// [Asm] subst   mv a7, v7 ->   mv a7, s2
// [Asm] subst   mv t0, v3 ->   mv t0, s1
// [Asm] subst   call compute40.515 ->   call compute40.515
// [Asm] subst   lw v21, 0(v3) ->   lw a0, 0(s1)
// [Asm] subst   lw v22, 0(v7) ->   lw a2, 0(s2)
// [Asm] subst   addi v4, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a1, -8
// [Asm] subst   sw v21, 0(v4) ->   sw a0, 0(a1)
// [Asm] subst   sw v22, 4(v4) ->   sw a2, 4(a1)
// [Asm] subst   lw v24, 0(v4) ->   lw s0, 0(a1)
// [Asm] subst   lw v25, 4(v4) ->   lw a0, 4(a1)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v24 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v13, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v12, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v8, Insn(iref=%4) -> v11
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v6, zero, v13, v7]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v13]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("init_arr9.514") clobbered_x: @hashset.of([a2, a1, a3, a0, a4])
// [Asm] Label("init_arr9.514") clobbered_f: @hashset.of([])
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   addi v8, v6, -1 ->   addi a0, a2, -1
// [Asm] subst   blt v8, v5, .init_arr9.514_2 ->   blt a0, a1, .init_arr9.514_2
// [Asm] subst   mv v2, a0 ->   mv a4, a0
// [Asm] subst   mv v3, a1 ->   mv a3, a1
// [Asm] subst   mv v4, a2 ->   mv a0, a2
// [Asm] subst   mv v5, v2 ->   mv a1, a4
// [Asm] subst   mv v6, v3 ->   mv a2, a3
// [Asm] subst   mv v7, v4 ->   mv a3, a0
// [Asm] subst   th.surw v5, v7, v5, 2 ->   th.surw a1, a3, a1, 2
// [Asm] subst   addi v13, v5, 1 ->   addi a0, a1, 1
// [Asm] subst   mv v5, v13 ->   mv a1, a0
// [Asm] subst   j .init_arr9.514_0 ->   j .init_arr9.514_0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v10, Insn(iref=%3) -> v8, FnParam(fref=f5, fpref=$f.0) -> v2, Self(fref=f5) -> v0, Insn(iref=%7) -> v13, FnParam(fref=f5, fpref=$f.2) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%9) -> v11, Insn(iref=%2) -> v7, Insn(iref=%1) -> v6, Insn(iref=%10) -> v9, Insn(iref=%5) -> v12, Insn(iref=%0) -> v5, FnParam(fref=f5, fpref=$f.1) -> v3
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f5, fpref=$f.0), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%3), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f5, fpref=$f.0), Insn(iref=%1)])
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v8, v2, v4, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] Label("move_perm1_forward197.521") clobbered_x: @hashset.of([a2, a1, a3, a0, a4])
// [Asm] Label("move_perm1_forward197.521") clobbered_f: @hashset.of([])
// [Asm] subst   addi v8, v2, 1 ->   addi a0, a3, 1
// [Asm] subst   th.lurw v10, v3, v8, 2 ->   th.lurw a4, a1, a0, 2
// [Asm] subst   th.surw v10, v3, v2, 2 ->   th.surw a4, a1, a3, 2
// [Asm] subst   call move_perm1_forward197.521 ->   call move_perm1_forward197.521
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   mv v2, a0 ->   mv a3, a0
// [Asm] subst   lw v5, 0(v4) ->   lw a0, 0(a2)
// [Asm] subst   addi v6, v5, -1 ->   addi a0, a0, -1
// [Asm] subst   blt v6, v2, .move_perm1_forward197.521_2 ->   blt a0, a3, .move_perm1_forward197.521_2
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   j .move_perm1_forward197.521_3 ->   j .move_perm1_forward197.521_3
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v7, Insn(iref=%7) -> v11, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%2) -> v6, Insn(iref=%9) -> v13, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v5, Insn(iref=%8) -> v12, Self(fref=f2) -> v0, Insn(iref=%10) -> v8, Insn(iref=%6) -> v10, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%5) -> v9, Insn(iref=%0) -> v4
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%3), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=1)])
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v2, v4, zero, v20, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v7, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v13]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] move_origin: [v13]
// [Asm] defined: v14 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("init_count59.517") clobbered_x: @hashset.of([a2, a1, a3, a0])
// [Asm] Label("init_count59.517") clobbered_f: @hashset.of([])
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   j .init_count59.517_3 ->   j .init_count59.517_3
// [Asm] subst   lw v4, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   li v20, 1 ->   li a3, 1
// [Asm] subst   beq v4, v20, .init_count59.517_1 ->   beq a2, a3, .init_count59.517_1
// [Asm] subst   lw v6, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   addi v7, v6, -1 ->   addi a3, a2, -1
// [Asm] subst   th.surw v6, v3, v7, 2 ->   th.surw a2, a1, a3, 2
// [Asm] subst   lw v10, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   addi v11, v10, -1 ->   addi a2, a2, -1
// [Asm] subst   sw v11, 0(v2) ->   sw a2, 0(a0)
// [Asm] subst   call init_count59.517 ->   call init_count59.517
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f18) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("T$start") clobbered_x: @hashset.of([a0])
// [Asm] Label("T$start") clobbered_f: @hashset.of([])
// [Asm] subst   call main262.513 ->   call main262.513
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v83, Insn(iref=%82) -> v127, Insn(iref=%33) -> v44, BlockParam(bref=b54, bpref=$b.2) -> v29, Insn(iref=%76) -> v121, BlockParam(bref=b10, bpref=$b.0) -> v74, Insn(iref=%10) -> v77, BlockParam(bref=b0, bpref=$b.4) -> v19, Insn(iref=%59) -> v100, BlockParam(bref=b40, bpref=$b.2) -> v47, BlockParam(bref=b67, bpref=$b.0) -> v129, Insn(iref=%4) -> v36, Insn(iref=%65) -> v109, Insn(iref=%26) -> v93, BlockParam(bref=b0, bpref=$b.6) -> v21, Mem(fref=f7, mref=m31) -> v14, BlockParam(bref=b9, bpref=$b.0) -> v34, Insn(iref=%31) -> v42, Insn(iref=%64) -> v131, Insn(iref=%78) -> v124, Insn(iref=%54) -> v31, Insn(iref=%60) -> v101, Insn(iref=%67) -> v111, Insn(iref=%13) -> v81, Insn(iref=%101) -> v117, Insn(iref=%79) -> v128, Insn(iref=%55) -> v32, Insn(iref=%66) -> v110, Insn(iref=%48) -> v66, Insn(iref=%23) -> v90, Insn(iref=%20) -> v87, BlockParam(bref=b40, bpref=$b.0) -> v45, Insn(iref=%36) -> v55, Mem(fref=f7, mref=m0) -> v13, FnParam(fref=f7, fpref=$f.7) -> v9, Insn(iref=%50) -> v68, Insn(iref=%14) -> v82, Insn(iref=%80) -> v125, BlockParam(bref=b60, bpref=$b.1) -> v95, BlockParam(bref=b68, bpref=$b.0) -> v132, BlockParam(bref=b6, bpref=$b.0) -> v26, Insn(iref=%11) -> v78, BlockParam(bref=b60, bpref=$b.2) -> v96, Insn(iref=%86) -> v70, BlockParam(bref=b31, bpref=$b.2) -> v41, Insn(iref=%28) -> v104, Insn(iref=%9) -> v76, BlockParam(bref=b54, bpref=$b.0) -> v27, Insn(iref=%45) -> v62, BlockParam(bref=b0, bpref=$b.2) -> v17, Insn(iref=%70) -> v115, Insn(iref=%0) -> v24, Insn(iref=%61) -> v107, BlockParam(bref=b5, bpref=$b.0) -> v80, BlockParam(bref=b40, bpref=$b.3) -> v48, Insn(iref=%12) -> v79, BlockParam(bref=b0, bpref=$b.7) -> v22, BlockParam(bref=b69, bpref=$b.0) -> v102, Insn(iref=%41) -> v50, Insn(iref=%63) -> v130, Self(fref=f7) -> v0, Insn(iref=%8) -> v75, BlockParam(bref=b34, bpref=$b.0) -> v73, Insn(iref=%25) -> v92, Insn(iref=%39) -> v58, Insn(iref=%81) -> v126, Insn(iref=%96) -> v122, FnParam(fref=f7, fpref=$f.4) -> v6, Insn(iref=%56) -> v134, Insn(iref=%49) -> v67, Insn(iref=%42) -> v51, FnParam(fref=f7, fpref=$f.2) -> v4, Mem(fref=f7, mref=m1) -> v11, Insn(iref=%68) -> v112, BlockParam(bref=b60, bpref=$b.3) -> v97, Insn(iref=%92) -> v59, Insn(iref=%73) -> v118, FnParam(fref=f7, fpref=$f.0) -> v2, BlockParam(bref=b0, bpref=$b.8) -> v23, Insn(iref=%74) -> v119, Insn(iref=%38) -> v57, BlockParam(bref=b54, bpref=$b.1) -> v28, Insn(iref=%75) -> v120, Insn(iref=%53) -> v72, BlockParam(bref=b0, bpref=$b.1) -> v16, Insn(iref=%5) -> v37, Insn(iref=%91) -> v64, Insn(iref=%19) -> v86, Mem(fref=f7, mref=m2) -> v12, FnParam(fref=f7, fpref=$f.8) -> v10, BlockParam(bref=b11, bpref=$b.0) -> v103, Insn(iref=%71) -> v116, FnParam(fref=f7, fpref=$f.3) -> v5, BlockParam(bref=b31, bpref=$b.0) -> v39, BlockParam(bref=b31, bpref=$b.1) -> v40, BlockParam(bref=b43, bpref=$b.0) -> v52, BlockParam(bref=b0, bpref=$b.5) -> v20, BlockParam(bref=b57, bpref=$b.0) -> v33, BlockParam(bref=b0, bpref=$b.3) -> v18, Insn(iref=%51) -> v69, Insn(iref=%77) -> v123, BlockParam(bref=b37, bpref=$b.0) -> v53, Insn(iref=%52) -> v71, Insn(iref=%44) -> v61, Insn(iref=%32) -> v43, Insn(iref=%58) -> v136, FnParam(fref=f7, fpref=$f.6) -> v8, Insn(iref=%1) -> v25, BlockParam(bref=b54, bpref=$b.3) -> v30, Insn(iref=%57) -> v135, Insn(iref=%6) -> v38, Insn(iref=%35) -> v54, Insn(iref=%62) -> v108, FnParam(fref=f7, fpref=$f.1) -> v3, BlockParam(bref=b60, bpref=$b.0) -> v94, BlockParam(bref=b60, bpref=$b.4) -> v98, FnParam(fref=f7, fpref=$f.5) -> v7, Insn(iref=%46) -> v63, Insn(iref=%24) -> v91, Insn(iref=%37) -> v56, BlockParam(bref=b0, bpref=$b.0) -> v15, Insn(iref=%29) -> v105, Insn(iref=%47) -> v65, Insn(iref=%102) -> v114, Insn(iref=%3) -> v35, BlockParam(bref=b40, bpref=$b.1) -> v46, Insn(iref=%18) -> v85, Insn(iref=%22) -> v89, Insn(iref=%17) -> v84, Insn(iref=%43) -> v60, BlockParam(bref=b60, bpref=$b.5) -> v99, Insn(iref=%30) -> v106, Insn(iref=%21) -> v88, Insn(iref=%40) -> v49, Insn(iref=%69) -> v113, Insn(iref=%105) -> v133
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b54, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%77)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%76), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%71), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%68), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%61), BlockParam(bref=b60, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%59), Bool(val=true)])
// [Asm] skipping Op(ty=Int32, op=Mul, args=[Insn(iref=%17), Int32(val=2)])
// [Asm] skipping Op(ty=Int32, op=Div, args=[Insn(iref=%15), Int32(val=2)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%8), Insn(iref=%9)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%50), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%46), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b40, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b40, bpref=$b.0), Insn(iref=%41)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%31), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b54, bpref=$b.0), Insn(iref=%54)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%0)])
// [Asm] defs: [v75]
// [Asm] live_set: [v16, v21, v18, v75, zero, v20, v23, v22, v19, v17, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: [v76]
// [Asm] live_set: [v16, v21, v18, v75, zero, v20, v23, v22, v19, v17, v15, s11, v76]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v23, v19, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: [v103]
// [Asm] live_set: [v16, v21, v18, zero, v23, v20, v22, v103, v19, v17, v15, s11]
// [Asm] move_origin: [v102]
// [Asm] defined: v103 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v16, v21, v22, v41, v17, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v14, v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v26]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v53]
// [Asm] live_set: [v16, v21, v53, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: [v52]
// [Asm] defined: v53 is X
// [Asm] defs: [v78]
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v23, v78, v19, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v78 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v23, v19, v17, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v80]
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v23, v19, v80, v17, v15, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: v80 is X
// [Asm] defs: [v125]
// [Asm] live_set: [v16, v21, v125, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v20, v23, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v125 is X
// [Asm] defs: [v126]
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v126, v20, v23, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v126 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v129]
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v129]
// [Asm] move_origin: [zero]
// [Asm] defined: v129 is X
// [Asm] defs: [v81]
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v81, v15]
// [Asm] move_origin: []
// [Asm] defined: v81 is X
// [Asm] defs: [v82]
// [Asm] live_set: [v16, v21, v22, v17, s11, v82, v18, zero, v23, v20, v19, v81, v15]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: [v83]
// [Asm] live_set: [v16, v21, v22, v17, s11, v82, v18, zero, v23, v20, v19, v81, v15, v83]
// [Asm] move_origin: []
// [Asm] defined: v83 is X
// [Asm] defs: [v86]
// [Asm] live_set: [v16, v21, v22, v17, s11, v86, v82, v18, zero, v23, v20, v19, v81, v15]
// [Asm] move_origin: []
// [Asm] defined: v86 is X
// [Asm] defs: [v87]
// [Asm] live_set: [v16, v87, v21, v22, v17, s11, v82, v18, zero, v23, v20, v19, v81, v15]
// [Asm] move_origin: []
// [Asm] defined: v87 is X
// [Asm] defs: [v161]
// [Asm] live_set: [v16, v87, v21, v22, v17, s11, v82, v18, v161, zero, v23, v20, v19, v81, v15]
// [Asm] move_origin: []
// [Asm] defined: v161 is X
// [Asm] defs: [v88]
// [Asm] live_set: [v16, v21, v22, v88, v17, s11, v82, v18, zero, v23, v20, v19, v81, v15]
// [Asm] move_origin: []
// [Asm] defined: v88 is X
// [Asm] defs: [v89]
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v81, v15, v89]
// [Asm] move_origin: []
// [Asm] defined: v89 is X
// [Asm] defs: [v90]
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v90, v15]
// [Asm] move_origin: []
// [Asm] defined: v90 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v16, v21, v22, v17, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v158]
// [Asm] live_set: [v11, v16, v21, v158, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v158 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v16, v21, v22, v17, v12, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v16, v21, v22, v17, v12, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v21, v18, zero, v22, v23, v20, v19, v17, v12, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: [v52]
// [Asm] live_set: [v16, v21, v22, v41, v17, v52, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: [zero]
// [Asm] defined: v52 is X
// [Asm] defs: [v104]
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v104, v17, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v104 is X
// [Asm] defs: [v105]
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v105, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v105 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v16]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v17]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v18]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v19]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v20]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v21]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v22]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v23]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v102]
// [Asm] live_set: [v16, v21, v18, zero, v23, v20, v22, v19, v17, v102, v15, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: v102 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v46, v16, v21, v49, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v50, v45, v19, v47, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v129]
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v129]
// [Asm] move_origin: [zero]
// [Asm] defined: v129 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v129]
// [Asm] move_origin: []
// [Asm] defs: [v109]
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v109, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v109 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v16, v21, a0, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v16, v21, a0, v22, v95, v17, a1, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: [v97]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v16, v21, a0, v22, v95, a2, v17, a1, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: [v98]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v16, v21, a0, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v111]
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: [a0]
// [Asm] defined: v111 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v112]
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v112, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v112 is X
// [Asm] defs: [v113]
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v113, v98, v94, v112, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v113 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v116]
// [Asm] live_set: [v116, v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v116 is X
// [Asm] defs: [v118]
// [Asm] live_set: [v116, v16, v21, v22, v95, v17, s11, v98, v118, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v118 is X
// [Asm] defs: [v119]
// [Asm] live_set: [v116, v16, v21, v22, v119, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v119 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v121]
// [Asm] live_set: [v16, v21, v121, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v121 is X
// [Asm] defs: [v123]
// [Asm] live_set: [v16, v21, v22, v123, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v123 is X
// [Asm] defs: [v141]
// [Asm] live_set: [v16, v21, v22, v123, v95, v141, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v141 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v27, v20, v23, v19, v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v16, v21, v22, v17, s11, v28, v18, zero, v27, v20, v23, v19, v15]
// [Asm] move_origin: [v16]
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] move_origin: [v17]
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] move_origin: [v18]
// [Asm] defined: v30 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v190]
// [Asm] live_set: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11, v24, v190]
// [Asm] move_origin: []
// [Asm] defined: v190 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v74]
// [Asm] live_set: [v16, v21, v18, zero, v22, v23, v20, v19, v74, v17, s11, v15]
// [Asm] move_origin: [v73]
// [Asm] defined: v74 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v132]
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v132]
// [Asm] move_origin: [zero]
// [Asm] defined: v132 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v132]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v31, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v16, v21, a0, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v16, v21, a0, v22, v17, a1, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: [v19]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v16, v21, a0, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v35]
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: [a0]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v16, v21, v13, v22, v37, v17, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v16, v21, v13, v22, v37, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, v13, zero, v23, v20, v22, v19, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: [v45]
// [Asm] live_set: [v16, v14, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v45, v19, v15, v40]
// [Asm] move_origin: [zero]
// [Asm] defined: v45 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v45, v19, v15, v40]
// [Asm] move_origin: [v14]
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm] move_origin: [v39]
// [Asm] defined: v47 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm] move_origin: [v40]
// [Asm] defined: v48 is X
// [Asm] defs: []
// [Asm] live_set: [a7, t0, a5, zero, a0, a4, a6, a2, a1, s11, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a7, t0, a5, zero, a4, a6, a2, a1, s11, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a7, t0, a5, zero, a4, a6, a2, s11, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a7, t0, a5, zero, a4, a6, v4, s11, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, a7, t0, v5, a5, zero, a4, a6, v4, s11, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, a7, t0, v5, a5, zero, a6, v4, v6, s11, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, a7, t0, v5, zero, v7, a6, v4, v6, s11, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, a7, t0, v5, zero, v8, v7, v4, v6, s11, v3]
// [Asm] move_origin: [a6]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, t0, v5, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: [a7]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v5, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: [t0]
// [Asm] defined: v10 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v16, v5, v10, zero, v8, v7, v17, v6, s11, v15, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v16, v18, v10, zero, v8, v7, v17, v6, s11, v15, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v16, v18, v10, zero, v8, v7, v19, v17, v15, s11, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v16, v18, v10, zero, v20, v8, v19, v17, v15, s11, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v16, v18, v21, v10, zero, v20, v19, v17, v15, s11, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v16, v18, v21, v10, zero, v20, v22, v19, v17, v15, s11]
// [Asm] move_origin: [v9]
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v10]
// [Asm] defined: v23 is X
// [Asm] defs: [v80]
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v23, v19, v80, v17, v15, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: v80 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v23, v19, v80, v17, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v134]
// [Asm] live_set: [v16, v21, v22, v30, v134, v17, s11, v28, v18, v29, zero, v20, v23, v27, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v134 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v20, v23, v27, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v136]
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v20, v23, v19, v136, v15]
// [Asm] move_origin: []
// [Asm] defined: v136 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] move_origin: [v136]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] move_origin: [v28]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] move_origin: [v29]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] move_origin: [v30]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v60]
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v60, v48, v18, zero, v23, v20, v45, v19, v47, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: []
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v23, v20, v45, v19, v47, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: [v62]
// [Asm] live_set: [v62, v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v23, v20, v45, v19, v47, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v63, v48, v18, zero, v23, v20, v45, v19, v47, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v63 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v46, v16, v21, v22, v41, v65, v17, s11, v39, v48, v18, zero, v23, v20, v45, v19, v47, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: []
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v23, v20, v45, v19, v47, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: [v67]
// [Asm] live_set: [v46, v16, v21, v22, v67, v41, v17, s11, v39, v48, v18, zero, v23, v20, v45, v19, v47, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: [v68]
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v68, v23, v20, v45, v19, v47, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: [v69]
// [Asm] live_set: [v46, v16, v69, v21, v22, v41, v17, s11, v39, v48, v18, zero, v68, v23, v20, v45, v19, v47, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: []
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: [v72]
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v72, v48, v18, zero, v20, v23, v19, v47, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm] move_origin: [v72]
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm] move_origin: [v46]
// [Asm] defs: []
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm] move_origin: [v47]
// [Asm] defs: []
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm] move_origin: [v48]
// [Asm] defs: []
// [Asm] live_set: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: [v100]
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15, v100]
// [Asm] move_origin: []
// [Asm] defined: v100 is X
// [Asm] defs: [v154]
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15, v154, v100]
// [Asm] move_origin: []
// [Asm] defined: v154 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11, v33]
// [Asm] move_origin: [zero]
// [Asm] defined: v33 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v16, v21, v18, zero, v22, v23, v20, v19, v17, s11, v15, v73]
// [Asm] move_origin: [zero]
// [Asm] defined: v73 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move_origin: [v94]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move_origin: [v95]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move_origin: [v96]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move_origin: [v97]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move_origin: [v98]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move_origin: [v99]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v132]
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v132]
// [Asm] move_origin: [zero]
// [Asm] defined: v132 is X
// [Asm] defs: [v94]
// [Asm] live_set: [v11, v16, v21, v22, v17, s11, v12, v94, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: [v16]
// [Asm] defined: v94 is X
// [Asm] defs: [v95]
// [Asm] live_set: [v11, v16, v21, v22, v95, v17, s11, v94, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: [v12]
// [Asm] defined: v95 is X
// [Asm] defs: [v96]
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v94, v18, v96, zero, v23, v20, v19, v15]
// [Asm] move_origin: [v11]
// [Asm] defined: v96 is X
// [Asm] defs: [v97]
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move_origin: [v17]
// [Asm] defined: v97 is X
// [Asm] defs: [v98]
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move_origin: [v15]
// [Asm] defined: v98 is X
// [Asm] defs: [v99]
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move_origin: [v19]
// [Asm] defined: v99 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v16, v21, v22, v17, s11, v39, v18, zero, v20, v23, v19, v15]
// [Asm] move_origin: [v13]
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v16, v21, v22, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: [v18]
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: [v20]
// [Asm] defined: v41 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v16, v21, v42, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: [v54]
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v54, v40]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: [v56]
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, v56, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v57, v40]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: [v39]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: [v40]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: [v41]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11, v34]
// [Asm] move_origin: [v33]
// [Asm] defined: v34 is X
// [Asm] defs: [v107]
// [Asm] live_set: [v16, v21, v22, v95, v107, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v107 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v26]
// [Asm] move_origin: [zero]
// [Asm] defined: v26 is X
// [Asm] Label("compute40.515") clobbered_x: @hashset.of([s7, a5, a0, s1, s2, s5, a2, a1, s3, a3, s10, s6, a7, t0, s8, s9, s4, a4, a6, s0])
// [Asm] Label("compute40.515") clobbered_f: @hashset.of([])
// [Asm] subst   lw v75, 0(v23) ->   lw a0, 0(s4)
// [Asm] subst   lw v76, 0(v20) ->   lw a1, 0(s3)
// [Asm] subst   blt v76, v75, .compute40.515_4 ->   blt a1, a0, .compute40.515_4
// [Asm] subst   addi v14, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi s11, v14, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v14) ->   sw zero, 0(a0)
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v78, 0(v20) ->   lw a0, 0(s3)
// [Asm] subst   sw v78, 0(v23) ->   sw a0, 0(s4)
// [Asm] subst   mv v80, zero ->   mv a0, zero
// [Asm] subst   lw v125, 0(v98) ->   lw a0, 0(s8)
// [Asm] subst   addi v126, v125, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v126, 0(v98) ->   sw a0, 0(s8)
// [Asm] subst   mv v129, zero ->   mv a0, zero
// [Asm] subst   lw v81, 0(v22) ->   lw a0, 0(s5)
// [Asm] subst   lw v82, 0(v20) ->   lw a1, 0(s3)
// [Asm] subst   lw v83, 0(v21) ->   lw a2, 0(s1)
// [Asm] subst   andi v86, v83, 1 ->   andi a2, a2, 1
// [Asm] subst   slli v87, v86, 1 ->   slli a2, a2, 1
// [Asm] subst   li v161, 1 ->   li a3, 1
// [Asm] subst   sub v88, v161, v87 ->   sub a2, a3, a2
// [Asm] subst   mul v89, v82, v88 ->   mul a1, a1, a2
// [Asm] subst   add v90, v81, v89 ->   add a0, a0, a1
// [Asm] subst   sw v90, 0(v22) ->   sw a0, 0(s5)
// [Asm] subst   addi v11, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi s11, v11, -8 ->   andi s11, a0, -8
// [Asm] subst   li v158, 1 ->   li a1, 1
// [Asm] subst   sw v158, 0(v11) ->   sw a1, 0(a0)
// [Asm] subst   addi v12, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v12, -8 ->   andi s11, a1, -8
// [Asm] subst   sw zero, 0(v12) ->   sw zero, 0(a1)
// [Asm] subst   mv v52, zero ->   mv a0, zero
// [Asm] subst   lw v104, 0(v21) ->   lw a0, 0(s1)
// [Asm] subst   addi v105, v104, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v105, 0(v21) ->   sw a0, 0(s1)
// [Asm] subst   j .compute40.515_0 ->   j .compute40.515_0
// [Asm] subst   mv v102, zero ->   mv a0, zero
// [Asm] subst   lw v49, 0(v47) ->   lw a0, 0(a1)
// [Asm] subst   srai v50, v49, 1 ->   srai a0, a0, 1
// [Asm] subst   blt v50, v45, .compute40.515_42 ->   blt a0, a2, .compute40.515_42
// [Asm] subst   sw zero, 0(v96) ->   sw zero, 0(s10)
// [Asm] subst   mv v129, zero ->   mv a0, zero
// [Asm] subst   j .compute40.515_67 ->   j .compute40.515_67
// [Asm] subst   lw v109, 0(v97) ->   lw a0, 0(s7)
// [Asm] subst   sw v109, 0(v95) ->   sw a0, 0(s9)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v97 ->   mv a1, s7
// [Asm] subst   mv a2, v98 ->   mv a2, s8
// [Asm] subst   call move_perm1_forward197.521 ->   call move_perm1_forward197.521
// [Asm] subst   lw v112, 0(v98) ->   lw a0, 0(s8)
// [Asm] subst   lw v113, 0(v95) ->   lw a1, 0(s9)
// [Asm] subst   th.surw v113, v97, v112, 2 ->   th.surw a1, s7, a0, 2
// [Asm] subst   lw v116, 0(v98) ->   lw a0, 0(s8)
// [Asm] subst   th.lurw v118, v99, v116, 2 ->   th.lurw a1, s6, a0, 2
// [Asm] subst   addi v119, v118, -1 ->   addi a1, a1, -1
// [Asm] subst   th.surw v119, v99, v116, 2 ->   th.surw a1, s6, a0, 2
// [Asm] subst   lw v121, 0(v98) ->   lw a0, 0(s8)
// [Asm] subst   th.lurw v123, v99, v121, 2 ->   th.lurw a0, s6, a0, 2
// [Asm] subst   li v141, 1 ->   li a1, 1
// [Asm] subst   bge v123, v141, .compute40.515_65 ->   bge a0, a1, .compute40.515_65
// [Asm] subst   mv v27, zero ->   mv a0, zero
// [Asm] subst   mv v28, v16 ->   mv a2, s0
// [Asm] subst   mv v29, v17 ->   mv a3, s7
// [Asm] subst   mv v30, v18 ->   mv a4, s2
// [Asm] subst   lw v24, 0(v15) ->   lw a0, 0(s8)
// [Asm] subst   li v190, 1 ->   li a1, 1
// [Asm] subst   blt v24, v190, .compute40.515_2 ->   blt a0, a1, .compute40.515_2
// [Asm] subst   sw zero, 0(v96) ->   sw zero, 0(s10)
// [Asm] subst   sw zero, 0(v98) ->   sw zero, 0(s8)
// [Asm] subst   mv v132, zero ->   mv a0, zero
// [Asm] subst   j .compute40.515_68 ->   j .compute40.515_68
// [Asm] subst   addi v31, v28, -1 ->   addi a1, a2, -1
// [Asm] subst   blt v31, v27, .compute40.515_56 ->   blt a1, a0, .compute40.515_56
// [Asm] subst   mv a0, v15 ->   mv a0, s8
// [Asm] subst   mv a1, v19 ->   mv a1, s6
// [Asm] subst   call init_count59.517 ->   call init_count59.517
// [Asm] subst   sw zero, 0(v20) ->   sw zero, 0(s3)
// [Asm] subst   lw v37, 0(v18) ->   lw a0, 0(s2)
// [Asm] subst   addi v13, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v13, -8 ->   andi s11, a1, -8
// [Asm] subst   sw v37, 0(v13) ->   sw a0, 0(a1)
// [Asm] subst   mv v45, zero ->   mv a2, zero
// [Asm] subst   mv v46, v14 ->   mv a5, a0
// [Asm] subst   mv v15, v2 ->   mv s8, a0
// [Asm] subst   mv v16, v3 ->   mv s0, a1
// [Asm] subst   mv v17, v4 ->   mv s7, a2
// [Asm] subst   mv v18, v5 ->   mv s2, a3
// [Asm] subst   mv v19, v6 ->   mv s6, a4
// [Asm] subst   mv v20, v7 ->   mv s3, a5
// [Asm] subst   mv v21, v8 ->   mv s1, a6
// [Asm] subst   mv v22, v9 ->   mv s5, a7
// [Asm] subst   mv v23, v10 ->   mv s4, t0
// [Asm] subst   mv v80, zero ->   mv a0, zero
// [Asm] subst   j .compute40.515_5 ->   j .compute40.515_5
// [Asm] subst   th.lurw v134, v29, v27, 2 ->   th.lurw a1, a3, a0, 2
// [Asm] subst   th.surw v134, v30, v27, 2 ->   th.surw a1, a4, a0, 2
// [Asm] subst   addi v136, v27, 1 ->   addi a0, a0, 1
// [Asm] subst   j .compute40.515_54 ->   j .compute40.515_54
// [Asm] subst   th.lurw v60, v48, v45, 2 ->   th.lurw a0, a4, a2, 2
// [Asm] subst   sw v60, 0(v46) ->   sw a0, 0(a5)
// [Asm] subst   lw v62, 0(v47) ->   lw a0, 0(a1)
// [Asm] subst   sub v63, v62, v45 ->   sub a0, a0, a2
// [Asm] subst   th.lurw v65, v48, v63, 2 ->   th.lurw a0, a4, a0, 2
// [Asm] subst   th.surw v65, v48, v45, 2 ->   th.surw a0, a4, a2, 2
// [Asm] subst   lw v67, 0(v47) ->   lw a0, 0(a1)
// [Asm] subst   sub v68, v67, v45 ->   sub a0, a0, a2
// [Asm] subst   lw v69, 0(v46) ->   lw a6, 0(a5)
// [Asm] subst   th.surw v69, v48, v68, 2 ->   th.surw a6, a4, a0, 2
// [Asm] subst   addi v72, v45, 1 ->   addi a0, a2, 1
// [Asm] subst   mv v45, v72 ->   mv a2, a0
// [Asm] subst   j .compute40.515_40 ->   j .compute40.515_40
// [Asm] subst   lw v100, 0(v96) ->   lw a0, 0(s10)
// [Asm] subst   li v154, 1 ->   li a1, 1
// [Asm] subst   bne v100, v154, .compute40.515_62 ->   bne a0, a1, .compute40.515_62
// [Asm] subst   mv v33, zero ->   mv a0, zero
// [Asm] subst   mv v73, zero ->   mv a0, zero
// [Asm] subst   j .compute40.515_60 ->   j .compute40.515_60
// [Asm] subst   mv v132, zero ->   mv a0, zero
// [Asm] subst   mv v95, v12 ->   mv s9, a1
// [Asm] subst   mv v96, v11 ->   mv s10, a0
// [Asm] subst   mv v40, v18 ->   mv a4, s2
// [Asm] subst   mv v41, v20 ->   mv a3, s3
// [Asm] subst   lw v42, 0(v39) ->   lw a0, 0(a1)
// [Asm] subst   beq v42, zero, .compute40.515_32 ->   beq a0, zero, .compute40.515_32
// [Asm] subst   lw v54, 0(v40) ->   lw a0, 0(a4)
// [Asm] subst   sw v54, 0(v39) ->   sw a0, 0(a1)
// [Asm] subst   lw v56, 0(v41) ->   lw a0, 0(a3)
// [Asm] subst   addi v57, v56, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v57, 0(v41) ->   sw a0, 0(a3)
// [Asm] subst   j .compute40.515_31 ->   j .compute40.515_31
// [Asm] subst   lw v107, 0(v98) ->   lw a0, 0(s8)
// [Asm] subst   beq v107, v94, .compute40.515_63 ->   beq a0, s0, .compute40.515_63
// [Asm] subst   mv v26, zero ->   mv a0, zero
// [Asm] before colored: # leaf false
// [Asm] main262.513:
// [Asm] # block info: defs: [v22, a1, s11, fa1, fa2, ft6, a4, fa6, v20, v27, a6, ft10, ft5, v6, ft4, v5, ft9, v10, fa4, ft2, a3, a7, fa7, fa3, ft3, v45, t2, v3, v25, t1, v26, v7, ft0, ft1, v12, v8, v4, ft7, v21, a5, a0, a2, v24, v9, ft8, t3, t0, fa5, fa0, v35, v38, t4, v2], uses: [v2, v25, v22, v7, a1, s11, zero, a4, v27, v8, a6, v4, v6, v5, v10, v21, a5, a0, a2, a3, v24, v9, a7, t0, v45, v35, v38, v3], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main262.513_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   addi v5, s11, -36  # live: [v5, zero]
// [Asm]   andi s11, v5, -8  # live: [v5, zero, s11]
// [Asm]   sw zero, 0(v5)  # live: [v5, zero, s11]
// [Asm]   sw zero, 4(v5)  # live: [v5, zero, s11]
// [Asm]   sw zero, 8(v5)  # live: [v5, zero, s11]
// [Asm]   sw zero, 12(v5)  # live: [v5, zero, s11]
// [Asm]   sw zero, 16(v5)  # live: [v5, zero, s11]
// [Asm]   sw zero, 20(v5)  # live: [v5, zero, s11]
// [Asm]   sw zero, 24(v5)  # live: [v5, zero, s11]
// [Asm]   sw zero, 28(v5)  # live: [v5, zero, s11]
// [Asm]   sw zero, 32(v5)  # live: [v5, zero, s11]
// [Asm]   # save_ctx2  # live: [v5, zero, s11]
// [Asm]   mv a0, zero  # live: [v5, zero, a0, s11]
// [Asm]   li v45, 9  # live: [v5, zero, a0, v45, s11]
// [Asm]   mv a1, v45  # live: [v5, zero, a0, a1, s11]
// [Asm]   mv a2, v5  # live: [v5, zero, a0, a2, a1, s11]
// [Asm]   call init_arr9.514  # live: [v5, zero, a0, s11]
// [Asm]   mv v12, a0  # live: [v5, zero, s11]
// [Asm]   # restore_ctx2  # live: [v5, zero, s11]
// [Asm]   addi v6, s11, -36  # live: [v5, zero, v6]
// [Asm]   andi s11, v6, -8  # live: [v5, zero, v6, s11]
// [Asm]   sw zero, 0(v6)  # live: [v5, zero, v6, s11]
// [Asm]   sw zero, 4(v6)  # live: [v5, zero, v6, s11]
// [Asm]   sw zero, 8(v6)  # live: [v5, zero, v6, s11]
// [Asm]   sw zero, 12(v6)  # live: [v5, zero, v6, s11]
// [Asm]   sw zero, 16(v6)  # live: [v5, zero, v6, s11]
// [Asm]   sw zero, 20(v6)  # live: [v5, zero, v6, s11]
// [Asm]   sw zero, 24(v6)  # live: [v5, zero, v6, s11]
// [Asm]   sw zero, 28(v6)  # live: [v5, zero, v6, s11]
// [Asm]   sw zero, 32(v6)  # live: [v5, zero, v6, s11]
// [Asm]   addi v8, s11, -36  # live: [v5, zero, v8, v6]
// [Asm]   andi s11, v8, -8  # live: [v5, zero, v8, v6, s11]
// [Asm]   sw zero, 0(v8)  # live: [v5, zero, v8, v6, s11]
// [Asm]   sw zero, 4(v8)  # live: [v5, zero, v8, v6, s11]
// [Asm]   sw zero, 8(v8)  # live: [v5, zero, v8, v6, s11]
// [Asm]   sw zero, 12(v8)  # live: [v5, zero, v8, v6, s11]
// [Asm]   sw zero, 16(v8)  # live: [v5, zero, v8, v6, s11]
// [Asm]   sw zero, 20(v8)  # live: [v5, zero, v8, v6, s11]
// [Asm]   sw zero, 24(v8)  # live: [v5, zero, v8, v6, s11]
// [Asm]   sw zero, 28(v8)  # live: [v5, zero, v8, v6, s11]
// [Asm]   sw zero, 32(v8)  # live: [v5, zero, v8, v6, s11]
// [Asm]   addi v9, s11, -4  # live: [v5, zero, v8, v6, v9]
// [Asm]   andi s11, v9, -8  # live: [v5, zero, v8, v6, s11, v9]
// [Asm]   sw zero, 0(v9)  # live: [v5, zero, v8, v6, s11, v9]
// [Asm]   addi v3, s11, -4  # live: [v5, zero, v8, v6, v9, v3]
// [Asm]   andi s11, v3, -8  # live: [v5, zero, v8, v6, s11, v9, v3]
// [Asm]   sw zero, 0(v3)  # live: [v5, zero, v8, v6, s11, v9, v3]
// [Asm]   addi v7, s11, -4  # live: [v5, zero, v7, v8, v6, v9, v3]
// [Asm]   andi s11, v7, -8  # live: [v5, zero, v7, v8, v6, s11, v9, v3]
// [Asm]   sw zero, 0(v7)  # live: [v5, zero, v7, v8, v6, s11, v9, v3]
// [Asm]   addi v2, s11, -4  # live: [v2, v5, zero, v7, v8, v6, v9, v3]
// [Asm]   andi s11, v2, -8  # live: [v2, v5, zero, v7, v8, v6, s11, v9, v3]
// [Asm]   sw zero, 0(v2)  # live: [v2, v5, v7, v8, v6, s11, v9, v3]
// [Asm]   addi v10, s11, -4  # live: [v2, v5, v10, v7, v8, v6, v9, v3]
// [Asm]   andi s11, v10, -8  # live: [v2, v5, v10, v7, v8, v6, s11, v9, v3]
// [Asm]   li v38, 9  # live: [v2, v5, v10, v7, v8, v38, v6, s11, v9, v3]
// [Asm]   sw v38, 0(v10)  # live: [v2, v5, v10, v7, v8, v6, s11, v9, v3]
// [Asm]   # save_ctx2  # live: [v2, v5, v10, v7, v8, v6, s11, v9, v3]
// [Asm]   mv a0, v10  # live: [v2, v5, a0, v7, v8, v6, s11, v9, v3]
// [Asm]   li v35, 9  # live: [v2, v5, a0, v7, v8, v35, v6, s11, v9, v3]
// [Asm]   mv a1, v35  # live: [v2, v5, a0, v7, v8, a1, v6, s11, v9, v3]
// [Asm]   mv a2, v5  # live: [v2, a0, v7, v8, a2, a1, v6, s11, v9, v3]
// [Asm]   mv a3, v6  # live: [v2, a0, v7, v8, a2, a1, s11, a3, v9, v3]
// [Asm]   mv a4, v8  # live: [v2, a0, a4, v7, a2, a1, s11, a3, v9, v3]
// [Asm]   mv a5, v9  # live: [v2, a5, a0, a4, v7, a2, a1, s11, a3, v3]
// [Asm]   mv a6, v2  # live: [a5, a0, a4, v7, a6, a2, a1, s11, a3, v3]
// [Asm]   mv a7, v7  # live: [a7, a5, a0, a4, v7, a6, a2, a1, s11, a3, v3]
// [Asm]   mv t0, v3  # live: [a7, t0, a5, a0, a4, v7, a6, a2, a1, s11, a3, v3]
// [Asm]   call compute40.515  # live: [v3, s11, a0, v7]
// [Asm]   mv v20, a0  # live: [v3, s11, v7]
// [Asm]   # restore_ctx2  # live: [v3, s11, v7]
// [Asm]   lw v21, 0(v3)  # live: [v21, s11, v7]
// [Asm]   lw v22, 0(v7)  # live: [v21, s11, v22]
// [Asm]   addi v4, s11, -8  # live: [v4, v21, v22]
// [Asm]   andi s11, v4, -8  # live: [v4, v21, v22]
// [Asm]   sw v21, 0(v4)  # live: [v4, v22]
// [Asm]   sw v22, 4(v4)  # live: [v4]
// [Asm]   lw v24, 0(v4)  # live: [v4, v24]
// [Asm]   lw v25, 4(v4)  # live: [v25, v24]
// [Asm]   # save_ctx2  # live: [v25, v24]
// [Asm]   mv a0, v25  # live: [v24, a0]
// [Asm]   call minimbt_print_int  # live: [v24, a0]
// [Asm]   mv v26, a0  # live: [v24]
// [Asm]   # restore_ctx2  # live: [v24]
// [Asm]   # save_ctx2  # live: [v24]
// [Asm]   mv a0, v24  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v27, a0  # live: [v27]
// [Asm]   # restore_ctx2  # live: [v27]
// [Asm] # control
// [Asm]   mv a0, v27  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] init_count59.517:
// [Asm] # block info: defs: [v3, v4, v20, v2], uses: [v4, a1, a0, v20, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v3, zero, v2]
// [Asm] # block parameters: []
// [Asm] .init_count59.517_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm]   lw v4, 0(v2)  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   li v20, 1  # live: [v2, v4, zero, v20, v3]
// [Asm]   beq v4, v20, .init_count59.517_1  # live: [v2, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, v11, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v11, v10, a0, v13, v7, v6, a1, v3], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, zero, v3], live_out: [v14, zero]
// [Asm] # block parameters: []
// [Asm] .init_count59.517_2:
// [Asm]   lw v6, 0(v2)  # live: [v2, v6, zero, v3]
// [Asm]   addi v7, v6, -1  # live: [v2, v7, v6, zero, v3]
// [Asm]   th.surw v6, v3, v7, 2  # live: [v2, zero, v3]
// [Asm]   lw v10, 0(v2)  # live: [v2, v10, zero, v3]
// [Asm]   addi v11, v10, -1  # live: [v2, v11, zero, v3]
// [Asm]   sw v11, 0(v2)  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [zero, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, zero, a0]
// [Asm]   call init_count59.517  # live: [zero, a0]
// [Asm]   mv v13, a0  # live: [zero, v13]
// [Asm]   # restore_ctx2  # live: [zero, v13]
// [Asm] # control
// [Asm]   mv v14, v13  # live: [v14, zero]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: [v14]
// [Asm] # live_in: [v14, zero], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .init_count59.517_3:
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14, zero]
// [Asm] # block parameters: []
// [Asm] .init_count59.517_1:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14, zero]
// [Asm]   j .init_count59.517_3  # live: [v14, zero]
// [Asm] 
// [Asm] # leaf false
// [Asm] compute40.515:
// [Asm] # block info: defs: [v3, v5, v16, v10, v21, v22, v7, v17, v9, v18, v20, v23, v8, v19, v4, v6, v15, v2], uses: [v2, v5, v10, a5, a0, v7, a2, a1, a3, v9, a7, t0, a4, v8, a6, v4, v6, v3], upward_exposed: [a7, t0, a5, a0, a4, a6, a2, a1, a3], params_defs: []
// [Asm] # live_in: [a7, t0, a5, a0, zero, a4, a6, a2, a1, a3, s11], live_out: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] # block parameters: []
// [Asm] .compute40.515_8:
// [Asm]   # save_ctx1  # live: [a7, t0, a5, zero, a0, a4, a6, a2, a1, s11, a3]
// [Asm]   mv v2, a0  # live: [a7, t0, a5, zero, a4, a6, a2, a1, s11, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a7, t0, a5, zero, a4, a6, a2, s11, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a7, t0, a5, zero, a4, a6, v4, s11, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, a7, t0, v5, a5, zero, a4, a6, v4, s11, v3]
// [Asm]   mv v6, a4  # live: [v2, a7, t0, v5, a5, zero, a6, v4, v6, s11, v3]
// [Asm]   mv v7, a5  # live: [v2, a7, t0, v5, zero, v7, a6, v4, v6, s11, v3]
// [Asm]   mv v8, a6  # live: [v2, a7, t0, v5, zero, v8, v7, v4, v6, s11, v3]
// [Asm]   mv v9, a7  # live: [v2, t0, v5, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm]   mv v10, t0  # live: [v2, v5, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] # control
// [Asm]   mv v15, v2  # live: [v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm]   mv v16, v3  # live: [v16, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9]
// [Asm]   mv v17, v4  # live: [v16, v5, v10, zero, v8, v7, v17, v6, s11, v15, v9]
// [Asm]   mv v18, v5  # live: [v16, v18, v10, zero, v8, v7, v17, v6, s11, v15, v9]
// [Asm]   mv v19, v6  # live: [v16, v18, v10, zero, v8, v7, v19, v17, v15, s11, v9]
// [Asm]   mv v20, v7  # live: [v16, v18, v10, zero, v20, v8, v19, v17, v15, s11, v9]
// [Asm]   mv v21, v8  # live: [v16, v18, v21, v10, zero, v20, v19, v17, v15, s11, v9]
// [Asm]   mv v22, v9  # live: [v16, v18, v21, v10, zero, v20, v22, v19, v17, v15, s11]
// [Asm]   mv v23, v10  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v24, v190], uses: [v15, v24, v190], upward_exposed: [v15], params_defs: [v16, v18, v21, v20, v22, v23, v19, v17, v15]
// [Asm] # live_in: [v16, v18, v21, zero, v23, v20, v22, v19, v17, v15, s11], live_out: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11]
// [Asm] # block parameters: [v15, v16, v17, v18, v19, v20, v21, v22, v23]
// [Asm] .compute40.515_0:
// [Asm]   lw v24, 0(v15)  # live: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11, v24]
// [Asm] # control
// [Asm]   li v190, 1  # live: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11, v24, v190]
// [Asm]   blt v24, v190, .compute40.515_2  # live: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11], live_out: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11]
// [Asm] # block parameters: []
// [Asm] .compute40.515_1:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v28, v29, v27, v30], uses: [v16, v17, v18, zero], upward_exposed: [v16, v17, v18, zero], params_defs: []
// [Asm] # live_in: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11], live_out: [v16, v21, v30, v22, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] # block parameters: []
// [Asm] .compute40.515_59:
// [Asm] # control
// [Asm]   mv v27, zero  # live: [v16, v21, v22, v17, s11, v18, zero, v27, v20, v23, v19, v15]
// [Asm]   mv v28, v16  # live: [v16, v21, v22, v17, s11, v28, v18, zero, v27, v20, v23, v19, v15]
// [Asm]   mv v29, v17  # live: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm]   mv v30, v18  # live: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v31], uses: [v28, v31, v27], upward_exposed: [v28, v27], params_defs: [v28, v29, v27, v30]
// [Asm] # live_in: [v16, v21, v30, v22, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15], live_out: [v16, v21, v30, v22, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] # block parameters: [v27, v28, v29, v30]
// [Asm] .compute40.515_54:
// [Asm]   addi v31, v28, -1  # live: [v16, v21, v22, v30, v17, s11, v28, v31, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] # control
// [Asm]   blt v31, v27, .compute40.515_56  # live: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v134, v136, v27], uses: [v29, v27, v30, v134, v136, v28], upward_exposed: [v28, v29, v27, v30], params_defs: []
// [Asm] # live_in: [v16, v21, v30, v22, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15], live_out: [v16, v21, v30, v22, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] # block parameters: []
// [Asm] .compute40.515_55:
// [Asm]   th.lurw v134, v29, v27, 2  # live: [v16, v21, v22, v30, v134, v17, s11, v28, v18, v29, zero, v20, v23, v27, v19, v15]
// [Asm]   th.surw v134, v30, v27, 2  # live: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v20, v23, v27, v19, v15]
// [Asm]   addi v136, v27, 1  # live: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v20, v23, v19, v136, v15]
// [Asm] # control
// [Asm]   mv v27, v136  # live: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm]   mv v28, v28  # live: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm]   mv v29, v29  # live: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm]   mv v30, v30  # live: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm]   j .compute40.515_54  # live: [v16, v21, v22, v30, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v33], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11], live_out: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11, v33]
// [Asm] # block parameters: []
// [Asm] .compute40.515_56:
// [Asm] # control
// [Asm]   mv v33, zero  # live: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11, v33]
// [Asm] 
// [Asm] # block info: defs: [v34], uses: [v33], upward_exposed: [v33], params_defs: [v33]
// [Asm] # live_in: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11, v33], live_out: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11, v34]
// [Asm] # block parameters: [v33]
// [Asm] .compute40.515_57:
// [Asm] # control
// [Asm]   mv v34, v33  # live: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11, v34]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v37, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, v35, t4, t2], uses: [v18, a0, zero, v13, v20, v19, v37, a1, s11, v15], upward_exposed: [v19, v15, v18, s11, zero, v20], params_defs: [v34]
// [Asm] # live_in: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11, v34], live_out: [v16, v18, v21, v13, zero, v23, v20, v22, v19, v17, s11, v15]
// [Asm] # block parameters: [v34]
// [Asm] .compute40.515_9:
// [Asm]   # save_ctx2  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   mv a0, v15  # live: [v16, v21, a0, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   mv a1, v19  # live: [v16, v21, a0, v22, v17, a1, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   call init_count59.517  # live: [v16, v21, a0, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   mv v35, a0  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   # restore_ctx2  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   sw zero, 0(v20)  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   lw v37, 0(v18)  # live: [v16, v21, v22, v37, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   addi v13, s11, -4  # live: [v16, v21, v13, v22, v37, v17, v18, zero, v23, v20, v19, v15]
// [Asm]   andi s11, v13, -8  # live: [v16, v21, v13, v22, v37, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   sw v37, 0(v13)  # live: [v16, v18, v21, v13, zero, v23, v20, v22, v19, v17, s11, v15]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v41, v39, v40], uses: [v18, v13, v20], upward_exposed: [v18, v13, v20], params_defs: []
// [Asm] # live_in: [v16, v18, v21, v13, zero, v23, v20, v22, v19, v17, s11, v15], live_out: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] # block parameters: []
// [Asm] .compute40.515_36:
// [Asm] # control
// [Asm]   mv v39, v13  # live: [v16, v21, v22, v17, s11, v39, v18, zero, v20, v23, v19, v15]
// [Asm]   mv v40, v18  # live: [v16, v21, v22, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm]   mv v41, v20  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] 
// [Asm] # block info: defs: [v42], uses: [v42, zero, v39], upward_exposed: [zero, v39], params_defs: [v41, v39, v40]
// [Asm] # live_in: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40], live_out: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] # block parameters: [v39, v40, v41]
// [Asm] .compute40.515_31:
// [Asm]   lw v42, 0(v39)  # live: [v16, v21, v42, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] # control
// [Asm]   beq v42, zero, .compute40.515_32  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] 
// [Asm] # block info: defs: [v14, s11], uses: [v14, s11, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40], live_out: [v14, v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] # block parameters: []
// [Asm] .compute40.515_33:
// [Asm]   addi v14, s11, -4  # live: [v14, v16, v21, v22, v41, v17, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm]   andi s11, v14, -8  # live: [v14, v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm]   sw zero, 0(v14)  # live: [v14, v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v47, v46, v48, v45], uses: [v14, zero, v39, v40], upward_exposed: [v14, zero, v39, v40], params_defs: []
// [Asm] # live_in: [v14, v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40], live_out: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm] # block parameters: []
// [Asm] .compute40.515_45:
// [Asm] # control
// [Asm]   mv v45, zero  # live: [v16, v14, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v45, v19, v15, v40]
// [Asm]   mv v46, v14  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v45, v19, v15, v40]
// [Asm]   mv v47, v39  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm]   mv v48, v40  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm] 
// [Asm] # block info: defs: [v49, v50], uses: [v47, v49, v50, v45], upward_exposed: [v47, v45], params_defs: [v47, v46, v48, v45]
// [Asm] # live_in: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40], live_out: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm] # block parameters: [v45, v46, v47, v48]
// [Asm] .compute40.515_40:
// [Asm]   lw v49, 0(v47)  # live: [v46, v16, v21, v49, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm]   srai v50, v49, 1  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v50, v45, v19, v47, v15, v40]
// [Asm] # control
// [Asm]   blt v50, v45, .compute40.515_42  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm] 
// [Asm] # block info: defs: [v62, v63, v72, v69, v68, v67, v45, v65, v60], uses: [v62, v63, v72, v69, v46, v48, v68, v67, v45, v47, v65, v60], upward_exposed: [v47, v46, v48, v45], params_defs: []
// [Asm] # live_in: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40], live_out: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm] # block parameters: []
// [Asm] .compute40.515_41:
// [Asm]   th.lurw v60, v48, v45, 2  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v60, v48, v18, zero, v23, v20, v45, v19, v47, v15, v40]
// [Asm]   sw v60, 0(v46)  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v23, v20, v45, v19, v47, v15, v40]
// [Asm]   lw v62, 0(v47)  # live: [v62, v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v23, v20, v45, v19, v47, v15, v40]
// [Asm]   sub v63, v62, v45  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v63, v48, v18, zero, v23, v20, v45, v19, v47, v15, v40]
// [Asm]   th.lurw v65, v48, v63, 2  # live: [v46, v16, v21, v22, v41, v65, v17, s11, v39, v48, v18, zero, v23, v20, v45, v19, v47, v15, v40]
// [Asm]   th.surw v65, v48, v45, 2  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v23, v20, v45, v19, v47, v15, v40]
// [Asm]   lw v67, 0(v47)  # live: [v46, v16, v21, v22, v67, v41, v17, s11, v39, v48, v18, zero, v23, v20, v45, v19, v47, v15, v40]
// [Asm]   sub v68, v67, v45  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v68, v23, v20, v45, v19, v47, v15, v40]
// [Asm]   lw v69, 0(v46)  # live: [v46, v16, v69, v21, v22, v41, v17, s11, v39, v48, v18, zero, v68, v23, v20, v45, v19, v47, v15, v40]
// [Asm]   th.surw v69, v48, v68, 2  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm]   addi v72, v45, 1  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v72, v48, v18, zero, v20, v23, v19, v47, v15, v40]
// [Asm] # control
// [Asm]   mv v45, v72  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm]   mv v46, v46  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm]   mv v47, v47  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm]   mv v48, v48  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm]   j .compute40.515_40  # live: [v46, v16, v21, v22, v41, v17, s11, v39, v48, v18, zero, v20, v23, v45, v19, v47, v15, v40]
// [Asm] 
// [Asm] # block info: defs: [v26], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v26]
// [Asm] # block parameters: []
// [Asm] .compute40.515_2:
// [Asm] # control
// [Asm]   mv v26, zero  # live: [v26]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v26, a0], upward_exposed: [v26], params_defs: [v26]
// [Asm] # live_in: [v26], live_out: []
// [Asm] # block parameters: [v26]
// [Asm] .compute40.515_6:
// [Asm] # control
// [Asm]   mv a0, v26  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v52], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40], live_out: [v16, v21, v22, v41, v17, s11, v52, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] # block parameters: []
// [Asm] .compute40.515_42:
// [Asm] # control
// [Asm]   mv v52, zero  # live: [v16, v21, v22, v41, v17, v52, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] 
// [Asm] # block info: defs: [v53], uses: [v52], upward_exposed: [v52], params_defs: [v52]
// [Asm] # live_in: [v16, v21, v22, v41, v17, s11, v52, v39, v18, zero, v20, v23, v19, v15, v40], live_out: [v16, v53, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] # block parameters: [v52]
// [Asm] .compute40.515_43:
// [Asm] # control
// [Asm]   mv v53, v52  # live: [v16, v21, v53, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] 
// [Asm] # block info: defs: [v56, v57, v54], uses: [v56, v41, v57, v54, v39, v40], upward_exposed: [v41, v39, v40], params_defs: [v53]
// [Asm] # live_in: [v16, v53, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40], live_out: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] # block parameters: [v53]
// [Asm] .compute40.515_37:
// [Asm]   lw v54, 0(v40)  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v54, v40]
// [Asm]   sw v54, 0(v39)  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm]   lw v56, 0(v41)  # live: [v16, v21, v22, v41, v17, s11, v39, v18, v56, zero, v20, v23, v19, v15, v40]
// [Asm]   addi v57, v56, 1  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v57, v40]
// [Asm]   sw v57, 0(v41)  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] # control
// [Asm]   mv v39, v39  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm]   mv v40, v40  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm]   mv v41, v41  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm]   j .compute40.515_31  # live: [v16, v21, v22, v41, v17, s11, v39, v18, zero, v20, v23, v19, v15, v40]
// [Asm] 
// [Asm] # block info: defs: [v73], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v21, v18, zero, v22, v23, v20, v19, v17, s11, v15], live_out: [v16, v21, v18, zero, v22, v23, v20, v19, v17, s11, v15, v73]
// [Asm] # block parameters: []
// [Asm] .compute40.515_32:
// [Asm] # control
// [Asm]   mv v73, zero  # live: [v16, v21, v18, zero, v22, v23, v20, v19, v17, s11, v15, v73]
// [Asm] 
// [Asm] # block info: defs: [v74], uses: [v73], upward_exposed: [v73], params_defs: [v73]
// [Asm] # live_in: [v16, v21, v18, zero, v22, v23, v20, v19, v17, s11, v15, v73], live_out: [v16, v21, v18, zero, v22, v23, v20, v19, v74, v17, s11, v15]
// [Asm] # block parameters: [v73]
// [Asm] .compute40.515_34:
// [Asm] # control
// [Asm]   mv v74, v73  # live: [v16, v21, v18, zero, v22, v23, v20, v19, v74, v17, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [v75, v76], uses: [v76, v75, v23, v20], upward_exposed: [v23, v20], params_defs: [v74]
// [Asm] # live_in: [v16, v21, v18, zero, v22, v23, v20, v19, v74, v17, s11, v15], live_out: [v16, v21, v18, zero, v22, v20, v23, v19, v17, s11, v15]
// [Asm] # block parameters: [v74]
// [Asm] .compute40.515_10:
// [Asm]   lw v75, 0(v23)  # live: [v16, v21, v18, v75, zero, v20, v23, v22, v19, v17, v15, s11]
// [Asm]   lw v76, 0(v20)  # live: [v16, v21, v18, v75, zero, v20, v23, v22, v19, v17, v15, s11, v76]
// [Asm] # control
// [Asm]   blt v76, v75, .compute40.515_4  # live: [v16, v21, v18, zero, v22, v20, v23, v19, v17, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [v80, v78], uses: [v23, zero, v20, v78], upward_exposed: [zero, v20, v23], params_defs: []
// [Asm] # live_in: [v16, v21, v18, zero, v22, v20, v23, v19, v17, s11, v15], live_out: [v16, v21, v18, zero, v22, v20, v23, v19, v80, v17, v15, s11]
// [Asm] # block parameters: []
// [Asm] .compute40.515_3:
// [Asm]   lw v78, 0(v20)  # live: [v16, v21, v18, zero, v22, v20, v23, v78, v19, v17, s11, v15]
// [Asm]   sw v78, 0(v23)  # live: [v16, v21, v18, zero, v22, v20, v23, v19, v17, v15, s11]
// [Asm] # control
// [Asm]   mv v80, zero  # live: [v16, v21, v18, zero, v22, v20, v23, v19, v80, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v11, v87, v158, v88, s11, v12, v86, v82, v161, v81, v90, v83, v89], uses: [v11, v87, v21, v158, v22, v88, s11, v12, v86, v82, v161, zero, v20, v81, v90, v83, v89], upward_exposed: [v21, s11, zero, v22, v20], params_defs: [v80]
// [Asm] # live_in: [v16, v21, v18, zero, v22, v20, v23, v19, v80, v17, v15, s11], live_out: [v11, v16, v21, v22, v17, v12, s11, v18, zero, v23, v20, v19, v15]
// [Asm] # block parameters: [v80]
// [Asm] .compute40.515_5:
// [Asm]   lw v81, 0(v22)  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v81, v15]
// [Asm]   lw v82, 0(v20)  # live: [v16, v21, v22, v17, s11, v82, v18, zero, v23, v20, v19, v81, v15]
// [Asm]   lw v83, 0(v21)  # live: [v16, v21, v22, v17, s11, v82, v18, zero, v23, v20, v19, v81, v15, v83]
// [Asm]   andi v86, v83, 1  # live: [v16, v21, v22, v17, s11, v86, v82, v18, zero, v23, v20, v19, v81, v15]
// [Asm]   slli v87, v86, 1  # live: [v16, v87, v21, v22, v17, s11, v82, v18, zero, v23, v20, v19, v81, v15]
// [Asm]   li v161, 1  # live: [v16, v87, v21, v22, v17, s11, v82, v18, v161, zero, v23, v20, v19, v81, v15]
// [Asm]   sub v88, v161, v87  # live: [v16, v21, v22, v88, v17, s11, v82, v18, zero, v23, v20, v19, v81, v15]
// [Asm]   mul v89, v82, v88  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v81, v15, v89]
// [Asm]   add v90, v81, v89  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v90, v15]
// [Asm]   sw v90, 0(v22)  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   addi v11, s11, -4  # live: [v11, v16, v21, v22, v17, v18, zero, v23, v20, v19, v15]
// [Asm]   andi s11, v11, -8  # live: [v11, v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   li v158, 1  # live: [v11, v16, v21, v158, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   sw v158, 0(v11)  # live: [v11, v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   addi v12, s11, -4  # live: [v11, v16, v21, v22, v17, v12, v18, zero, v23, v20, v19, v15]
// [Asm]   andi s11, v12, -8  # live: [v11, v16, v21, v22, v17, v12, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   sw zero, 0(v12)  # live: [v11, v16, v21, v18, zero, v22, v23, v20, v19, v17, v12, s11, v15]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v95, v94, v96, v99, v97, v98], uses: [v11, v19, v16, v17, v12, v15], upward_exposed: [v11, v19, v16, v17, v12, v15], params_defs: []
// [Asm] # live_in: [v11, v16, v21, v22, v17, v12, s11, v18, zero, v23, v20, v19, v15], live_out: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] # block parameters: []
// [Asm] .compute40.515_71:
// [Asm] # control
// [Asm]   mv v94, v16  # live: [v11, v16, v21, v22, v17, s11, v12, v94, v18, zero, v23, v20, v19, v15]
// [Asm]   mv v95, v12  # live: [v11, v16, v21, v22, v95, v17, s11, v94, v18, zero, v23, v20, v19, v15]
// [Asm]   mv v96, v11  # live: [v16, v21, v22, v95, v17, s11, v94, v18, v96, zero, v23, v20, v19, v15]
// [Asm]   mv v97, v17  # live: [v16, v21, v22, v95, v17, s11, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm]   mv v98, v15  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm]   mv v99, v19  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v154, v100], uses: [v154, v96, v100], upward_exposed: [v96], params_defs: [v95, v94, v96, v99, v97, v98]
// [Asm] # live_in: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15], live_out: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] # block parameters: [v94, v95, v96, v97, v98, v99]
// [Asm] .compute40.515_60:
// [Asm]   lw v100, 0(v96)  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15, v100]
// [Asm] # control
// [Asm]   li v154, 1  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15, v154, v100]
// [Asm]   bne v100, v154, .compute40.515_62  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v107], uses: [v107, v94, v98], upward_exposed: [v94, v98], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15], live_out: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] # block parameters: []
// [Asm] .compute40.515_61:
// [Asm]   lw v107, 0(v98)  # live: [v16, v21, v22, v95, v107, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] # control
// [Asm]   beq v107, v94, .compute40.515_63  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, v109, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v116, ft4, ft9, v121, a5, fa4, a0, v119, v123, ft2, a2, v141, v111, a3, v113, ft8, a7, fa7, v118, t3, t0, v112, fa5, fa3, ft3, fa0, t4, t2], uses: [v116, v121, a0, v119, v123, v95, a2, v141, a1, v113, v98, v109, v118, v112, v99, v97, zero], upward_exposed: [v95, v99, v97, zero, v98], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v96, v99, v97, zero, v23, v20, v19, v15], live_out: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] # block parameters: []
// [Asm] .compute40.515_64:
// [Asm]   lw v109, 0(v97)  # live: [v16, v21, v22, v95, v17, s11, v98, v109, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   sw v109, 0(v95)  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   # save_ctx2  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   mv a0, zero  # live: [v16, v21, a0, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   mv a1, v97  # live: [v16, v21, a0, v22, v95, v17, a1, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   mv a2, v98  # live: [v16, v21, a0, v22, v95, a2, v17, a1, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   call move_perm1_forward197.521  # live: [v16, v21, a0, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   mv v111, a0  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   # restore_ctx2  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   lw v112, 0(v98)  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v112, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   lw v113, 0(v95)  # live: [v16, v21, v22, v95, v17, s11, v113, v98, v94, v112, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   th.surw v113, v97, v112, 2  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   lw v116, 0(v98)  # live: [v116, v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   th.lurw v118, v99, v116, 2  # live: [v116, v16, v21, v22, v95, v17, s11, v98, v118, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   addi v119, v118, -1  # live: [v116, v16, v21, v22, v119, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   th.surw v119, v99, v116, 2  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   lw v121, 0(v98)  # live: [v16, v21, v121, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   th.lurw v123, v99, v121, 2  # live: [v16, v21, v22, v123, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] # control
// [Asm]   li v141, 1  # live: [v16, v21, v22, v123, v95, v141, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   bge v123, v141, .compute40.515_65  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v125, v126, v129], uses: [v98, v125, v126, zero], upward_exposed: [zero, v98], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15], live_out: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v129]
// [Asm] # block parameters: []
// [Asm] .compute40.515_66:
// [Asm]   lw v125, 0(v98)  # live: [v16, v21, v125, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v20, v23, v19, v15]
// [Asm]   addi v126, v125, 1  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v126, v20, v23, v19, v15]
// [Asm]   sw v126, 0(v98)  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] # control
// [Asm]   mv v129, zero  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v129]
// [Asm] 
// [Asm] # block info: defs: [v132], uses: [zero], upward_exposed: [zero], params_defs: [v129]
// [Asm] # live_in: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v129], live_out: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v132]
// [Asm] # block parameters: [v129]
// [Asm] .compute40.515_67:
// [Asm] # control
// [Asm]   mv v132, zero  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v132]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v95, v94, v96, v99, v97, v98], upward_exposed: [v95, v94, v96, v99, v97, v98], params_defs: [v132]
// [Asm] # live_in: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v132], live_out: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] # block parameters: [v132]
// [Asm] .compute40.515_68:
// [Asm] # control
// [Asm]   mv v94, v94  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm]   mv v95, v95  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm]   mv v96, v96  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm]   mv v97, v97  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm]   mv v98, v98  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm]   mv v99, v99  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm]   j .compute40.515_60  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v129], uses: [v96, zero], upward_exposed: [v96, zero], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15], live_out: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v129]
// [Asm] # block parameters: []
// [Asm] .compute40.515_65:
// [Asm]   sw zero, 0(v96)  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] # control
// [Asm]   mv v129, zero  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v129]
// [Asm]   j .compute40.515_67  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v129]
// [Asm] 
// [Asm] # block info: defs: [v132], uses: [v96, zero, v98], upward_exposed: [v96, zero, v98], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, v97, zero, v23, v20, v19, v15], live_out: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v132]
// [Asm] # block parameters: []
// [Asm] .compute40.515_63:
// [Asm]   sw zero, 0(v96)  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm]   sw zero, 0(v98)  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15]
// [Asm] # control
// [Asm]   mv v132, zero  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v132]
// [Asm]   j .compute40.515_68  # live: [v16, v21, v22, v95, v17, s11, v98, v94, v18, v99, v96, zero, v97, v23, v20, v19, v15, v132]
// [Asm] 
// [Asm] # block info: defs: [v102], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v21, v18, zero, v23, v20, v22, v19, v17, v15, s11], live_out: [v16, v21, v18, zero, v23, v20, v22, v19, v17, v102, v15, s11]
// [Asm] # block parameters: []
// [Asm] .compute40.515_62:
// [Asm] # control
// [Asm]   mv v102, zero  # live: [v16, v21, v18, zero, v23, v20, v22, v19, v17, v102, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v103], uses: [v102], upward_exposed: [v102], params_defs: [v102]
// [Asm] # live_in: [v16, v21, v18, zero, v23, v20, v22, v19, v17, v102, v15, s11], live_out: [v16, v21, v18, zero, v23, v20, v22, v103, v19, v17, v15, s11]
// [Asm] # block parameters: [v102]
// [Asm] .compute40.515_69:
// [Asm] # control
// [Asm]   mv v103, v102  # live: [v16, v21, v18, zero, v23, v20, v22, v103, v19, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v104, v105], uses: [v16, v21, v18, v20, v22, v23, v105, v19, v104, v17, v15], upward_exposed: [v16, v21, v18, v20, v22, v23, v19, v17, v15], params_defs: [v103]
// [Asm] # live_in: [v16, v21, v18, zero, v20, v22, v23, v103, v19, v17, v15, s11], live_out: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] # block parameters: [v103]
// [Asm] .compute40.515_11:
// [Asm]   lw v104, 0(v21)  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v104, v17, v15, s11]
// [Asm]   addi v105, v104, 1  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v105, v17, s11, v15]
// [Asm]   sw v105, 0(v21)  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] # control
// [Asm]   mv v15, v15  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v16, v16  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v17, v17  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v18, v18  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v19, v19  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v20, v20  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v21, v21  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v22, v22  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v23, v23  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   j .compute40.515_0  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v80], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v21, v18, zero, v22, v20, v23, v19, v17, s11, v15], live_out: [v16, v21, v18, zero, v22, v20, v23, v19, v80, v17, v15, s11]
// [Asm] # block parameters: []
// [Asm] .compute40.515_4:
// [Asm] # control
// [Asm]   mv v80, zero  # live: [v16, v21, v18, zero, v22, v20, v23, v19, v80, v17, v15, s11]
// [Asm]   j .compute40.515_5  # live: [v16, v21, v18, zero, v22, v20, v23, v19, v80, v17, v15, s11]
// [Asm] 
// [Asm] # leaf false
// [Asm] move_perm1_forward197.521:
// [Asm] # block info: defs: [v3, v4, v5, v6, v2], uses: [v5, a0, a2, v4, a1, v6, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v3, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward197.521_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm]   lw v5, 0(v4)  # live: [v2, v4, v5, zero, v3]
// [Asm]   addi v6, v5, -1  # live: [v2, v4, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v6, v2, .move_perm1_forward197.521_2  # live: [v2, v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v10, a0, zero, v8, v4, a2, a1, v3], upward_exposed: [v3, v4, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v4, zero, v3], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward197.521_1:
// [Asm]   addi v8, v2, 1  # live: [v8, v2, v4, zero, v3]
// [Asm]   th.lurw v10, v3, v8, 2  # live: [v8, v2, v4, v10, zero, v3]
// [Asm]   th.surw v10, v3, v2, 2  # live: [v8, v4, zero, v3]
// [Asm]   # save_ctx2  # live: [v8, v4, zero, v3]
// [Asm]   mv a0, v8  # live: [v4, zero, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, zero, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, zero, a0]
// [Asm]   call move_perm1_forward197.521  # live: [zero, a0]
// [Asm]   mv v13, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .move_perm1_forward197.521_3:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward197.521_2:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm]   j .move_perm1_forward197.521_3  # live: [v14]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main262.513  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] init_arr9.514:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .init_arr9.514_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v6, v5, v8], upward_exposed: [v6, v5], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .init_arr9.514_0:
// [Asm]   addi v8, v6, -1  # live: [v8, v5, v6, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v5, .init_arr9.514_2  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v5, v13], uses: [v5, v6, v13, v7], upward_exposed: [v5, v6, v7], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .init_arr9.514_1:
// [Asm]   th.surw v5, v7, v5, 2  # live: [v6, v5, zero, v7]
// [Asm]   addi v13, v5, 1  # live: [v6, zero, v13, v7]
// [Asm] # control
// [Asm]   mv v5, v13  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .init_arr9.514_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .init_arr9.514_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .init_arr9.514_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("fannkuch", Tuple([Int, Int])), args: [("n", Int)], body: LetRec({name: ("gen_perm1", Array(Int)), args: [("len", Int)], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))}, Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("gen_perm1", Array(Int)), args: [("len", Int)], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))}, Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr")))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Int(0)]), Var("arr"))
// [Knf] build_knf: App(Var("init_arr"), [Int(0)])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Let(("perm1", Var({val: Some(Array(Int))})), App(Var("gen_perm1"), [Var("n")]), Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))))
// [Knf] build_knf: App(Var("gen_perm1"), [Var("n")])
// [Knf] build_knf: Var("gen_perm1")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("perm", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("count", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("max_flips", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("check_sum", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("nperm", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("r", Var({val: Some(Array(Int))})), Array(Int(1), Var("n")), LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))
// [Knf] build_knf: Array(Int(1), Var("n"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: LetRec({name: ("compute", Unit), args: [("r", Array(Int))], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))
// [Knf] build_knf: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))), Unit)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i")))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm1"), Var("i"))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("copy_perm")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("copy_perm"), [Int(0)]), LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))))
// [Knf] build_knf: App(Var("copy_perm"), [Int(0)])
// [Knf] build_knf: Var("copy_perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init_count", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit), Unit)
// [Knf] build_knf: If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))), Unit)
// [Knf] build_knf: If(Eq(Get(Var("r"), Int(0)), Int(1)), Unit, Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), [])))
// [Knf] build_knf: Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("init_count"), []))
// [Knf] build_knf: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("init_count"), [])
// [Knf] build_knf: Var("init_count")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_count"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))))
// [Knf] build_knf: App(Var("init_count"), [])
// [Knf] build_knf: Var("init_count")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))))
// [Knf] build_knf: Put(Var("flips"), Int(0), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("k", Var({val: Some(Array(Int))})), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))))
// [Knf] build_knf: Array(Int(1), Get(Var("perm"), Int(0)))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("perm"), Int(0))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("do_flip", Unit), args: [("k", Array(Int))], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))))
// [Knf] build_knf: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))), Unit)
// [Knf] build_knf: If(Eq(Get(Var("k"), Int(0)), Int(0)), Unit, Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Put(Var("t"), Int(0), Get(Var("perm"), Var("i")))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm"), Var("i"))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0))), App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)), Get(Var("t"), Int(0)))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("k"), Int(0))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("t"), Int(0))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("flip_loop")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("flip_loop"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))))
// [Knf] build_knf: App(Var("flip_loop"), [Int(0)])
// [Knf] build_knf: Var("flip_loop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")])))
// [Knf] build_knf: Put(Var("k"), Int(0), Get(Var("perm"), Int(0)))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm"), Int(0))
// [Knf] build_knf: Var("perm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("do_flip"), [Var("k")]))
// [Knf] build_knf: Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("do_flip"), [Var("k")])
// [Knf] build_knf: Var("do_flip")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("do_flip"), [Var("k")]), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))))
// [Knf] build_knf: App(Var("do_flip"), [Var("k")])
// [Knf] build_knf: Var("do_flip")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))))
// [Knf] build_knf: If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit)
// [Knf] build_knf: Get(Var("max_flips"), Int(0))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0)))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))), Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))))
// [Knf] build_knf: Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int)))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("check_sum"), Int(0))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int))
// [Knf] build_knf: Get(Var("flips"), Int(0))
// [Knf] build_knf: Var("flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("go", Var({val: Some(Array(Bool))})), Array(Int(1), Bool(true)), Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))))
// [Knf] build_knf: Array(Int(1), Bool(true))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Let(("t", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))))
// [Knf] build_knf: If(Get(Var("go"), Int(0)), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), [])), Unit)
// [Knf] build_knf: Get(Var("go"), Int(0))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))), App(Var("go_loop"), []))
// [Knf] build_knf: If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))))))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit))
// [Knf] build_knf: Put(Var("go"), Int(0), Bool(false))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("r"), Int(0), Int(0)), Unit)
// [Knf] build_knf: Put(Var("r"), Int(0), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))))
// [Knf] build_knf: Put(Var("t"), Int(0), Get(Var("perm1"), Int(0)))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("perm1"), Int(0))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit))
// [Knf] build_knf: Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Unit)
// [Knf] build_knf: App(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("move_perm1_forward")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("move_perm1_forward"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))))
// [Knf] build_knf: App(Var("move_perm1_forward"), [Int(0)])
// [Knf] build_knf: Var("move_perm1_forward")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)))
// [Knf] build_knf: Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0)))
// [Knf] build_knf: Var("perm1")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("t"), Int(0))
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit))
// [Knf] build_knf: Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("count"), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)
// [Knf] build_knf: If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("count"), Get(Var("r"), Int(0)))
// [Knf] build_knf: Var("count")
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Put(Var("go"), Int(0), Bool(false))
// [Knf] build_knf: Var("go")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("r"), Int(0))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("go_loop"), [])
// [Knf] build_knf: Var("go_loop")
// [Knf] build_knf: Unit
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("go_loop"), []), Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")])))
// [Knf] build_knf: App(Var("go_loop"), [])
// [Knf] build_knf: Var("go_loop")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("compute"), [Var("r")]))
// [Knf] build_knf: Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("nperm"), Int(0))
// [Knf] build_knf: Var("nperm")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("compute"), [Var("r")])
// [Knf] build_knf: Var("compute")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("compute"), [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))
// [Knf] build_knf: App(Var("compute"), [Var("r")])
// [Knf] build_knf: Var("compute")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])
// [Knf] build_knf: Get(Var("max_flips"), Int(0))
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Get(Var("check_sum"), Int(0))
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))}, App(Var("main"), []))
// [Knf] build_knf: LetTuple([("max_flips", Var({val: Some(Int)})), ("check_sum", Var({val: Some(Int)}))], App(Var("fannkuch"), [Int(9)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")])))
// [Knf] build_knf: App(Var("fannkuch"), [Int(9)])
// [Knf] build_knf: Var("fannkuch")
// [Knf] build_knf: Int(9)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("check_sum")]), App(Var("print_int"), [Var("max_flips")]))
// [Knf] build_knf: App(Var("print_int"), [Var("check_sum")])
// [Knf] build_knf: Var("check_sum")
// [Knf] build_knf: App(Var("print_int"), [Var("max_flips")])
// [Knf] build_knf: Var("max_flips")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] beta reduce perm1.295 = arr.297
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main262.513
// [Main]   .type main262.513, @function
// [Main] # leaf false
// [Main] main262.513:
// [Main] .main262.513_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   addi s0, s11, -36
// [Main]   andi s11, s0, -8
// [Main]   sw zero, 0(s0)
// [Main]   sw zero, 4(s0)
// [Main]   sw zero, 8(s0)
// [Main]   sw zero, 12(s0)
// [Main]   sw zero, 16(s0)
// [Main]   sw zero, 20(s0)
// [Main]   sw zero, 24(s0)
// [Main]   sw zero, 28(s0)
// [Main]   sw zero, 32(s0)
// [Main]   mv a0, zero
// [Main]   li a1, 9
// [Main]   mv a2, s0
// [Main]   call init_arr9.514
// [Main]   addi a3, s11, -36
// [Main]   andi s11, a3, -8
// [Main]   sw zero, 0(a3)
// [Main]   sw zero, 4(a3)
// [Main]   sw zero, 8(a3)
// [Main]   sw zero, 12(a3)
// [Main]   sw zero, 16(a3)
// [Main]   sw zero, 20(a3)
// [Main]   sw zero, 24(a3)
// [Main]   sw zero, 28(a3)
// [Main]   sw zero, 32(a3)
// [Main]   addi a4, s11, -36
// [Main]   andi s11, a4, -8
// [Main]   sw zero, 0(a4)
// [Main]   sw zero, 4(a4)
// [Main]   sw zero, 8(a4)
// [Main]   sw zero, 12(a4)
// [Main]   sw zero, 16(a4)
// [Main]   sw zero, 20(a4)
// [Main]   sw zero, 24(a4)
// [Main]   sw zero, 28(a4)
// [Main]   sw zero, 32(a4)
// [Main]   addi a5, s11, -4
// [Main]   andi s11, a5, -8
// [Main]   sw zero, 0(a5)
// [Main]   addi s1, s11, -4
// [Main]   andi s11, s1, -8
// [Main]   sw zero, 0(s1)
// [Main]   addi s2, s11, -4
// [Main]   andi s11, s2, -8
// [Main]   sw zero, 0(s2)
// [Main]   addi a6, s11, -4
// [Main]   andi s11, a6, -8
// [Main]   sw zero, 0(a6)
// [Main]   addi a0, s11, -4
// [Main]   andi s11, a0, -8
// [Main]   li a1, 9
// [Main]   sw a1, 0(a0)
// [Main]   li a1, 9
// [Main]   mv a2, s0
// [Main]   mv a7, s2
// [Main]   mv t0, s1
// [Main]   call compute40.515
// [Main]   lw a0, 0(s1)
// [Main]   lw a2, 0(s2)
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   sw a0, 0(a1)
// [Main]   sw a2, 4(a1)
// [Main]   lw s0, 0(a1)
// [Main]   lw a0, 4(a1)
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_count59.517
// [Main]   .type init_count59.517, @function
// [Main] # leaf false
// [Main] init_count59.517:
// [Main] .init_count59.517_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a2, 0(a0)
// [Main]   li a3, 1
// [Main]   beq a2, a3, .init_count59.517_1
// [Main] 
// [Main] .init_count59.517_2:
// [Main]   lw a2, 0(a0)
// [Main]   addi a3, a2, -1
// [Main]   th.surw a2, a1, a3, 2
// [Main]   lw a2, 0(a0)
// [Main]   addi a2, a2, -1
// [Main]   sw a2, 0(a0)
// [Main]   call init_count59.517
// [Main] 
// [Main] .init_count59.517_3:
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .init_count59.517_1:
// [Main]   mv a0, zero
// [Main]   j .init_count59.517_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl compute40.515
// [Main]   .type compute40.515, @function
// [Main] # leaf false
// [Main] compute40.515:
// [Main] .compute40.515_8:
// [Main]   addi sp, sp, -96
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   sd s8, 72(sp)
// [Main]   sd s9, 80(sp)
// [Main]   sd s10, 88(sp)
// [Main]   mv s8, a0
// [Main]   mv s0, a1
// [Main]   mv s7, a2
// [Main]   mv s2, a3
// [Main]   mv s6, a4
// [Main]   mv s3, a5
// [Main]   mv s1, a6
// [Main]   mv s5, a7
// [Main]   mv s4, t0
// [Main] 
// [Main] .compute40.515_0:
// [Main]   lw a0, 0(s8)
// [Main]   li a1, 1
// [Main]   blt a0, a1, .compute40.515_2
// [Main] 
// [Main] .compute40.515_1:
// [Main] 
// [Main] .compute40.515_59:
// [Main]   mv a0, zero
// [Main]   mv a2, s0
// [Main]   mv a3, s7
// [Main]   mv a4, s2
// [Main] 
// [Main] .compute40.515_54:
// [Main]   addi a1, a2, -1
// [Main]   blt a1, a0, .compute40.515_56
// [Main] 
// [Main] .compute40.515_55:
// [Main]   th.lurw a1, a3, a0, 2
// [Main]   th.surw a1, a4, a0, 2
// [Main]   addi a0, a0, 1
// [Main]   j .compute40.515_54
// [Main] 
// [Main] .compute40.515_56:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.515_57:
// [Main] 
// [Main] .compute40.515_9:
// [Main]   mv a0, s8
// [Main]   mv a1, s6
// [Main]   call init_count59.517
// [Main]   sw zero, 0(s3)
// [Main]   lw a0, 0(s2)
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw a0, 0(a1)
// [Main] 
// [Main] .compute40.515_36:
// [Main]   mv a4, s2
// [Main]   mv a3, s3
// [Main] 
// [Main] .compute40.515_31:
// [Main]   lw a0, 0(a1)
// [Main]   beq a0, zero, .compute40.515_32
// [Main] 
// [Main] .compute40.515_33:
// [Main]   addi a0, s11, -4
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main] 
// [Main] .compute40.515_45:
// [Main]   mv a2, zero
// [Main]   mv a5, a0
// [Main] 
// [Main] .compute40.515_40:
// [Main]   lw a0, 0(a1)
// [Main]   srai a0, a0, 1
// [Main]   blt a0, a2, .compute40.515_42
// [Main] 
// [Main] .compute40.515_41:
// [Main]   th.lurw a0, a4, a2, 2
// [Main]   sw a0, 0(a5)
// [Main]   lw a0, 0(a1)
// [Main]   sub a0, a0, a2
// [Main]   th.lurw a0, a4, a0, 2
// [Main]   th.surw a0, a4, a2, 2
// [Main]   lw a0, 0(a1)
// [Main]   sub a0, a0, a2
// [Main]   lw a6, 0(a5)
// [Main]   th.surw a6, a4, a0, 2
// [Main]   addi a0, a2, 1
// [Main]   mv a2, a0
// [Main]   j .compute40.515_40
// [Main] 
// [Main] .compute40.515_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.515_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   ld s8, 72(sp)
// [Main]   ld s9, 80(sp)
// [Main]   ld s10, 88(sp)
// [Main]   addi sp, sp, 96
// [Main]   ret
// [Main] 
// [Main] .compute40.515_42:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.515_43:
// [Main] 
// [Main] .compute40.515_37:
// [Main]   lw a0, 0(a4)
// [Main]   sw a0, 0(a1)
// [Main]   lw a0, 0(a3)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(a3)
// [Main]   j .compute40.515_31
// [Main] 
// [Main] .compute40.515_32:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.515_34:
// [Main] 
// [Main] .compute40.515_10:
// [Main]   lw a0, 0(s4)
// [Main]   lw a1, 0(s3)
// [Main]   blt a1, a0, .compute40.515_4
// [Main] 
// [Main] .compute40.515_3:
// [Main]   lw a0, 0(s3)
// [Main]   sw a0, 0(s4)
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.515_5:
// [Main]   lw a0, 0(s5)
// [Main]   lw a1, 0(s3)
// [Main]   lw a2, 0(s1)
// [Main]   andi a2, a2, 1
// [Main]   slli a2, a2, 1
// [Main]   li a3, 1
// [Main]   sub a2, a3, a2
// [Main]   mul a1, a1, a2
// [Main]   add a0, a0, a1
// [Main]   sw a0, 0(s5)
// [Main]   addi a0, s11, -4
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw zero, 0(a1)
// [Main] 
// [Main] .compute40.515_71:
// [Main]   mv s9, a1
// [Main]   mv s10, a0
// [Main] 
// [Main] .compute40.515_60:
// [Main]   lw a0, 0(s10)
// [Main]   li a1, 1
// [Main]   bne a0, a1, .compute40.515_62
// [Main] 
// [Main] .compute40.515_61:
// [Main]   lw a0, 0(s8)
// [Main]   beq a0, s0, .compute40.515_63
// [Main] 
// [Main] .compute40.515_64:
// [Main]   lw a0, 0(s7)
// [Main]   sw a0, 0(s9)
// [Main]   mv a0, zero
// [Main]   mv a1, s7
// [Main]   mv a2, s8
// [Main]   call move_perm1_forward197.521
// [Main]   lw a0, 0(s8)
// [Main]   lw a1, 0(s9)
// [Main]   th.surw a1, s7, a0, 2
// [Main]   lw a0, 0(s8)
// [Main]   th.lurw a1, s6, a0, 2
// [Main]   addi a1, a1, -1
// [Main]   th.surw a1, s6, a0, 2
// [Main]   lw a0, 0(s8)
// [Main]   th.lurw a0, s6, a0, 2
// [Main]   li a1, 1
// [Main]   bge a0, a1, .compute40.515_65
// [Main] 
// [Main] .compute40.515_66:
// [Main]   lw a0, 0(s8)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s8)
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.515_67:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.515_68:
// [Main]   j .compute40.515_60
// [Main] 
// [Main] .compute40.515_65:
// [Main]   sw zero, 0(s10)
// [Main]   mv a0, zero
// [Main]   j .compute40.515_67
// [Main] 
// [Main] .compute40.515_63:
// [Main]   sw zero, 0(s10)
// [Main]   sw zero, 0(s8)
// [Main]   mv a0, zero
// [Main]   j .compute40.515_68
// [Main] 
// [Main] .compute40.515_62:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute40.515_69:
// [Main] 
// [Main] .compute40.515_11:
// [Main]   lw a0, 0(s1)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s1)
// [Main]   j .compute40.515_0
// [Main] 
// [Main] .compute40.515_4:
// [Main]   mv a0, zero
// [Main]   j .compute40.515_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl move_perm1_forward197.521
// [Main]   .type move_perm1_forward197.521, @function
// [Main] # leaf false
// [Main] move_perm1_forward197.521:
// [Main] .move_perm1_forward197.521_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a3, a0
// [Main]   lw a0, 0(a2)
// [Main]   addi a0, a0, -1
// [Main]   blt a0, a3, .move_perm1_forward197.521_2
// [Main] 
// [Main] .move_perm1_forward197.521_1:
// [Main]   addi a0, a3, 1
// [Main]   th.lurw a4, a1, a0, 2
// [Main]   th.surw a4, a1, a3, 2
// [Main]   call move_perm1_forward197.521
// [Main]   mv a0, zero
// [Main] 
// [Main] .move_perm1_forward197.521_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .move_perm1_forward197.521_2:
// [Main]   mv a0, zero
// [Main]   j .move_perm1_forward197.521_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main262.513
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_arr9.514
// [Main]   .type init_arr9.514, @function
// [Main] # leaf true
// [Main] init_arr9.514:
// [Main] .init_arr9.514_5:
// [Main]   mv a4, a0
// [Main]   mv a3, a1
// [Main]   mv a0, a2
// [Main]   mv a1, a4
// [Main]   mv a2, a3
// [Main]   mv a3, a0
// [Main] 
// [Main] .init_arr9.514_0:
// [Main]   addi a0, a2, -1
// [Main]   blt a0, a1, .init_arr9.514_2
// [Main] 
// [Main] .init_arr9.514_1:
// [Main]   th.surw a1, a3, a1, 2
// [Main]   addi a0, a1, 1
// [Main]   mv a1, a0
// [Main]   j .init_arr9.514_0
// [Main] 
// [Main] .init_arr9.514_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .init_arr9.514_3:
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main262.513
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[Int32(val=0), Int32(val=9), Mem(fref=f8, mref=m0)])
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m2) -> $f8.m2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m3, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m4, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m4) -> $f8.m4
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m5, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m5) -> $f8.m5
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m6, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f8, mref=m6) -> $f8.m6
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m7, fills=[Init(val=Int32(val=9))])
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Lowering insn Call(ty=Unit, f=f7, args=[Mem(fref=f8, mref=m7), Int32(val=9), Mem(fref=f8, mref=m0), Mem(fref=f8, mref=m1), Mem(fref=f8, mref=m2), Mem(fref=f8, mref=m3), Mem(fref=f8, mref=m6), Mem(fref=f8, mref=m5), Mem(fref=f8, mref=m4)])
// [Wasm] Get Local name Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name Mem(fref=f8, mref=m2) -> $f8.m2
// [Wasm] Get Local name Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Get Local name Mem(fref=f8, mref=m6) -> $f8.m6
// [Wasm] Get Local name Mem(fref=f8, mref=m5) -> $f8.m5
// [Wasm] Get Local name Mem(fref=f8, mref=m4) -> $f8.m4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m4), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m4) -> $f8.m4
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m5), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f8, mref=m5) -> $f8.m5
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m8, fills=[Field(index=0, val=Insn(iref=%10)), Field(index=1, val=Insn(iref=%11))])
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m8), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f8, mref=m8), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Return(args=[Insn(iref=%16)])
// [Wasm] Local Mem(fref=f8, mref=m8) -> $f8.m8
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Local Mem(fref=f8, mref=m7) -> $f8.m7
// [Wasm] Local Mem(fref=f8, mref=m6) -> $f8.m6
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Mem(fref=f8, mref=m5) -> $f8.m5
// [Wasm] Local Mem(fref=f8, mref=m3) -> $f8.m3
// [Wasm] Local Mem(fref=f8, mref=m2) -> $f8.m2
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Mem(fref=f8, mref=m4) -> $f8.m4
// [Wasm] Local Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Lowered function main262.513 to wasm
// [Wasm] Lowering function init_arr9.514
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.2), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=BlockParam(bref=b0, bpref=$b.0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function init_arr9.514 to wasm
// [Wasm] Lowering function move_perm1_forward197.521
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f5, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f5, fpref=$f.1), offset=Insn(iref=%3), width=@32))
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f5, fpref=$f.1), offset=FnParam(fref=f5, fpref=$f.0), width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[Insn(iref=%3), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f5, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f5, fpref=$f.0), Insn(iref=%1)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function move_perm1_forward197.521 to wasm
// [Wasm] Lowering function init_count59.517
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%2), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.1), offset=Insn(iref=%3), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%6), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.0), index=0, width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%9)])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.0), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function init_count59.517 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f8, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function compute40.515
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b54, bpref=$b.2), offset=BlockParam(bref=b54, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.2) -> $b54.$b.2
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b54, bpref=$b.3), offset=BlockParam(bref=b54, bpref=$b.0), width=@32), val=Insn(iref=%56))
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.3) -> $b54.$b.3
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b54, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering control Jump(target=b54, args=[Insn(iref=%58), BlockParam(bref=b54, bpref=$b.1), BlockParam(bref=b54, bpref=$b.2), BlockParam(bref=b54, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.1) -> $b54.$b.1
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.1) -> $b54.$b.1
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.2) -> $b54.$b.2
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.2) -> $b54.$b.2
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.3) -> $b54.$b.3
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.3) -> $b54.$b.3
// [Wasm] Lowering control Jump(target=b60, args=[BlockParam(bref=b60, bpref=$b.0), BlockParam(bref=b60, bpref=$b.1), BlockParam(bref=b60, bpref=$b.2), BlockParam(bref=b60, bpref=$b.3), BlockParam(bref=b60, bpref=$b.4), BlockParam(bref=b60, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.0) -> $b60.$b.0
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.0) -> $b60.$b.0
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.1) -> $b60.$b.1
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.1) -> $b60.$b.1
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.2) -> $b60.$b.2
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.2) -> $b60.$b.2
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.5) -> $b60.$b.5
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.5) -> $b60.$b.5
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b60, bpref=$b.2), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.2) -> $b60.$b.2
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.4), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Lowering control Jump(target=b68, args=[Unit])
// [Wasm] Lowering control Jump(target=b68, args=[Unit])
// [Wasm] Lowering insn Store(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b60, bpref=$b.2), index=0, width=@32), val=Bool(val=false))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.2) -> $b60.$b.2
// [Wasm] Lowering control Jump(target=b67, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.4), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Get Local name Insn(iref=%80) -> $%80
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%80), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%80) -> $%80
// [Wasm] Get Local name Insn(iref=%81) -> $%81
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.4), index=0, width=@32), val=Insn(iref=%81))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Get Local name Insn(iref=%81) -> $%81
// [Wasm] Lowering control Jump(target=b67, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.1), index=0, width=@32), val=Insn(iref=%65))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.1) -> $b60.$b.1
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[Int32(val=0), BlockParam(bref=b60, bpref=$b.3), BlockParam(bref=b60, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.4), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Get Local name Insn(iref=%68) -> $%68
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.1) -> $b60.$b.1
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b60, bpref=$b.3), offset=Insn(iref=%68), width=@32), val=Insn(iref=%69))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Get Local name Insn(iref=%68) -> $%68
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.4), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Get Local name Insn(iref=%71) -> $%71
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b60, bpref=$b.5), offset=Insn(iref=%71), width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.5) -> $b60.$b.5
// [Wasm] Get Local name Insn(iref=%71) -> $%71
// [Wasm] Get Local name Insn(iref=%73) -> $%73
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%73), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%73) -> $%73
// [Wasm] Get Local name Insn(iref=%74) -> $%74
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b60, bpref=$b.5), offset=Insn(iref=%71), width=@32), val=Insn(iref=%74))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.5) -> $b60.$b.5
// [Wasm] Get Local name Insn(iref=%71) -> $%71
// [Wasm] Get Local name Insn(iref=%74) -> $%74
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.4), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Get Local name Insn(iref=%76) -> $%76
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b60, bpref=$b.5), offset=Insn(iref=%76), width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.5) -> $b60.$b.5
// [Wasm] Get Local name Insn(iref=%76) -> $%76
// [Wasm] Get Local name Insn(iref=%77) -> $%77
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%77)])
// [Wasm] Get Local name Insn(iref=%77) -> $%77
// [Wasm] Get Local name Insn(iref=%78) -> $%78
// [Wasm] Lowering control Branch(cond=Insn(iref=%78), t=b65, t_args=[], f=b66, f_args=[])
// [Wasm] Get Local name Insn(iref=%78) -> $%78
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b60, bpref=$b.4), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%61), BlockParam(bref=b60, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.0) -> $b60.$b.0
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Lowering control Branch(cond=Insn(iref=%62), t=b63, t_args=[], f=b64, f_args=[])
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.6), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%28), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.6), index=0, width=@32), val=Insn(iref=%29))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5), BlockParam(bref=b0, bpref=$b.6), BlockParam(bref=b0, bpref=$b.7), BlockParam(bref=b0, bpref=$b.8)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Lowering control Jump(target=b11, args=[BlockParam(bref=b69, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b69, args=[Unit])
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b60, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.2) -> $b60.$b.2
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%59), Bool(val=true)])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering control Branch(cond=Insn(iref=%60), t=b61, t_args=[], f=b62, f_args=[])
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering control Jump(target=b70, args=[BlockParam(bref=b0, bpref=$b.1), Mem(fref=f7, mref=m2), Mem(fref=f7, mref=m1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.0) -> $b60.$b.0
// [Wasm] Get Local name Mem(fref=f7, mref=m2) -> $f7.m2
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.1) -> $b60.$b.1
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.2) -> $b60.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b60, bpref=$b.5) -> $b60.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.7), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.6), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%15), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%17), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%15), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%19), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=1), Insn(iref=%20)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%14), Insn(iref=%21)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%13), Insn(iref=%22)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.7), index=0, width=@32), val=Insn(iref=%23))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Init(val=Bool(val=true))])
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f7, mref=m2) -> $f7.m2
// [Wasm] Lowering control Jump(target=b71, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.8), index=0, width=@32), val=Insn(iref=%11))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.8), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%8), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Branch(cond=Insn(iref=%10), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b10, args=[BlockParam(bref=b34, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b34, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b40, bpref=$b.3), offset=BlockParam(bref=b40, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b40, bpref=$b.1), index=0, width=@32), val=Insn(iref=%43))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b40, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%45), BlockParam(bref=b40, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b40, bpref=$b.3), offset=Insn(iref=%46), width=@32))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b40, bpref=$b.3), offset=BlockParam(bref=b40, bpref=$b.0), width=@32), val=Insn(iref=%47))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b40, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%49), BlockParam(bref=b40, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b40, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b40, bpref=$b.3), offset=Insn(iref=%50), width=@32), val=Insn(iref=%51))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b40, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering control Jump(target=b40, args=[Insn(iref=%53), BlockParam(bref=b40, bpref=$b.1), BlockParam(bref=b40, bpref=$b.2), BlockParam(bref=b40, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.0), index=0, width=@32), val=Insn(iref=%35))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%37), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.2), index=0, width=@32), val=Insn(iref=%38))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering control Jump(target=b31, args=[BlockParam(bref=b31, bpref=$b.0), BlockParam(bref=b31, bpref=$b.1), BlockParam(bref=b31, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Lowering control Jump(target=b37, args=[BlockParam(bref=b43, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b43, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b40, bpref=$b.2), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%40), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b40, bpref=$b.0), Insn(iref=%41)])
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering control Branch(cond=Insn(iref=%42), t=b41, t_args=[], f=b42, f_args=[])
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering control Jump(target=b44, args=[Int32(val=0), Mem(fref=f7, mref=m31), BlockParam(bref=b31, bpref=$b.0), BlockParam(bref=b31, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Get Local name Mem(fref=f7, mref=m31) -> $f7.m31
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m31, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f7, mref=m31) -> $f7.m31
// [Wasm] Lowering control Jump(target=b45, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b31, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%31), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering control Branch(cond=Insn(iref=%32), t=b32, t_args=[], f=b33, f_args=[])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering control Jump(target=b35, args=[Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Insn(iref=%5))])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Lowering control Jump(target=b36, args=[])
// [Wasm] Lowering control Jump(target=b9, args=[BlockParam(bref=b57, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b57, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b54, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.1) -> $b54.$b.1
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b54, bpref=$b.0), Insn(iref=%54)])
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering control Branch(cond=Insn(iref=%55), t=b55, t_args=[], f=b56, f_args=[])
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering control Jump(target=b58, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.1) -> $b54.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.2) -> $b54.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.3) -> $b54.$b.3
// [Wasm] Lowering control Jump(target=b59, args=[])
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f7, fpref=$f.0), FnParam(fref=f7, fpref=$f.1), FnParam(fref=f7, fpref=$f.2), FnParam(fref=f7, fpref=$f.3), FnParam(fref=f7, fpref=$f.4), FnParam(fref=f7, fpref=$f.5), FnParam(fref=f7, fpref=$f.6), FnParam(fref=f7, fpref=$f.7), FnParam(fref=f7, fpref=$f.8)])
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.7) -> $$f.7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.8) -> $$f.8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.7) -> $$f.7
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.8) -> $$f.8
// [Wasm] Local BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local BlockParam(bref=b54, bpref=$b.2) -> $b54.$b.2
// [Wasm] Local Insn(iref=%76) -> $%76
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local BlockParam(bref=b40, bpref=$b.2) -> $b40.$b.2
// [Wasm] Local Insn(iref=%81) -> $%81
// [Wasm] Local Insn(iref=%56) -> $%56
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%65) -> $%65
// [Wasm] Local Insn(iref=%68) -> $%68
// [Wasm] Local Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Local BlockParam(bref=b60, bpref=$b.3) -> $b60.$b.3
// [Wasm] Local Insn(iref=%73) -> $%73
// [Wasm] Local BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Local BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Local Mem(fref=f7, mref=m31) -> $f7.m31
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%74) -> $%74
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local BlockParam(bref=b54, bpref=$b.1) -> $b54.$b.1
// [Wasm] Local Insn(iref=%53) -> $%53
// [Wasm] Local Insn(iref=%78) -> $%78
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%54) -> $%54
// [Wasm] Local Insn(iref=%60) -> $%60
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Mem(fref=f7, mref=m2) -> $f7.m2
// [Wasm] Local Insn(iref=%55) -> $%55
// [Wasm] Local Insn(iref=%71) -> $%71
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local BlockParam(bref=b40, bpref=$b.0) -> $b40.$b.0
// [Wasm] Local Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Local BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Local BlockParam(bref=b31, bpref=$b.1) -> $b31.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local Insn(iref=%50) -> $%50
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%77) -> $%77
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local Insn(iref=%80) -> $%80
// [Wasm] Local BlockParam(bref=b60, bpref=$b.1) -> $b60.$b.1
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%58) -> $%58
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b54, bpref=$b.3) -> $b54.$b.3
// [Wasm] Local BlockParam(bref=b60, bpref=$b.2) -> $b60.$b.2
// [Wasm] Local BlockParam(bref=b31, bpref=$b.2) -> $b31.$b.2
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Insn(iref=%62) -> $%62
// [Wasm] Local BlockParam(bref=b60, bpref=$b.0) -> $b60.$b.0
// [Wasm] Local BlockParam(bref=b60, bpref=$b.4) -> $b60.$b.4
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%61) -> $%61
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local BlockParam(bref=b40, bpref=$b.1) -> $b40.$b.1
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local BlockParam(bref=b40, bpref=$b.3) -> $b40.$b.3
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local BlockParam(bref=b60, bpref=$b.5) -> $b60.$b.5
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%69) -> $%69
// [Wasm] Lowered function compute40.515 to wasm
// [KnfOpt] freq: {fannkuch1: Once, gen_perm14: Once, init_arr9: Many(2), compute40: Many(2), copy_perm46: Many(2), init_count59: Many(2), do_flip90: Many(2), flip_loop99: Many(2), go_loop179: Many(2), move_perm1_forward197: Many(2), main262: Once}
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(gen_perm14)
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 43
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 43
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 83
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 83
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 119
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 119
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 375
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 375
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(fannkuch1)
// [KnfOpt] Numbers of let rec: 9 9 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %24: Call(ty=Unit, f=f6, args=[FnParam(fref=f6, fpref=$f.0), FnParam(fref=f6, fpref=$f.1), FnParam(fref=f6, fpref=$f.2), FnParam(fref=f6, fpref=$f.3), FnParam(fref=f6, fpref=$f.4), FnParam(fref=f6, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f4, args=[FnParam(fref=f4, fpref=$f.0), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f0, args=[Insn(iref=%3), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f1, args=[Insn(iref=%4), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %14: Call(ty=Unit, f=f3, args=[Insn(iref=%13), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %31: Call(ty=Unit, f=f7, args=[FnParam(fref=f7, fpref=$f.0), FnParam(fref=f7, fpref=$f.1), FnParam(fref=f7, fpref=$f.2), FnParam(fref=f7, fpref=$f.3), FnParam(fref=f7, fpref=$f.4), FnParam(fref=f7, fpref=$f.5), FnParam(fref=f7, fpref=$f.6), FnParam(fref=f7, fpref=$f.7), FnParam(fref=f7, fpref=$f.8)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f4: Once, f8: Once, f0: Once, f1: Once, f5: Multiple, f2: Multiple, f18: Once, f3: Once, f7: Once})
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] do_flip90.518 is inlining Call(ty=Unit, f=f3, args=[Int32(val=0), Mem(fref=f4, mref=m0), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [CoreOpt] shifted callee .fn flip_loop99.519 #f3 : fn(int32, array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b14 {
// [CoreOpt]   .bb #b9 (int32, array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %9: int32 = load int32 field($b9.2, 0 * @32)
// [CoreOpt]     let %10: int32 = div(%9, 2)
// [CoreOpt]     let %11: bool = le($b9.0, %10)
// [CoreOpt]     br %11 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     let %12: int32 = load int32 offset($b9.3, $b9.0 * @32)
// [CoreOpt]     let _ = store int32 field($b9.1, 0 * @32) <- %12
// [CoreOpt]     let %14: int32 = load int32 field($b9.2, 0 * @32)
// [CoreOpt]     let %15: int32 = sub(%14, $b9.0)
// [CoreOpt]     let %16: int32 = load int32 offset($b9.3, %15 * @32)
// [CoreOpt]     let _ = store int32 offset($b9.3, $b9.0 * @32) <- %16
// [CoreOpt]     let %18: int32 = load int32 field($b9.2, 0 * @32)
// [CoreOpt]     let %19: int32 = sub(%18, $b9.0)
// [CoreOpt]     let %20: int32 = load int32 field($b9.1, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($b9.3, %19 * @32) <- %20
// [CoreOpt]     let %22: int32 = add($b9.0, 1)
// [CoreOpt]     jump b9(%22, $b9.1, $b9.2, $b9.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     jump b12(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 (unit) {
// [CoreOpt]     return $b12.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b13 pre #Some(b14) header #b9 {
// [CoreOpt]     .block #b10
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b12
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     jump b13($f0, $f1, $f2, $f3)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] compute40.515 is inlining Call(ty=Unit, f=f4, args=[Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.5)])
// [CoreOpt] shifted callee .fn do_flip90.518 #f4 : fn(array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b36 {
// [CoreOpt]   .bb #b31 (array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %31: int32 = load int32 field($b31.0, 0 * @32)
// [CoreOpt]     let %32: bool = eq(%31, 0)
// [CoreOpt]     br %32 b32() b33()
// [CoreOpt]   }
// [CoreOpt]   .bb #b32 () {
// [CoreOpt]     jump b34(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b33 () {
// [CoreOpt]     let _ = alloc <m31: array[int32] heap(1)> <- [..] = 0
// [CoreOpt]     jump b45()
// [CoreOpt]   }
// [CoreOpt]   .bb #b34 (unit) {
// [CoreOpt]     return $b34.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b35 pre #Some(b36) header #b31 {
// [CoreOpt]     .block #b32
// [CoreOpt]     .block #b33
// [CoreOpt]     .block #b34
// [CoreOpt]   }
// [CoreOpt]   .bb #b36 () {
// [CoreOpt]     jump b35($f0, $f1, $f2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b37 (unit) {
// [CoreOpt]     let %35: int32 = load int32 field($b31.1, 0 * @32)
// [CoreOpt]     let _ = store int32 field($b31.0, 0 * @32) <- %35
// [CoreOpt]     let %37: int32 = load int32 field($b31.2, 0 * @32)
// [CoreOpt]     let %38: int32 = add(%37, 1)
// [CoreOpt]     let _ = store int32 field($b31.2, 0 * @32) <- %38
// [CoreOpt]     jump b31($b31.0, $b31.1, $b31.2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b40 (int32, array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %40: int32 = load int32 field($b40.2, 0 * @32)
// [CoreOpt]     let %41: int32 = div(%40, 2)
// [CoreOpt]     let %42: bool = le($b40.0, %41)
// [CoreOpt]     br %42 b41() b42()
// [CoreOpt]   }
// [CoreOpt]   .bb #b41 () {
// [CoreOpt]     let %43: int32 = load int32 offset($b40.3, $b40.0 * @32)
// [CoreOpt]     let _ = store int32 field($b40.1, 0 * @32) <- %43
// [CoreOpt]     let %45: int32 = load int32 field($b40.2, 0 * @32)
// [CoreOpt]     let %46: int32 = sub(%45, $b40.0)
// [CoreOpt]     let %47: int32 = load int32 offset($b40.3, %46 * @32)
// [CoreOpt]     let _ = store int32 offset($b40.3, $b40.0 * @32) <- %47
// [CoreOpt]     let %49: int32 = load int32 field($b40.2, 0 * @32)
// [CoreOpt]     let %50: int32 = sub(%49, $b40.0)
// [CoreOpt]     let %51: int32 = load int32 field($b40.1, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($b40.3, %50 * @32) <- %51
// [CoreOpt]     let %53: int32 = add($b40.0, 1)
// [CoreOpt]     jump b40(%53, $b40.1, $b40.2, $b40.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b42 () {
// [CoreOpt]     jump b43(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b43 (unit) {
// [CoreOpt]     jump b37($b43.0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b44 pre #Some(b45) header #b40 {
// [CoreOpt]     .block #b41
// [CoreOpt]     .block #b42
// [CoreOpt]     .block #b43
// [CoreOpt]   }
// [CoreOpt]   .bb #b45 () {
// [CoreOpt]     jump b44(0, f4.m31, $b31.0, $b31.1)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] compute40.515 is inlining Call(ty=Unit, f=f1, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3)])
// [CoreOpt] shifted callee .fn copy_perm46.516 #f1 : fn(int32, int32, array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b59 {
// [CoreOpt]   .bb #b54 (int32, int32, array[int32], array[int32]) {
// [CoreOpt]     let %54: int32 = sub($b54.1, 1)
// [CoreOpt]     let %55: bool = le($b54.0, %54)
// [CoreOpt]     br %55 b55() b56()
// [CoreOpt]   }
// [CoreOpt]   .bb #b55 () {
// [CoreOpt]     let %56: int32 = load int32 offset($b54.2, $b54.0 * @32)
// [CoreOpt]     let _ = store int32 offset($b54.3, $b54.0 * @32) <- %56
// [CoreOpt]     let %58: int32 = add($b54.0, 1)
// [CoreOpt]     jump b54(%58, $b54.1, $b54.2, $b54.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b56 () {
// [CoreOpt]     jump b57(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b57 (unit) {
// [CoreOpt]     return $b57.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b58 pre #Some(b59) header #b54 {
// [CoreOpt]     .block #b55
// [CoreOpt]     .block #b56
// [CoreOpt]     .block #b57
// [CoreOpt]   }
// [CoreOpt]   .bb #b59 () {
// [CoreOpt]     jump b58($f0, $f1, $f2, $f3)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] compute40.515 is inlining Call(ty=Unit, f=f6, args=[BlockParam(bref=b0, bpref=$b.1), Mem(fref=f7, mref=m2), Mem(fref=f7, mref=m1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.4)])
// [CoreOpt] shifted callee .fn go_loop179.520 #f6 : fn(int32, array[int32], array[bool], array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b71 {
// [CoreOpt]   .bb #b60 (int32, array[int32], array[bool], array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %59: bool = load bool field($b60.2, 0 * @32)
// [CoreOpt]     let %60: bool = eq(%59, true)
// [CoreOpt]     br %60 b61() b62()
// [CoreOpt]   }
// [CoreOpt]   .bb #b61 () {
// [CoreOpt]     let %61: int32 = load int32 field($b60.4, 0 * @32)
// [CoreOpt]     let %62: bool = eq(%61, $b60.0)
// [CoreOpt]     br %62 b63() b64()
// [CoreOpt]   }
// [CoreOpt]   .bb #b62 () {
// [CoreOpt]     jump b69(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b63 () {
// [CoreOpt]     let _ = store bool field($b60.2, 0 * @32) <- false
// [CoreOpt]     let _ = store int32 field($b60.4, 0 * @32) <- 0
// [CoreOpt]     jump b68(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b64 () {
// [CoreOpt]     let %65: int32 = load int32 field($b60.3, 0 * @32)
// [CoreOpt]     let _ = store int32 field($b60.1, 0 * @32) <- %65
// [CoreOpt]     let %67: unit = call f5(0, $b60.3, $b60.4)
// [CoreOpt]     let %68: int32 = load int32 field($b60.4, 0 * @32)
// [CoreOpt]     let %69: int32 = load int32 field($b60.1, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($b60.3, %68 * @32) <- %69
// [CoreOpt]     let %71: int32 = load int32 field($b60.4, 0 * @32)
// [CoreOpt]     let %72: int32 = load int32 field($b60.4, 0 * @32)
// [CoreOpt]     let %73: int32 = load int32 offset($b60.5, %72 * @32)
// [CoreOpt]     let %74: int32 = sub(%73, 1)
// [CoreOpt]     let _ = store int32 offset($b60.5, %71 * @32) <- %74
// [CoreOpt]     let %76: int32 = load int32 field($b60.4, 0 * @32)
// [CoreOpt]     let %77: int32 = load int32 offset($b60.5, %76 * @32)
// [CoreOpt]     let %78: bool = le(1, %77)
// [CoreOpt]     br %78 b65() b66()
// [CoreOpt]   }
// [CoreOpt]   .bb #b65 () {
// [CoreOpt]     let _ = store bool field($b60.2, 0 * @32) <- false
// [CoreOpt]     jump b67(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b66 () {
// [CoreOpt]     let %80: int32 = load int32 field($b60.4, 0 * @32)
// [CoreOpt]     let %81: int32 = add(%80, 1)
// [CoreOpt]     let _ = store int32 field($b60.4, 0 * @32) <- %81
// [CoreOpt]     jump b67(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b67 (unit) {
// [CoreOpt]     jump b68(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b68 (unit) {
// [CoreOpt]     jump b60($b60.0, $b60.1, $b60.2, $b60.3, $b60.4, $b60.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b69 (unit) {
// [CoreOpt]     return $b69.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b70 pre #Some(b71) header #b60 {
// [CoreOpt]     .block #b66
// [CoreOpt]     .block #b64
// [CoreOpt]     .block #b68
// [CoreOpt]     .block #b69
// [CoreOpt]     .block #b61
// [CoreOpt]     .block #b65
// [CoreOpt]     .block #b62
// [CoreOpt]     .block #b63
// [CoreOpt]     .block #b67
// [CoreOpt]   }
// [CoreOpt]   .bb #b71 () {
// [CoreOpt]     jump b70($f0, $f1, $f2, $f3, $f4, $f5)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f6
// [CoreOpt] Remove dead function: f4
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f3
// [CoreOpt] LVN subst Insn(iref=%6) with Insn(iref=%3)
// [CoreOpt] LVN subst Insn(iref=%4) with Insn(iref=%2)
// [CoreOpt] LVN subst Insn(iref=%72) with Insn(iref=%71)
// [CoreOpt] LVN subst Insn(iref=%16) with Insn(iref=%15)
// [CoreOpt2] LVN subst Insn(iref=%89) with Insn(iref=%92)
// [CoreOpt2] LVN subst Insn(iref=%99) with Insn(iref=%101)
// [CoreOpt2] LVN subst Insn(iref=%104) with Insn(iref=%105)
