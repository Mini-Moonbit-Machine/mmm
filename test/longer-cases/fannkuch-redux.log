// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v26, Insn(iref=%9) -> v19, Insn(iref=%16) -> v27, Insn(iref=%8) -> v18, Mem(fref=f8, mref=m6) -> v2, Insn(iref=%10) -> v20, Mem(fref=f8, mref=m5) -> v5, Insn(iref=%14) -> v25, Mem(fref=f8, mref=m4) -> v3, Insn(iref=%5) -> v15, Mem(fref=f8, mref=m1) -> v4, Insn(iref=%0) -> v10, Insn(iref=%4) -> v14, Insn(iref=%3) -> v13, Insn(iref=%13) -> v24, Insn(iref=%7) -> v17, Mem(fref=f8, mref=m0) -> v9, Mem(fref=f8, mref=m7) -> v8, Insn(iref=%2) -> v12, Insn(iref=%1) -> v11, Insn(iref=%11) -> v21, Mem(fref=f8, mref=m3) -> v7, Mem(fref=f8, mref=m2) -> v6, Self(fref=f8) -> v0, Insn(iref=%6) -> v16, Insn(iref=%12) -> [v22, v23]
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v9]
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, s11, v9]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, s11, v9]
// [Asm] defs: [a0]
// [Asm] live_set: [a0, s11, v9]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a0, a1, s11, v9]
// [Asm] move: a1 <- v9
// [Asm] defined: a1 is X
// [Asm] skip edge 4 -> 1
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, s11, v9]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [s11, v9]
// [Asm] move: v11 <- a0
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v9]
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v9]
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, s11, v9]
// [Asm] defined: s11 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v9]
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v6, s11, v9]
// [Asm] defined: s11 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v4, v6, v9]
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v7, v4, v6, s11, v9]
// [Asm] defined: s11 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v7, v4, v6, v9, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v7, v4, v6, s11, v9, v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v7, v4, v6, v9, v3]
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v7, v4, v6, s11, v9, v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2, v5, v7, v4, v6, v9, v3]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, v7, v4, v6, s11, v9, v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v5, v7, v8, v4, v6, v9, v3]
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, v7, v8, v4, v6, v9, v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v2, v5, v7, v8, v35, v4, v6, v9, v3]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v7, v8, v4, v6, v9, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v7, v8, v4, v6, v9, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v5, a0, v7, v4, v6, v9, v3]
// [Asm] move: a0 <- v8
// [Asm] defined: a0 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v2, v5, a0, v7, v4, v32, v6, v9, v3]
// [Asm] defined: v32 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v5, a0, v7, v4, v6, a1, v9, v3]
// [Asm] move: a1 <- v32
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, v5, a0, v7, a2, v4, v6, a1, v3]
// [Asm] move: a2 <- v9
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v2, v5, a0, v7, a2, a1, v6, a3, v3]
// [Asm] move: a3 <- v4
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v2, v5, a0, a4, v7, a2, a1, a3, v3]
// [Asm] move: a4 <- v6
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v2, v5, a5, a0, a4, a2, a1, a3, v3]
// [Asm] move: a5 <- v7
// [Asm] defined: a5 is X
// [Asm] defs: [a6]
// [Asm] live_set: [v5, a5, a0, a4, a6, a2, a1, a3, v3]
// [Asm] move: a6 <- v2
// [Asm] defined: a6 is X
// [Asm] defs: [a7]
// [Asm] live_set: [a7, v5, a5, a0, a4, a6, a2, a1, a3, v3]
// [Asm] move: a7 <- v5
// [Asm] defined: a7 is X
// [Asm] skip edge 15 -> 21
// [Asm] defs: [t0]
// [Asm] live_set: [a7, t0, v5, a5, a0, a4, a6, a2, a1, a3, v3]
// [Asm] move: t0 <- v3
// [Asm] defined: t0 is X
// [Asm] skip edge 5 -> 20
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, a0, v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v19]
// [Asm] live_set: [v5, v3]
// [Asm] move: v19 <- a0
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v3]
// [Asm] defs: [v24]
// [Asm] live_set: [v5, v24]
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v24]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v24]
// [Asm] defs: [a0]
// [Asm] live_set: [v24, a0]
// [Asm] move: a0 <- v25
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v24, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v26]
// [Asm] live_set: [v24]
// [Asm] move: v26 <- a0
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v24]
// [Asm] defs: []
// [Asm] live_set: [v24]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v24
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [v27]
// [Asm] move: v27 <- a0
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v27]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v27
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.513") clobbered_x: @hashset.of([a5, a0, s1, a4, s2, a6, s0, a1, a3])
// [Asm] Label("main.513") clobbered_f: @hashset.of([])
// [Asm] subst   addi v9, s11, -36 ->   addi s0, s11, -36
// [Asm] subst   andi s11, v9, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v9 ->   mv a1, s0
// [Asm] subst   call init_arr.514 ->   call init_arr.514
// [Asm] subst   addi v4, s11, -36 ->   addi a3, s11, -36
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a3, -8
// [Asm] subst   addi v6, s11, -36 ->   addi a4, s11, -36
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a4, -8
// [Asm] subst   addi v7, s11, -4 ->   addi a5, s11, -4
// [Asm] subst   andi s11, v7, -8 ->   andi s11, a5, -8
// [Asm] subst   addi v3, s11, -4 ->   addi s1, s11, -4
// [Asm] subst   andi s11, v3, -8 ->   andi s11, s1, -8
// [Asm] subst   addi v5, s11, -4 ->   addi s2, s11, -4
// [Asm] subst   andi s11, v5, -8 ->   andi s11, s2, -8
// [Asm] subst   addi v2, s11, -4 ->   addi a6, s11, -4
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a6, -8
// [Asm] subst   addi v8, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi s11, v8, -8 ->   andi s11, a0, -8
// [Asm] subst   li v35, 9 ->   li a1, 9
// [Asm] subst   sw v35, 0(v8) ->   sw a1, 0(a0)
// [Asm] subst   li v32, 9 ->   li a1, 9
// [Asm] subst   mv a2, v9 ->   mv a2, s0
// [Asm] subst   mv a7, v5 ->   mv a7, s2
// [Asm] subst   mv t0, v3 ->   mv t0, s1
// [Asm] subst   call compute.515 ->   call compute.515
// [Asm] subst   lw v24, 0(v3) ->   lw s0, 0(s1)
// [Asm] subst   lw v25, 0(v5) ->   lw a0, 0(s2)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v24 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [5, 0, 2, 3, 1]
// [Asm] LoweringOrder: [[4], [1, 2], [3], [], [0]]
// [Asm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 1), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b1, b2, b3]
// [Asm] LoweringOrder: HashMap::of([(b1, 2), (b5, 0), (b2, 0), (b3, 1), (b0, 1)])
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v8, FnParam(fref=f0, fpref=$f.1) -> v3, Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v7, Insn(iref=%2) -> v10, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v4, BlockParam(bref=b0, bpref=$b.1) -> v5, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v6
// [Asm] succs: [0]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=8)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v5, v12, zero]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move: v4 <- v2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move: v5 <- v3
// [Asm] defined: v5 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move: v7 <- zero
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero]
// [Asm] defined: v10 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move: v4 <- v10
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move: v5 <- v5
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] Label("init_arr.514") clobbered_x: @hashset.of([a2, a1, a0])
// [Asm] Label("init_arr.514") clobbered_f: @hashset.of([])
// [Asm] subst   li v12, 8 ->   li a0, 8
// [Asm] subst   blt v12, v4, .init_arr.514_2 ->   blt a0, a1, .init_arr.514_2
// [Asm] subst   mv v2, a0 ->   mv a2, a0
// [Asm] subst   mv v3, a1 ->   mv a0, a1
// [Asm] subst   mv v4, v2 ->   mv a1, a2
// [Asm] subst   mv v5, v3 ->   mv a2, a0
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v7, zero ->   mv a0, zero
// [Asm] subst   th.surw v4, v5, v4, 2 ->   th.surw a1, a2, a1, 2
// [Asm] subst   addi v10, v4, 1 ->   addi a0, a1, 1
// [Asm] subst   mv v4, v10 ->   mv a1, a0
// [Asm] subst   j .init_arr.514_0 ->   j .init_arr.514_0
// [Asm] LoweringOrder: [0, 2, 1, 3]
// [Asm] LoweringOrder: [[1, 2], [3], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 0)])
// [Asm] LoweringOrder: [b0, b1, b3, b2]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 2)])
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v10, Insn(iref=%3) -> v8, FnParam(fref=f5, fpref=$f.0) -> v2, Self(fref=f5) -> v0, Insn(iref=%7) -> v13, FnParam(fref=f5, fpref=$f.2) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%9) -> v11, Insn(iref=%2) -> v7, Insn(iref=%1) -> v6, Insn(iref=%10) -> v9, Insn(iref=%5) -> v12, Insn(iref=%0) -> v5, FnParam(fref=f5, fpref=$f.1) -> v3
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f5, fpref=$f.0), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%3), width=@32))
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f5, fpref=$f.0), Insn(iref=%1)])
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v2, v4, zero, v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v8, v2, v4, v10, zero, v3]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v3]
// [Asm] move: a0 <- v8
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0]
// [Asm] move: a1 <- v3
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move: a2 <- v4
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero]
// [Asm] move: v13 <- a0
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move: v14 <- zero
// [Asm] defined: v14 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move: v14 <- zero
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v14
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, a2, zero, v2]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v4, v5, zero, v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v4, v6, zero, v2]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] Label("move_perm1_forward.521") clobbered_x: @hashset.of([a2, a1, a3, a0, a4])
// [Asm] Label("move_perm1_forward.521") clobbered_f: @hashset.of([])
// [Asm] subst   addi v8, v2, 1 ->   addi a1, a0, 1
// [Asm] subst   th.lurw v10, v4, v8, 2 ->   th.lurw a4, a2, a1, 2
// [Asm] subst   th.surw v10, v4, v2, 2 ->   th.surw a4, a2, a0, 2
// [Asm] subst   mv a0, v8 ->   mv a0, a1
// [Asm] subst   mv a1, v3 ->   mv a1, a3
// [Asm] subst   call move_perm1_forward.521 ->   call move_perm1_forward.521
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   j .move_perm1_forward.521_3 ->   j .move_perm1_forward.521_3
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v3, a1 ->   mv a3, a1
// [Asm] subst   lw v5, 0(v3) ->   lw a1, 0(a3)
// [Asm] subst   addi v6, v5, -1 ->   addi a1, a1, -1
// [Asm] subst   blt v6, v2, .move_perm1_forward.521_2 ->   blt a1, a0, .move_perm1_forward.521_2
// [Asm] LoweringOrder: [0, 2, 1, 3]
// [Asm] LoweringOrder: [[1, 2], [3], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 0)])
// [Asm] LoweringOrder: [b0, b2, b3, b1]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 2)])
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v7, Insn(iref=%7) -> v11, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%2) -> v6, Insn(iref=%9) -> v13, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v5, Insn(iref=%8) -> v12, Self(fref=f2) -> v0, Insn(iref=%10) -> v8, Insn(iref=%6) -> v10, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%5) -> v9, Insn(iref=%0) -> v4
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%3), width=@32))
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=1)])
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] defined: v4 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v3, v4, zero, v20, v2]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] move: v14 <- zero
// [Asm] defined: v14 is X
// [Asm] skip edge 7 -> 3
// [Asm] defs: []
// [Asm] live_set: [v14, zero]
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v6, zero, v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v7, v6, zero, v3]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v10, zero, v3]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, zero, v3]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v3]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move: a1 <- v3
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13]
// [Asm] move: v13 <- a0
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v13]
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] move: v14 <- v13
// [Asm] defined: v14 is X
// [Asm] Label("init_count.517") clobbered_x: @hashset.of([a2, a1, a3, a0])
// [Asm] Label("init_count.517") clobbered_f: @hashset.of([])
// [Asm] subst   lw v4, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   li v20, 1 ->   li a3, 1
// [Asm] subst   beq v4, v20, .init_count.517_1 ->   beq a2, a3, .init_count.517_1
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   j .init_count.517_3 ->   j .init_count.517_3
// [Asm] subst   lw v6, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   addi v7, v6, -1 ->   addi a3, a2, -1
// [Asm] subst   th.surw v6, v3, v7, 2 ->   th.surw a2, a1, a3, 2
// [Asm] subst   lw v10, 0(v2) ->   lw a2, 0(a0)
// [Asm] subst   addi v11, v10, -1 ->   addi a2, a2, -1
// [Asm] subst   sw v11, 0(v2) ->   sw a2, 0(a0)
// [Asm] subst   call init_count.517 ->   call init_count.517
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f18) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [8, 0, 2, 6, 1, 59, 54, 56, 57, 9, 36, 31, 33, 45, 40, 42, 43, 37, 41, 32, 34, 10, 4, 3, 5, 71, 60, 62, 69, 11, 61, 64, 66, 65, 67, 63, 68, 55]
// [Asm] LoweringOrder: [[7], [1, 2], [6], [], [59], [58], [55, 56], [57], [9], [36], [35], [32, 33], [45], [44], [41, 42], [43], [37], [31], [40], [34], [10], [3, 4], [5], [5], [71], [70], [61, 62], [69], [11], [0], [63, 64], [65, 66], [67], [67], [68], [68], [60], [54]]
// [Asm] LoweringOrder: HashMap::of([(b9, 1), (b60, 7), (b32, 7), (b40, 1), (b62, 11), (b65, 9), (b1, 0), (b2, 3), (b6, 3), (b41, 1), (b61, 7), (b59, 0), (b31, 1), (b64, 7), (b67, 7), (b10, 7), (b5, 7), (b36, 1), (b45, 1), (b43, 5), (b8, 0), (b69, 11), (b37, 5), (b57, 1), (b42, 5), (b11, 11), (b34, 7), (b4, 13), (b55, 0), (b68, 7), (b71, 7), (b0, 0), (b66, 7), (b56, 1), (b54, 0), (b33, 1), (b3, 7), (b63, 10)])
// [Asm] LoweringOrder: [b8, b0, b1, b59, b54, b55, b56, b57, b9, b36, b31, b33, b45, b40, b41, b2, b6, b42, b43, b37, b32, b34, b10, b3, b5, b71, b60, b61, b64, b66, b67, b68, b65, b63, b62, b69, b11, b4]
// [Asm] LoweringOrder: HashMap::of([(b9, 2), (b60, 6), (b32, 0), (b40, 7), (b62, 0), (b65, 0), (b1, 2), (b2, 0), (b6, 1), (b41, 8), (b61, 7), (b59, 3), (b31, 4), (b64, 8), (b67, 10), (b10, 2), (b5, 4), (b36, 3), (b45, 6), (b43, 1), (b8, 0), (b69, 1), (b37, 2), (b57, 1), (b42, 0), (b11, 2), (b34, 1), (b4, 0), (b55, 5), (b68, 11), (b71, 5), (b0, 1), (b66, 9), (b56, 0), (b54, 4), (b33, 5), (b3, 3), (b63, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v81, Insn(iref=%33) -> v42, BlockParam(bref=b54, bpref=$b.2) -> v29, Insn(iref=%76) -> v121, BlockParam(bref=b10, bpref=$b.0) -> v72, Insn(iref=%10) -> v75, BlockParam(bref=b0, bpref=$b.4) -> v19, Insn(iref=%59) -> v99, BlockParam(bref=b40, bpref=$b.2) -> v45, BlockParam(bref=b67, bpref=$b.0) -> v127, Insn(iref=%4) -> v34, Insn(iref=%65) -> v108, Insn(iref=%26) -> v91, BlockParam(bref=b0, bpref=$b.6) -> v21, Mem(fref=f7, mref=m31) -> v14, BlockParam(bref=b9, bpref=$b.0) -> v32, Insn(iref=%31) -> v40, Insn(iref=%64) -> v107, Insn(iref=%78) -> v126, Insn(iref=%54) -> v30, Insn(iref=%60) -> v105, Insn(iref=%67) -> v110, Insn(iref=%13) -> v79, Insn(iref=%101) -> v112, Insn(iref=%79) -> v123, Insn(iref=%55) -> v132, Insn(iref=%66) -> v109, Insn(iref=%48) -> v64, Insn(iref=%23) -> v88, Insn(iref=%20) -> v85, BlockParam(bref=b40, bpref=$b.0) -> v43, Insn(iref=%36) -> v53, Mem(fref=f7, mref=m0) -> v13, FnParam(fref=f7, fpref=$f.7) -> v9, Insn(iref=%90) -> v62, Insn(iref=%50) -> v66, Insn(iref=%14) -> v80, Insn(iref=%80) -> v124, BlockParam(bref=b60, bpref=$b.1) -> v93, BlockParam(bref=b68, bpref=$b.0) -> v130, BlockParam(bref=b6, bpref=$b.0) -> v26, Insn(iref=%11) -> v76, BlockParam(bref=b60, bpref=$b.2) -> v94, BlockParam(bref=b31, bpref=$b.2) -> v39, Insn(iref=%104) -> v131, Insn(iref=%28) -> v102, Insn(iref=%9) -> v74, BlockParam(bref=b54, bpref=$b.0) -> v27, Insn(iref=%45) -> v60, BlockParam(bref=b0, bpref=$b.2) -> v17, Insn(iref=%70) -> v114, Insn(iref=%0) -> v24, Insn(iref=%61) -> v106, BlockParam(bref=b5, bpref=$b.0) -> v78, BlockParam(bref=b40, bpref=$b.3) -> v46, Insn(iref=%12) -> v77, BlockParam(bref=b0, bpref=$b.7) -> v22, BlockParam(bref=b69, bpref=$b.0) -> v100, Insn(iref=%41) -> v48, Insn(iref=%63) -> v129, Self(fref=f7) -> v0, Insn(iref=%8) -> v73, BlockParam(bref=b34, bpref=$b.0) -> v71, Insn(iref=%25) -> v90, Insn(iref=%39) -> v56, Insn(iref=%95) -> v120, Insn(iref=%81) -> v125, FnParam(fref=f7, fpref=$f.4) -> v6, Insn(iref=%56) -> v133, Insn(iref=%49) -> v65, Insn(iref=%42) -> v49, FnParam(fref=f7, fpref=$f.2) -> v4, Mem(fref=f7, mref=m1) -> v11, Insn(iref=%68) -> v111, BlockParam(bref=b60, bpref=$b.3) -> v95, Insn(iref=%73) -> v117, FnParam(fref=f7, fpref=$f.0) -> v2, BlockParam(bref=b0, bpref=$b.8) -> v23, Insn(iref=%74) -> v118, Insn(iref=%38) -> v55, BlockParam(bref=b54, bpref=$b.1) -> v28, Insn(iref=%75) -> v119, Insn(iref=%53) -> v70, BlockParam(bref=b0, bpref=$b.1) -> v16, Insn(iref=%5) -> v35, Insn(iref=%91) -> v57, Insn(iref=%19) -> v84, Mem(fref=f7, mref=m2) -> v12, FnParam(fref=f7, fpref=$f.8) -> v10, BlockParam(bref=b11, bpref=$b.0) -> v101, FnParam(fref=f7, fpref=$f.3) -> v5, BlockParam(bref=b31, bpref=$b.0) -> v37, BlockParam(bref=b31, bpref=$b.1) -> v38, BlockParam(bref=b43, bpref=$b.0) -> v50, Insn(iref=%100) -> v115, BlockParam(bref=b0, bpref=$b.5) -> v20, BlockParam(bref=b57, bpref=$b.0) -> v31, BlockParam(bref=b0, bpref=$b.3) -> v18, Insn(iref=%51) -> v67, Insn(iref=%77) -> v122, BlockParam(bref=b37, bpref=$b.0) -> v51, Insn(iref=%52) -> v69, Insn(iref=%44) -> v59, Insn(iref=%32) -> v41, Insn(iref=%58) -> v98, FnParam(fref=f7, fpref=$f.6) -> v8, Insn(iref=%1) -> v25, Insn(iref=%57) -> v134, Insn(iref=%6) -> v36, Insn(iref=%35) -> v52, Insn(iref=%62) -> v128, FnParam(fref=f7, fpref=$f.1) -> v3, BlockParam(bref=b60, bpref=$b.0) -> v92, BlockParam(bref=b60, bpref=$b.4) -> v96, FnParam(fref=f7, fpref=$f.5) -> v7, Insn(iref=%46) -> v61, Insn(iref=%24) -> v89, Insn(iref=%37) -> v54, BlockParam(bref=b0, bpref=$b.0) -> v15, Insn(iref=%29) -> v103, Insn(iref=%47) -> v63, Insn(iref=%3) -> v33, BlockParam(bref=b40, bpref=$b.1) -> v44, Insn(iref=%18) -> v83, Insn(iref=%22) -> v87, Insn(iref=%85) -> v68, Insn(iref=%17) -> v82, Insn(iref=%72) -> v116, Insn(iref=%43) -> v58, BlockParam(bref=b60, bpref=$b.5) -> v97, Insn(iref=%30) -> v104, Insn(iref=%21) -> v86, Insn(iref=%40) -> v47, Insn(iref=%69) -> v113
// [Asm] succs: [54]
// [Asm] critical edges for b55: []
// [Asm] critical color seq for b55: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b54, bpref=$b.0), width=@32))
// [Asm] succs: [60]
// [Asm] critical edges for b68: []
// [Asm] critical color seq for b68: []
// [Asm] succs: [68]
// [Asm] critical edges for b63: []
// [Asm] critical color seq for b63: []
// [Asm] succs: [68]
// [Asm] critical edges for b67: []
// [Asm] critical color seq for b67: []
// [Asm] succs: [67]
// [Asm] critical edges for b65: []
// [Asm] critical color seq for b65: []
// [Asm] succs: [67]
// [Asm] critical edges for b66: []
// [Asm] critical color seq for b66: []
// [Asm] succs: [65, 66]
// [Asm] critical edges for b64: []
// [Asm] critical color seq for b64: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%76)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%75), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%70), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%67), width=@32))
// [Asm] succs: [63, 64]
// [Asm] critical edges for b61: []
// [Asm] critical color seq for b61: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%60), BlockParam(bref=b60, bpref=$b.0)])
// [Asm] succs: [0]
// [Asm] critical edges for b11: []
// [Asm] critical color seq for b11: []
// [Asm] succs: [11]
// [Asm] critical edges for b69: []
// [Asm] critical color seq for b69: []
// [Asm] succs: [69]
// [Asm] critical edges for b62: []
// [Asm] critical color seq for b62: []
// [Asm] succs: [61, 62]
// [Asm] critical edges for b60: []
// [Asm] critical color seq for b60: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%58), Bool(val=true)])
// [Asm] succs: [70]
// [Asm] critical edges for b71: []
// [Asm] critical color seq for b71: []
// [Asm] succs: [71]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] skipping Op(ty=Int32, op=Mul, args=[Insn(iref=%17), Int32(val=2)])
// [Asm] skipping Op(ty=Int32, op=Div, args=[Insn(iref=%15), Int32(val=2)])
// [Asm] succs: [5]
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [5]
// [Asm] critical edges for b4: []
// [Asm] critical color seq for b4: []
// [Asm] succs: [3, 4]
// [Asm] critical edges for b10: []
// [Asm] critical color seq for b10: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%8), Insn(iref=%9)])
// [Asm] succs: [10]
// [Asm] critical edges for b34: []
// [Asm] critical color seq for b34: []
// [Asm] succs: [34]
// [Asm] critical edges for b32: []
// [Asm] critical color seq for b32: []
// [Asm] succs: [40]
// [Asm] critical edges for b41: []
// [Asm] critical color seq for b41: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%50), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%46), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b40, bpref=$b.0), width=@32))
// [Asm] succs: [31]
// [Asm] critical edges for b37: []
// [Asm] critical color seq for b37: []
// [Asm] succs: [37]
// [Asm] critical edges for b43: []
// [Asm] critical color seq for b43: []
// [Asm] succs: [43]
// [Asm] critical edges for b42: []
// [Asm] critical color seq for b42: []
// [Asm] succs: [41, 42]
// [Asm] critical edges for b40: []
// [Asm] critical color seq for b40: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b40, bpref=$b.0), Insn(iref=%41)])
// [Asm] succs: [44]
// [Asm] critical edges for b45: []
// [Asm] critical color seq for b45: []
// [Asm] succs: [45]
// [Asm] critical edges for b33: []
// [Asm] critical color seq for b33: []
// [Asm] succs: [32, 33]
// [Asm] critical edges for b31: []
// [Asm] critical color seq for b31: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%31), Int32(val=0)])
// [Asm] succs: [35]
// [Asm] critical edges for b36: []
// [Asm] critical color seq for b36: []
// [Asm] succs: [36]
// [Asm] critical edges for b9: []
// [Asm] critical color seq for b9: []
// [Asm] succs: [9]
// [Asm] critical edges for b57: []
// [Asm] critical color seq for b57: []
// [Asm] succs: [57]
// [Asm] critical edges for b56: []
// [Asm] critical color seq for b56: []
// [Asm] succs: [55, 56]
// [Asm] critical edges for b54: []
// [Asm] critical color seq for b54: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b54, bpref=$b.0), Int32(val=8)])
// [Asm] succs: [58]
// [Asm] critical edges for b59: []
// [Asm] critical color seq for b59: []
// [Asm] succs: [59]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: []
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=1), Insn(iref=%0)])
// [Asm] succs: [7]
// [Asm] critical edges for b8: []
// [Asm] critical color seq for b8: []
// [Asm] defs: [v101]
// [Asm] live_set: [v16, v21, v18, zero, v23, v20, v22, v19, v17, v15, s11, v101]
// [Asm] move: v101 <- v100
// [Asm] defined: v101 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15, v40]
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] defs: [v100]
// [Asm] live_set: [v16, v21, v18, zero, v23, v20, v22, v19, v17, v15, s11, v100]
// [Asm] move: v100 <- zero
// [Asm] defined: v100 is X
// [Asm] skip edge 0 -> 5
// [Asm] defs: [v32]
// [Asm] live_set: [v16, v18, v21, zero, v20, v23, v22, v19, v32, v17, s11, v15]
// [Asm] move: v32 <- v31
// [Asm] defined: v32 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v26
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v43]
// [Asm] live_set: [v16, v14, v21, v22, v37, v43, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] move: v43 <- zero
// [Asm] defined: v43 is X
// [Asm] skip edge 21 -> 5
// [Asm] defs: [v44]
// [Asm] live_set: [v16, v14, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] move: v44 <- v37
// [Asm] defined: v44 is X
// [Asm] skip edge 23 -> 13
// [Asm] defs: [v45]
// [Asm] live_set: [v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] move: v45 <- v14
// [Asm] defined: v45 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] move: v46 <- v38
// [Asm] defined: v46 is X
// [Asm] skip edge 25 -> 16
// [Asm] defs: [v98]
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v98, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defined: v98 is X
// [Asm] defs: [v152]
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v98, v94, v18, v96, v97, zero, v23, v20, v152, v19, v15]
// [Asm] defined: v152 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defs: [v50]
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v50, v23, v20, v19, v38, v15]
// [Asm] move: v50 <- zero
// [Asm] defined: v50 is X
// [Asm] skip edge 34 -> 5
// [Asm] defs: [v130]
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v130, zero, v97, v23, v20, v19, v15]
// [Asm] move: v130 <- zero
// [Asm] defined: v130 is X
// [Asm] skip edge 35 -> 5
// [Asm] defs: [v47]
// [Asm] live_set: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v47, v15]
// [Asm] defined: v47 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, v48, zero, v23, v20, v45, v19, v38, v15]
// [Asm] defined: v48 is X
// [Asm] defs: []
// [Asm] live_set: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defs: [v127]
// [Asm] live_set: [v16, v21, v127, v22, v92, v95, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move: v127 <- zero
// [Asm] defined: v127 is X
// [Asm] skip edge 38 -> 5
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v127, v22, v92, v95, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move: v92 <- v92
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move: v93 <- v93
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move: v94 <- v94
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move: v95 <- v95
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move: v96 <- v96
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move: v97 <- v97
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm] defs: [v92]
// [Asm] live_set: [v11, v16, v21, v22, v92, v17, s11, v12, v18, zero, v23, v20, v19, v15]
// [Asm] move: v92 <- v16
// [Asm] defined: v92 is X
// [Asm] skip edge 28 -> 2
// [Asm] defs: [v93]
// [Asm] live_set: [v11, v16, v21, v22, v92, v17, s11, v12, v93, v18, zero, v23, v20, v19, v15]
// [Asm] move: v93 <- v15
// [Asm] defined: v93 is X
// [Asm] skip edge 29 -> 11
// [Asm] defs: [v94]
// [Asm] live_set: [v11, v16, v21, v22, v92, v17, s11, v93, v94, v18, zero, v23, v20, v19, v15]
// [Asm] move: v94 <- v12
// [Asm] defined: v94 is X
// [Asm] defs: [v95]
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, zero, v23, v20, v19, v15]
// [Asm] move: v95 <- v11
// [Asm] defined: v95 is X
// [Asm] defs: [v96]
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, zero, v23, v20, v19, v15]
// [Asm] move: v96 <- v17
// [Asm] defined: v96 is X
// [Asm] skip edge 31 -> 10
// [Asm] defs: [v97]
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm] move: v97 <- v19
// [Asm] defined: v97 is X
// [Asm] skip edge 32 -> 9
// [Asm] defs: [v71]
// [Asm] live_set: [v71, v16, v21, v18, zero, v23, v20, v22, v19, v17, v15, s11]
// [Asm] move: v71 <- zero
// [Asm] defined: v71 is X
// [Asm] skip edge 41 -> 5
// [Asm] defs: [v26]
// [Asm] live_set: [v26]
// [Asm] move: v26 <- zero
// [Asm] defined: v26 is X
// [Asm] defs: [v187]
// [Asm] live_set: [v16, v21, v22, v17, s11, v28, v187, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] defined: v187 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] defs: [v76]
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v23, v19, v17, v15, s11, v76]
// [Asm] defined: v76 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v23, v19, v17, v15, s11]
// [Asm] defs: [v78]
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v78, v23, v19, v17, v15, s11]
// [Asm] move: v78 <- zero
// [Asm] defined: v78 is X
// [Asm] skip edge 47 -> 5
// [Asm] defs: [v51]
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v39, v51, v18, zero, v23, v20, v19, v38, v15]
// [Asm] move: v51 <- v50
// [Asm] defined: v51 is X
// [Asm] defs: [v123]
// [Asm] live_set: [v16, v21, v22, v123, v95, v92, v17, s11, v93, v94, v18, v96, zero, v97, v20, v23, v19, v15]
// [Asm] defined: v123 is X
// [Asm] defs: [v124]
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v124, v96, zero, v97, v20, v23, v19, v15]
// [Asm] defined: v124 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defs: [v127]
// [Asm] live_set: [v16, v21, v127, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move: v127 <- zero
// [Asm] defined: v127 is X
// [Asm] skip edge 38 -> 5
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm] defs: [v130]
// [Asm] live_set: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, v130, zero, v97, v23, v20, v19, v15]
// [Asm] move: v130 <- zero
// [Asm] defined: v130 is X
// [Asm] skip edge 35 -> 5
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, v130, zero, v97, v23, v20, v19, v15]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] defs: [a0]
// [Asm] live_set: [v16, v21, a0, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move: a0 <- v15
// [Asm] defined: a0 is X
// [Asm] skip edge 20 -> 11
// [Asm] defs: [a1]
// [Asm] live_set: [v16, v21, a0, v22, v17, a1, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move: a1 <- v19
// [Asm] defined: a1 is X
// [Asm] skip edge 51 -> 9
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v16, v21, a0, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v33]
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move: v33 <- a0
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] defs: [v35]
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v35, v19, v15]
// [Asm] defined: v35 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v16, v21, v13, v22, v17, v18, zero, v23, v20, v35, v19, v15]
// [Asm] defined: v13 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v16, v21, v13, v22, v17, s11, v18, zero, v23, v20, v35, v19, v15]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, v13, zero, v23, v20, v22, v19, v17, s11, v15]
// [Asm] defs: [v72]
// [Asm] live_set: [v72, v16, v21, v18, zero, v22, v23, v20, v19, v17, s11, v15]
// [Asm] move: v72 <- v71
// [Asm] defined: v72 is X
// [Asm] defs: [v79]
// [Asm] live_set: [v16, v21, v79, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] defined: v79 is X
// [Asm] defs: [v80]
// [Asm] live_set: [v16, v21, v79, v22, v17, s11, v18, zero, v23, v20, v19, v80, v15]
// [Asm] defined: v80 is X
// [Asm] defs: [v81]
// [Asm] live_set: [v16, v21, v79, v22, v17, s11, v18, zero, v23, v20, v19, v80, v81, v15]
// [Asm] defined: v81 is X
// [Asm] defs: [v84]
// [Asm] live_set: [v16, v21, v79, v22, v17, s11, v18, zero, v23, v20, v19, v84, v80, v15]
// [Asm] defined: v84 is X
// [Asm] defs: [v85]
// [Asm] live_set: [v16, v21, v79, v22, v17, s11, v18, zero, v23, v20, v85, v19, v80, v15]
// [Asm] defined: v85 is X
// [Asm] defs: [v159]
// [Asm] live_set: [v16, v21, v79, v22, v159, v17, s11, v18, zero, v23, v20, v85, v19, v80, v15]
// [Asm] defined: v159 is X
// [Asm] defs: [v86]
// [Asm] live_set: [v16, v21, v79, v22, v17, s11, v86, v18, zero, v23, v20, v19, v80, v15]
// [Asm] defined: v86 is X
// [Asm] defs: [v87]
// [Asm] live_set: [v16, v87, v21, v79, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] defined: v87 is X
// [Asm] defs: [v88]
// [Asm] live_set: [v16, v21, v22, v88, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] defined: v88 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v16, v21, v22, v17, v18, zero, v23, v20, v19, v15]
// [Asm] defined: v11 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] defined: s11 is X
// [Asm] defs: [v156]
// [Asm] live_set: [v11, v16, v21, v22, v17, s11, v18, v156, zero, v23, v20, v19, v15]
// [Asm] defined: v156 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v21, v18, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v16, v21, v18, zero, v22, v23, v20, v19, v17, v12, v15]
// [Asm] defined: v12 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v16, v21, v18, zero, v22, v23, v20, v19, v17, v12, s11, v15]
// [Asm] defined: s11 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move: v37 <- v13
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v18, zero, v23, v20, v19, v38, v15]
// [Asm] move: v38 <- v18
// [Asm] defined: v38 is X
// [Asm] skip edge 16 -> 4
// [Asm] defs: [v39]
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] move: v39 <- v20
// [Asm] defined: v39 is X
// [Asm] skip edge 15 -> 7
// [Asm] defs: [v132]
// [Asm] live_set: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v23, v27, v19, v15, v132]
// [Asm] defined: v132 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v23, v27, v19, v15]
// [Asm] defs: [v134]
// [Asm] live_set: [v16, v21, v22, v134, v17, s11, v28, v18, v29, zero, v20, v23, v19, v15]
// [Asm] defined: v134 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v27, v23, v19, v15]
// [Asm] move: v27 <- v134
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v27, v23, v19, v15]
// [Asm] move: v28 <- v28
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v27, v23, v19, v15]
// [Asm] move: v29 <- v29
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v27, v23, v19, v15]
// [Asm] defs: [v105]
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v105, v15]
// [Asm] defined: v105 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defs: [v31]
// [Asm] live_set: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11, v31]
// [Asm] move: v31 <- zero
// [Asm] defined: v31 is X
// [Asm] skip edge 17 -> 5
// [Asm] defs: [v78]
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v78, v23, v19, v17, v15, s11]
// [Asm] move: v78 <- zero
// [Asm] defined: v78 is X
// [Asm] skip edge 47 -> 5
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v78, v23, v19, v17, v15, s11]
// [Asm] defs: [v58]
// [Asm] live_set: [v46, v16, v58, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] defined: v58 is X
// [Asm] defs: []
// [Asm] live_set: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] defs: [v60]
// [Asm] live_set: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v60, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] defined: v60 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15, v61]
// [Asm] defined: v61 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v63, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] defined: v63 is X
// [Asm] defs: []
// [Asm] live_set: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] defs: [v65]
// [Asm] live_set: [v46, v16, v21, v22, v37, v65, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] defined: v65 is X
// [Asm] defs: [v66]
// [Asm] live_set: [v66, v46, v16, v21, v22, v37, v17, v43, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] defined: v66 is X
// [Asm] defs: [v67]
// [Asm] live_set: [v66, v46, v16, v21, v22, v67, v37, v17, v43, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] defined: v67 is X
// [Asm] defs: []
// [Asm] live_set: [v46, v16, v21, v22, v37, v17, v43, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] defs: [v70]
// [Asm] live_set: [v46, v16, v21, v22, v37, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v70, v15]
// [Asm] defined: v70 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] move: v43 <- v70
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] move: v44 <- v44
// [Asm] defs: []
// [Asm] live_set: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] move: v45 <- v45
// [Asm] defs: []
// [Asm] live_set: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] move: v46 <- v46
// [Asm] defs: []
// [Asm] live_set: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] defs: [v73]
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v23, v19, v17, v15, s11, v73]
// [Asm] defined: v73 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v23, v19, v17, v74, v15, s11, v73]
// [Asm] defined: v74 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v23, v19, v17, s11, v15]
// [Asm] defs: [v102]
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, s11, v15, v102]
// [Asm] defined: v102 is X
// [Asm] defs: [v103]
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v103, v17, s11, v15]
// [Asm] defined: v103 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move: v15 <- v15
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move: v16 <- v16
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move: v17 <- v17
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move: v18 <- v18
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move: v19 <- v19
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move: v20 <- v20
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move: v21 <- v21
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move: v22 <- v22
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move: v23 <- v23
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] defs: [v52]
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v52, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] defined: v52 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] defs: [v54]
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15, v54]
// [Asm] defined: v54 is X
// [Asm] defs: [v55]
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15, v55]
// [Asm] defined: v55 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] move: v37 <- v37
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] move: v38 <- v38
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] move: v39 <- v39
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] defs: [v107]
// [Asm] live_set: [v16, v21, v22, v95, v92, v107, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defined: v107 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defs: [a0]
// [Asm] live_set: [v16, v21, a0, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] skip edge 20 -> 5
// [Asm] defs: [a1]
// [Asm] live_set: [v16, v21, a0, v22, v95, v92, a1, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move: a1 <- v93
// [Asm] defined: a1 is X
// [Asm] skip edge 51 -> 29
// [Asm] defs: [a2]
// [Asm] live_set: [v16, v21, a0, v22, v95, v92, a2, a1, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move: a2 <- v96
// [Asm] defined: a2 is X
// [Asm] skip edge 57 -> 31
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v16, v21, a0, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v109]
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] move: v109 <- a0
// [Asm] defined: v109 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defs: [v110]
// [Asm] live_set: [v16, v21, v22, v110, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defined: v110 is X
// [Asm] defs: [v111]
// [Asm] live_set: [v16, v21, v22, v110, v95, v92, v17, v111, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defined: v111 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defs: [v114]
// [Asm] live_set: [v16, v21, v22, v95, v92, v114, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defined: v114 is X
// [Asm] defs: [v116]
// [Asm] live_set: [v116, v16, v21, v22, v95, v92, v114, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defined: v116 is X
// [Asm] defs: [v117]
// [Asm] live_set: [v16, v21, v22, v95, v92, v114, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15, v117]
// [Asm] defined: v117 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defs: [v119]
// [Asm] live_set: [v16, v21, v22, v119, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defined: v119 is X
// [Asm] defs: [v121]
// [Asm] live_set: [v16, v21, v121, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defined: v121 is X
// [Asm] defs: [v139]
// [Asm] live_set: [v16, v21, v121, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15, v139]
// [Asm] defined: v139 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] defs: []
// [Asm] live_set: [a7, t0, a5, zero, a0, a4, a6, a2, a1, s11, a3]
// [Asm] defs: [v2]
// [Asm] live_set: [a7, t0, a5, zero, a4, a6, a2, a1, s11, a3, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a7, t0, a5, zero, a4, a6, a2, s11, a3, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a7, t0, a5, zero, a4, a6, v4, s11, a3, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, a7, t0, v5, a5, zero, a4, a6, v4, s11, v3]
// [Asm] move: v5 <- a3
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, a7, t0, v5, a5, zero, a6, v4, v6, s11, v3]
// [Asm] move: v6 <- a4
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, a7, t0, v5, zero, v7, a6, v4, v6, s11, v3]
// [Asm] move: v7 <- a5
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, a7, t0, v5, zero, v8, v7, v4, v6, s11, v3]
// [Asm] move: v8 <- a6
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, t0, v5, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move: v9 <- a7
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v5, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move: v10 <- t0
// [Asm] defined: v10 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm] move: v15 <- v2
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9]
// [Asm] move: v16 <- v3
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v16, v5, v10, zero, v8, v7, v17, v6, s11, v15, v9]
// [Asm] move: v17 <- v4
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v16, v18, v10, zero, v8, v7, v17, v6, s11, v15, v9]
// [Asm] move: v18 <- v5
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v16, v18, v10, zero, v8, v7, v19, v17, v15, s11, v9]
// [Asm] move: v19 <- v6
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v16, v18, v10, zero, v20, v8, v19, v17, v15, s11, v9]
// [Asm] move: v20 <- v7
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v16, v18, v21, v10, zero, v20, v19, v17, v15, s11, v9]
// [Asm] move: v21 <- v8
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v16, v18, v21, v10, zero, v20, v22, v19, v17, v15, s11]
// [Asm] move: v22 <- v9
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] move: v23 <- v10
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v16, v18, v21, zero, v20, v23, v22, v19, v17, s11, v24, v15]
// [Asm] defined: v24 is X
// [Asm] defs: [v188]
// [Asm] live_set: [v16, v18, v21, zero, v20, v23, v22, v19, v188, v17, s11, v24, v15]
// [Asm] defined: v188 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11]
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v16, v21, v22, v37, v17, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] defined: v14 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v14, v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] defined: s11 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v20, v27, v23, v19, v15]
// [Asm] move: v27 <- zero
// [Asm] defined: v27 is X
// [Asm] skip edge 45 -> 5
// [Asm] defs: [v28]
// [Asm] live_set: [v16, v21, v22, v17, s11, v28, v18, zero, v20, v27, v23, v19, v15]
// [Asm] move: v28 <- v17
// [Asm] defined: v28 is X
// [Asm] skip edge 43 -> 10
// [Asm] defs: [v29]
// [Asm] live_set: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v27, v23, v19, v15]
// [Asm] move: v29 <- v18
// [Asm] defined: v29 is X
// [Asm] skip edge 44 -> 4
// [Asm] Label("compute.515") clobbered_x: @hashset.of([s7, a5, a0, s1, s2, s5, a2, a1, s3, a3, s10, s6, a7, t0, s8, s9, s4, a4, a6, s0])
// [Asm] Label("compute.515") clobbered_f: @hashset.of([])
// [Asm] subst   lw v40, 0(v37) ->   lw a1, 0(a0)
// [Asm] subst   beq v40, zero, .compute.515_32 ->   beq a1, zero, .compute.515_32
// [Asm] subst   mv v100, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v43, zero ->   mv a1, zero
// [Asm] subst   lw v98, 0(v95) ->   lw a0, 0(s9)
// [Asm] subst   li v152, 1 ->   li a1, 1
// [Asm] subst   bne v98, v152, .compute.515_62 ->   bne a0, a1, .compute.515_62
// [Asm] subst   mv v50, zero ->   mv a1, zero
// [Asm] subst   mv v130, zero ->   mv a0, zero
// [Asm] subst   lw v47, 0(v44) ->   lw a5, 0(a0)
// [Asm] subst   srai v48, v47, 1 ->   srai a5, a5, 1
// [Asm] subst   blt v48, v43, .compute.515_42 ->   blt a5, a1, .compute.515_42
// [Asm] subst   sw zero, 0(v95) ->   sw zero, 0(s9)
// [Asm] subst   mv v127, zero ->   mv a0, zero
// [Asm] subst   j .compute.515_67 ->   j .compute.515_67
// [Asm] subst   j .compute.515_60 ->   j .compute.515_60
// [Asm] subst   mv v94, v12 ->   mv s10, a1
// [Asm] subst   mv v95, v11 ->   mv s9, a0
// [Asm] subst   mv v71, zero ->   mv a0, zero
// [Asm] subst   mv v26, zero ->   mv a0, zero
// [Asm] subst   li v187, 8 ->   li a0, 8
// [Asm] subst   blt v187, v27, .compute.515_56 ->   blt a0, a1, .compute.515_56
// [Asm] subst   lw v76, 0(v20) ->   lw a0, 0(s4)
// [Asm] subst   sw v76, 0(v23) ->   sw a0, 0(s3)
// [Asm] subst   mv v78, zero ->   mv a0, zero
// [Asm] subst   lw v123, 0(v93) ->   lw a0, 0(s8)
// [Asm] subst   addi v124, v123, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v124, 0(v93) ->   sw a0, 0(s8)
// [Asm] subst   mv v127, zero ->   mv a0, zero
// [Asm] subst   sw zero, 0(v95) ->   sw zero, 0(s9)
// [Asm] subst   sw zero, 0(v93) ->   sw zero, 0(s8)
// [Asm] subst   mv v130, zero ->   mv a0, zero
// [Asm] subst   j .compute.515_68 ->   j .compute.515_68
// [Asm] subst   mv a0, v15 ->   mv a0, s8
// [Asm] subst   mv a1, v19 ->   mv a1, s6
// [Asm] subst   call init_count.517 ->   call init_count.517
// [Asm] subst   sw zero, 0(v20) ->   sw zero, 0(s4)
// [Asm] subst   lw v35, 0(v18) ->   lw a0, 0(s2)
// [Asm] subst   addi v13, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v13, -8 ->   andi s11, a1, -8
// [Asm] subst   sw v35, 0(v13) ->   sw a0, 0(a1)
// [Asm] subst   lw v79, 0(v22) ->   lw a0, 0(s5)
// [Asm] subst   lw v80, 0(v20) ->   lw a1, 0(s4)
// [Asm] subst   lw v81, 0(v21) ->   lw a2, 0(s1)
// [Asm] subst   andi v84, v81, 1 ->   andi a2, a2, 1
// [Asm] subst   slli v85, v84, 1 ->   slli a2, a2, 1
// [Asm] subst   li v159, 1 ->   li a3, 1
// [Asm] subst   sub v86, v159, v85 ->   sub a2, a3, a2
// [Asm] subst   mulw v87, v80, v86 ->   mulw a1, a1, a2
// [Asm] subst   add v88, v79, v87 ->   add a0, a0, a1
// [Asm] subst   sw v88, 0(v22) ->   sw a0, 0(s5)
// [Asm] subst   addi v11, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi s11, v11, -8 ->   andi s11, a0, -8
// [Asm] subst   li v156, 1 ->   li a1, 1
// [Asm] subst   sw v156, 0(v11) ->   sw a1, 0(a0)
// [Asm] subst   addi v12, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v12, -8 ->   andi s11, a1, -8
// [Asm] subst   mv v37, v13 ->   mv a0, a1
// [Asm] subst   mv v38, v18 ->   mv a3, s2
// [Asm] subst   mv v39, v20 ->   mv a2, s4
// [Asm] subst   th.lurw v132, v28, v27, 2 ->   th.lurw a0, a2, a1, 2
// [Asm] subst   th.surw v132, v29, v27, 2 ->   th.surw a0, a3, a1, 2
// [Asm] subst   addi v134, v27, 1 ->   addi a0, a1, 1
// [Asm] subst   mv v27, v134 ->   mv a1, a0
// [Asm] subst   j .compute.515_54 ->   j .compute.515_54
// [Asm] subst   lw v105, 0(v93) ->   lw a0, 0(s8)
// [Asm] subst   beq v105, v92, .compute.515_63 ->   beq a0, s0, .compute.515_63
// [Asm] subst   mv v31, zero ->   mv a0, zero
// [Asm] subst   mv v78, zero ->   mv a0, zero
// [Asm] subst   j .compute.515_5 ->   j .compute.515_5
// [Asm] subst   th.lurw v58, v46, v43, 2 ->   th.lurw a5, a3, a1, 2
// [Asm] subst   sw v58, 0(v45) ->   sw a5, 0(a4)
// [Asm] subst   lw v60, 0(v44) ->   lw a5, 0(a0)
// [Asm] subst   sub v61, v60, v43 ->   sub a5, a5, a1
// [Asm] subst   th.lurw v63, v46, v61, 2 ->   th.lurw a5, a3, a5, 2
// [Asm] subst   th.surw v63, v46, v43, 2 ->   th.surw a5, a3, a1, 2
// [Asm] subst   lw v65, 0(v44) ->   lw a5, 0(a0)
// [Asm] subst   sub v66, v65, v43 ->   sub a5, a5, a1
// [Asm] subst   lw v67, 0(v45) ->   lw a6, 0(a4)
// [Asm] subst   th.surw v67, v46, v66, 2 ->   th.surw a6, a3, a5, 2
// [Asm] subst   addi v70, v43, 1 ->   addi a1, a1, 1
// [Asm] subst   j .compute.515_40 ->   j .compute.515_40
// [Asm] subst   lw v73, 0(v23) ->   lw a0, 0(s3)
// [Asm] subst   lw v74, 0(v20) ->   lw a1, 0(s4)
// [Asm] subst   blt v74, v73, .compute.515_4 ->   blt a1, a0, .compute.515_4
// [Asm] subst   lw v102, 0(v21) ->   lw a0, 0(s1)
// [Asm] subst   addi v103, v102, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v103, 0(v21) ->   sw a0, 0(s1)
// [Asm] subst   j .compute.515_0 ->   j .compute.515_0
// [Asm] subst   lw v52, 0(v38) ->   lw a1, 0(a3)
// [Asm] subst   sw v52, 0(v37) ->   sw a1, 0(a0)
// [Asm] subst   lw v54, 0(v39) ->   lw a1, 0(a2)
// [Asm] subst   addi v55, v54, 1 ->   addi a1, a1, 1
// [Asm] subst   sw v55, 0(v39) ->   sw a1, 0(a2)
// [Asm] subst   j .compute.515_31 ->   j .compute.515_31
// [Asm] subst   lw v107, 0(v96) ->   lw a0, 0(s7)
// [Asm] subst   sw v107, 0(v94) ->   sw a0, 0(s10)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v93 ->   mv a1, s8
// [Asm] subst   mv a2, v96 ->   mv a2, s7
// [Asm] subst   call move_perm1_forward.521 ->   call move_perm1_forward.521
// [Asm] subst   lw v110, 0(v93) ->   lw a0, 0(s8)
// [Asm] subst   lw v111, 0(v94) ->   lw a1, 0(s10)
// [Asm] subst   th.surw v111, v96, v110, 2 ->   th.surw a1, s7, a0, 2
// [Asm] subst   lw v114, 0(v93) ->   lw a0, 0(s8)
// [Asm] subst   th.lurw v116, v97, v114, 2 ->   th.lurw a1, s6, a0, 2
// [Asm] subst   addi v117, v116, -1 ->   addi a1, a1, -1
// [Asm] subst   th.surw v117, v97, v114, 2 ->   th.surw a1, s6, a0, 2
// [Asm] subst   lw v119, 0(v93) ->   lw a0, 0(s8)
// [Asm] subst   th.lurw v121, v97, v119, 2 ->   th.lurw a0, s6, a0, 2
// [Asm] subst   li v139, 1 ->   li a1, 1
// [Asm] subst   bge v121, v139, .compute.515_65 ->   bge a0, a1, .compute.515_65
// [Asm] subst   mv v15, v2 ->   mv s8, a0
// [Asm] subst   mv v16, v3 ->   mv s0, a1
// [Asm] subst   mv v17, v4 ->   mv s7, a2
// [Asm] subst   mv v18, v5 ->   mv s2, a3
// [Asm] subst   mv v19, v6 ->   mv s6, a4
// [Asm] subst   mv v20, v7 ->   mv s4, a5
// [Asm] subst   mv v21, v8 ->   mv s1, a6
// [Asm] subst   mv v22, v9 ->   mv s5, a7
// [Asm] subst   mv v23, v10 ->   mv s3, t0
// [Asm] subst   lw v24, 0(v15) ->   lw a0, 0(s8)
// [Asm] subst   li v188, 1 ->   li a1, 1
// [Asm] subst   blt v24, v188, .compute.515_2 ->   blt a0, a1, .compute.515_2
// [Asm] subst   addi v14, s11, -4 ->   addi a4, s11, -4
// [Asm] subst   andi s11, v14, -8 ->   andi s11, a4, -8
// [Asm] subst   mv v27, zero ->   mv a1, zero
// [Asm] subst   mv v28, v17 ->   mv a2, s7
// [Asm] subst   mv v29, v18 ->   mv a3, s2
// [Asm] retarget: {Label(".compute.515_68"): Label(".compute.515_60")}
// [Asm] before colored: # leaf false
// [Asm] compute.515:
// [Asm] # block info: defs: [v3, v5, v16, v10, v21, v22, v7, v17, v9, v18, v20, v23, v8, v19, v4, v6, v15, v2], uses: [v2, v5, v10, a5, a0, v7, a2, a1, a3, v9, a7, t0, a4, v8, a6, v4, v6, v3], upward_exposed: [a7, t0, a5, a0, a4, a6, a2, a1, a3], params_defs: []
// [Asm] # live_in: [a7, t0, a5, a0, zero, a4, a6, a2, a1, a3, s11], live_out: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] # block parameters: []
// [Asm] .compute.515_8:
// [Asm]   # save_ctx1  # live: [a7, t0, a5, zero, a0, a4, a6, a2, a1, s11, a3]
// [Asm]   mv v2, a0  # live: [a7, t0, a5, zero, a4, a6, a2, a1, s11, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a7, t0, a5, zero, a4, a6, a2, s11, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a7, t0, a5, zero, a4, a6, v4, s11, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, a7, t0, v5, a5, zero, a4, a6, v4, s11, v3]
// [Asm]   mv v6, a4  # live: [v2, a7, t0, v5, a5, zero, a6, v4, v6, s11, v3]
// [Asm]   mv v7, a5  # live: [v2, a7, t0, v5, zero, v7, a6, v4, v6, s11, v3]
// [Asm]   mv v8, a6  # live: [v2, a7, t0, v5, zero, v8, v7, v4, v6, s11, v3]
// [Asm]   mv v9, a7  # live: [v2, t0, v5, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm]   mv v10, t0  # live: [v2, v5, v10, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] # control
// [Asm]   mv v15, v2  # live: [v5, v10, zero, v8, v7, v4, v6, s11, v15, v9, v3]
// [Asm]   mv v16, v3  # live: [v16, v5, v10, zero, v8, v7, v4, v6, s11, v15, v9]
// [Asm]   mv v17, v4  # live: [v16, v5, v10, zero, v8, v7, v17, v6, s11, v15, v9]
// [Asm]   mv v18, v5  # live: [v16, v18, v10, zero, v8, v7, v17, v6, s11, v15, v9]
// [Asm]   mv v19, v6  # live: [v16, v18, v10, zero, v8, v7, v19, v17, v15, s11, v9]
// [Asm]   mv v20, v7  # live: [v16, v18, v10, zero, v20, v8, v19, v17, v15, s11, v9]
// [Asm]   mv v21, v8  # live: [v16, v18, v21, v10, zero, v20, v19, v17, v15, s11, v9]
// [Asm]   mv v22, v9  # live: [v16, v18, v21, v10, zero, v20, v22, v19, v17, v15, s11]
// [Asm]   mv v23, v10  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v188, v24], uses: [v188, v15, v24], upward_exposed: [v15], params_defs: [v16, v18, v21, v20, v22, v23, v19, v17, v15]
// [Asm] # live_in: [v16, v18, v21, zero, v23, v20, v22, v19, v17, v15, s11], live_out: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11]
// [Asm] # block parameters: [v15, v16, v17, v18, v19, v20, v21, v22, v23]
// [Asm] .compute.515_0:
// [Asm]   lw v24, 0(v15)  # live: [v16, v18, v21, zero, v20, v23, v22, v19, v17, s11, v24, v15]
// [Asm] # control
// [Asm]   li v188, 1  # live: [v16, v18, v21, zero, v20, v23, v22, v19, v188, v17, s11, v24, v15]
// [Asm]   blt v24, v188, .compute.515_2  # live: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v28, v29, v27], uses: [v17, v18, zero], upward_exposed: [v17, v18, zero], params_defs: []
// [Asm] # live_in: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11], live_out: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v27, v23, v19, v15]
// [Asm] # block parameters: []
// [Asm] .compute.515_59:
// [Asm] # control
// [Asm]   mv v27, zero  # live: [v16, v21, v22, v17, s11, v18, zero, v20, v27, v23, v19, v15]
// [Asm]   mv v28, v17  # live: [v16, v21, v22, v17, s11, v28, v18, zero, v20, v27, v23, v19, v15]
// [Asm]   mv v29, v18  # live: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v27, v23, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v187], uses: [v187, v27], upward_exposed: [v27], params_defs: [v28, v29, v27]
// [Asm] # live_in: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v27, v23, v19, v15], live_out: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] # block parameters: [v27, v28, v29]
// [Asm] .compute.515_54:
// [Asm] # control
// [Asm]   li v187, 8  # live: [v16, v21, v22, v17, s11, v28, v187, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm]   blt v187, v27, .compute.515_56  # live: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v27, v20, v23, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v134, v27, v132], uses: [v134, v28, v29, v27, v132], upward_exposed: [v28, v29, v27], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v27, v23, v19, v15], live_out: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v27, v23, v19, v15]
// [Asm] # block parameters: []
// [Asm] .compute.515_55:
// [Asm]   th.lurw v132, v28, v27, 2  # live: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v23, v27, v19, v15, v132]
// [Asm]   th.surw v132, v29, v27, 2  # live: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v23, v27, v19, v15]
// [Asm]   addi v134, v27, 1  # live: [v16, v21, v22, v134, v17, s11, v28, v18, v29, zero, v20, v23, v19, v15]
// [Asm] # control
// [Asm]   mv v27, v134  # live: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v27, v23, v19, v15]
// [Asm]   mv v28, v28  # live: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v27, v23, v19, v15]
// [Asm]   mv v29, v29  # live: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v27, v23, v19, v15]
// [Asm]   j .compute.515_54  # live: [v16, v21, v22, v17, s11, v28, v18, v29, zero, v20, v27, v23, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v31], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11], live_out: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11, v31]
// [Asm] # block parameters: []
// [Asm] .compute.515_56:
// [Asm] # control
// [Asm]   mv v31, zero  # live: [v16, v18, v21, zero, v20, v23, v22, v19, v17, v15, s11, v31]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, ft0, ft1, a1, s11, fa1, v33, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, v35, t4, t2], uses: [v18, a0, zero, v13, v20, v35, v19, a1, s11, v15], upward_exposed: [v19, v15, v18, s11, zero, v20], params_defs: [v32]
// [Asm] # live_in: [v16, v18, v21, zero, v20, v23, v22, v19, v32, v17, s11, v15], live_out: [v16, v18, v21, v13, zero, v23, v20, v22, v19, v17, s11, v15]
// [Asm] # block parameters: [v32]
// [Asm] .compute.515_9:
// [Asm]   # save_ctx2  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   mv a0, v15  # live: [v16, v21, a0, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   mv a1, v19  # live: [v16, v21, a0, v22, v17, a1, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   call init_count.517  # live: [v16, v21, a0, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   mv v33, a0  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   # restore_ctx2  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   sw zero, 0(v20)  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   lw v35, 0(v18)  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v35, v19, v15]
// [Asm]   addi v13, s11, -4  # live: [v16, v21, v13, v22, v17, v18, zero, v23, v20, v35, v19, v15]
// [Asm]   andi s11, v13, -8  # live: [v16, v21, v13, v22, v17, s11, v18, zero, v23, v20, v35, v19, v15]
// [Asm]   sw v35, 0(v13)  # live: [v16, v18, v21, v13, zero, v23, v20, v22, v19, v17, s11, v15]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v37, v38, v39], uses: [v18, v13, v20], upward_exposed: [v18, v13, v20], params_defs: []
// [Asm] # live_in: [v16, v18, v21, v13, zero, v23, v20, v22, v19, v17, s11, v15], live_out: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] # block parameters: []
// [Asm] .compute.515_36:
// [Asm] # control
// [Asm]   mv v37, v13  # live: [v16, v21, v22, v37, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   mv v38, v18  # live: [v16, v21, v22, v37, v17, s11, v18, zero, v23, v20, v19, v38, v15]
// [Asm]   mv v39, v20  # live: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] 
// [Asm] # block info: defs: [v40], uses: [v37, zero, v40], upward_exposed: [v37, zero], params_defs: [v37, v38, v39]
// [Asm] # live_in: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15], live_out: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] # block parameters: [v37, v38, v39]
// [Asm] .compute.515_31:
// [Asm]   lw v40, 0(v37)  # live: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15, v40]
// [Asm] # control
// [Asm]   beq v40, zero, .compute.515_32  # live: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] 
// [Asm] # block info: defs: [v14, s11], uses: [v14, s11], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15], live_out: [v14, v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] # block parameters: []
// [Asm] .compute.515_33:
// [Asm]   addi v14, s11, -4  # live: [v14, v16, v21, v22, v37, v17, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm]   andi s11, v14, -8  # live: [v14, v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v43, v46, v44, v45], uses: [v37, v38, v14, zero], upward_exposed: [v37, v38, v14, zero], params_defs: []
// [Asm] # live_in: [v14, v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15], live_out: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] # block parameters: []
// [Asm] .compute.515_45:
// [Asm] # control
// [Asm]   mv v43, zero  # live: [v16, v14, v21, v22, v37, v43, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm]   mv v44, v37  # live: [v16, v14, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm]   mv v45, v14  # live: [v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm]   mv v46, v38  # live: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] 
// [Asm] # block info: defs: [v47, v48], uses: [v47, v43, v48, v44], upward_exposed: [v43, v44], params_defs: [v43, v46, v44, v45]
// [Asm] # live_in: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15], live_out: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] # block parameters: [v43, v44, v45, v46]
// [Asm] .compute.515_40:
// [Asm]   lw v47, 0(v44)  # live: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v47, v15]
// [Asm]   srai v48, v47, 1  # live: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, v48, zero, v23, v20, v45, v19, v38, v15]
// [Asm] # control
// [Asm]   blt v48, v43, .compute.515_42  # live: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] 
// [Asm] # block info: defs: [v66, v63, v58, v67, v65, v70, v43, v61, v60], uses: [v66, v63, v46, v58, v67, v45, v65, v43, v70, v61, v44, v60], upward_exposed: [v46, v43, v44, v45], params_defs: []
// [Asm] # live_in: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15], live_out: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] # block parameters: []
// [Asm] .compute.515_41:
// [Asm]   th.lurw v58, v46, v43, 2  # live: [v46, v16, v58, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm]   sw v58, 0(v45)  # live: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm]   lw v60, 0(v44)  # live: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v60, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm]   sub v61, v60, v43  # live: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15, v61]
// [Asm]   th.lurw v63, v46, v61, 2  # live: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v63, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm]   th.surw v63, v46, v43, 2  # live: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm]   lw v65, 0(v44)  # live: [v46, v16, v21, v22, v37, v65, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm]   sub v66, v65, v43  # live: [v66, v46, v16, v21, v22, v37, v17, v43, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm]   lw v67, 0(v45)  # live: [v66, v46, v16, v21, v22, v67, v37, v17, v43, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm]   th.surw v67, v46, v66, 2  # live: [v46, v16, v21, v22, v37, v17, v43, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm]   addi v70, v43, 1  # live: [v46, v16, v21, v22, v37, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v70, v15]
// [Asm] # control
// [Asm]   mv v43, v70  # live: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm]   mv v44, v44  # live: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm]   mv v45, v45  # live: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm]   mv v46, v46  # live: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm]   j .compute.515_40  # live: [v46, v16, v21, v22, v37, v43, v17, s11, v44, v39, v18, zero, v23, v20, v45, v19, v38, v15]
// [Asm] 
// [Asm] # block info: defs: [v26], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v26]
// [Asm] # block parameters: []
// [Asm] .compute.515_2:
// [Asm] # control
// [Asm]   mv v26, zero  # live: [v26]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v26, a0], upward_exposed: [v26], params_defs: [v26]
// [Asm] # live_in: [v26], live_out: []
// [Asm] # block parameters: [v26]
// [Asm] .compute.515_6:
// [Asm] # control
// [Asm]   mv a0, v26  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v50], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15], live_out: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v50, v23, v20, v19, v38, v15]
// [Asm] # block parameters: []
// [Asm] .compute.515_42:
// [Asm] # control
// [Asm]   mv v50, zero  # live: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v50, v23, v20, v19, v38, v15]
// [Asm] 
// [Asm] # block info: defs: [v52, v54, v55], uses: [v38, v37, v52, v54, v55, v39], upward_exposed: [v38, v37, v39], params_defs: [v51]
// [Asm] # live_in: [v16, v21, v22, v37, v17, s11, v39, v51, v18, zero, v23, v20, v19, v38, v15], live_out: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] # block parameters: [v51]
// [Asm] .compute.515_37:
// [Asm]   lw v52, 0(v38)  # live: [v16, v21, v22, v37, v17, s11, v52, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm]   sw v52, 0(v37)  # live: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm]   lw v54, 0(v39)  # live: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15, v54]
// [Asm]   addi v55, v54, 1  # live: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15, v55]
// [Asm]   sw v55, 0(v39)  # live: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] # control
// [Asm]   mv v37, v37  # live: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm]   mv v38, v38  # live: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm]   mv v39, v39  # live: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm]   j .compute.515_31  # live: [v16, v21, v22, v37, v17, s11, v39, v18, zero, v23, v20, v19, v38, v15]
// [Asm] 
// [Asm] # block info: defs: [v71], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v21, v18, zero, v22, v23, v20, v19, v17, s11, v15], live_out: [v71, v16, v21, v18, zero, v23, v20, v22, v19, v17, v15, s11]
// [Asm] # block parameters: []
// [Asm] .compute.515_32:
// [Asm] # control
// [Asm]   mv v71, zero  # live: [v71, v16, v21, v18, zero, v23, v20, v22, v19, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v74, v73], uses: [v73, v74, v23, v20], upward_exposed: [v23, v20], params_defs: [v72]
// [Asm] # live_in: [v72, v16, v21, v18, zero, v22, v23, v20, v19, v17, s11, v15], live_out: [v16, v21, v18, zero, v22, v20, v23, v19, v17, s11, v15]
// [Asm] # block parameters: [v72]
// [Asm] .compute.515_10:
// [Asm]   lw v73, 0(v23)  # live: [v16, v21, v18, zero, v22, v20, v23, v19, v17, v15, s11, v73]
// [Asm]   lw v74, 0(v20)  # live: [v16, v21, v18, zero, v22, v20, v23, v19, v17, v74, v15, s11, v73]
// [Asm] # control
// [Asm]   blt v74, v73, .compute.515_4  # live: [v16, v21, v18, zero, v22, v20, v23, v19, v17, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [v78, v76], uses: [v76, zero, v20, v23], upward_exposed: [zero, v20, v23], params_defs: []
// [Asm] # live_in: [v16, v21, v18, zero, v22, v20, v23, v19, v17, s11, v15], live_out: [v16, v21, v18, zero, v22, v20, v78, v23, v19, v17, v15, s11]
// [Asm] # block parameters: []
// [Asm] .compute.515_3:
// [Asm]   lw v76, 0(v20)  # live: [v16, v21, v18, zero, v22, v20, v23, v19, v17, v15, s11, v76]
// [Asm]   sw v76, 0(v23)  # live: [v16, v21, v18, zero, v22, v20, v23, v19, v17, v15, s11]
// [Asm] # control
// [Asm]   mv v78, zero  # live: [v16, v21, v18, zero, v22, v20, v78, v23, v19, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v11, v87, v79, v159, v88, s11, v12, v86, v156, v85, v84, v81, v80], uses: [v11, v87, v21, v79, v159, v22, v88, s11, v12, v86, v156, v20, v85, v84, v80, v81], upward_exposed: [v21, s11, v22, v20], params_defs: [v78]
// [Asm] # live_in: [v16, v21, v18, zero, v20, v78, v22, v23, v19, v17, v15, s11], live_out: [v11, v16, v21, v22, v17, v12, s11, v18, zero, v23, v20, v19, v15]
// [Asm] # block parameters: [v78]
// [Asm] .compute.515_5:
// [Asm]   lw v79, 0(v22)  # live: [v16, v21, v79, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   lw v80, 0(v20)  # live: [v16, v21, v79, v22, v17, s11, v18, zero, v23, v20, v19, v80, v15]
// [Asm]   lw v81, 0(v21)  # live: [v16, v21, v79, v22, v17, s11, v18, zero, v23, v20, v19, v80, v81, v15]
// [Asm]   andi v84, v81, 1  # live: [v16, v21, v79, v22, v17, s11, v18, zero, v23, v20, v19, v84, v80, v15]
// [Asm]   slli v85, v84, 1  # live: [v16, v21, v79, v22, v17, s11, v18, zero, v23, v20, v85, v19, v80, v15]
// [Asm]   li v159, 1  # live: [v16, v21, v79, v22, v159, v17, s11, v18, zero, v23, v20, v85, v19, v80, v15]
// [Asm]   sub v86, v159, v85  # live: [v16, v21, v79, v22, v17, s11, v86, v18, zero, v23, v20, v19, v80, v15]
// [Asm]   mulw v87, v80, v86  # live: [v16, v87, v21, v79, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   add v88, v79, v87  # live: [v16, v21, v22, v88, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   sw v88, 0(v22)  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   addi v11, s11, -4  # live: [v11, v16, v21, v22, v17, v18, zero, v23, v20, v19, v15]
// [Asm]   andi s11, v11, -8  # live: [v11, v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   li v156, 1  # live: [v11, v16, v21, v22, v17, s11, v18, v156, zero, v23, v20, v19, v15]
// [Asm]   sw v156, 0(v11)  # live: [v11, v16, v21, v18, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   addi v12, s11, -4  # live: [v11, v16, v21, v18, zero, v22, v23, v20, v19, v17, v12, v15]
// [Asm]   andi s11, v12, -8  # live: [v11, v16, v21, v18, zero, v22, v23, v20, v19, v17, v12, s11, v15]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v92, v95, v94, v96, v97, v93], uses: [v11, v19, v16, v17, v12, v15], upward_exposed: [v11, v19, v16, v17, v12, v15], params_defs: []
// [Asm] # live_in: [v11, v16, v21, v22, v17, v12, s11, v18, zero, v23, v20, v19, v15], live_out: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm] # block parameters: []
// [Asm] .compute.515_71:
// [Asm] # control
// [Asm]   mv v92, v16  # live: [v11, v16, v21, v22, v92, v17, s11, v12, v18, zero, v23, v20, v19, v15]
// [Asm]   mv v93, v15  # live: [v11, v16, v21, v22, v92, v17, s11, v12, v93, v18, zero, v23, v20, v19, v15]
// [Asm]   mv v94, v12  # live: [v11, v16, v21, v22, v92, v17, s11, v93, v94, v18, zero, v23, v20, v19, v15]
// [Asm]   mv v95, v11  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, zero, v23, v20, v19, v15]
// [Asm]   mv v96, v17  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, zero, v23, v20, v19, v15]
// [Asm]   mv v97, v19  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v152, v98], uses: [v152, v95, v98], upward_exposed: [v95], params_defs: [v92, v95, v94, v96, v97, v93]
// [Asm] # live_in: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15], live_out: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] # block parameters: [v92, v93, v94, v95, v96, v97]
// [Asm] .compute.515_60:
// [Asm]   lw v98, 0(v95)  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v98, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] # control
// [Asm]   li v152, 1  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v98, v94, v18, v96, v97, zero, v23, v20, v152, v19, v15]
// [Asm]   bne v98, v152, .compute.515_62  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v105], uses: [v105, v92, v93], upward_exposed: [v92, v93], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15], live_out: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] # block parameters: []
// [Asm] .compute.515_61:
// [Asm]   lw v105, 0(v93)  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v105, v15]
// [Asm] # control
// [Asm]   beq v105, v92, .compute.515_63  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [t1, v107, ft0, ft1, a1, fa1, v109, fa2, ft6, a4, fa6, a6, ft5, ft10, v117, ft7, v116, ft4, ft9, v121, a5, fa4, a0, v119, v110, ft2, a2, v114, v111, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v139], uses: [v116, v121, a0, v110, v119, v107, a2, v114, a1, v111, v93, v94, v96, zero, v97, v117, v139], upward_exposed: [v94, v96, zero, v97, v93], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15], live_out: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] # block parameters: []
// [Asm] .compute.515_64:
// [Asm]   lw v107, 0(v96)  # live: [v16, v21, v22, v95, v92, v107, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   sw v107, 0(v94)  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   # save_ctx2  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   mv a0, zero  # live: [v16, v21, a0, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   mv a1, v93  # live: [v16, v21, a0, v22, v95, v92, a1, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   mv a2, v96  # live: [v16, v21, a0, v22, v95, v92, a2, a1, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   call move_perm1_forward.521  # live: [v16, v21, a0, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   mv v109, a0  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   # restore_ctx2  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   lw v110, 0(v93)  # live: [v16, v21, v22, v110, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   lw v111, 0(v94)  # live: [v16, v21, v22, v110, v95, v92, v17, v111, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   th.surw v111, v96, v110, 2  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   lw v114, 0(v93)  # live: [v16, v21, v22, v95, v92, v114, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   th.lurw v116, v97, v114, 2  # live: [v116, v16, v21, v22, v95, v92, v114, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   addi v117, v116, -1  # live: [v16, v21, v22, v95, v92, v114, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15, v117]
// [Asm]   th.surw v117, v97, v114, 2  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   lw v119, 0(v93)  # live: [v16, v21, v22, v119, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   th.lurw v121, v97, v119, 2  # live: [v16, v21, v121, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] # control
// [Asm]   li v139, 1  # live: [v16, v21, v121, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15, v139]
// [Asm]   bge v121, v139, .compute.515_65  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v124, v127, v123], uses: [v124, zero, v123, v93], upward_exposed: [zero, v93], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15], live_out: [v16, v21, v127, v22, v92, v95, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] # block parameters: []
// [Asm] .compute.515_66:
// [Asm]   lw v123, 0(v93)  # live: [v16, v21, v22, v123, v95, v92, v17, s11, v93, v94, v18, v96, zero, v97, v20, v23, v19, v15]
// [Asm]   addi v124, v123, 1  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v124, v96, zero, v97, v20, v23, v19, v15]
// [Asm]   sw v124, 0(v93)  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] # control
// [Asm]   mv v127, zero  # live: [v16, v21, v127, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v130], uses: [zero], upward_exposed: [zero], params_defs: [v127]
// [Asm] # live_in: [v16, v21, v127, v22, v92, v95, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15], live_out: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, v130, zero, v97, v23, v20, v19, v15]
// [Asm] # block parameters: [v127]
// [Asm] .compute.515_67:
// [Asm] # control
// [Asm]   mv v130, zero  # live: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v130, zero, v97, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v92, v95, v94, v96, v97, v93], upward_exposed: [v92, v95, v94, v96, v97, v93], params_defs: [v130]
// [Asm] # live_in: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, v130, zero, v97, v23, v20, v19, v15], live_out: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm] # block parameters: [v130]
// [Asm] .compute.515_68:
// [Asm] # control
// [Asm]   mv v92, v92  # live: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm]   mv v93, v93  # live: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm]   mv v94, v94  # live: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm]   mv v95, v95  # live: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm]   mv v96, v96  # live: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm]   mv v97, v97  # live: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm]   j .compute.515_60  # live: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v127], uses: [v95, zero], upward_exposed: [v95, zero], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15], live_out: [v16, v21, v127, v22, v92, v95, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] # block parameters: []
// [Asm] .compute.515_65:
// [Asm]   sw zero, 0(v95)  # live: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] # control
// [Asm]   mv v127, zero  # live: [v16, v21, v127, v22, v92, v95, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm]   j .compute.515_67  # live: [v16, v21, v127, v22, v92, v95, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v130], uses: [v95, zero, v93], upward_exposed: [v95, zero, v93], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v95, v92, v17, s11, v93, v94, v18, v96, v97, zero, v23, v20, v19, v15], live_out: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, v130, zero, v97, v23, v20, v19, v15]
// [Asm] # block parameters: []
// [Asm] .compute.515_63:
// [Asm]   sw zero, 0(v95)  # live: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm]   sw zero, 0(v93)  # live: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, zero, v97, v23, v20, v19, v15]
// [Asm] # control
// [Asm]   mv v130, zero  # live: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, v130, zero, v97, v23, v20, v19, v15]
// [Asm]   j .compute.515_68  # live: [v16, v21, v22, v92, v95, v17, s11, v93, v94, v18, v96, v130, zero, v97, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v100], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v21, v18, zero, v23, v20, v22, v19, v17, v15, s11], live_out: [v16, v21, v18, zero, v23, v20, v22, v19, v17, v15, s11, v100]
// [Asm] # block parameters: []
// [Asm] .compute.515_62:
// [Asm] # control
// [Asm]   mv v100, zero  # live: [v16, v21, v18, zero, v23, v20, v22, v19, v17, v15, s11, v100]
// [Asm] 
// [Asm] # block info: defs: [v103, v102], uses: [v16, v21, v18, v20, v22, v23, v19, v103, v17, v15, v102], upward_exposed: [v16, v21, v18, v20, v22, v23, v19, v17, v15], params_defs: [v101]
// [Asm] # live_in: [v16, v21, v18, zero, v20, v22, v23, v19, v17, v15, s11, v101], live_out: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] # block parameters: [v101]
// [Asm] .compute.515_11:
// [Asm]   lw v102, 0(v21)  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, s11, v15, v102]
// [Asm]   addi v103, v102, 1  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v103, v17, s11, v15]
// [Asm]   sw v103, 0(v21)  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] # control
// [Asm]   mv v15, v15  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v16, v16  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v17, v17  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v18, v18  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v19, v19  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v20, v20  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v21, v21  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v22, v22  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   mv v23, v23  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm]   j .compute.515_0  # live: [v16, v18, v21, zero, v22, v23, v20, v19, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v78], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v21, v18, zero, v22, v20, v23, v19, v17, s11, v15], live_out: [v16, v21, v18, zero, v22, v20, v78, v23, v19, v17, v15, s11]
// [Asm] # block parameters: []
// [Asm] .compute.515_4:
// [Asm] # control
// [Asm]   mv v78, zero  # live: [v16, v21, v18, zero, v22, v20, v78, v23, v19, v17, v15, s11]
// [Asm]   j .compute.515_5  # live: [v16, v21, v18, zero, v22, v20, v78, v23, v19, v17, v15, s11]
// [Asm] 
// [Asm] # leaf false
// [Asm] main.513:
// [Asm] # block info: defs: [v2, v25, t1, v26, v7, ft0, ft1, v32, a1, s11, fa1, fa2, ft6, a4, fa6, v27, v8, v19, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, ft9, a5, fa4, a0, ft2, a2, a3, v24, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, v35, t4, t2, v3], uses: [v3, v25, v5, a5, a0, v7, v32, a2, a1, s11, a3, v24, v9, a7, t0, zero, a4, v27, v35, v8, a6, v4, v6, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.513_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   addi v9, s11, -36  # live: [zero, v9]
// [Asm]   andi s11, v9, -8  # live: [zero, s11, v9]
// [Asm]   # save_ctx2  # live: [zero, s11, v9]
// [Asm]   mv a0, zero  # live: [a0, s11, v9]
// [Asm]   mv a1, v9  # live: [a0, a1, s11, v9]
// [Asm]   call init_arr.514  # live: [a0, s11, v9]
// [Asm]   mv v11, a0  # live: [s11, v9]
// [Asm]   # restore_ctx2  # live: [s11, v9]
// [Asm]   addi v4, s11, -36  # live: [v4, v9]
// [Asm]   andi s11, v4, -8  # live: [v4, s11, v9]
// [Asm]   addi v6, s11, -36  # live: [v4, v6, v9]
// [Asm]   andi s11, v6, -8  # live: [v4, v6, s11, v9]
// [Asm]   addi v7, s11, -4  # live: [v7, v4, v6, v9]
// [Asm]   andi s11, v7, -8  # live: [v7, v4, v6, s11, v9]
// [Asm]   addi v3, s11, -4  # live: [v7, v4, v6, v9, v3]
// [Asm]   andi s11, v3, -8  # live: [v7, v4, v6, s11, v9, v3]
// [Asm]   addi v5, s11, -4  # live: [v5, v7, v4, v6, v9, v3]
// [Asm]   andi s11, v5, -8  # live: [v5, v7, v4, v6, s11, v9, v3]
// [Asm]   addi v2, s11, -4  # live: [v2, v5, v7, v4, v6, v9, v3]
// [Asm]   andi s11, v2, -8  # live: [v2, v5, v7, v4, v6, s11, v9, v3]
// [Asm]   addi v8, s11, -4  # live: [v2, v5, v7, v8, v4, v6, v9, v3]
// [Asm]   andi s11, v8, -8  # live: [v2, v5, v7, v8, v4, v6, v9, v3]
// [Asm]   li v35, 9  # live: [v2, v5, v7, v8, v35, v4, v6, v9, v3]
// [Asm]   sw v35, 0(v8)  # live: [v2, v5, v7, v8, v4, v6, v9, v3]
// [Asm]   # save_ctx2  # live: [v2, v5, v7, v8, v4, v6, v9, v3]
// [Asm]   mv a0, v8  # live: [v2, v5, a0, v7, v4, v6, v9, v3]
// [Asm]   li v32, 9  # live: [v2, v5, a0, v7, v4, v32, v6, v9, v3]
// [Asm]   mv a1, v32  # live: [v2, v5, a0, v7, v4, v6, a1, v9, v3]
// [Asm]   mv a2, v9  # live: [v2, v5, a0, v7, a2, v4, v6, a1, v3]
// [Asm]   mv a3, v4  # live: [v2, v5, a0, v7, a2, a1, v6, a3, v3]
// [Asm]   mv a4, v6  # live: [v2, v5, a0, a4, v7, a2, a1, a3, v3]
// [Asm]   mv a5, v7  # live: [v2, v5, a5, a0, a4, a2, a1, a3, v3]
// [Asm]   mv a6, v2  # live: [v5, a5, a0, a4, a6, a2, a1, a3, v3]
// [Asm]   mv a7, v5  # live: [a7, v5, a5, a0, a4, a6, a2, a1, a3, v3]
// [Asm]   mv t0, v3  # live: [a7, t0, v5, a5, a0, a4, a6, a2, a1, a3, v3]
// [Asm]   call compute.515  # live: [v5, a0, v3]
// [Asm]   mv v19, a0  # live: [v5, v3]
// [Asm]   # restore_ctx2  # live: [v5, v3]
// [Asm]   lw v24, 0(v3)  # live: [v5, v24]
// [Asm]   lw v25, 0(v5)  # live: [v25, v24]
// [Asm]   # save_ctx2  # live: [v25, v24]
// [Asm]   mv a0, v25  # live: [v24, a0]
// [Asm]   call minimbt_print_int  # live: [v24, a0]
// [Asm]   mv v26, a0  # live: [v24]
// [Asm]   # restore_ctx2  # live: [v24]
// [Asm]   # save_ctx2  # live: [v24]
// [Asm]   mv a0, v24  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v27, a0  # live: [v27]
// [Asm]   # restore_ctx2  # live: [v27]
// [Asm] # control
// [Asm]   mv a0, v27  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] init_arr.514:
// [Asm] # block info: defs: [v3, v4, v5, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .init_arr.514_5:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   mv v4, v2  # live: [v4, zero, v3]
// [Asm]   mv v5, v3  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [v4, v12], upward_exposed: [v4], params_defs: [v4, v5]
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: [v4, v5]
// [Asm] .init_arr.514_0:
// [Asm] # control
// [Asm]   li v12, 8  # live: [v4, v5, v12, zero]
// [Asm]   blt v12, v4, .init_arr.514_2  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v4, v10], uses: [v4, v5, v10], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .init_arr.514_1:
// [Asm]   th.surw v4, v5, v4, 2  # live: [v4, v5, zero]
// [Asm]   addi v10, v4, 1  # live: [v5, v10, zero]
// [Asm] # control
// [Asm]   mv v4, v10  # live: [v4, v5, zero]
// [Asm]   mv v5, v5  # live: [v4, v5, zero]
// [Asm]   j .init_arr.514_0  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v7], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v7]
// [Asm] # block parameters: []
// [Asm] .init_arr.514_2:
// [Asm] # control
// [Asm]   mv v7, zero  # live: [v7]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v7], upward_exposed: [v7], params_defs: [v7]
// [Asm] # live_in: [v7], live_out: []
// [Asm] # block parameters: [v7]
// [Asm] .init_arr.514_3:
// [Asm] # control
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] move_perm1_forward.521:
// [Asm] # block info: defs: [v3, v4, v5, v6, v2], uses: [v2, v5, a0, a2, a1, v6, v3], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v3, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.521_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, a2, zero, v2]
// [Asm]   mv v4, a2  # live: [v3, v4, zero, v2]
// [Asm]   lw v5, 0(v3)  # live: [v3, v4, v5, zero, v2]
// [Asm]   addi v6, v5, -1  # live: [v3, v4, v6, zero, v2]
// [Asm] # control
// [Asm]   blt v6, v2, .move_perm1_forward.521_2  # live: [v3, v4, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v10, a0, zero, v8, v4, a2, a1, v3], upward_exposed: [v3, v4, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v4, zero, v3], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.521_1:
// [Asm]   addi v8, v2, 1  # live: [v8, v2, v4, zero, v3]
// [Asm]   th.lurw v10, v4, v8, 2  # live: [v8, v2, v4, v10, zero, v3]
// [Asm]   th.surw v10, v4, v2, 2  # live: [v8, v4, zero, v3]
// [Asm]   # save_ctx2  # live: [v8, v4, zero, v3]
// [Asm]   mv a0, v8  # live: [v4, zero, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, zero, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, zero, a0]
// [Asm]   call move_perm1_forward.521  # live: [zero, a0]
// [Asm]   mv v13, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .move_perm1_forward.521_3:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .move_perm1_forward.521_2:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm]   j .move_perm1_forward.521_3  # live: [v14]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.513  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] init_count.517:
// [Asm] # block info: defs: [v3, v4, v20, v2], uses: [v4, a1, a0, v20, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v3, zero, v2]
// [Asm] # block parameters: []
// [Asm] .init_count.517_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, zero, v2]
// [Asm]   lw v4, 0(v2)  # live: [v3, v4, zero, v2]
// [Asm] # control
// [Asm]   li v20, 1  # live: [v3, v4, zero, v20, v2]
// [Asm]   beq v4, v20, .init_count.517_1  # live: [v3, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, v11, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v11, v10, a0, v13, v7, v6, a1, v3], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, zero, v3], live_out: [v14, zero]
// [Asm] # block parameters: []
// [Asm] .init_count.517_2:
// [Asm]   lw v6, 0(v2)  # live: [v2, v6, zero, v3]
// [Asm]   addi v7, v6, -1  # live: [v2, v7, v6, zero, v3]
// [Asm]   th.surw v6, v3, v7, 2  # live: [v2, zero, v3]
// [Asm]   lw v10, 0(v2)  # live: [v2, v10, zero, v3]
// [Asm]   addi v11, v10, -1  # live: [v2, v11, zero, v3]
// [Asm]   sw v11, 0(v2)  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [zero, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, zero, a0]
// [Asm]   call init_count.517  # live: [zero, a0]
// [Asm]   mv v13, a0  # live: [zero, v13]
// [Asm]   # restore_ctx2  # live: [zero, v13]
// [Asm] # control
// [Asm]   mv v14, v13  # live: [v14, zero]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: [v14]
// [Asm] # live_in: [v14, zero], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .init_count.517_3:
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14, zero]
// [Asm] # block parameters: []
// [Asm] .init_count.517_1:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14, zero]
// [Asm]   j .init_count.517_3  # live: [v14, zero]
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main] beta reduce perm1.295 = arr.297
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl compute.515
// [Main]   .type compute.515, @function
// [Main] # leaf false
// [Main] compute.515:
// [Main] .compute.515_8:
// [Main]   addi sp, sp, -96
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   sd s8, 72(sp)
// [Main]   sd s9, 80(sp)
// [Main]   sd s10, 88(sp)
// [Main]   mv s8, a0
// [Main]   mv s0, a1
// [Main]   mv s7, a2
// [Main]   mv s2, a3
// [Main]   mv s6, a4
// [Main]   mv s4, a5
// [Main]   mv s1, a6
// [Main]   mv s5, a7
// [Main]   mv s3, t0
// [Main] 
// [Main] .compute.515_0:
// [Main]   lw a0, 0(s8)
// [Main]   li a1, 1
// [Main]   blt a0, a1, .compute.515_2
// [Main] 
// [Main] .compute.515_59:
// [Main]   mv a1, zero
// [Main]   mv a2, s7
// [Main]   mv a3, s2
// [Main] 
// [Main] .compute.515_54:
// [Main]   li a0, 8
// [Main]   blt a0, a1, .compute.515_56
// [Main] 
// [Main] .compute.515_55:
// [Main]   th.lurw a0, a2, a1, 2
// [Main]   th.surw a0, a3, a1, 2
// [Main]   addi a1, a1, 1
// [Main]   j .compute.515_54
// [Main] 
// [Main] .compute.515_56:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute.515_9:
// [Main]   mv a0, s8
// [Main]   mv a1, s6
// [Main]   call init_count.517
// [Main]   sw zero, 0(s4)
// [Main]   lw a0, 0(s2)
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw a0, 0(a1)
// [Main] 
// [Main] .compute.515_36:
// [Main]   mv a0, a1
// [Main]   mv a3, s2
// [Main]   mv a2, s4
// [Main] 
// [Main] .compute.515_31:
// [Main]   lw a1, 0(a0)
// [Main]   beq a1, zero, .compute.515_32
// [Main] 
// [Main] .compute.515_33:
// [Main]   addi a4, s11, -4
// [Main]   andi s11, a4, -8
// [Main] 
// [Main] .compute.515_45:
// [Main]   mv a1, zero
// [Main] 
// [Main] .compute.515_40:
// [Main]   lw a5, 0(a0)
// [Main]   srai a5, a5, 1
// [Main]   blt a5, a1, .compute.515_42
// [Main] 
// [Main] .compute.515_41:
// [Main]   th.lurw a5, a3, a1, 2
// [Main]   sw a5, 0(a4)
// [Main]   lw a5, 0(a0)
// [Main]   sub a5, a5, a1
// [Main]   th.lurw a5, a3, a5, 2
// [Main]   th.surw a5, a3, a1, 2
// [Main]   lw a5, 0(a0)
// [Main]   sub a5, a5, a1
// [Main]   lw a6, 0(a4)
// [Main]   th.surw a6, a3, a5, 2
// [Main]   addi a1, a1, 1
// [Main]   j .compute.515_40
// [Main] 
// [Main] .compute.515_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute.515_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   ld s8, 72(sp)
// [Main]   ld s9, 80(sp)
// [Main]   ld s10, 88(sp)
// [Main]   addi sp, sp, 96
// [Main]   ret
// [Main] 
// [Main] .compute.515_42:
// [Main]   mv a1, zero
// [Main] 
// [Main] .compute.515_37:
// [Main]   lw a1, 0(a3)
// [Main]   sw a1, 0(a0)
// [Main]   lw a1, 0(a2)
// [Main]   addi a1, a1, 1
// [Main]   sw a1, 0(a2)
// [Main]   j .compute.515_31
// [Main] 
// [Main] .compute.515_32:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute.515_10:
// [Main]   lw a0, 0(s3)
// [Main]   lw a1, 0(s4)
// [Main]   blt a1, a0, .compute.515_4
// [Main] 
// [Main] .compute.515_3:
// [Main]   lw a0, 0(s4)
// [Main]   sw a0, 0(s3)
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute.515_5:
// [Main]   lw a0, 0(s5)
// [Main]   lw a1, 0(s4)
// [Main]   lw a2, 0(s1)
// [Main]   andi a2, a2, 1
// [Main]   slli a2, a2, 1
// [Main]   li a3, 1
// [Main]   sub a2, a3, a2
// [Main]   mulw a1, a1, a2
// [Main]   add a0, a0, a1
// [Main]   sw a0, 0(s5)
// [Main]   addi a0, s11, -4
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main] 
// [Main] .compute.515_71:
// [Main]   mv s10, a1
// [Main]   mv s9, a0
// [Main] 
// [Main] .compute.515_60:
// [Main]   lw a0, 0(s9)
// [Main]   li a1, 1
// [Main]   bne a0, a1, .compute.515_62
// [Main] 
// [Main] .compute.515_61:
// [Main]   lw a0, 0(s8)
// [Main]   beq a0, s0, .compute.515_63
// [Main] 
// [Main] .compute.515_64:
// [Main]   lw a0, 0(s7)
// [Main]   sw a0, 0(s10)
// [Main]   mv a0, zero
// [Main]   mv a1, s8
// [Main]   mv a2, s7
// [Main]   call move_perm1_forward.521
// [Main]   lw a0, 0(s8)
// [Main]   lw a1, 0(s10)
// [Main]   th.surw a1, s7, a0, 2
// [Main]   lw a0, 0(s8)
// [Main]   th.lurw a1, s6, a0, 2
// [Main]   addi a1, a1, -1
// [Main]   th.surw a1, s6, a0, 2
// [Main]   lw a0, 0(s8)
// [Main]   th.lurw a0, s6, a0, 2
// [Main]   li a1, 1
// [Main]   bge a0, a1, .compute.515_65
// [Main] 
// [Main] .compute.515_66:
// [Main]   lw a0, 0(s8)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s8)
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute.515_67:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute.515_68:
// [Main]   j .compute.515_60
// [Main] 
// [Main] .compute.515_65:
// [Main]   sw zero, 0(s9)
// [Main]   mv a0, zero
// [Main]   j .compute.515_67
// [Main] 
// [Main] .compute.515_63:
// [Main]   sw zero, 0(s9)
// [Main]   sw zero, 0(s8)
// [Main]   mv a0, zero
// [Main]   j .compute.515_60
// [Main] 
// [Main] .compute.515_62:
// [Main]   mv a0, zero
// [Main] 
// [Main] .compute.515_11:
// [Main]   lw a0, 0(s1)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s1)
// [Main]   j .compute.515_0
// [Main] 
// [Main] .compute.515_4:
// [Main]   mv a0, zero
// [Main]   j .compute.515_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.513
// [Main]   .type main.513, @function
// [Main] # leaf false
// [Main] main.513:
// [Main] .main.513_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   addi s0, s11, -36
// [Main]   andi s11, s0, -8
// [Main]   mv a0, zero
// [Main]   mv a1, s0
// [Main]   call init_arr.514
// [Main]   addi a3, s11, -36
// [Main]   andi s11, a3, -8
// [Main]   addi a4, s11, -36
// [Main]   andi s11, a4, -8
// [Main]   addi a5, s11, -4
// [Main]   andi s11, a5, -8
// [Main]   addi s1, s11, -4
// [Main]   andi s11, s1, -8
// [Main]   addi s2, s11, -4
// [Main]   andi s11, s2, -8
// [Main]   addi a6, s11, -4
// [Main]   andi s11, a6, -8
// [Main]   addi a0, s11, -4
// [Main]   andi s11, a0, -8
// [Main]   li a1, 9
// [Main]   sw a1, 0(a0)
// [Main]   li a1, 9
// [Main]   mv a2, s0
// [Main]   mv a7, s2
// [Main]   mv t0, s1
// [Main]   call compute.515
// [Main]   lw s0, 0(s1)
// [Main]   lw a0, 0(s2)
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_arr.514
// [Main]   .type init_arr.514, @function
// [Main] # leaf true
// [Main] init_arr.514:
// [Main] .init_arr.514_5:
// [Main]   mv a2, a0
// [Main]   mv a0, a1
// [Main]   mv a1, a2
// [Main]   mv a2, a0
// [Main] 
// [Main] .init_arr.514_0:
// [Main]   li a0, 8
// [Main]   blt a0, a1, .init_arr.514_2
// [Main] 
// [Main] .init_arr.514_1:
// [Main]   th.surw a1, a2, a1, 2
// [Main]   addi a1, a1, 1
// [Main]   j .init_arr.514_0
// [Main] 
// [Main] .init_arr.514_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .init_arr.514_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl move_perm1_forward.521
// [Main]   .type move_perm1_forward.521, @function
// [Main] # leaf false
// [Main] move_perm1_forward.521:
// [Main] .move_perm1_forward.521_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a3, a1
// [Main]   lw a1, 0(a3)
// [Main]   addi a1, a1, -1
// [Main]   blt a1, a0, .move_perm1_forward.521_2
// [Main] 
// [Main] .move_perm1_forward.521_1:
// [Main]   addi a1, a0, 1
// [Main]   th.lurw a4, a2, a1, 2
// [Main]   th.surw a4, a2, a0, 2
// [Main]   mv a0, a1
// [Main]   mv a1, a3
// [Main]   call move_perm1_forward.521
// [Main]   mv a0, zero
// [Main] 
// [Main] .move_perm1_forward.521_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .move_perm1_forward.521_2:
// [Main]   mv a0, zero
// [Main]   j .move_perm1_forward.521_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.513
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_count.517
// [Main]   .type init_count.517, @function
// [Main] # leaf false
// [Main] init_count.517:
// [Main] .init_count.517_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a2, 0(a0)
// [Main]   li a3, 1
// [Main]   beq a2, a3, .init_count.517_1
// [Main] 
// [Main] .init_count.517_2:
// [Main]   lw a2, 0(a0)
// [Main]   addi a3, a2, -1
// [Main]   th.surw a2, a1, a3, 2
// [Main]   lw a2, 0(a0)
// [Main]   addi a2, a2, -1
// [Main]   sw a2, 0(a0)
// [Main]   call init_count.517
// [Main] 
// [Main] .init_count.517_3:
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .init_count.517_1:
// [Main]   mv a0, zero
// [Main]   j .init_count.517_3
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("fannkuch", (Int, Int)), args: [("n", Int)], body: LetRec({tyvars: [], name: ("gen_perm1", Array[Int]), args: [("len", Int)], body: Let(("arr", Var(None)), Array(Var("len"), Int(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Int(0)]), Var("arr"))))}, Let(("perm1", Var(None)), App(Var("gen_perm1"), targs=None, [Var("n")]), Let(("perm", Var(None)), Array(Var("n"), Int(0)), Let(("count", Var(None)), Array(Var("n"), Int(0)), Let(("flips", Var(None)), Array(Int(1), Int(0)), Let(("max_flips", Var(None)), Array(Int(1), Int(0)), Let(("check_sum", Var(None)), Array(Int(1), Int(0)), Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("max_flips", Var(None)), ("check_sum", Var(None))], App(Var("fannkuch"), targs=None, [Int(9)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("check_sum")]), App(Var("print_int"), targs=None, [Var("max_flips")])))}, Unit))
// [Typer] resolve: LetRec({tyvars: [], name: ("gen_perm1", Array[Int]), args: [("len", Int)], body: Let(("arr", Var(None)), Array(Var("len"), Int(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Int(0)]), Var("arr"))))}, Let(("perm1", Var(None)), App(Var("gen_perm1"), targs=None, [Var("n")]), Let(("perm", Var(None)), Array(Var("n"), Int(0)), Let(("count", Var(None)), Array(Var("n"), Int(0)), Let(("flips", Var(None)), Array(Int(1), Int(0)), Let(("max_flips", Var(None)), Array(Int(1), Int(0)), Let(("check_sum", Var(None)), Array(Int(1), Int(0)), Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))
// [Typer] resolve: Let(("arr", Var(None)), Array(Var("len"), Int(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Int(0)]), Var("arr"))))
// [Typer] resolve: Array(Var("len"), Int(0))
// [Typer] resolve: Var("len")
// [Typer] resolve: Int(0)
// [Typer] resolve: LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Int(0)]), Var("arr")))
// [Typer] resolve: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)
// [Typer] resolve: LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None))
// [Typer] resolve: Var("i")
// [Typer] resolve: Prim(Var("len"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("len")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))
// [Typer] resolve: Put(Var("arr"), Var("i"), Var("i"))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("i")
// [Typer] resolve: App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])
// [Typer] resolve: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("init_arr")
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Int(0)]), Var("arr"))
// [Typer] resolve: App(Var("init_arr"), targs=None, [Int(0)])
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("init_arr")
// [Typer] resolve: Var("arr")
// [Typer] resolve: Let(("perm1", Var(None)), App(Var("gen_perm1"), targs=None, [Var("n")]), Let(("perm", Var(None)), Array(Var("n"), Int(0)), Let(("count", Var(None)), Array(Var("n"), Int(0)), Let(("flips", Var(None)), Array(Int(1), Int(0)), Let(("max_flips", Var(None)), Array(Int(1), Int(0)), Let(("check_sum", Var(None)), Array(Int(1), Int(0)), Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))))
// [Typer] resolve: App(Var("gen_perm1"), targs=None, [Var("n")])
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("gen_perm1")
// [Typer] resolve: Let(("perm", Var(None)), Array(Var("n"), Int(0)), Let(("count", Var(None)), Array(Var("n"), Int(0)), Let(("flips", Var(None)), Array(Int(1), Int(0)), Let(("max_flips", Var(None)), Array(Int(1), Int(0)), Let(("check_sum", Var(None)), Array(Int(1), Int(0)), Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))
// [Typer] resolve: Array(Var("n"), Int(0))
// [Typer] resolve: Var("n")
// [Typer] resolve: Int(0)
// [Typer] resolve: Let(("count", Var(None)), Array(Var("n"), Int(0)), Let(("flips", Var(None)), Array(Int(1), Int(0)), Let(("max_flips", Var(None)), Array(Int(1), Int(0)), Let(("check_sum", Var(None)), Array(Int(1), Int(0)), Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))
// [Typer] resolve: Array(Var("n"), Int(0))
// [Typer] resolve: Var("n")
// [Typer] resolve: Int(0)
// [Typer] resolve: Let(("flips", Var(None)), Array(Int(1), Int(0)), Let(("max_flips", Var(None)), Array(Int(1), Int(0)), Let(("check_sum", Var(None)), Array(Int(1), Int(0)), Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))
// [Typer] resolve: Array(Int(1), Int(0))
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(0)
// [Typer] resolve: Let(("max_flips", Var(None)), Array(Int(1), Int(0)), Let(("check_sum", Var(None)), Array(Int(1), Int(0)), Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))
// [Typer] resolve: Array(Int(1), Int(0))
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(0)
// [Typer] resolve: Let(("check_sum", Var(None)), Array(Int(1), Int(0)), Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))
// [Typer] resolve: Array(Int(1), Int(0))
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(0)
// [Typer] resolve: Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))
// [Typer] resolve: Array(Int(1), Int(0))
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(0)
// [Typer] resolve: Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))
// [Typer] resolve: Array(Int(1), Var("n"))
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("n")
// [Typer] resolve: LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))
// [Typer] resolve: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)
// [Typer] resolve: LE(Int(1), Get(Var("r"), Int(0)))
// [Typer] resolve: Int(1)
// [Typer] resolve: Get(Var("r"), Int(0))
// [Typer] resolve: Var("r")
// [Typer] resolve: Int(0)
// [Typer] resolve: LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")]))))))))))))))))
// [Typer] resolve: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)
// [Typer] resolve: LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None))
// [Typer] resolve: Var("i")
// [Typer] resolve: Prim(Var("n"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("n")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))
// [Typer] resolve: Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i")))
// [Typer] resolve: Var("perm")
// [Typer] resolve: Var("i")
// [Typer] resolve: Get(Var("perm1"), Var("i"))
// [Typer] resolve: Var("perm1")
// [Typer] resolve: Var("i")
// [Typer] resolve: App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])
// [Typer] resolve: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("copy_perm")
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))
// [Typer] resolve: App(Var("copy_perm"), targs=None, [Int(0)])
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("copy_perm")
// [Typer] resolve: LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")]))))))))))))))
// [Typer] resolve: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)
// [Typer] resolve: If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit)
// [Typer] resolve: Not(Eq(Get(Var("r"), Int(0)), Int(1)))
// [Typer] resolve: Eq(Get(Var("r"), Int(0)), Int(1))
// [Typer] resolve: Get(Var("r"), Int(0))
// [Typer] resolve: Var("r")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, [])))
// [Typer] resolve: Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0)))
// [Typer] resolve: Var("count")
// [Typer] resolve: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)
// [Typer] resolve: Get(Var("r"), Int(0))
// [Typer] resolve: Var("r")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: Get(Var("r"), Int(0))
// [Typer] resolve: Var("r")
// [Typer] resolve: Int(0)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))
// [Typer] resolve: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None))
// [Typer] resolve: Var("r")
// [Typer] resolve: Int(0)
// [Typer] resolve: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)
// [Typer] resolve: Get(Var("r"), Int(0))
// [Typer] resolve: Var("r")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: App(Var("init_count"), targs=None, [])
// [Typer] resolve: Var("init_count")
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))
// [Typer] resolve: App(Var("init_count"), targs=None, [])
// [Typer] resolve: Var("init_count")
// [Typer] resolve: Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")]))))))))))))
// [Typer] resolve: Put(Var("flips"), Int(0), Int(0))
// [Typer] resolve: Var("flips")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(0)
// [Typer] resolve: Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))
// [Typer] resolve: Array(Int(1), Get(Var("perm"), Int(0)))
// [Typer] resolve: Int(1)
// [Typer] resolve: Get(Var("perm"), Int(0))
// [Typer] resolve: Var("perm")
// [Typer] resolve: Int(0)
// [Typer] resolve: LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")]))))))))))
// [Typer] resolve: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)
// [Typer] resolve: Not(Eq(Get(Var("k"), Int(0)), Int(0)))
// [Typer] resolve: Eq(Get(Var("k"), Int(0)), Int(0))
// [Typer] resolve: Get(Var("k"), Int(0))
// [Typer] resolve: Var("k")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(0)
// [Typer] resolve: Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")]))))))
// [Typer] resolve: Array(Int(1), Int(0))
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(0)
// [Typer] resolve: LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))
// [Typer] resolve: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)
// [Typer] resolve: LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None))
// [Typer] resolve: Var("i")
// [Typer] resolve: Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)
// [Typer] resolve: Get(Var("k"), Int(0))
// [Typer] resolve: Var("k")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(2)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))))
// [Typer] resolve: Put(Var("t"), Int(0), Get(Var("perm"), Var("i")))
// [Typer] resolve: Var("t")
// [Typer] resolve: Int(0)
// [Typer] resolve: Get(Var("perm"), Var("i"))
// [Typer] resolve: Var("perm")
// [Typer] resolve: Var("i")
// [Typer] resolve: Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))
// [Typer] resolve: Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None)))
// [Typer] resolve: Var("perm")
// [Typer] resolve: Var("i")
// [Typer] resolve: Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))
// [Typer] resolve: Var("perm")
// [Typer] resolve: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None)
// [Typer] resolve: Get(Var("k"), Int(0))
// [Typer] resolve: Var("k")
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("i")
// [Typer] resolve: Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))
// [Typer] resolve: Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0)))
// [Typer] resolve: Var("perm")
// [Typer] resolve: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None)
// [Typer] resolve: Get(Var("k"), Int(0))
// [Typer] resolve: Var("k")
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("i")
// [Typer] resolve: Get(Var("t"), Int(0))
// [Typer] resolve: Var("t")
// [Typer] resolve: Int(0)
// [Typer] resolve: App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])
// [Typer] resolve: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("flip_loop")
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")]))))
// [Typer] resolve: App(Var("flip_loop"), targs=None, [Int(0)])
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("flip_loop")
// [Typer] resolve: Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))
// [Typer] resolve: Put(Var("k"), Int(0), Get(Var("perm"), Int(0)))
// [Typer] resolve: Var("k")
// [Typer] resolve: Int(0)
// [Typer] resolve: Get(Var("perm"), Int(0))
// [Typer] resolve: Var("perm")
// [Typer] resolve: Int(0)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")]))
// [Typer] resolve: Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None))
// [Typer] resolve: Var("flips")
// [Typer] resolve: Int(0)
// [Typer] resolve: Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)
// [Typer] resolve: Get(Var("flips"), Int(0))
// [Typer] resolve: Var("flips")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: App(Var("do_flip"), targs=None, [Var("k")])
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("do_flip")
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))
// [Typer] resolve: App(Var("do_flip"), targs=None, [Var("k")])
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("do_flip")
// [Typer] resolve: Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")]))))))))
// [Typer] resolve: If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit)
// [Typer] resolve: LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0)))
// [Typer] resolve: Get(Var("max_flips"), Int(0))
// [Typer] resolve: Var("max_flips")
// [Typer] resolve: Int(0)
// [Typer] resolve: Get(Var("flips"), Int(0))
// [Typer] resolve: Var("flips")
// [Typer] resolve: Int(0)
// [Typer] resolve: Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0)))
// [Typer] resolve: Var("max_flips")
// [Typer] resolve: Int(0)
// [Typer] resolve: Get(Var("flips"), Int(0))
// [Typer] resolve: Var("flips")
// [Typer] resolve: Int(0)
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))
// [Typer] resolve: Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None))
// [Typer] resolve: Var("check_sum")
// [Typer] resolve: Int(0)
// [Typer] resolve: Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)
// [Typer] resolve: Get(Var("check_sum"), Int(0))
// [Typer] resolve: Var("check_sum")
// [Typer] resolve: Int(0)
// [Typer] resolve: Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None)
// [Typer] resolve: Get(Var("flips"), Int(0))
// [Typer] resolve: Var("flips")
// [Typer] resolve: Int(0)
// [Typer] resolve: Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None)
// [Typer] resolve: Int(1)
// [Typer] resolve: Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None)
// [Typer] resolve: Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None)
// [Typer] resolve: Get(Var("nperm"), Int(0))
// [Typer] resolve: Var("nperm")
// [Typer] resolve: Int(0)
// [Typer] resolve: Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None)
// [Typer] resolve: Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None)
// [Typer] resolve: Get(Var("nperm"), Int(0))
// [Typer] resolve: Var("nperm")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(2)
// [Typer] resolve: Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")]))))))
// [Typer] resolve: Array(Int(1), Bool(true))
// [Typer] resolve: Int(1)
// [Typer] resolve: Bool(true)
// [Typer] resolve: Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))
// [Typer] resolve: Array(Int(1), Int(0))
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(0)
// [Typer] resolve: LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")]))))
// [Typer] resolve: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)
// [Typer] resolve: Get(Var("go"), Int(0))
// [Typer] resolve: Var("go")
// [Typer] resolve: Int(0)
// [Typer] resolve: Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, []))
// [Typer] resolve: If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit)))))))
// [Typer] resolve: Eq(Get(Var("r"), Int(0)), Var("n"))
// [Typer] resolve: Get(Var("r"), Int(0))
// [Typer] resolve: Var("r")
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("n")
// [Typer] resolve: Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit))
// [Typer] resolve: Put(Var("go"), Int(0), Bool(false))
// [Typer] resolve: Var("go")
// [Typer] resolve: Int(0)
// [Typer] resolve: Bool(false)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)
// [Typer] resolve: Put(Var("r"), Int(0), Int(0))
// [Typer] resolve: Var("r")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(0)
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))
// [Typer] resolve: Put(Var("t"), Int(0), Get(Var("perm1"), Int(0)))
// [Typer] resolve: Var("t")
// [Typer] resolve: Int(0)
// [Typer] resolve: Get(Var("perm1"), Int(0))
// [Typer] resolve: Var("perm1")
// [Typer] resolve: Int(0)
// [Typer] resolve: LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit)))))
// [Typer] resolve: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)
// [Typer] resolve: LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None))
// [Typer] resolve: Var("i")
// [Typer] resolve: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)
// [Typer] resolve: Get(Var("r"), Int(0))
// [Typer] resolve: Var("r")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit))
// [Typer] resolve: Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None)))
// [Typer] resolve: Var("perm1")
// [Typer] resolve: Var("i")
// [Typer] resolve: Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))
// [Typer] resolve: Var("perm1")
// [Typer] resolve: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)
// [Typer] resolve: App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])
// [Typer] resolve: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("move_perm1_forward")
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))
// [Typer] resolve: App(Var("move_perm1_forward"), targs=None, [Int(0)])
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("move_perm1_forward")
// [Typer] resolve: Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit)))
// [Typer] resolve: Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0)))
// [Typer] resolve: Var("perm1")
// [Typer] resolve: Get(Var("r"), Int(0))
// [Typer] resolve: Var("r")
// [Typer] resolve: Int(0)
// [Typer] resolve: Get(Var("t"), Int(0))
// [Typer] resolve: Var("t")
// [Typer] resolve: Int(0)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))
// [Typer] resolve: Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None))
// [Typer] resolve: Var("count")
// [Typer] resolve: Get(Var("r"), Int(0))
// [Typer] resolve: Var("r")
// [Typer] resolve: Int(0)
// [Typer] resolve: Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)
// [Typer] resolve: Get(Var("count"), Get(Var("r"), Int(0)))
// [Typer] resolve: Var("count")
// [Typer] resolve: Get(Var("r"), Int(0))
// [Typer] resolve: Var("r")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit)
// [Typer] resolve: If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None)))
// [Typer] resolve: LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0))))
// [Typer] resolve: Int(1)
// [Typer] resolve: Get(Var("count"), Get(Var("r"), Int(0)))
// [Typer] resolve: Var("count")
// [Typer] resolve: Get(Var("r"), Int(0))
// [Typer] resolve: Var("r")
// [Typer] resolve: Int(0)
// [Typer] resolve: Put(Var("go"), Int(0), Bool(false))
// [Typer] resolve: Var("go")
// [Typer] resolve: Int(0)
// [Typer] resolve: Bool(false)
// [Typer] resolve: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))
// [Typer] resolve: Var("r")
// [Typer] resolve: Int(0)
// [Typer] resolve: Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None)
// [Typer] resolve: Get(Var("r"), Int(0))
// [Typer] resolve: Var("r")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: Unit
// [Typer] resolve: App(Var("go_loop"), targs=None, [])
// [Typer] resolve: Var("go_loop")
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))
// [Typer] resolve: App(Var("go_loop"), targs=None, [])
// [Typer] resolve: Var("go_loop")
// [Typer] resolve: Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")]))
// [Typer] resolve: Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None))
// [Typer] resolve: Var("nperm")
// [Typer] resolve: Int(0)
// [Typer] resolve: Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)
// [Typer] resolve: Get(Var("nperm"), Int(0))
// [Typer] resolve: Var("nperm")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: App(Var("compute"), targs=None, [Var("r")])
// [Typer] resolve: Var("r")
// [Typer] resolve: Var("compute")
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))
// [Typer] resolve: App(Var("compute"), targs=None, [Var("r")])
// [Typer] resolve: Var("r")
// [Typer] resolve: Var("compute")
// [Typer] resolve: Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("max_flips", Var(None)), ("check_sum", Var(None))], App(Var("fannkuch"), targs=None, [Int(9)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("check_sum")]), App(Var("print_int"), targs=None, [Var("max_flips")])))}, Unit)
// [Typer] resolve: LetTuple([("max_flips", Var(None)), ("check_sum", Var(None))], App(Var("fannkuch"), targs=None, [Int(9)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("check_sum")]), App(Var("print_int"), targs=None, [Var("max_flips")])))
// [Typer] resolve: App(Var("fannkuch"), targs=None, [Int(9)])
// [Typer] resolve: Int(9)
// [Typer] resolve: Var("fannkuch")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("check_sum")]), App(Var("print_int"), targs=None, [Var("max_flips")]))
// [Typer] resolve: App(Var("print_int"), targs=None, [Var("check_sum")])
// [Typer] resolve: Var("check_sum")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: App(Var("print_int"), targs=None, [Var("max_flips")])
// [Typer] resolve: Var("max_flips")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("fannkuch", (Int, Int)), args: [("n", Int)], body: LetRec({tyvars: [], name: ("gen_perm1", Array[Int]), args: [("len", Int)], body: Let(("arr", Var(None)), Array(Var("len"), Int(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Int(0)]), Var("arr"))))}, Let(("perm1", Var(None)), App(Var("gen_perm1"), targs=None, [Var("n")]), Let(("perm", Var(None)), Array(Var("n"), Int(0)), Let(("count", Var(None)), Array(Var("n"), Int(0)), Let(("flips", Var(None)), Array(Int(1), Int(0)), Let(("max_flips", Var(None)), Array(Int(1), Int(0)), Let(("check_sum", Var(None)), Array(Int(1), Int(0)), Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("max_flips", Var(None)), ("check_sum", Var(None))], App(Var("fannkuch"), targs=None, [Int(9)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("check_sum")]), App(Var("print_int"), targs=None, [Var("max_flips")])))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("gen_perm1", Array[Int]), args: [("len", Int)], body: Let(("arr", Var(None)), Array(Var("len"), Int(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Int(0)]), Var("arr"))))}, Let(("perm1", Var(None)), App(Var("gen_perm1"), targs=None, [Var("n")]), Let(("perm", Var(None)), Array(Var("n"), Int(0)), Let(("count", Var(None)), Array(Var("n"), Int(0)), Let(("flips", Var(None)), Array(Int(1), Int(0)), Let(("max_flips", Var(None)), Array(Int(1), Int(0)), Let(("check_sum", Var(None)), Array(Int(1), Int(0)), Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))))) against (Int, Int)
// [Typer] typevars: []
// [Typer] check: Let(("arr", Var(None)), Array(Var("len"), Int(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Int(0)]), Var("arr")))) against Array[Int]
// [Typer] infer: Array(Var("len"), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Var("len") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] check: LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Int(0)]), Var("arr"))) against Array[Int]
// [Typer] typevars: []
// [Typer] check: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit) against Unit
// [Typer] check: LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)) against Bool
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("len"), Int(1), Sub, kind=None)
// [Typer] infer: Var("len")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("i")), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])) against Unit
// [Typer] infer: Put(Var("arr"), Var("i"), Var("i"))
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]) against Unit
// [Typer] infer: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Int(0)]), Var("arr")) against Array[Int]
// [Typer] infer: App(Var("init_arr"), targs=None, [Int(0)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Let(("perm1", Var(None)), App(Var("gen_perm1"), targs=None, [Var("n")]), Let(("perm", Var(None)), Array(Var("n"), Int(0)), Let(("count", Var(None)), Array(Var("n"), Int(0)), Let(("flips", Var(None)), Array(Int(1), Int(0)), Let(("max_flips", Var(None)), Array(Int(1), Int(0)), Let(("check_sum", Var(None)), Array(Int(1), Int(0)), Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))))) against (Int, Int)
// [Typer] infer: App(Var("gen_perm1"), targs=None, [Var("n")])
// [Typer] inst: TypeScheme(([], (Int) -> Array[Int]))
// [Typer] inst result: (Int) -> Array[Int]
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] check: Let(("perm", Var(None)), Array(Var("n"), Int(0)), Let(("count", Var(None)), Array(Var("n"), Int(0)), Let(("flips", Var(None)), Array(Int(1), Int(0)), Let(("max_flips", Var(None)), Array(Int(1), Int(0)), Let(("check_sum", Var(None)), Array(Int(1), Int(0)), Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))))) against (Int, Int)
// [Typer] infer: Array(Var("n"), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] check: Let(("count", Var(None)), Array(Var("n"), Int(0)), Let(("flips", Var(None)), Array(Int(1), Int(0)), Let(("max_flips", Var(None)), Array(Int(1), Int(0)), Let(("check_sum", Var(None)), Array(Int(1), Int(0)), Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))))) against (Int, Int)
// [Typer] infer: Array(Var("n"), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] check: Let(("flips", Var(None)), Array(Int(1), Int(0)), Let(("max_flips", Var(None)), Array(Int(1), Int(0)), Let(("check_sum", Var(None)), Array(Int(1), Int(0)), Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))))) against (Int, Int)
// [Typer] infer: Array(Int(1), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] check: Let(("max_flips", Var(None)), Array(Int(1), Int(0)), Let(("check_sum", Var(None)), Array(Int(1), Int(0)), Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))))) against (Int, Int)
// [Typer] infer: Array(Int(1), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] check: Let(("check_sum", Var(None)), Array(Int(1), Int(0)), Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))))) against (Int, Int)
// [Typer] infer: Array(Int(1), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] check: Let(("nperm", Var(None)), Array(Int(1), Int(0)), Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))))) against (Int, Int)
// [Typer] infer: Array(Int(1), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] check: Let(("r", Var(None)), Array(Int(1), Var("n")), LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])))) against (Int, Int)
// [Typer] infer: Array(Int(1), Var("n"))
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] check: LetRec({tyvars: [], name: ("compute", Unit), args: [("r", Array[Int])], body: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit)}, Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]))) against (Int, Int)
// [Typer] typevars: []
// [Typer] check: If(LE(Int(1), Get(Var("r"), Int(0))), LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))), Unit) against Unit
// [Typer] check: LE(Int(1), Get(Var("r"), Int(0))) against Bool
// [Typer] infer: Int(1)
// [Typer] infer: Get(Var("r"), Int(0))
// [Typer] infer: Var("r")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("copy_perm", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))))) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])), Unit) against Unit
// [Typer] check: LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=None)) against Bool
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("n"), Int(1), Sub, kind=None)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i"))), App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])) against Unit
// [Typer] infer: Put(Var("perm"), Var("i"), Get(Var("perm1"), Var("i")))
// [Typer] infer: Get(Var("perm1"), Var("i"))
// [Typer] infer: Var("perm1")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("perm") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("copy_perm"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]) against Unit
// [Typer] infer: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var(None)), App(Var("copy_perm"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")]))))))))))))))) against Unit
// [Typer] infer: App(Var("copy_perm"), targs=None, [Int(0)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: LetRec({tyvars: [], name: ("init_count", Unit), args: [], body: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))))) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("_", Var(None)), If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit), Unit) against Unit
// [Typer] infer: If(Not(Eq(Get(Var("r"), Int(0)), Int(1))), Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))), Unit)
// [Typer] check: Not(Eq(Get(Var("r"), Int(0)), Int(1))) against Bool
// [Typer] check: Eq(Get(Var("r"), Int(0)), Int(1)) against Bool
// [Typer] infer: Get(Var("r"), Int(0))
// [Typer] infer: Var("r")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] infer: Let(("_", Var(None)), Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0))), Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, [])))
// [Typer] infer: Put(Var("count"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None), Get(Var("r"), Int(0)))
// [Typer] infer: Get(Var("r"), Int(0))
// [Typer] infer: Var("r")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] check: Var("count") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None) against Int
// [Typer] check: Get(Var("r"), Int(0)) against Int
// [Typer] check: Var("r") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), App(Var("init_count"), targs=None, []))
// [Typer] infer: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None))
// [Typer] infer: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)
// [Typer] infer: Get(Var("r"), Int(0))
// [Typer] infer: Var("r")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("r") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: App(Var("init_count"), targs=None, [])
// [Typer] inst: TypeScheme(([], () -> Unit))
// [Typer] inst result: () -> Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var(None)), App(Var("init_count"), targs=None, []), Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")]))))))))))))) against Unit
// [Typer] infer: App(Var("init_count"), targs=None, [])
// [Typer] inst: TypeScheme(([], () -> Unit))
// [Typer] inst result: () -> Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), Put(Var("flips"), Int(0), Int(0)), Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))))) against Unit
// [Typer] infer: Put(Var("flips"), Int(0), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Var("flips") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("k", Var(None)), Array(Int(1), Get(Var("perm"), Int(0))), LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")]))))))))))) against Unit
// [Typer] infer: Array(Int(1), Get(Var("perm"), Int(0)))
// [Typer] infer: Get(Var("perm"), Int(0))
// [Typer] infer: Var("perm")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] check: LetRec({tyvars: [], name: ("do_flip", Unit), args: [("k", Array[Int])], body: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit)}, Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))))) against Unit
// [Typer] typevars: []
// [Typer] check: If(Not(Eq(Get(Var("k"), Int(0)), Int(0))), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))), Unit) against Unit
// [Typer] check: Not(Eq(Get(Var("k"), Int(0)), Int(0))) against Bool
// [Typer] check: Eq(Get(Var("k"), Int(0)), Int(0)) against Bool
// [Typer] infer: Get(Var("k"), Int(0))
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))))) against Unit
// [Typer] infer: Array(Int(1), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] check: LetRec({tyvars: [], name: ("flip_loop", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit)}, Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")]))))) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))), Unit) against Unit
// [Typer] check: LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)) against Bool
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=None)
// [Typer] infer: Get(Var("k"), Int(0))
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] infer: Int(2)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm"), Var("i"))), Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))) against Unit
// [Typer] infer: Put(Var("t"), Int(0), Get(Var("perm"), Var("i")))
// [Typer] infer: Get(Var("perm"), Var("i"))
// [Typer] infer: Var("perm")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("t") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))), Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))) against Unit
// [Typer] infer: Put(Var("perm"), Var("i"), Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None)))
// [Typer] infer: Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None))
// [Typer] infer: Var("perm")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None) against Int
// [Typer] check: Get(Var("k"), Int(0)) against Int
// [Typer] check: Var("k") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("perm") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0))), App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])) against Unit
// [Typer] infer: Put(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None), Get(Var("t"), Int(0)))
// [Typer] infer: Get(Var("t"), Int(0))
// [Typer] infer: Var("t")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] check: Var("perm") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=None) against Int
// [Typer] check: Get(Var("k"), Int(0)) against Int
// [Typer] check: Var("k") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("flip_loop"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]) against Unit
// [Typer] infer: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var(None)), App(Var("flip_loop"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])))) against Unit
// [Typer] infer: App(Var("flip_loop"), targs=None, [Int(0)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), Put(Var("k"), Int(0), Get(Var("perm"), Int(0))), Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")]))) against Unit
// [Typer] infer: Put(Var("k"), Int(0), Get(Var("perm"), Int(0)))
// [Typer] infer: Get(Var("perm"), Int(0))
// [Typer] infer: Var("perm")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] check: Var("k") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)), App(Var("do_flip"), targs=None, [Var("k")])) against Unit
// [Typer] infer: Put(Var("flips"), Int(0), Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None))
// [Typer] infer: Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=None)
// [Typer] infer: Get(Var("flips"), Int(0))
// [Typer] infer: Var("flips")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("flips") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("do_flip"), targs=None, [Var("k")]) against Unit
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] inst: TypeScheme(([], (Array[Int]) -> Unit))
// [Typer] inst result: (Array[Int]) -> Unit
// [Typer] unify: (Array[Int]) -> Unit and (Array[Int]) -> Unit
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var(None)), App(Var("do_flip"), targs=None, [Var("k")]), Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")]))))))))) against Unit
// [Typer] infer: App(Var("do_flip"), targs=None, [Var("k")])
// [Typer] inst: TypeScheme(([], (Array[Int]) -> Unit))
// [Typer] inst result: (Array[Int]) -> Unit
// [Typer] check: Var("k") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit), Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))))) against Unit
// [Typer] infer: If(LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))), Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0))), Unit)
// [Typer] check: LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0))) against Bool
// [Typer] infer: Get(Var("max_flips"), Int(0))
// [Typer] infer: Var("max_flips")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] infer: Get(Var("flips"), Int(0))
// [Typer] infer: Var("flips")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] unify: Int and Int
// [Typer] infer: Put(Var("max_flips"), Int(0), Get(Var("flips"), Int(0)))
// [Typer] infer: Get(Var("flips"), Int(0))
// [Typer] infer: Var("flips")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] check: Var("max_flips") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] infer: Unit
// [Typer] unify: Unit and Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)), Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")]))))))) against Unit
// [Typer] infer: Put(Var("check_sum"), Int(0), Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None))
// [Typer] infer: Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None), Add, kind=None)
// [Typer] infer: Get(Var("check_sum"), Int(0))
// [Typer] infer: Var("check_sum")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] infer: Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Mul, kind=None)
// [Typer] infer: Get(Var("flips"), Int(0))
// [Typer] infer: Var("flips")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] infer: Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None), Sub, kind=None)
// [Typer] infer: Int(1)
// [Typer] infer: Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None), Int(2), Mul, kind=None)
// [Typer] infer: Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None), Sub, kind=None)
// [Typer] infer: Get(Var("nperm"), Int(0))
// [Typer] infer: Var("nperm")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] infer: Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None), Int(2), Mul, kind=None)
// [Typer] infer: Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=None)
// [Typer] infer: Get(Var("nperm"), Int(0))
// [Typer] infer: Var("nperm")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] infer: Int(2)
// [Typer] unify: Int and Int
// [Typer] infer: Int(2)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] infer: Int(2)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Var("check_sum") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("go", Var(None)), Array(Int(1), Bool(true)), Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))))) against Unit
// [Typer] infer: Array(Int(1), Bool(true))
// [Typer] infer: Bool(true)
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Array[Bool]
// [Typer] union: Var(None) and Array[Bool]
// [Typer] check: Let(("t", Var(None)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")]))))) against Unit
// [Typer] infer: Array(Int(1), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] check: LetRec({tyvars: [], name: ("go_loop", Unit), args: [], body: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit)}, Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])))) against Unit
// [Typer] typevars: []
// [Typer] check: If(Get(Var("go"), Int(0)), Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])), Unit) against Unit
// [Typer] check: Get(Var("go"), Int(0)) against Bool
// [Typer] check: Var("go") against Array[Bool]
// [Typer] inst: TypeScheme(([], Array[Bool]))
// [Typer] inst result: Array[Bool]
// [Typer] unify: Array[Bool] and Array[Bool]
// [Typer] unify: Bool and Bool
// [Typer] check: Int(0) against Int
// [Typer] check: Let(("_", Var(None)), If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))), App(Var("go_loop"), targs=None, [])) against Unit
// [Typer] infer: If(Eq(Get(Var("r"), Int(0)), Var("n")), Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)), Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit)))))))
// [Typer] check: Eq(Get(Var("r"), Int(0)), Var("n")) against Bool
// [Typer] infer: Get(Var("r"), Int(0))
// [Typer] infer: Var("r")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Let(("_", Var(None)), Put(Var("go"), Int(0), Bool(false)), Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit))
// [Typer] infer: Put(Var("go"), Int(0), Bool(false))
// [Typer] infer: Bool(false)
// [Typer] check: Var("go") against Array[Bool]
// [Typer] inst: TypeScheme(([], Array[Bool]))
// [Typer] inst result: Array[Bool]
// [Typer] unify: Array[Bool] and Array[Bool]
// [Typer] unify: Bool and Bool
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("r"), Int(0), Int(0)), Unit)
// [Typer] infer: Put(Var("r"), Int(0), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Var("r") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("t"), Int(0), Get(Var("perm1"), Int(0))), LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))))
// [Typer] infer: Put(Var("t"), Int(0), Get(Var("perm1"), Int(0)))
// [Typer] infer: Get(Var("perm1"), Int(0))
// [Typer] infer: Var("perm1")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] check: Var("t") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: LetRec({tyvars: [], name: ("move_perm1_forward", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)}, Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit)))))
// [Typer] typevars: []
// [Typer] check: If(LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)), Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit) against Unit
// [Typer] check: LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)) against Bool
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=None)
// [Typer] infer: Get(Var("r"), Int(0))
// [Typer] infer: Var("r")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var(None)), Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))), Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)) against Unit
// [Typer] infer: Put(Var("perm1"), Var("i"), Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None)))
// [Typer] infer: Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=None))
// [Typer] infer: Var("perm1")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Prim(Var("i"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("perm1") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit) against Unit
// [Typer] infer: App(Var("move_perm1_forward"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Prim(Var("i"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Unit against Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("move_perm1_forward"), targs=None, [Int(0)]), Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))))
// [Typer] infer: App(Var("move_perm1_forward"), targs=None, [Int(0)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0))), Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit)))
// [Typer] infer: Put(Var("perm1"), Get(Var("r"), Int(0)), Get(Var("t"), Int(0)))
// [Typer] infer: Get(Var("t"), Int(0))
// [Typer] infer: Var("t")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] check: Var("perm1") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Get(Var("r"), Int(0)) against Int
// [Typer] check: Var("r") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)), Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit))
// [Typer] infer: Put(Var("count"), Get(Var("r"), Int(0)), Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None))
// [Typer] infer: Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=None)
// [Typer] infer: Get(Var("count"), Get(Var("r"), Int(0)))
// [Typer] infer: Var("count")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Get(Var("r"), Int(0)) against Int
// [Typer] check: Var("r") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("count") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Get(Var("r"), Int(0)) against Int
// [Typer] check: Var("r") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))), Unit)
// [Typer] infer: If(LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))), Put(Var("go"), Int(0), Bool(false)), Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None)))
// [Typer] check: LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0)))) against Bool
// [Typer] infer: Int(1)
// [Typer] infer: Get(Var("count"), Get(Var("r"), Int(0)))
// [Typer] infer: Var("count")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Get(Var("r"), Int(0)) against Int
// [Typer] check: Var("r") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Int and Int
// [Typer] infer: Put(Var("go"), Int(0), Bool(false))
// [Typer] infer: Bool(false)
// [Typer] check: Var("go") against Array[Bool]
// [Typer] inst: TypeScheme(([], Array[Bool]))
// [Typer] inst result: Array[Bool]
// [Typer] unify: Array[Bool] and Array[Bool]
// [Typer] unify: Bool and Bool
// [Typer] check: Int(0) against Int
// [Typer] infer: Put(Var("r"), Int(0), Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None))
// [Typer] infer: Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=None)
// [Typer] infer: Get(Var("r"), Int(0))
// [Typer] infer: Var("r")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("r") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Unit and Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("go_loop"), targs=None, []) against Unit
// [Typer] inst: TypeScheme(([], () -> Unit))
// [Typer] inst result: () -> Unit
// [Typer] unify: () -> Unit and () -> Unit
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var(None)), App(Var("go_loop"), targs=None, []), Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")]))) against Unit
// [Typer] infer: App(Var("go_loop"), targs=None, [])
// [Typer] inst: TypeScheme(([], () -> Unit))
// [Typer] inst result: () -> Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)), App(Var("compute"), targs=None, [Var("r")])) against Unit
// [Typer] infer: Put(Var("nperm"), Int(0), Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None))
// [Typer] infer: Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=None)
// [Typer] infer: Get(Var("nperm"), Int(0))
// [Typer] infer: Var("nperm")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("nperm") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("compute"), targs=None, [Var("r")]) against Unit
// [Typer] infer: Var("r")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] inst: TypeScheme(([], (Array[Int]) -> Unit))
// [Typer] inst result: (Array[Int]) -> Unit
// [Typer] unify: (Array[Int]) -> Unit and (Array[Int]) -> Unit
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var(None)), App(Var("compute"), targs=None, [Var("r")]), Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))])) against (Int, Int)
// [Typer] infer: App(Var("compute"), targs=None, [Var("r")])
// [Typer] inst: TypeScheme(([], (Array[Int]) -> Unit))
// [Typer] inst result: (Array[Int]) -> Unit
// [Typer] check: Var("r") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0))]) against (Int, Int)
// [Typer] check: Get(Var("max_flips"), Int(0)) against Int
// [Typer] check: Var("max_flips") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] check: Get(Var("check_sum"), Int(0)) against Int
// [Typer] check: Var("check_sum") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("max_flips", Var(None)), ("check_sum", Var(None))], App(Var("fannkuch"), targs=None, [Int(9)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("check_sum")]), App(Var("print_int"), targs=None, [Var("max_flips")])))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: LetTuple([("max_flips", Var(None)), ("check_sum", Var(None))], App(Var("fannkuch"), targs=None, [Int(9)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("check_sum")]), App(Var("print_int"), targs=None, [Var("max_flips")])))
// [Typer] infer: App(Var("fannkuch"), targs=None, [Int(9)])
// [Typer] inst: TypeScheme(([], (Int) -> (Int, Int)))
// [Typer] inst result: (Int) -> (Int, Int)
// [Typer] check: Int(9) against Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("check_sum")]), App(Var("print_int"), targs=None, [Var("max_flips")]))
// [Typer] infer: App(Var("print_int"), targs=None, [Var("check_sum")])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("check_sum") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: App(Var("print_int"), targs=None, [Var("max_flips")])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("max_flips") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {fannkuch.1: Once, gen_perm1.4: Once, init_arr.9: Many(2), compute.40: Many(2), copy_perm.46: Many(2), init_count.59: Many(2), do_flip.90: Many(2), flip_loop.99: Many(2), go_loop.179: Many(2), move_perm1_forward.197: Many(2), main.262: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(gen_perm1)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 43
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 43
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 83
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 83
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 119
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 119
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 375
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 375
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(fannkuch)
// [KnfOpt] freq: {main.262: Once, init_arr.298: Many(2), compute.325: Many(2), copy_perm.330: Many(2), init_count.340: Many(2), do_flip.366: Many(2), flip_loop.374: Many(2), go_loop.444: Many(2), move_perm1_forward.461: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 43
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 43
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 83
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 83
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 119
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 119
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 375
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 375
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {main.262: Once, init_arr.298: Many(2), compute.325: Many(2), copy_perm.330: Many(2), init_count.340: Many(2), do_flip.366: Many(2), flip_loop.374: Many(2), go_loop.444: Many(2), move_perm1_forward.461: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 43
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 43
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 83
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 83
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 119
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 119
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 375
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 375
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 9 9 0
// [KnfOpt] Tuple freq: {i.299: MayEscape, _304: MayEscape, arr.297: MayEscape, _334: MayEscape, _337: MayEscape, perm.308: MayEscape, _350: MayEscape, _356: MayEscape, r.326: MayEscape, count.310: MayEscape, _381: MayEscape, _386: MayEscape, _392: MayEscape, _395: MayEscape, k.367: MayEscape, t.373: MayEscape, _371: MayEscape, _372: MayEscape, _396: MayEscape, _400: MayEscape, _406: MayEscape, flips.313: MayEscape, _469: MayEscape, _472: MayEscape, _452: MayEscape, _455: MayEscape, _459: MayEscape, _474: MayEscape, _479: MayEscape, _487: MayEscape, _495: MayEscape, _500: MayEscape, _263: MayEscape, t.443: MayEscape, go.440: MayEscape, _338: MayEscape, _360: MayEscape, _362: MayEscape, _364: MayEscape, k.365: MayEscape, _416: MayEscape, _436: MayEscape, _438: MayEscape, _439: MayEscape, _441: MayEscape, _442: MayEscape, _506: MayEscape, nperm.322: MayEscape, check_sum.319: MayEscape, max_flips.316: MayEscape, _296: MayEscape, _305: MayEscape, _307: MayEscape, _309: MayEscape, _311: MayEscape, _312: MayEscape, _314: MayEscape, _315: MayEscape, _317: MayEscape, _318: MayEscape, _320: MayEscape, _321: MayEscape, _323: MayEscape, r.324: MayEscape, _510: MayEscape, _512: MayEscape, _264: Destructed, check_sum.268: MayEscape, max_flips.266: MayEscape}
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %24: Call(ty=Unit, f=f6, args=[FnParam(fref=f6, fpref=$f.0), FnParam(fref=f6, fpref=$f.1), FnParam(fref=f6, fpref=$f.2), FnParam(fref=f6, fpref=$f.3), FnParam(fref=f6, fpref=$f.4), FnParam(fref=f6, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f4, args=[FnParam(fref=f4, fpref=$f.0), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %3: Call(ty=Unit, f=f0, args=[Insn(iref=%2), FnParam(fref=f0, fpref=$f.1)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f1, args=[Insn(iref=%3), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %14: Call(ty=Unit, f=f3, args=[Insn(iref=%13), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %31: Call(ty=Unit, f=f7, args=[FnParam(fref=f7, fpref=$f.0), FnParam(fref=f7, fpref=$f.1), FnParam(fref=f7, fpref=$f.2), FnParam(fref=f7, fpref=$f.3), FnParam(fref=f7, fpref=$f.4), FnParam(fref=f7, fpref=$f.5), FnParam(fref=f7, fpref=$f.6), FnParam(fref=f7, fpref=$f.7), FnParam(fref=f7, fpref=$f.8)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f4: Once, f8: Once, f0: Once, f1: Once, f5: Multiple, f2: Multiple, f18: Once, f3: Once, f7: Once})
// [CoreOpt] allow_inline: false %8 move_perm1_forward.521 true false true false true
// [CoreOpt] allow_inline: true %3 flip_loop.519 true true true false true
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] allow_inline: false %3 flip_loop.519 true true false false true
// [CoreOpt] allow_inline: false %1 init_arr.514 false true true false true
// [CoreOpt] allow_inline: false %9 compute.515 false true true false true
// [CoreOpt] allow_inline: false %7 move_perm1_forward.521 true false true false true
// [CoreOpt] allow_inline: false %9 init_count.517 true false true false true
// [CoreOpt] allow_inline: false %0 main.513 false true true false true
// [CoreOpt] allow_inline: true %2 copy_perm.516 true true true false true
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] allow_inline: false %3 init_count.517 true false true false true
// [CoreOpt] allow_inline: true %7 do_flip.518 true true true false true
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%7) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] allow_inline: false %3 init_count.517 true false true false true
// [CoreOpt] allow_inline: false %7 do_flip.518 true true false false true
// [CoreOpt] allow_inline: false %2 copy_perm.516 true true false false true
// [CoreOpt] allow_inline: true %27 go_loop.520 true true true false true
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%27) -> BlockParam(bref=b11, bpref=$b.0)
// [CoreOpt] allow_inline: false %3 init_count.517 true false true false true
// [CoreOpt] allow_inline: false %7 do_flip.518 true true false false true
// [CoreOpt] allow_inline: false %2 copy_perm.516 true true false false true
// [CoreOpt] allow_inline: false %27 go_loop.520 true true false false true
// [CoreOpt] allow_inline: false %8 move_perm1_forward.521 true false true false true
// [CoreOpt] allow_inline: true %3 flip_loop.519 true true true false true
// [CoreOpt] do_flip.518 is inlining Call(ty=Unit, f=f3, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0), Mem(fref=f4, mref=m0), BlockParam(bref=b0, bpref=$b.1)])
// [CoreOpt] shifted callee .fn flip_loop.519 #f3 : fn(int32, array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b14 {
// [CoreOpt]   .bb #b9 (int32, array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %9: int32 = load int32 field($b9.1, 0 * @32)
// [CoreOpt]     let %10: int32 = div(%9, 2)
// [CoreOpt]     let %11: bool = le($b9.0, %10)
// [CoreOpt]     br %11 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     let %12: int32 = load int32 offset($b9.3, $b9.0 * @32)
// [CoreOpt]     let _ = store int32 field($b9.2, 0 * @32) <- %12
// [CoreOpt]     let %14: int32 = load int32 field($b9.1, 0 * @32)
// [CoreOpt]     let %15: int32 = sub(%14, $b9.0)
// [CoreOpt]     let %16: int32 = load int32 offset($b9.3, %15 * @32)
// [CoreOpt]     let _ = store int32 offset($b9.3, $b9.0 * @32) <- %16
// [CoreOpt]     let %18: int32 = load int32 field($b9.1, 0 * @32)
// [CoreOpt]     let %19: int32 = sub(%18, $b9.0)
// [CoreOpt]     let %20: int32 = load int32 field($b9.2, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($b9.3, %19 * @32) <- %20
// [CoreOpt]     let %22: int32 = add($b9.0, 1)
// [CoreOpt]     jump b9(%22, $b9.1, $b9.2, $b9.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     jump b12(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 (unit) {
// [CoreOpt]     return $b12.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b13 pre #Some(b14) header #b9 {
// [CoreOpt]     .block #b10
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b12
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     jump b13($f0, $f1, $f2, $f3)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: false %1 init_arr.514 false true true false true
// [CoreOpt] allow_inline: false %9 compute.515 false true true false true
// [CoreOpt] allow_inline: false %7 move_perm1_forward.521 true false true false true
// [CoreOpt] allow_inline: false %9 init_count.517 true false true false true
// [CoreOpt] allow_inline: false %0 main.513 false true true false true
// [CoreOpt] allow_inline: false %3 init_count.517 true false true false true
// [CoreOpt] allow_inline: true %7 do_flip.518 true true true false true
// [CoreOpt] compute.515 is inlining Call(ty=Unit, f=f4, args=[Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.5)])
// [CoreOpt] shifted callee .fn do_flip.518 #f4 : fn(array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b36 {
// [CoreOpt]   .bb #b31 (array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %31: int32 = load int32 field($b31.0, 0 * @32)
// [CoreOpt]     let %32: bool = eq(%31, 0)
// [CoreOpt]     br %32 b32() b33()
// [CoreOpt]   }
// [CoreOpt]   .bb #b32 () {
// [CoreOpt]     jump b34(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b33 () {
// [CoreOpt]     let _ = alloc <m31: array[int32] heap(1)> <- [..] = 0
// [CoreOpt]     jump b45()
// [CoreOpt]   }
// [CoreOpt]   .bb #b34 (unit) {
// [CoreOpt]     return $b34.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b35 pre #Some(b36) header #b31 {
// [CoreOpt]     .block #b32
// [CoreOpt]     .block #b33
// [CoreOpt]     .block #b34
// [CoreOpt]   }
// [CoreOpt]   .bb #b36 () {
// [CoreOpt]     jump b35($f0, $f1, $f2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b37 (unit) {
// [CoreOpt]     let %35: int32 = load int32 field($b31.1, 0 * @32)
// [CoreOpt]     let _ = store int32 field($b31.0, 0 * @32) <- %35
// [CoreOpt]     let %37: int32 = load int32 field($b31.2, 0 * @32)
// [CoreOpt]     let %38: int32 = add(%37, 1)
// [CoreOpt]     let _ = store int32 field($b31.2, 0 * @32) <- %38
// [CoreOpt]     jump b31($b31.0, $b31.1, $b31.2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b40 (int32, array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %40: int32 = load int32 field($b40.1, 0 * @32)
// [CoreOpt]     let %41: int32 = div(%40, 2)
// [CoreOpt]     let %42: bool = le($b40.0, %41)
// [CoreOpt]     br %42 b41() b42()
// [CoreOpt]   }
// [CoreOpt]   .bb #b41 () {
// [CoreOpt]     let %43: int32 = load int32 offset($b40.3, $b40.0 * @32)
// [CoreOpt]     let _ = store int32 field($b40.2, 0 * @32) <- %43
// [CoreOpt]     let %45: int32 = load int32 field($b40.1, 0 * @32)
// [CoreOpt]     let %46: int32 = sub(%45, $b40.0)
// [CoreOpt]     let %47: int32 = load int32 offset($b40.3, %46 * @32)
// [CoreOpt]     let _ = store int32 offset($b40.3, $b40.0 * @32) <- %47
// [CoreOpt]     let %49: int32 = load int32 field($b40.1, 0 * @32)
// [CoreOpt]     let %50: int32 = sub(%49, $b40.0)
// [CoreOpt]     let %51: int32 = load int32 field($b40.2, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($b40.3, %50 * @32) <- %51
// [CoreOpt]     let %53: int32 = add($b40.0, 1)
// [CoreOpt]     jump b40(%53, $b40.1, $b40.2, $b40.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b42 () {
// [CoreOpt]     jump b43(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b43 (unit) {
// [CoreOpt]     jump b37($b43.0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b44 pre #Some(b45) header #b40 {
// [CoreOpt]     .block #b41
// [CoreOpt]     .block #b42
// [CoreOpt]     .block #b43
// [CoreOpt]   }
// [CoreOpt]   .bb #b45 () {
// [CoreOpt]     jump b44(0, $b31.0, f4.m31, $b31.1)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: false %3 init_count.517 true false true false true
// [CoreOpt] allow_inline: true %2 copy_perm.516 true true true false true
// [CoreOpt] compute.515 is inlining Call(ty=Unit, f=f1, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3)])
// [CoreOpt] shifted callee .fn copy_perm.516 #f1 : fn(int32, array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b59 {
// [CoreOpt]   .bb #b54 (int32, array[int32], array[int32]) {
// [CoreOpt]     let %54: bool = le($b54.0, 8)
// [CoreOpt]     br %54 b55() b56()
// [CoreOpt]   }
// [CoreOpt]   .bb #b55 () {
// [CoreOpt]     let %55: int32 = load int32 offset($b54.1, $b54.0 * @32)
// [CoreOpt]     let _ = store int32 offset($b54.2, $b54.0 * @32) <- %55
// [CoreOpt]     let %57: int32 = add($b54.0, 1)
// [CoreOpt]     jump b54(%57, $b54.1, $b54.2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b56 () {
// [CoreOpt]     jump b57(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b57 (unit) {
// [CoreOpt]     return $b57.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b58 pre #Some(b59) header #b54 {
// [CoreOpt]     .block #b55
// [CoreOpt]     .block #b56
// [CoreOpt]     .block #b57
// [CoreOpt]   }
// [CoreOpt]   .bb #b59 () {
// [CoreOpt]     jump b58($f0, $f1, $f2)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: false %3 init_count.517 true false true false true
// [CoreOpt] allow_inline: true %27 go_loop.520 true true true false true
// [CoreOpt] compute.515 is inlining Call(ty=Unit, f=f6, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.0), Mem(fref=f7, mref=m2), Mem(fref=f7, mref=m1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.4)])
// [CoreOpt] shifted callee .fn go_loop.520 #f6 : fn(int32, array[int32], array[int32], array[bool], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b71 {
// [CoreOpt]   .bb #b60 (int32, array[int32], array[int32], array[bool], array[int32], array[int32]) {
// [CoreOpt]     let %58: bool = load bool field($b60.3, 0 * @32)
// [CoreOpt]     let %59: bool = eq(%58, true)
// [CoreOpt]     br %59 b61() b62()
// [CoreOpt]   }
// [CoreOpt]   .bb #b61 () {
// [CoreOpt]     let %60: int32 = load int32 field($b60.1, 0 * @32)
// [CoreOpt]     let %61: bool = eq(%60, $b60.0)
// [CoreOpt]     br %61 b63() b64()
// [CoreOpt]   }
// [CoreOpt]   .bb #b62 () {
// [CoreOpt]     jump b69(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b63 () {
// [CoreOpt]     let _ = store bool field($b60.3, 0 * @32) <- false
// [CoreOpt]     let _ = store int32 field($b60.1, 0 * @32) <- 0
// [CoreOpt]     jump b68(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b64 () {
// [CoreOpt]     let %64: int32 = load int32 field($b60.4, 0 * @32)
// [CoreOpt]     let _ = store int32 field($b60.2, 0 * @32) <- %64
// [CoreOpt]     let %66: unit = call f5(0, $b60.1, $b60.4)
// [CoreOpt]     let %67: int32 = load int32 field($b60.1, 0 * @32)
// [CoreOpt]     let %68: int32 = load int32 field($b60.2, 0 * @32)
// [CoreOpt]     let _ = store int32 offset($b60.4, %67 * @32) <- %68
// [CoreOpt]     let %70: int32 = load int32 field($b60.1, 0 * @32)
// [CoreOpt]     let %71: int32 = load int32 field($b60.1, 0 * @32)
// [CoreOpt]     let %72: int32 = load int32 offset($b60.5, %71 * @32)
// [CoreOpt]     let %73: int32 = sub(%72, 1)
// [CoreOpt]     let _ = store int32 offset($b60.5, %70 * @32) <- %73
// [CoreOpt]     let %75: int32 = load int32 field($b60.1, 0 * @32)
// [CoreOpt]     let %76: int32 = load int32 offset($b60.5, %75 * @32)
// [CoreOpt]     let %77: bool = le(1, %76)
// [CoreOpt]     br %77 b65() b66()
// [CoreOpt]   }
// [CoreOpt]   .bb #b65 () {
// [CoreOpt]     let _ = store bool field($b60.3, 0 * @32) <- false
// [CoreOpt]     jump b67(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b66 () {
// [CoreOpt]     let %79: int32 = load int32 field($b60.1, 0 * @32)
// [CoreOpt]     let %80: int32 = add(%79, 1)
// [CoreOpt]     let _ = store int32 field($b60.1, 0 * @32) <- %80
// [CoreOpt]     jump b67(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b67 (unit) {
// [CoreOpt]     jump b68(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b68 (unit) {
// [CoreOpt]     jump b60($b60.0, $b60.1, $b60.2, $b60.3, $b60.4, $b60.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b69 (unit) {
// [CoreOpt]     return $b69.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b70 pre #Some(b71) header #b60 {
// [CoreOpt]     .block #b66
// [CoreOpt]     .block #b64
// [CoreOpt]     .block #b68
// [CoreOpt]     .block #b69
// [CoreOpt]     .block #b61
// [CoreOpt]     .block #b65
// [CoreOpt]     .block #b62
// [CoreOpt]     .block #b63
// [CoreOpt]     .block #b67
// [CoreOpt]   }
// [CoreOpt]   .bb #b71 () {
// [CoreOpt]     jump b70($f0, $f1, $f2, $f3, $f4, $f5)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: false %3 init_count.517 true false true false true
// [CoreOpt] allow_inline: false %66 move_perm1_forward.521 true false true false true
// [CoreOpt] Remove dead function: f6
// [CoreOpt] Remove dead function: f4
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f3
// [CoreOpt] allow_inline: false %1 init_arr.514 false true true false true
// [CoreOpt] allow_inline: false %9 compute.515 false true true false true
// [CoreOpt] allow_inline: false %7 move_perm1_forward.521 true false true false true
// [CoreOpt] allow_inline: false %9 init_count.517 true false true false true
// [CoreOpt] allow_inline: false %0 main.513 false true true false true
// [CoreOpt] allow_inline: false %3 init_count.517 true false true false true
// [CoreOpt] allow_inline: false %66 move_perm1_forward.521 true false true false true
// [CoreOpt] allow_inline: false %1 init_arr.514 false true true false true
// [CoreOpt] allow_inline: false %9 compute.515 false true true false true
// [CoreOpt] allow_inline: false %7 move_perm1_forward.521 true false true false true
// [CoreOpt] allow_inline: false %9 init_count.517 true false true false true
// [CoreOpt] allow_inline: false %0 main.513 false true true false true
// [CoreOpt] allow_inline: false %3 init_count.517 true false true false true
// [CoreOpt] allow_inline: false %66 move_perm1_forward.521 true false true false true
// [CoreOpt] allow_inline: false %1 init_arr.514 false true true false true
// [CoreOpt] allow_inline: false %9 compute.515 false true true false true
// [CoreOpt] allow_inline: false %7 move_perm1_forward.521 true false true false true
// [CoreOpt] allow_inline: false %9 init_count.517 true false true false true
// [CoreOpt] allow_inline: false %0 main.513 false true true false true
// [CoreOpt] allow_inline: false %3 init_count.517 true false true false true
// [CoreOpt] allow_inline: false %66 move_perm1_forward.521 true false true false true
// [CoreOpt] allow_inline: false %1 init_arr.514 false true true false true
// [CoreOpt] allow_inline: false %9 compute.515 false true true false true
// [CoreOpt] allow_inline: false %7 move_perm1_forward.521 true false true false true
// [CoreOpt] allow_inline: false %9 init_count.517 true false true false true
// [CoreOpt] allow_inline: false %0 main.513 false true true false true
// [CoreOpt] allow_inline: false %3 init_count.517 true false true false true
// [CoreOpt] allow_inline: false %66 move_perm1_forward.521 true false true false true
// [CoreOpt] LVN subst Insn(iref=%6) with Insn(iref=%3)
// [CoreOpt] LVN subst Insn(iref=%4) with Insn(iref=%2)
// [CoreOpt] LVN subst Insn(iref=%71) with Insn(iref=%70)
// [CoreOpt] LVN subst Insn(iref=%16) with Insn(iref=%15)
// [CoreOpt2] LVN subst Insn(iref=%88) with Insn(iref=%91)
// [CoreOpt2] LVN subst Insn(iref=%98) with Insn(iref=%100)
// [CoreOpt2] LVN subst Insn(iref=%103) with Insn(iref=%104)
