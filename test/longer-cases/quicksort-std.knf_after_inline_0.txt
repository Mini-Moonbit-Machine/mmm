let rec swap.1: Unit = (arr.2: Array(Int), i.3: Int, j.4: Int) {
  let tmp.5: Int = Get arr.2[i.3]
  let _6: Int = Get arr.2[j.4]
  let _7: Unit = Put arr.2[i.3] = _6
  let _8: Unit = Put arr.2[j.4] = tmp.5
  Unit
}
let rec output.9: Unit = (arr.10: Array(Int), i.11: Int, len.12: Int) {
  let _13: Int = Int(1)
  let _14: Int = Sub(len.12, _13)
  if (i.11 <= _14) then {
    let _15: Int = Get arr.10[i.11]
    let _16: Unit = ExtApply(minimbt_print_int, [_15, ])
    let _17: Unit = ExtApply(minimbt_print_endline, [])
    let _18: Int = Int(1)
    let _19: Int = Add(i.11, _18)
    Apply(output.9, [arr.10, _19, len.12, ])
  } else {
    Unit
  }
}
let rec insertion_sort.20: Unit = (arr.21: Array(Int), low.22: Int, high.23: Int) {
  let rec g.24: Unit = (j.25: Int) {
    let _26: Int = Int(1)
    let _27: Int = Add(_26, low.22)
    if (_27 <= j.25) then {
      let _28: Int = Get arr.21[j.25]
      let _29: Int = Int(1)
      let _30: Int = Sub(j.25, _29)
      let _31: Int = Get arr.21[_30]
      let _32: Int = Int(1)
      let _33: Int = Sub(_31, _32)
      if (_28 <= _33) then {
        let _34: Int = Int(1)
        let _35: Int = Sub(j.25, _34)
        let _36: Unit = Apply(swap.1, [arr.21, j.25, _35, ])
        let _37: Int = Int(1)
        let _38: Int = Sub(j.25, _37)
        Apply(g.24, [_38, ])
      } else {
        Unit
      }
    } else {
      Unit
    }
  }
  let rec f.39: Unit = (i.40: Int) {
    let _41: Int = Int(1)
    let _42: Int = Sub(high.23, _41)
    if (i.40 <= _42) then {
      let _43: Unit = Apply(g.24, [i.40, ])
      let _44: Int = Int(1)
      let _45: Int = Add(i.40, _44)
      Apply(f.39, [_45, ])
    } else {
      Unit
    }
  }
  let _46: Int = Int(1)
  let _47: Int = Add(low.22, _46)
  Apply(f.39, [_47, ])
}
let rec partition.48: Tuple([Int, Bool]) = (arr.49: Array(Int), pivot_index.50: Int, low.51: Int, high.52: Int) {
  let _53: Int = Int(1)
  let _54: Int = Sub(high.52, _53)
  let _55: Unit = Apply(swap.1, [arr.49, pivot_index.50, _54, ])
  let _56: Int = Int(1)
  let _57: Int = Sub(high.52, _56)
  let pivot.58: Int = Get arr.49[_57]
  let _59: Int = Int(1)
  let i.60: Array(Int) = ExtApply(minimbt_create_array, [_59, low.51, ])
  let _61: Int = Int(1)
  let _62: Int = Int(1)
  let partitioned.63: Array(Int) = ExtApply(minimbt_create_array, [_61, _62, ])
  let rec aux.64: Var({val: Some(Unit)}) = (j.65: Int) {
    let _66: Int = Int(2)
    let _67: Int = Sub(high.52, _66)
    if (j.65 <= _67) then {
      let _68: Int = Get arr.49[j.65]
      let _69: Int = Int(1)
      let _70: Int = Sub(pivot.58, _69)
      if (_68 <= _70) then {
        let _71: Int = Int(0)
        let _72: Int = Get i.60[_71]
        if (_72 == j.65) then {
          let _78: Unit = Unit
          let _79: Int = Int(0)
          let _80: Int = Int(0)
          let _81: Int = Get i.60[_80]
          let _82: Int = Int(1)
          let _83: Int = Add(_81, _82)
          let _84: Unit = Put i.60[_79] = _83
          let _85: Unit = Unit
          let _86: Int = Int(1)
          let _87: Int = Add(j.65, _86)
          Apply(aux.64, [_87, ])
        } else {
          let _73: Int = Int(0)
          let _74: Int = Get i.60[_73]
          let _75: Unit = Apply(swap.1, [arr.49, _74, j.65, ])
          let _76: Int = Int(0)
          let _77: Int = Int(0)
          let _78: Unit = Put partitioned.63[_76] = _77
          let _79: Int = Int(0)
          let _80: Int = Int(0)
          let _81: Int = Get i.60[_80]
          let _82: Int = Int(1)
          let _83: Int = Add(_81, _82)
          let _84: Unit = Put i.60[_79] = _83
          let _85: Unit = Unit
          let _86: Int = Int(1)
          let _87: Int = Add(j.65, _86)
          Apply(aux.64, [_87, ])
        }
      } else {
        let _85: Unit = Unit
        let _86: Int = Int(1)
        let _87: Int = Add(j.65, _86)
        Apply(aux.64, [_87, ])
      }
    } else {
      Unit
    }
  }
  let _88: Var({val: Some(Unit)}) = Apply(aux.64, [low.51, ])
  let _89: Int = Int(0)
  let _90: Int = Get i.60[_89]
  let _91: Int = Int(1)
  let _92: Int = Sub(high.52, _91)
  let _93: Unit = Apply(swap.1, [arr.49, _90, _92, ])
  let _94: Int = Int(0)
  let _95: Int = Get i.60[_94]
  let _96: Int = Int(0)
  let _97: Int = Get partitioned.63[_96]
  let _98: Int = Int(1)
  if (_97 == _98) then {
    let _99: Int = Bool(true)
    Tuple([_95, _99, ])
  } else {
    let _99: Int = Bool(false)
    Tuple([_95, _99, ])
  }
}
let rec choose_pivot.100: Tuple([Int, Bool]) = (arr.101: Array(Int), low.102: Int, high.103: Int) {
  let use_median_of_medians.104: Int = Int(50)
  let _105: Int = Int(1)
  let _106: Int = Int(0)
  let swaps.107: Array(Int) = ExtApply(minimbt_create_array, [_105, _106, ])
  let len.108: Int = Sub(high.103, low.102)
  let _109: Int = Int(4)
  let _110: Int = Div(len.108, _109)
  let _111: Int = Int(2)
  let _112: Int = Mul(_110, _111)
  let b.113: Int = Add(low.102, _112)
  let _114: Int = Int(8)
  if (_114 <= len.108) then {
    let _115: Int = Int(4)
    let _116: Int = Div(len.108, _115)
    let _117: Int = Int(1)
    let _118: Int = Mul(_116, _117)
    let a.119: Int = Add(low.102, _118)
    let _120: Int = Int(4)
    let _121: Int = Div(len.108, _120)
    let _122: Int = Int(3)
    let _123: Int = Mul(_121, _122)
    let c.124: Int = Add(low.102, _123)
    let rec sort_2.125: Var({val: Some(Unit)}) = (a.126: Int, b.127: Int) {
      let _128: Int = Get arr.101[b.127]
      let _129: Int = Get arr.101[a.126]
      let _130: Int = Int(1)
      let _131: Int = Sub(_129, _130)
      if (_128 <= _131) then {
        let _132: Unit = Apply(swap.1, [arr.101, a.126, b.127, ])
        let _133: Int = Int(0)
        let _134: Int = Int(0)
        let _135: Int = Get swaps.107[_134]
        let _136: Int = Int(1)
        let _137: Int = Add(_135, _136)
        Put swaps.107[_133] = _137
      } else {
        Unit
      }
    }
    let rec sort_3.138: Var({val: Some(Unit)}) = (a.139: Int, b.140: Int, c.141: Int) {
      let _142: Var({val: Some(Unit)}) = Apply(sort_2.125, [a.139, b.140, ])
      let _143: Var({val: Some(Unit)}) = Apply(sort_2.125, [b.140, c.141, ])
      Apply(sort_2.125, [a.139, b.140, ])
    }
    let _144: Int = Int(1)
    let _145: Int = Sub(len.108, _144)
    if (use_median_of_medians.104 <= _145) then {
      let _146: Int = Int(1)
      let _147: Int = Sub(a.119, _146)
      let _148: Int = Int(1)
      let _149: Int = Add(a.119, _148)
      let _150: Var({val: Some(Unit)}) = Apply(sort_3.138, [_147, a.119, _149, ])
      let _151: Int = Int(1)
      let _152: Int = Sub(b.113, _151)
      let _153: Int = Int(1)
      let _154: Int = Add(b.113, _153)
      let _155: Var({val: Some(Unit)}) = Apply(sort_3.138, [_152, b.113, _154, ])
      let _156: Int = Int(1)
      let _157: Int = Sub(c.124, _156)
      let _158: Int = Int(1)
      let _159: Int = Add(c.124, _158)
      let _160: Var({val: Some(Unit)}) = Apply(sort_3.138, [_157, c.124, _159, ])
      let _161: Var({val: Some(Unit)}) = Apply(sort_3.138, [a.119, b.113, c.124, ])
      let _162: Int = Int(0)
      let _163: Int = Get swaps.107[_162]
      let _164: Int = Int(0)
      if (_163 == _164) then {
        let _165: Int = Bool(true)
        Tuple([b.113, _165, ])
      } else {
        let _165: Int = Bool(false)
        Tuple([b.113, _165, ])
      }
    } else {
      let _160: Var({val: Some(Unit)}) = Unit
      let _161: Var({val: Some(Unit)}) = Apply(sort_3.138, [a.119, b.113, c.124, ])
      let _162: Int = Int(0)
      let _163: Int = Get swaps.107[_162]
      let _164: Int = Int(0)
      if (_163 == _164) then {
        let _165: Int = Bool(true)
        Tuple([b.113, _165, ])
      } else {
        let _165: Int = Bool(false)
        Tuple([b.113, _165, ])
      }
    }
  } else {
    let _161: Var({val: Some(Unit)}) = Unit
    let _162: Int = Int(0)
    let _163: Int = Get swaps.107[_162]
    let _164: Int = Int(0)
    if (_163 == _164) then {
      let _165: Int = Bool(true)
      Tuple([b.113, _165, ])
    } else {
      let _165: Int = Bool(false)
      Tuple([b.113, _165, ])
    }
  }
}
let rec quick_sort.166: Unit = (arr.167: Array(Int), low.168: Int, high.169: Int) {
  let len.170: Int = Sub(high.169, low.168)
  let _171: Int = Int(16)
  if (len.170 <= _171) then {
    Apply(insertion_sort.20, [arr.167, low.168, high.169, ])
  } else {
    let _172: Tuple([Int, Bool]) = Apply(choose_pivot.100, [arr.167, low.168, high.169, ])
    let (pivot_index.173: Var({val: Some(Int)}), likely_sorted.174: Var({val: Some(Bool)})) = _172
    let _175: Tuple([Int, Bool]) = Apply(partition.48, [arr.167, pivot_index.173, low.168, high.169, ])
    let (pivot.176: Var({val: Some(Int)}), partitioned.177: Var({val: Some(Bool)})) = _175
    let _178: Unit = Apply(quick_sort.166, [arr.167, low.168, pivot.176, ])
    let _179: Int = Int(1)
    let _180: Int = Add(pivot.176, _179)
    Apply(quick_sort.166, [arr.167, _180, high.169, ])
  }
}
let rec main.185: Var({val: Some(Unit)}) = () {
  let len.186: Int = ExtApply(minimbt_read_int, [])
  let _187: Int = Int(0)
  let arr.188: Array(Int) = ExtApply(minimbt_create_array, [len.186, _187, ])
  let rec input.189: Var({val: Some(Unit)}) = (i.190: Int) {
    let _191: Int = Int(1)
    let _192: Int = Sub(len.186, _191)
    if (i.190 <= _192) then {
      let _193: Int = ExtApply(minimbt_read_int, [])
      let _194: Unit = Put arr.188[i.190] = _193
      let _195: Int = Int(1)
      let _196: Int = Add(i.190, _195)
      Apply(input.189, [_196, ])
    } else {
      Unit
    }
  }
  let _197: Int = Int(0)
  let _198: Var({val: Some(Unit)}) = Apply(input.189, [_197, ])
  let _201: Int = Int(0)
  let _199: Unit = Apply(quick_sort.166, [arr.188, _201, len.186, ])
  let _200: Int = Int(0)
  Apply(output.9, [arr.188, _200, len.186, ])
}
Apply(main.185, [])