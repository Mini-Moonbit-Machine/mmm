let rec swap.1: Unit = (arr.3: Array[Int], i.5: Int, j.7: Int) {
  let tmp.8: Int = Get arr.3[i.5]
  let _9: Int = Get arr.3[j.7]
  let _11: Unit = Put arr.3[i.5] = _9
  let _13: Unit = Put arr.3[j.7] = tmp.8
  Unit
}
let rec output.14: Unit = (arr.16: Array[Int], i.18: Int, len.20: Int) {
  let _21: Int = Int(1)
  let _22: Int = Sub(len.20, _21)
  if (i.18 <= _22) then {
    let _23: Int = Get arr.16[i.18]
    let _25: Unit = ExtApply(minimbt_print_int, [_23, ])
    let _27: Unit = ExtApply(minimbt_print_endline, [])
    let _28: Int = Int(1)
    let _29: Int = Add(i.18, _28)
    Apply(output.14, [arr.16, _29, len.20, ])
  } else {
    Unit
  }
}
let rec quick_sort.210: Unit = (arr.212: Array[Int], low.214: Int, high.216: Int) {
  let len.217: Int = Sub(high.216, low.214)
  let _218: Int = Int(16)
  if (len.217 <= _218) then {
    let rec g.259: Unit = (j.260: Int) {
      let _261: Int = Int(1)
      let _262: Int = Add(_261, low.214)
      if (_262 <= j.260) then {
        let _263: Int = Get arr.212[j.260]
        let _264: Int = Int(1)
        let _265: Int = Sub(j.260, _264)
        let _266: Int = Get arr.212[_265]
        let _267: Int = Int(1)
        let _268: Int = Sub(_266, _267)
        if (_263 <= _268) then {
          let _269: Int = Int(1)
          let _270: Int = Sub(j.260, _269)
          let _271: Unit = Apply(swap.1, [arr.212, j.260, _270, ])
          let _272: Int = Int(1)
          let _273: Int = Sub(j.260, _272)
          Apply(g.259, [_273, ])
        } else {
          Unit
        }
      } else {
        Unit
      }
    }
    let rec f.274: Unit = (i.275: Int) {
      let _276: Int = Int(1)
      let _277: Int = Sub(high.216, _276)
      if (i.275 <= _277) then {
        let _278: Unit = Apply(g.259, [i.275, ])
        let _279: Int = Int(1)
        let _280: Int = Add(i.275, _279)
        Apply(f.274, [_280, ])
      } else {
        Unit
      }
    }
    let _281: Int = Int(1)
    let _282: Int = Add(low.214, _281)
    Apply(f.274, [_282, ])
  } else {
    let use_median_of_medians.283: Int = Int(50)
    let _284: Int = Int(1)
    let _285: Int = Int(0)
    let swaps.286: Array[Int] = ExtApply(minimbt_create_array, [_284, _285, ])
    let len.287: Int = Sub(high.216, low.214)
    let _288: Int = Int(4)
    let _289: Int = Div(len.287, _288)
    let _290: Int = Int(2)
    let _291: Int = Mul(_289, _290)
    let b.292: Int = Add(low.214, _291)
    let _293: Int = Int(8)
    let _294: Unit = if (_293 <= len.287) then {
      let _295: Int = Int(4)
      let _296: Int = Div(len.287, _295)
      let _297: Int = Int(1)
      let _298: Int = Mul(_296, _297)
      let a.299: Int = Add(low.214, _298)
      let _300: Int = Int(4)
      let _301: Int = Div(len.287, _300)
      let _302: Int = Int(3)
      let _303: Int = Mul(_301, _302)
      let c.304: Int = Add(low.214, _303)
      let rec sort_2.305: Unit = (a.306: Int, b.307: Int) {
        let _308: Int = Get arr.212[b.307]
        let _309: Int = Get arr.212[a.306]
        let _310: Int = Int(1)
        let _311: Int = Sub(_309, _310)
        if (_308 <= _311) then {
          let _312: Unit = Apply(swap.1, [arr.212, a.306, b.307, ])
          let _313: Int = Int(0)
          let _314: Int = Int(0)
          let _315: Int = Get swaps.286[_314]
          let _316: Int = Int(1)
          let _317: Int = Add(_315, _316)
          Put swaps.286[_313] = _317
        } else {
          Unit
        }
      }
      let rec sort_3.318: Unit = (a.319: Int, b.320: Int, c.321: Int) {
        let _322: Unit = Apply(sort_2.305, [a.319, b.320, ])
        let _323: Unit = Apply(sort_2.305, [b.320, c.321, ])
        Apply(sort_2.305, [a.319, b.320, ])
      }
      let _324: Int = Int(1)
      let _325: Int = Sub(len.287, _324)
      let _326: Unit = if (use_median_of_medians.283 <= _325) then {
        let _327: Int = Int(1)
        let _328: Int = Sub(a.299, _327)
        let _329: Int = Int(1)
        let _330: Int = Add(a.299, _329)
        let _331: Unit = Apply(sort_3.318, [_328, a.299, _330, ])
        let _332: Int = Int(1)
        let _333: Int = Sub(b.292, _332)
        let _334: Int = Int(1)
        let _335: Int = Add(b.292, _334)
        let _336: Unit = Apply(sort_3.318, [_333, b.292, _335, ])
        let _337: Int = Int(1)
        let _338: Int = Sub(c.304, _337)
        let _339: Int = Int(1)
        let _340: Int = Add(c.304, _339)
        Apply(sort_3.318, [_338, c.304, _340, ])
      } else {
        Unit
      }
      Apply(sort_3.318, [a.299, b.292, c.304, ])
    } else {
      Unit
    }
    let _341: Int = Int(0)
    let _342: Int = Get swaps.286[_341]
    let _343: Int = Int(0)
    let _344: Int = if (_342 == _343) then {
      Bool(true)
    } else {
      Bool(false)
    }
    let _219: (Int, Bool) = Tuple([b.292, _344, ])
    let (pivot_index.221: Int, likely_sorted.223: Bool) = _219
    let _345: Int = Int(1)
    let _346: Int = Sub(high.216, _345)
    let _347: Unit = Apply(swap.1, [arr.212, pivot_index.221, _346, ])
    let _348: Int = Int(1)
    let _349: Int = Sub(high.216, _348)
    let pivot.350: Int = Get arr.212[_349]
    let _351: Int = Int(1)
    let i.352: Array[Int] = ExtApply(minimbt_create_array, [_351, low.214, ])
    let _353: Int = Int(1)
    let _354: Int = Int(1)
    let partitioned.355: Array[Int] = ExtApply(minimbt_create_array, [_353, _354, ])
    let rec aux.356: Unit = (j.357: Int) {
      let _358: Int = Int(2)
      let _359: Int = Sub(high.216, _358)
      if (j.357 <= _359) then {
        let _360: Int = Get arr.212[j.357]
        let _361: Int = Int(1)
        let _362: Int = Sub(pivot.350, _361)
        let _363: Unit = if (_360 <= _362) then {
          let _364: Int = Int(0)
          let _365: Int = Get i.352[_364]
          let _366: Unit = if (_365 == j.357) then {
            Unit
          } else {
            let _367: Int = Int(0)
            let _368: Int = Get i.352[_367]
            let _369: Unit = Apply(swap.1, [arr.212, _368, j.357, ])
            let _370: Int = Int(0)
            let _371: Int = Int(0)
            Put partitioned.355[_370] = _371
          }
          let _372: Int = Int(0)
          let _373: Int = Int(0)
          let _374: Int = Get i.352[_373]
          let _375: Int = Int(1)
          let _376: Int = Add(_374, _375)
          let _377: Unit = Put i.352[_372] = _376
          Unit
        } else {
          Unit
        }
        let _378: Int = Int(1)
        let _379: Int = Add(j.357, _378)
        Apply(aux.356, [_379, ])
      } else {
        Unit
      }
    }
    let _380: Unit = Apply(aux.356, [low.214, ])
    let _381: Int = Int(0)
    let _382: Int = Get i.352[_381]
    let _383: Int = Int(1)
    let _384: Int = Sub(high.216, _383)
    let _385: Unit = Apply(swap.1, [arr.212, _382, _384, ])
    let _386: Int = Int(0)
    let _387: Int = Get i.352[_386]
    let _388: Int = Int(0)
    let _389: Int = Get partitioned.355[_388]
    let _390: Int = Int(1)
    let _391: Int = if (_389 == _390) then {
      Bool(true)
    } else {
      Bool(false)
    }
    let _224: (Int, Bool) = Tuple([_387, _391, ])
    let (pivot.226: Int, partitioned.228: Bool) = _224
    let _230: Unit = Apply(quick_sort.210, [arr.212, low.214, pivot.226, ])
    let _231: Int = Int(1)
    let _232: Int = Add(pivot.226, _231)
    Apply(quick_sort.210, [arr.212, _232, high.216, ])
  }
}
let rec main.239: Unit = () {
  let len.240: Int = ExtApply(minimbt_read_int, [])
  let _241: Int = Int(0)
  let arr.242: Array[Int] = ExtApply(minimbt_create_array, [len.240, _241, ])
  let rec input.243: Unit = (i.245: Int) {
    let _246: Int = Int(1)
    let _247: Int = Sub(len.240, _246)
    if (i.245 <= _247) then {
      let _248: Int = ExtApply(minimbt_read_int, [])
      let _250: Unit = Put arr.242[i.245] = _248
      let _251: Int = Int(1)
      let _252: Int = Add(i.245, _251)
      Apply(input.243, [_252, ])
    } else {
      Unit
    }
  }
  let _253: Int = Int(0)
  let _255: Unit = Apply(input.243, [_253, ])
  let _392: Int = Int(0)
  let _257: Unit = Apply(quick_sort.210, [arr.242, _392, len.240, ])
  let _258: Int = Int(0)
  Apply(output.14, [arr.242, _258, len.240, ])
}
Apply(main.239, [])
