// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%15) -> fv21, Mem(fref=f4, mref=m3) -> v5, Insn(iref=%9) -> v15, Insn(iref=%16) -> fv22, Insn(iref=%8) -> v14, Insn(iref=%10) -> v16, Insn(iref=%14) -> fv20, Insn(iref=%5) -> v11, Insn(iref=%0) -> v6, Insn(iref=%19) -> v25, Insn(iref=%4) -> v10, Mem(fref=f4, mref=m2) -> v4, Insn(iref=%3) -> v9, Insn(iref=%18) -> v24, Insn(iref=%13) -> fv19, Insn(iref=%7) -> v13, Insn(iref=%17) -> v23, Insn(iref=%2) -> v8, Insn(iref=%1) -> v7, Insn(iref=%20) -> v26, Insn(iref=%11) -> v17, Mem(fref=f4, mref=m1) -> v3, Self(fref=f4) -> v0, Insn(iref=%6) -> v12, Mem(fref=f4, mref=m0) -> v2, Insn(iref=%12) -> v18
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%12), index=3, width=@(@64, @(@64, @(@64, @(@64, @32))))))
// [Asm] skipping Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%12), index=2, width=@(@64, @(@64, @(@64, @(@64, @32))))))
// [Asm] skipping Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%12), index=1, width=@(@64, @(@64, @(@64, @(@64, @32))))))
// [Asm] skipping Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%7), index=3, width=@(@32, @(@32, @(@32, @(@32, @32))))))
// [Asm] skipping Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%7), index=2, width=@(@32, @(@32, @(@32, @(@32, @32))))))
// [Asm] skipping Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%7), index=1, width=@(@32, @(@32, @(@32, @(@32, @32))))))
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, zero, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, s11, zero, v3]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, s11, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, s11, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [s11, zero, a0, v3]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] skip edge 4 -> 2
// [Asm] defs: [a1]
// [Asm] live_set: [a1, s11, zero, a0, v3]
// [Asm] move: a1 <- v3
// [Asm] defined: a1 is X
// [Asm] skip edge 5 -> 3
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [s11, zero, a0, v3]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v8]
// [Asm] live_set: [s11, zero, v3]
// [Asm] move: v8 <- a0
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v3]
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] defined: s11 is X
// [Asm] defs: [fv41]
// [Asm] live_set: [v4, s11, zero, fv41, v3]
// [Asm] defined: fv41 is F
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, fv41, v3]
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, fv41, v3]
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, fv41, v3]
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v3]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] skip edge 4 -> 2
// [Asm] defs: [a1]
// [Asm] live_set: [v5, a1, zero, a0, v3]
// [Asm] move: a1 <- v5
// [Asm] defined: a1 is X
// [Asm] skip edge 5 -> 19
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [v5, zero, a0, v3]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v5, zero, v3]
// [Asm] move: v11 <- a0
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v3]
// [Asm] defs: [v36]
// [Asm] live_set: [v36, v5, zero, v3]
// [Asm] defined: v36 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v3]
// [Asm] move: a0 <- v36
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, a1, zero, a0, v3]
// [Asm] move: a1 <- v5
// [Asm] defined: a1 is X
// [Asm] skip edge 5 -> 19
// [Asm] defs: [a2]
// [Asm] live_set: [a2, v5, a1, zero, a0, v3]
// [Asm] move: a2 <- v3
// [Asm] defined: a2 is X
// [Asm] skip edge 7 -> 3
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [v5, zero, a0, v3]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v5, zero, v3]
// [Asm] move: v12 <- a0
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v3]
// [Asm] defs: [v13]
// [Asm] live_set: [v5, zero, v13]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v5, zero]
// [Asm] defined: v14 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v14, v18, zero]
// [Asm] defined: v18 is X
// [Asm] defs: [fv19]
// [Asm] live_set: [fv19, v14, zero]
// [Asm] defined: fv19 is F
// [Asm] defs: []
// [Asm] live_set: [fv19, v14, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [fv19, zero, a0]
// [Asm] move: a0 <- v14
// [Asm] defined: a0 is X
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [fv19, zero, a0]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v23]
// [Asm] live_set: [fv19, zero]
// [Asm] move: v23 <- a0
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [fv19, zero]
// [Asm] defs: []
// [Asm] live_set: [fv19, zero]
// [Asm] defs: [v29]
// [Asm] live_set: [fv19, zero, v29]
// [Asm] defined: v29 is X
// [Asm] defs: [a0]
// [Asm] live_set: [fv19, zero, a0]
// [Asm] move: a0 <- v29
// [Asm] defined: a0 is X
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [fv19, zero, a0]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v24]
// [Asm] live_set: [fv19, zero]
// [Asm] move: v24 <- a0
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [fv19, zero]
// [Asm] defs: [v25]
// [Asm] live_set: [v25, zero]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v25, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v25
// [Asm] defined: a0 is X
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v26]
// [Asm] live_set: [zero]
// [Asm] move: v26 <- a0
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.451") clobbered_x: @hashset.of([s0, a1, a0, s1])
// [Asm] Label("main.451") clobbered_f: @hashset.of([fs0, fa0])
// [Asm] subst   addi v2, s11, -16 ->   addi a0, s11, -16
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   addi v3, s11, -24 ->   addi s0, s11, -24
// [Asm] subst   andi s11, v3, -8 ->   andi s11, s0, -8
// [Asm] subst   sd v2, 0(v3) ->   sd a0, 0(s0)
// [Asm] subst   sd v2, 8(v3) ->   sd a0, 8(s0)
// [Asm] subst   sd v2, 16(v3) ->   sd a0, 16(s0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   call init_vi_arr.452 ->   call init_vi_arr.452
// [Asm] subst   addi v4, s11, -32 ->   addi a0, s11, -32
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a0, -8
// [Asm] subst   fmv.d.x fv41, zero ->   fmv.d.x fa0, zero
// [Asm] subst   fsd fv41, 0(v4) ->   fsd fa0, 0(a0)
// [Asm] subst   fsd fv41, 8(v4) ->   fsd fa0, 8(a0)
// [Asm] subst   fsd fv41, 16(v4) ->   fsd fa0, 16(a0)
// [Asm] subst   fsd fv41, 24(v4) ->   fsd fa0, 24(a0)
// [Asm] subst   addi v5, s11, -24 ->   addi s1, s11, -24
// [Asm] subst   andi s11, v5, -8 ->   andi s11, s1, -8
// [Asm] subst   sd v4, 0(v5) ->   sd a0, 0(s1)
// [Asm] subst   sd v4, 8(v5) ->   sd a0, 8(s1)
// [Asm] subst   sd v4, 16(v5) ->   sd a0, 16(s1)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v5 ->   mv a1, s1
// [Asm] subst   call init_vd_arr.453 ->   call init_vd_arr.453
// [Asm] subst   li v36, 1 ->   li a0, 1
// [Asm] subst   mv a1, v5 ->   mv a1, s1
// [Asm] subst   mv a2, v3 ->   mv a2, s0
// [Asm] subst   call stress.454 ->   call stress.454
// [Asm] subst   ld v13, 0(v3) ->   ld a0, 0(s0)
// [Asm] subst   lw v14, 0(v13) ->   lw a0, 0(a0)
// [Asm] subst   ld v18, 0(v5) ->   ld a1, 0(s1)
// [Asm] subst   fld fv19, 0(v18) ->   fld fs0, 0(a1)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v29, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   fcvt.w.d v25, fv19, rtz ->   fcvt.w.d a0, fs0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0, 2, 1, 3]
// [Asm] LoweringOrder: [[1, 2], [3], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 0)])
// [Asm] LoweringOrder: [b0, b1, b3, b2]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 2)])
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v8, FnParam(fref=f1, fpref=$f.1) -> v3, Insn(iref=%7) -> v12, FnParam(fref=f1, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v13, Insn(iref=%2) -> v7, Insn(iref=%1) -> v6, Insn(iref=%8) -> v10, Mem(fref=f1, mref=m0) -> v4, Self(fref=f1) -> v0, Insn(iref=%5) -> v11, Insn(iref=%0) -> v5, Insn(iref=%4) -> v9
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f1, fpref=$f.0), width=@64))
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f1, fpref=$f.0), Int32(val=2)])
// [Asm] defs: [v6]
// [Asm] live_set: [v3, zero, v6, s11, v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, zero, v7, v6, s11, v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v3, zero, v8, v7, v6, s11, v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, zero, v8, v7, v4, v6, v2]
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, zero, v8, v7, v4, v6, v2]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v8, v7, v4, v6, v2]
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v8, v7, v4, v6, v2]
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v8, v4, v6, v2]
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v6, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v3]
// [Asm] move: a0 <- v6
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move: a1 <- v3
// [Asm] defined: a1 is X
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v12]
// [Asm] live_set: [zero]
// [Asm] move: v12 <- a0
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v13]
// [Asm] live_set: [v13, zero]
// [Asm] move: v13 <- zero
// [Asm] defined: v13 is X
// [Asm] skip edge 22 -> 3
// [Asm] defs: [v13]
// [Asm] live_set: [v13, zero]
// [Asm] move: v13 <- zero
// [Asm] defined: v13 is X
// [Asm] skip edge 22 -> 3
// [Asm] defs: []
// [Asm] live_set: [v13, zero]
// [Asm] defs: []
// [Asm] live_set: [a1, s11, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, s11, zero, v2]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v3, v19, s11, zero, v2]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v3, s11, zero, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("init_vi_arr.452") clobbered_x: @hashset.of([a2, a1, a3, a5, a0, a4])
// [Asm] Label("init_vi_arr.452") clobbered_f: @hashset.of([])
// [Asm] subst   addi v6, v2, 1 ->   addi a1, a0, 1
// [Asm] subst   addi v7, v2, 2 ->   addi a3, a0, 2
// [Asm] subst   addi v8, v2, 3 ->   addi a4, a0, 3
// [Asm] subst   addi v4, s11, -16 ->   addi a5, s11, -16
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a5, -8
// [Asm] subst   sw v2, 0(v4) ->   sw a0, 0(a5)
// [Asm] subst   sw v6, 4(v4) ->   sw a1, 4(a5)
// [Asm] subst   sw v7, 8(v4) ->   sw a3, 8(a5)
// [Asm] subst   sw v8, 12(v4) ->   sw a4, 12(a5)
// [Asm] subst   th.surd v4, v3, v2, 3 ->   th.surd a5, a2, a0, 3
// [Asm] subst   mv a0, v6 ->   mv a0, a1
// [Asm] subst   mv a1, v3 ->   mv a1, a2
// [Asm] subst   call init_vi_arr.452 ->   call init_vi_arr.452
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   j .init_vi_arr.452_3 ->   j .init_vi_arr.452_3
// [Asm] subst   mv v3, a1 ->   mv a2, a1
// [Asm] subst   li v19, 2 ->   li a1, 2
// [Asm] subst   blt v19, v2, .init_vi_arr.452_2 ->   blt a1, a0, .init_vi_arr.452_2
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0, 2, 1, 3]
// [Asm] LoweringOrder: [[1, 2], [3], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 0)])
// [Asm] LoweringOrder: [b0, b1, b3, b2]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 2)])
// [Asm] pre_assigned_registers: BlockParam(bref=b3, bpref=$b.0) -> v17, Insn(iref=%9) -> v15, Insn(iref=%8) -> v13, Self(fref=f2) -> v0, Insn(iref=%5) -> fv10, Insn(iref=%0) -> v5, Insn(iref=%4) -> v9, Insn(iref=%3) -> fv8, Mem(fref=f2, mref=m0) -> v4, Insn(iref=%7) -> fv12, Insn(iref=%2) -> v7, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> fv6, Insn(iref=%11) -> v16, Insn(iref=%6) -> v11, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%12) -> v14
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f2, fpref=$f.0), width=@64))
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f2, fpref=$f.0), Int32(val=2)])
// [Asm] defs: [v17]
// [Asm] live_set: [v17, zero]
// [Asm] move: v17 <- zero
// [Asm] defined: v17 is X
// [Asm] skip edge 1 -> 0
// [Asm] defs: []
// [Asm] live_set: [v17, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: [a1, s11, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, s11, zero, v2]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v3, s11, zero, v27, v2]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v3, s11, zero, v2]
// [Asm] defs: [fv6]
// [Asm] live_set: [v3, zero, s11, fv6, v2]
// [Asm] defined: fv6 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v3, zero, v7, s11, fv6, v2]
// [Asm] defined: v7 is X
// [Asm] defs: [fv8]
// [Asm] live_set: [v3, zero, v7, fv8, s11, fv6, v2]
// [Asm] defined: fv8 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v3, zero, v7, fv8, s11, fv6, v9, v2]
// [Asm] defined: v9 is X
// [Asm] defs: [fv10]
// [Asm] live_set: [v3, fv10, zero, v7, fv8, s11, fv6, v2]
// [Asm] defined: fv10 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v3, v11, fv10, zero, v7, fv8, s11, fv6, v2]
// [Asm] defined: v11 is X
// [Asm] defs: [fv12]
// [Asm] live_set: [v3, fv10, zero, v7, fv8, fv12, s11, fv6, v2]
// [Asm] defined: fv12 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v3, fv10, zero, v7, fv8, v4, fv12, fv6, v2]
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, fv10, zero, v7, fv8, v4, fv12, fv6, v2]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v3, fv10, zero, v7, fv8, v4, fv12, v2]
// [Asm] defs: []
// [Asm] live_set: [v3, fv10, zero, v7, v4, fv12, v2]
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v7, v4, fv12, v2]
// [Asm] defs: []
// [Asm] live_set: [v7, v2, v4, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v7, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v7, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v3]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move: a1 <- v3
// [Asm] defined: a1 is X
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v16]
// [Asm] live_set: [zero]
// [Asm] move: v16 <- a0
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v17]
// [Asm] live_set: [v17, zero]
// [Asm] move: v17 <- zero
// [Asm] defined: v17 is X
// [Asm] skip edge 1 -> 0
// [Asm] Label("init_vd_arr.453") clobbered_x: @hashset.of([a2, a1, a3, a0])
// [Asm] Label("init_vd_arr.453") clobbered_f: @hashset.of([fa3, fa2, fa1, fa0])
// [Asm] subst   mv v17, zero ->   mv a0, zero
// [Asm] subst   j .init_vd_arr.453_3 ->   j .init_vd_arr.453_3
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   li v27, 2 ->   li a2, 2
// [Asm] subst   blt v27, v2, .init_vd_arr.453_2 ->   blt a2, a0, .init_vd_arr.453_2
// [Asm] subst   fcvt.d.w fv6, v2 ->   fcvt.d.w fa0, a0
// [Asm] subst   addi v7, v2, 1 ->   addi a2, a0, 1
// [Asm] subst   fcvt.d.w fv8, v7 ->   fcvt.d.w fa1, a2
// [Asm] subst   addi v9, v2, 2 ->   addi a3, a0, 2
// [Asm] subst   fcvt.d.w fv10, v9 ->   fcvt.d.w fa2, a3
// [Asm] subst   addi v11, v2, 3 ->   addi a3, a0, 3
// [Asm] subst   fcvt.d.w fv12, v11 ->   fcvt.d.w fa3, a3
// [Asm] subst   addi v4, s11, -32 ->   addi a3, s11, -32
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a3, -8
// [Asm] subst   fsd fv6, 0(v4) ->   fsd fa0, 0(a3)
// [Asm] subst   fsd fv8, 8(v4) ->   fsd fa1, 8(a3)
// [Asm] subst   fsd fv10, 16(v4) ->   fsd fa2, 16(a3)
// [Asm] subst   fsd fv12, 24(v4) ->   fsd fa3, 24(a3)
// [Asm] subst   th.surd v4, v3, v2, 3 ->   th.surd a3, a1, a0, 3
// [Asm] subst   mv a0, v7 ->   mv a0, a2
// [Asm] subst   call init_vd_arr.453 ->   call init_vd_arr.453
// [Asm] subst   mv v17, zero ->   mv a0, zero
// [Asm] LoweringOrder: [0, 2, 1, 3]
// [Asm] LoweringOrder: [[1, 2], [3], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 0)])
// [Asm] LoweringOrder: [b0, b1, b3, b2]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 2)])
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v20, Insn(iref=%41) -> fv46, Insn(iref=%33) -> v38, Insn(iref=%63) -> fv68, Insn(iref=%8) -> v13, Insn(iref=%10) -> v15, Insn(iref=%27) -> fv32, Insn(iref=%25) -> fv30, Insn(iref=%39) -> fv44, Insn(iref=%59) -> v64, Insn(iref=%4) -> v9, Insn(iref=%56) -> v61, Insn(iref=%49) -> fv54, Insn(iref=%42) -> v47, Insn(iref=%65) -> v70, Insn(iref=%68) -> v73, Insn(iref=%26) -> v31, Insn(iref=%31) -> v36, Insn(iref=%64) -> v69, Insn(iref=%38) -> fv43, Insn(iref=%16) -> v21, Insn(iref=%53) -> v58, Insn(iref=%54) -> v59, Insn(iref=%60) -> fv65, Insn(iref=%67) -> v72, Insn(iref=%5) -> v10, Insn(iref=%19) -> fv24, Insn(iref=%13) -> v18, Insn(iref=%7) -> v12, Insn(iref=%55) -> v60, Insn(iref=%66) -> v71, Insn(iref=%23) -> fv28, Insn(iref=%48) -> v53, Insn(iref=%20) -> fv25, Insn(iref=%34) -> v39, Insn(iref=%36) -> v41, Insn(iref=%50) -> fv55, Insn(iref=%14) -> v19, Insn(iref=%51) -> fv56, FnParam(fref=f3, fpref=$f.0) -> v2, Self(fref=f3) -> v0, Insn(iref=%52) -> fv57, Insn(iref=%44) -> v49, Insn(iref=%32) -> v37, Insn(iref=%58) -> v63, Insn(iref=%1) -> v6, Insn(iref=%11) -> v16, Insn(iref=%57) -> v62, Insn(iref=%6) -> v11, Insn(iref=%35) -> v40, Insn(iref=%62) -> fv67, FnParam(fref=f3, fpref=$f.2) -> v4, Insn(iref=%28) -> fv33, Insn(iref=%46) -> v51, BlockParam(bref=b3, bpref=$b.0) -> v76, Insn(iref=%9) -> v14, Insn(iref=%24) -> fv29, Insn(iref=%37) -> v42, Insn(iref=%45) -> v50, Insn(iref=%29) -> fv34, Insn(iref=%70) -> v75, Insn(iref=%47) -> v52, Insn(iref=%0) -> v5, Insn(iref=%61) -> fv66, Insn(iref=%3) -> v8, Insn(iref=%18) -> fv23, Insn(iref=%22) -> fv27, Insn(iref=%17) -> fv22, FnParam(fref=f3, fpref=$f.1) -> v3, Insn(iref=%2) -> v7, Insn(iref=%43) -> v48, Insn(iref=%30) -> fv35, Insn(iref=%21) -> v26, Insn(iref=%40) -> fv45, Insn(iref=%69) -> v74, Insn(iref=%12) -> v17
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f3, fpref=$f.0), Int32(val=3)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v76]
// [Asm] live_set: [zero, v76]
// [Asm] move: v76 <- zero
// [Asm] defined: v76 is X
// [Asm] skip edge 2 -> 0
// [Asm] defs: []
// [Asm] live_set: [zero, v76]
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v145]
// [Asm] live_set: [v2, v4, zero, v145, v3]
// [Asm] defined: v145 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] defs: [v6]
// [Asm] live_set: [v3, zero, v4, v6, v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v7, zero, v4, v6, v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v3, v7, zero, v8, v4, v6, v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v3, v7, zero, v8, v4, v6, v9, v2]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v3, v7, zero, v8, v4, v10, v9, v2]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v3, v7, zero, v8, v4, v11, v10, v9, v2]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v3, v7, v12, zero, v8, v4, v11, v10, v9, v2]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v13, v7, v12, zero, v8, v4, v11, v10, v9, v2]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v3, v14, v13, v7, v12, zero, v8, v4, v11, v10, v9, v2]
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v3, v14, v13, v7, v12, zero, v8, v4, v10, v9, v15, v2]
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v14, v16, v13, v7, v12, zero, v8, v4, v10, v9, v15, v2]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v14, v16, v13, v7, v12, zero, v8, v4, v10, v17, v9, v15, v2]
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v3, v14, v16, v13, v7, v12, zero, v8, v4, v10, v17, v9, v18, v15, v2]
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v3, v14, v16, v13, v7, v12, zero, v8, v19, v4, v10, v17, v9, v18, v15, v2]
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v3, v14, v13, v7, v12, zero, v20, v8, v19, v4, v10, v17, v9, v18, v15, v2]
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v3, v14, v13, v7, v12, zero, v20, v8, v19, v4, v10, v21, v17, v9, v18, v15, v2]
// [Asm] defined: v21 is X
// [Asm] defs: [fv22]
// [Asm] live_set: [v3, v14, v13, v7, v12, fv22, zero, v20, v8, v19, v4, v10, v21, v17, v9, v18, v15, v2]
// [Asm] defined: fv22 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [v3, fv23, v14, v13, v7, v12, fv22, zero, v20, v8, v19, v4, v10, v21, v17, v9, v18, v15, v2]
// [Asm] defined: fv23 is F
// [Asm] defs: [fv24]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, v7, v12, fv22, zero, v20, v8, v19, v4, v10, v21, v17, v9, v18, v15, v2]
// [Asm] defined: fv24 is F
// [Asm] defs: [fv25]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, v10, v17, v9, v18, v15, v2]
// [Asm] defined: fv25 is F
// [Asm] defs: [v26]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, v26, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, v10, v17, v9, v18, v15, v2]
// [Asm] defined: v26 is X
// [Asm] defs: [fv27]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, v26, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, fv27, v10, v17, v9, v18, v15, v2]
// [Asm] defined: fv27 is F
// [Asm] defs: [fv28]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, v26, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, fv27, v10, v17, v9, fv28, v18, v15, v2]
// [Asm] defined: fv28 is F
// [Asm] defs: [fv29]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, v26, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, fv27, v10, v17, v9, fv28, v18, fv29, v15, v2]
// [Asm] defined: fv29 is F
// [Asm] defs: [fv30]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, fv30, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, fv27, v10, v17, v9, fv28, v18, fv29, v15, v2]
// [Asm] defined: fv30 is F
// [Asm] defs: [v31]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, fv30, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, fv27, v10, v17, v31, v9, fv28, v18, fv29, v15, v2]
// [Asm] defined: v31 is X
// [Asm] defs: [fv32]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, fv30, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, fv27, fv32, v10, v17, v31, v9, fv28, v18, fv29, v15, v2]
// [Asm] defined: fv32 is F
// [Asm] defs: [fv33]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, fv30, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, fv27, fv32, v10, v17, v31, v9, fv28, v18, fv33, fv29, v15, v2]
// [Asm] defined: fv33 is F
// [Asm] defs: [fv34]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, fv30, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, fv27, fv32, v10, v17, v31, v9, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm] defined: fv34 is F
// [Asm] defs: [fv35]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, fv30, v7, v12, fv35, fv22, zero, fv25, v20, v8, v19, v4, fv27, fv32, v10, v17, v9, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm] defined: fv35 is F
// [Asm] defs: []
// [Asm] live_set: [v3, fv24, fv23, v14, v13, fv30, v7, v12, fv35, fv22, zero, fv25, v20, v8, v19, v4, fv27, fv32, v10, v17, v9, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, fv30, v12, fv35, fv22, zero, fv25, v20, v8, v19, v4, fv27, fv32, v10, a0, v17, v9, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, v20, v19, v4, fv27, fv32, v10, a0, v17, v9, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm] move: a1 <- v8
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, v20, v19, v4, fv27, fv32, v10, a0, a2, v17, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm] move: a2 <- v9
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, v20, v19, v4, fv27, fv32, a0, a2, v17, a3, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm] move: a3 <- v10
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, a4, v20, v19, v4, fv27, fv32, a0, a2, v17, a3, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm] move: a4 <- v12
// [Asm] defined: a4 is X
// [Asm] skip edge 28 -> 15
// [Asm] defs: [a5]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, a4, v20, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm] move: a5 <- v13
// [Asm] defined: a5 is X
// [Asm] skip edge 29 -> 16
// [Asm] defs: [a6]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm] move: a6 <- v14
// [Asm] defined: a6 is X
// [Asm] skip edge 30 -> 17
// [Asm] defs: [a7]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm] move: a7 <- v15
// [Asm] defined: a7 is X
// [Asm] skip edge 31 -> 18
// [Asm] defs: [t0]
// [Asm] live_set: [v3, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, t0, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm] move: t0 <- v17
// [Asm] defined: t0 is X
// [Asm] skip edge 32 -> 20
// [Asm] defs: [t1]
// [Asm] live_set: [v3, t1, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, t0, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm] move: t1 <- v18
// [Asm] defined: t1 is X
// [Asm] skip edge 33 -> 21
// [Asm] defs: [t2]
// [Asm] live_set: [v3, t1, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, t0, fv28, v18, fv34, fv33, fv29, t2, v15, v2]
// [Asm] move: t2 <- v19
// [Asm] defined: t2 is X
// [Asm] skip edge 34 -> 22
// [Asm] defs: [t3]
// [Asm] live_set: [v3, t1, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, t3, t0, fv28, v18, fv34, fv33, fv29, t2, v15, v2]
// [Asm] move: t3 <- v20
// [Asm] defined: t3 is X
// [Asm] skip edge 35 -> 23
// [Asm] defs: [fa0]
// [Asm] live_set: [v3, t1, fv24, fv23, v14, v13, fv30, a1, v12, fv35, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, t3, t0, fv28, v18, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm] move: fa0 <- fv22
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [v3, t1, fv24, v14, v13, fv30, a1, v12, fv35, fa1, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, t3, t0, fv28, v18, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm] move: fa1 <- fv23
// [Asm] defined: fa1 is F
// [Asm] defs: [fa2]
// [Asm] live_set: [v3, t1, v14, v13, fv30, a1, v12, fv35, fa1, fa2, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, t3, t0, fv28, v18, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm] move: fa2 <- fv24
// [Asm] defined: fa2 is F
// [Asm] defs: [fa3]
// [Asm] live_set: [v3, t1, v14, v13, fv30, a1, v12, fv35, fa1, fa2, zero, v20, a4, v19, a6, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, t3, t0, fv28, v18, fa3, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm] move: fa3 <- fv25
// [Asm] defined: fa3 is F
// [Asm] defs: [fa4]
// [Asm] live_set: [v3, t1, v14, v13, fv30, a1, v12, fv35, fa1, fa2, zero, v20, a4, v19, a6, v4, fv27, fv32, a5, fa4, a0, a2, v17, a3, a7, t3, t0, fv28, v18, fa3, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm] move: fa4 <- fv27
// [Asm] defined: fa4 is F
// [Asm] skip edge 16 -> 4
// [Asm] defs: [fa5]
// [Asm] live_set: [v3, t1, v14, v13, fv30, a1, v12, fv35, fa1, fa2, zero, v20, a4, v19, a6, v4, fv27, fv32, a5, fa4, a0, a2, v17, a3, a7, t3, t0, fv28, v18, fa5, fa3, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm] move: fa5 <- fv28
// [Asm] defined: fa5 is F
// [Asm] skip edge 17 -> 5
// [Asm] defs: [fa6]
// [Asm] live_set: [v3, t1, v14, v13, fv30, a1, v12, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv27, fv32, a5, fa4, a0, a2, v17, a3, a7, t3, t0, fv28, v18, fa5, fa3, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm] move: fa6 <- fv29
// [Asm] defined: fa6 is F
// [Asm] skip edge 18 -> 6
// [Asm] defs: [fa7]
// [Asm] live_set: [v3, t1, v14, v13, fv30, a1, v12, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv27, fv32, a5, fa4, a0, a2, v17, a3, fa7, a7, t3, t0, fv28, v18, fa5, fa3, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm] move: fa7 <- fv30
// [Asm] defined: fa7 is F
// [Asm] skip edge 19 -> 7
// [Asm] defs: [ft0]
// [Asm] live_set: [v3, t1, v14, v13, fv30, ft0, a1, v12, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv27, fv32, a5, fa4, a0, a2, v17, a3, fa7, a7, t3, t0, fv28, v18, fa5, fa3, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm] move: ft0 <- fv32
// [Asm] defined: ft0 is F
// [Asm] skip edge 20 -> 8
// [Asm] defs: [ft1]
// [Asm] live_set: [v3, t1, v14, v13, fv30, ft0, ft1, a1, v12, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv27, fv32, a5, fa4, a0, a2, v17, a3, fa7, a7, t3, t0, fv28, v18, fa5, fa3, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm] move: ft1 <- fv33
// [Asm] defined: ft1 is F
// [Asm] skip edge 21 -> 9
// [Asm] defs: [ft2]
// [Asm] live_set: [v3, t1, v14, v13, fv30, ft0, ft1, a1, v12, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv27, fv32, a5, fa4, a0, ft2, a2, v17, a3, fa7, a7, t3, t0, fv28, v18, fa5, fa3, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm] move: ft2 <- fv34
// [Asm] defined: ft2 is F
// [Asm] skip edge 22 -> 10
// [Asm] defs: [ft3]
// [Asm] live_set: [v3, t1, v14, v13, fv30, ft0, ft1, a1, v12, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv27, fv32, a5, fa4, a0, ft2, a2, v17, a3, fa7, a7, t3, t0, fv28, v18, fa5, fa3, fv34, ft3, fa0, fv33, fv29, t2, v15, v2]
// [Asm] move: ft3 <- fv35
// [Asm] defined: ft3 is F
// [Asm] skip edge 23 -> 11
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [v3, v14, v13, fv30, v12, fv35, zero, v20, v19, v4, fv27, fv32, a0, v17, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v36]
// [Asm] live_set: [v3, v14, v13, fv30, v12, fv35, zero, v20, v19, v4, fv27, fv32, v36, v17, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm] move: v36 <- a0
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v14, v13, fv30, v12, fv35, zero, v20, v19, v4, fv27, fv32, v36, v17, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm] defs: [v37]
// [Asm] live_set: [v3, v14, v13, fv30, v12, fv35, zero, v20, v19, v4, fv27, fv32, v36, v37, v17, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v3, v14, v13, fv30, v12, fv35, zero, v20, v19, v4, fv27, fv32, v37, v17, fv28, v18, fv34, fv33, fv29, v38, v15, v2]
// [Asm] defined: v38 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v3, v14, v13, fv30, v12, fv35, zero, v20, v19, v4, fv27, fv32, v37, v17, v39, fv28, v18, fv34, fv33, fv29, v38, v15, v2]
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v3, v40, v14, v13, fv30, v12, fv35, zero, v20, v19, v4, fv27, fv32, v37, v17, v39, fv28, v18, fv34, fv33, fv29, v38, v15, v2]
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v3, v40, v14, v13, fv30, v41, v12, fv35, zero, v20, v19, v4, fv27, fv32, v37, v17, v39, fv28, v18, fv34, fv33, fv29, v38, v15, v2]
// [Asm] defined: v41 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v3, v40, v14, v42, v13, fv30, v41, v12, fv35, zero, v20, v19, v4, fv27, fv32, v17, v39, fv28, v18, fv34, fv33, fv29, v38, v15, v2]
// [Asm] defined: v42 is X
// [Asm] defs: [fv43]
// [Asm] live_set: [v3, v40, v14, v42, v13, fv30, v41, v12, fv35, zero, v20, v19, v4, fv27, fv32, v17, v39, fv28, v18, fv34, fv43, fv33, fv29, v38, v15, v2]
// [Asm] defined: fv43 is F
// [Asm] defs: [fv44]
// [Asm] live_set: [v3, v40, v14, v42, v13, fv30, v41, v12, fv35, zero, v20, v19, v4, fv27, fv32, v17, v39, fv28, v18, fv34, fv43, fv33, fv29, v38, v15, fv44, v2]
// [Asm] defined: fv44 is F
// [Asm] defs: [fv45]
// [Asm] live_set: [v3, v40, v14, v42, v13, fv30, v41, v12, fv35, zero, v20, v19, v4, fv27, fv45, fv32, v17, v39, fv28, v18, fv34, fv43, fv33, fv29, v38, v15, fv44, v2]
// [Asm] defined: fv45 is F
// [Asm] defs: [fv46]
// [Asm] live_set: [v3, v40, v14, v42, v13, fv30, v41, v12, fv35, zero, v20, v19, v4, fv27, fv45, fv32, v17, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm] defined: fv46 is F
// [Asm] defs: []
// [Asm] live_set: [v3, v40, v14, v42, v13, fv30, v41, v12, fv35, zero, v20, v19, v4, fv27, fv45, fv32, v17, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v40, v14, v42, v13, fv30, v41, v12, fv35, zero, v20, v19, v4, fv27, fv45, fv32, a0, v17, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm] move: a0 <- v39
// [Asm] defined: a0 is X
// [Asm] skip edge 1 -> 40
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v40, v14, v42, v13, fv30, v41, a1, v12, fv35, zero, v20, v19, v4, fv27, fv45, fv32, a0, v17, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm] move: a1 <- v40
// [Asm] defined: a1 is X
// [Asm] skip edge 5 -> 41
// [Asm] defs: [a2]
// [Asm] live_set: [v3, v40, v14, v42, v13, fv30, v41, a1, v12, fv35, zero, v20, v19, v4, fv27, fv45, fv32, a0, a2, v17, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm] move: a2 <- v41
// [Asm] defined: a2 is X
// [Asm] skip edge 4 -> 42
// [Asm] defs: [a3]
// [Asm] live_set: [v3, v40, v14, v42, v13, fv30, v41, a1, v12, fv35, zero, v20, v19, v4, fv27, fv45, fv32, a0, a2, v17, a3, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm] move: a3 <- v42
// [Asm] defined: a3 is X
// [Asm] skip edge 27 -> 43
// [Asm] defs: [a4]
// [Asm] live_set: [v3, v40, v14, v42, v13, fv30, v41, a1, fv35, zero, v20, a4, v19, v4, fv27, fv45, fv32, a0, a2, v17, a3, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm] move: a4 <- v12
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v3, v40, v14, v42, fv30, v41, a1, fv35, zero, v20, a4, v19, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm] move: a5 <- v13
// [Asm] defined: a5 is X
// [Asm] defs: [a6]
// [Asm] live_set: [v3, v40, v42, fv30, v41, a1, fv35, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm] move: a6 <- v14
// [Asm] defined: a6 is X
// [Asm] defs: [a7]
// [Asm] live_set: [v3, v40, v42, fv30, v41, a1, fv35, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, fv46, fv28, v18, fv34, fv43, fv33, fv29, fv44, v2]
// [Asm] move: a7 <- v15
// [Asm] defined: a7 is X
// [Asm] defs: [t0]
// [Asm] live_set: [v3, v40, v42, fv30, v41, a1, fv35, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, t0, fv46, fv28, v18, fv34, fv43, fv33, fv29, fv44, v2]
// [Asm] move: t0 <- v17
// [Asm] defined: t0 is X
// [Asm] skip edge 32 -> 20
// [Asm] defs: [t1]
// [Asm] live_set: [v3, v40, t1, v42, fv30, v41, a1, fv35, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, t0, fv46, fv28, v18, fv34, fv43, fv33, fv29, fv44, v2]
// [Asm] move: t1 <- v18
// [Asm] defined: t1 is X
// [Asm] skip edge 33 -> 21
// [Asm] defs: [t2]
// [Asm] live_set: [v3, v40, t1, v42, fv30, v41, a1, fv35, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, t0, fv46, fv28, v18, fv34, fv43, fv33, fv29, t2, fv44, v2]
// [Asm] move: t2 <- v19
// [Asm] defined: t2 is X
// [Asm] skip edge 34 -> 22
// [Asm] defs: [t3]
// [Asm] live_set: [v3, v40, t1, v42, fv30, v41, a1, fv35, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, t3, t0, fv46, fv28, v18, fv34, fv43, fv33, fv29, t2, fv44, v2]
// [Asm] move: t3 <- v20
// [Asm] defined: t3 is X
// [Asm] skip edge 35 -> 23
// [Asm] defs: [fa0]
// [Asm] live_set: [v3, v40, t1, v42, fv30, v41, a1, fv35, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, t3, t0, fv46, fv28, v18, fv34, fv43, fv33, fa0, fv29, t2, fv44, v2]
// [Asm] move: fa0 <- fv43
// [Asm] defined: fa0 is F
// [Asm] skip edge 12 -> 31
// [Asm] defs: [fa1]
// [Asm] live_set: [v3, v40, t1, v42, fv30, v41, a1, fv35, fa1, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, t3, t0, fv46, fv28, v18, fv34, fv43, fv33, fa0, fv29, t2, fv44, v2]
// [Asm] move: fa1 <- fv44
// [Asm] defined: fa1 is F
// [Asm] skip edge 13 -> 32
// [Asm] defs: [fa2]
// [Asm] live_set: [v3, v40, t1, v42, fv30, v41, a1, fv35, fa1, fa2, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, t3, t0, fv46, fv28, v18, fv34, fv43, fv33, fa0, fv29, t2, fv44, v2]
// [Asm] move: fa2 <- fv45
// [Asm] defined: fa2 is F
// [Asm] skip edge 14 -> 33
// [Asm] defs: [fa3]
// [Asm] live_set: [v3, v40, t1, v42, fv30, v41, a1, fv35, fa1, fa2, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, t3, t0, fv46, fv28, v18, fa3, fv34, fv43, fv33, fa0, fv29, t2, fv44, v2]
// [Asm] move: fa3 <- fv46
// [Asm] defined: fa3 is F
// [Asm] skip edge 15 -> 34
// [Asm] defs: [fa4]
// [Asm] live_set: [v3, v40, t1, v42, fv30, v41, a1, fv35, fa1, fa2, zero, v20, a4, v19, a6, v4, fv45, fv32, a5, fa4, a0, a2, v17, a3, v39, a7, t3, t0, fv46, fv28, v18, fa3, fv34, fv43, fv33, fa0, fv29, t2, fv44, v2]
// [Asm] move: fa4 <- fv27
// [Asm] defined: fa4 is F
// [Asm] defs: [fa5]
// [Asm] live_set: [v3, v40, t1, v42, fv30, v41, a1, fv35, fa1, fa2, zero, v20, a4, v19, a6, v4, fv45, fv32, a5, fa4, a0, a2, v17, a3, v39, a7, t3, t0, fv46, v18, fa5, fa3, fv43, fv34, fa0, fv33, fv29, t2, fv44, v2]
// [Asm] move: fa5 <- fv28
// [Asm] defined: fa5 is F
// [Asm] defs: [fa6]
// [Asm] live_set: [v3, v40, t1, v42, fv30, v41, a1, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv45, fv32, a5, fa4, a0, a2, v17, a3, v39, a7, t3, t0, fv46, v18, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm] move: fa6 <- fv29
// [Asm] defined: fa6 is F
// [Asm] defs: [fa7]
// [Asm] live_set: [v3, v40, t1, v42, v41, a1, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv45, fv32, a5, fa4, a0, a2, v17, a3, v39, fa7, a7, t3, t0, fv46, v18, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm] move: fa7 <- fv30
// [Asm] defined: fa7 is F
// [Asm] defs: [ft0]
// [Asm] live_set: [v3, v40, t1, v42, v41, ft0, a1, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv45, fv32, a5, fa4, a0, a2, v17, a3, v39, fa7, a7, t3, t0, fv46, v18, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm] move: ft0 <- fv32
// [Asm] defined: ft0 is F
// [Asm] skip edge 20 -> 8
// [Asm] defs: [ft1]
// [Asm] live_set: [v3, v40, t1, v42, v41, ft0, ft1, a1, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv45, fv32, a5, fa4, a0, a2, v17, a3, v39, fa7, a7, t3, t0, fv46, v18, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm] move: ft1 <- fv33
// [Asm] defined: ft1 is F
// [Asm] skip edge 21 -> 9
// [Asm] defs: [ft2]
// [Asm] live_set: [v3, v40, t1, v42, v41, ft0, ft1, a1, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv45, fv32, a5, fa4, a0, ft2, a2, v17, a3, v39, fa7, a7, t3, t0, fv46, v18, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm] move: ft2 <- fv34
// [Asm] defined: ft2 is F
// [Asm] skip edge 22 -> 10
// [Asm] defs: [ft3]
// [Asm] live_set: [v3, v40, t1, v42, v41, ft0, ft1, a1, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv45, fv32, a5, fa4, a0, ft2, a2, v17, a3, v39, fa7, a7, t3, t0, fv46, v18, fa5, fa3, ft3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm] move: ft3 <- fv35
// [Asm] defined: ft3 is F
// [Asm] skip edge 23 -> 11
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [v3, v40, v42, v41, fv35, zero, v20, v19, v4, fv45, fv32, a0, v17, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v47]
// [Asm] live_set: [v3, v40, v42, v41, fv35, zero, v20, v19, v4, v47, fv45, fv32, v17, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] move: v47 <- a0
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v40, v42, v41, fv35, zero, v20, v19, v4, v47, fv45, fv32, v17, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] defs: [v48]
// [Asm] live_set: [v3, v40, v42, v41, fv35, zero, v20, v19, v4, v47, fv45, fv32, v17, v39, fv46, v18, v48, fv43, fv34, fv33, fv44, v2]
// [Asm] defined: v48 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v3, v40, v42, v41, fv35, zero, v20, v19, v4, fv45, fv32, v49, v17, v39, fv46, v18, v48, fv43, fv34, fv33, fv44, v2]
// [Asm] defined: v49 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v3, v40, v42, v41, fv35, zero, v50, v20, v19, v4, fv45, fv32, v49, v17, v39, fv46, v18, v48, fv43, fv34, fv33, fv44, v2]
// [Asm] defined: v50 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v3, v40, v42, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, fv32, v49, v17, v39, fv46, v18, v48, fv43, fv34, fv33, fv44, v2]
// [Asm] defined: v51 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v3, v40, v42, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, fv32, v49, v17, v52, v39, fv46, v18, v48, fv43, fv34, fv33, fv44, v2]
// [Asm] defined: v52 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v3, v40, v42, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, v49, v17, v52, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] defined: v53 is X
// [Asm] defs: [fv54]
// [Asm] live_set: [v3, v40, v42, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, v49, fv54, v17, v52, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] defined: fv54 is F
// [Asm] defs: [fv55]
// [Asm] live_set: [v3, v40, v42, fv55, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, v49, fv54, v17, v52, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] defined: fv55 is F
// [Asm] defs: [fv56]
// [Asm] live_set: [v3, v40, v42, fv55, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, v49, fv56, fv54, v17, v52, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] defined: fv56 is F
// [Asm] defs: [fv57]
// [Asm] live_set: [v3, v40, v42, fv55, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, fv56, fv54, v17, v52, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] defined: fv57 is F
// [Asm] defs: []
// [Asm] live_set: [v3, v40, v42, fv55, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, fv56, fv54, v17, v52, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v40, v42, fv55, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, fv56, a0, fv54, v17, v52, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] move: a0 <- v39
// [Asm] defined: a0 is X
// [Asm] skip edge 1 -> 40
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v40, v42, fv55, v41, a1, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, fv56, a0, fv54, v17, v52, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] move: a1 <- v40
// [Asm] defined: a1 is X
// [Asm] skip edge 5 -> 41
// [Asm] defs: [a2]
// [Asm] live_set: [v3, v40, v42, fv55, v41, a1, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, fv56, a0, fv54, a2, v17, v52, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] move: a2 <- v41
// [Asm] defined: a2 is X
// [Asm] skip edge 4 -> 42
// [Asm] defs: [a3]
// [Asm] live_set: [v3, v40, v42, fv55, v41, a1, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, fv56, a0, fv54, a2, v17, v52, a3, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] move: a3 <- v42
// [Asm] defined: a3 is X
// [Asm] skip edge 27 -> 43
// [Asm] defs: [a4]
// [Asm] live_set: [v3, v40, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, v20, v19, v4, fv45, v53, fv32, fv56, a0, fv54, a2, v17, v52, a3, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] move: a4 <- v50
// [Asm] defined: a4 is X
// [Asm] skip edge 28 -> 47
// [Asm] defs: [a5]
// [Asm] live_set: [v3, v40, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, v20, v19, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v17, v52, a3, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] move: a5 <- v51
// [Asm] defined: a5 is X
// [Asm] skip edge 29 -> 48
// [Asm] defs: [a6]
// [Asm] live_set: [v3, v40, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, v20, a6, v19, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v17, v52, a3, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] move: a6 <- v52
// [Asm] defined: a6 is X
// [Asm] skip edge 30 -> 49
// [Asm] defs: [a7]
// [Asm] live_set: [v3, v40, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, v20, a6, v19, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v17, v52, a3, fv57, v39, a7, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] move: a7 <- v53
// [Asm] defined: a7 is X
// [Asm] skip edge 31 -> 50
// [Asm] defs: [t0]
// [Asm] live_set: [v3, v40, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, v20, a6, v19, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v52, a3, fv57, v39, a7, t0, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm] move: t0 <- v17
// [Asm] defined: t0 is X
// [Asm] defs: [t1]
// [Asm] live_set: [v3, v40, t1, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, v20, a6, v19, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v52, a3, fv57, v39, a7, t0, fv46, fv43, fv34, fv33, fv44, v2]
// [Asm] move: t1 <- v18
// [Asm] defined: t1 is X
// [Asm] defs: [t2]
// [Asm] live_set: [v3, v40, t1, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, v20, a6, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v52, a3, fv57, v39, a7, t0, fv46, fv43, fv34, fv33, t2, fv44, v2]
// [Asm] move: t2 <- v19
// [Asm] defined: t2 is X
// [Asm] defs: [t3]
// [Asm] live_set: [v3, v40, t1, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, a6, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v52, a3, fv57, v39, a7, t3, t0, fv46, fv43, fv34, fv33, t2, fv44, v2]
// [Asm] move: t3 <- v20
// [Asm] defined: t3 is X
// [Asm] defs: [fa0]
// [Asm] live_set: [v3, v40, t1, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, a6, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v52, a3, fv57, v39, a7, t3, t0, fv46, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm] move: fa0 <- fv43
// [Asm] defined: fa0 is F
// [Asm] skip edge 12 -> 31
// [Asm] defs: [fa1]
// [Asm] live_set: [v3, v40, t1, v42, fv55, v41, a1, fv35, fa1, v51, zero, v50, a4, a6, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v52, a3, fv57, v39, a7, t3, t0, fv46, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm] move: fa1 <- fv44
// [Asm] defined: fa1 is F
// [Asm] skip edge 13 -> 32
// [Asm] defs: [fa2]
// [Asm] live_set: [v3, v40, t1, v42, fv55, v41, a1, fv35, fa1, v51, fa2, zero, v50, a4, a6, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v52, a3, fv57, v39, a7, t3, t0, fv46, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm] move: fa2 <- fv45
// [Asm] defined: fa2 is F
// [Asm] skip edge 14 -> 33
// [Asm] defs: [fa3]
// [Asm] live_set: [v3, v40, t1, v42, fv55, v41, a1, fv35, fa1, v51, fa2, zero, v50, a4, a6, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v52, a3, fv57, v39, a7, t3, t0, fv46, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm] move: fa3 <- fv46
// [Asm] defined: fa3 is F
// [Asm] skip edge 15 -> 34
// [Asm] defs: [fa4]
// [Asm] live_set: [v3, v40, t1, v42, fv55, v41, a1, fv35, fa1, v51, fa2, zero, v50, a4, a6, v4, fv45, v53, fv32, a5, fv56, fa4, a0, fv54, a2, v52, a3, fv57, v39, a7, t3, t0, fv46, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm] move: fa4 <- fv54
// [Asm] defined: fa4 is F
// [Asm] skip edge 16 -> 35
// [Asm] defs: [fa5]
// [Asm] live_set: [v3, v40, t1, v42, fv55, v41, a1, fv35, fa1, v51, fa2, zero, v50, a4, a6, v4, fv45, v53, fv32, a5, fv56, fa4, a0, fv54, a2, v52, a3, fv57, v39, a7, t3, t0, fv46, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm] move: fa5 <- fv55
// [Asm] defined: fa5 is F
// [Asm] skip edge 17 -> 36
// [Asm] defs: [fa6]
// [Asm] live_set: [v3, v40, t1, v42, fv55, v41, a1, fv35, fa1, v51, fa2, zero, v50, fa6, a4, a6, v4, fv45, v53, fv32, a5, fv56, fa4, a0, fv54, a2, v52, a3, fv57, v39, a7, t3, t0, fv46, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm] move: fa6 <- fv56
// [Asm] defined: fa6 is F
// [Asm] skip edge 18 -> 37
// [Asm] defs: [fa7]
// [Asm] live_set: [v3, v40, t1, v42, fv55, v41, a1, fv35, fa1, v51, fa2, zero, v50, fa6, a4, a6, v4, fv45, v53, fv32, a5, fv56, fa4, a0, fv54, a2, v52, a3, fv57, v39, fa7, a7, t3, t0, fv46, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm] move: fa7 <- fv57
// [Asm] defined: fa7 is F
// [Asm] skip edge 19 -> 38
// [Asm] defs: [ft0]
// [Asm] live_set: [v3, v40, t1, v42, fv55, v41, ft0, a1, fv35, fa1, v51, fa2, zero, v50, fa6, a4, a6, v4, fv45, v53, fv56, a5, a0, fa4, fv54, a2, v52, a3, fv57, v39, fa7, a7, t3, t0, fv46, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm] move: ft0 <- fv32
// [Asm] defined: ft0 is F
// [Asm] defs: [ft1]
// [Asm] live_set: [v3, v40, t1, v42, fv55, v41, ft0, ft1, a1, fv35, fa1, v51, fa2, zero, v50, fa6, a4, a6, v4, fv45, v53, fv56, a5, a0, fa4, fv54, a2, v52, a3, fv57, v39, fa7, a7, t3, t0, fv46, fa5, fa3, fv43, fv34, fa0, t2, fv44, v2]
// [Asm] move: ft1 <- fv33
// [Asm] defined: ft1 is F
// [Asm] defs: [ft2]
// [Asm] live_set: [v3, v40, t1, v42, fv55, v41, ft0, ft1, a1, fv35, fa1, v51, fa2, zero, v50, fa6, a4, a6, v4, fv45, v53, fv56, a5, a0, fa4, fv54, ft2, a2, v52, a3, fv57, v39, fa7, a7, t3, t0, fv46, fa5, fa3, fv43, fa0, t2, fv44, v2]
// [Asm] move: ft2 <- fv34
// [Asm] defined: ft2 is F
// [Asm] defs: [ft3]
// [Asm] live_set: [v3, v40, t1, v42, fv55, v41, ft0, ft1, a1, fa1, v51, fa2, zero, v50, fa6, a4, a6, v4, fv45, v53, fv56, a5, a0, fa4, fv54, ft2, a2, v52, a3, fv57, v39, fa7, a7, t3, t0, fv46, fa5, fa3, ft3, fv43, fa0, t2, fv44, v2]
// [Asm] move: ft3 <- fv35
// [Asm] defined: ft3 is F
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [v3, v40, v42, fv55, v41, v51, zero, v50, v4, fv45, v53, fv56, a0, fv54, v52, fv57, v39, fv46, fv43, fv44, v2]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v58]
// [Asm] live_set: [v3, v40, v58, v42, fv55, v41, v51, zero, v50, v4, fv45, v53, fv56, fv54, v52, fv57, v39, fv46, fv43, fv44, v2]
// [Asm] move: v58 <- a0
// [Asm] defined: v58 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v40, v58, v42, fv55, v41, v51, zero, v50, v4, fv45, v53, fv56, fv54, v52, fv57, v39, fv46, fv43, fv44, v2]
// [Asm] defs: [v59]
// [Asm] live_set: [v3, v40, v58, v42, fv55, v41, v51, zero, v50, v4, v59, fv45, v53, fv56, fv54, v52, fv57, v39, fv46, fv43, fv44, v2]
// [Asm] defined: v59 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v3, v40, v42, fv55, v41, v60, v51, zero, v50, v4, v59, fv45, v53, fv56, fv54, v52, fv57, v39, fv46, fv43, fv44, v2]
// [Asm] defined: v60 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v3, v40, v42, fv55, v41, v60, v51, zero, v50, v4, v59, fv45, v53, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm] defined: v61 is X
// [Asm] defs: [v62]
// [Asm] live_set: [v3, v40, v42, fv55, v41, v60, v51, zero, v50, v4, v59, v62, fv45, v53, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm] defined: v62 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v3, v40, v42, fv55, v41, v60, v51, v63, zero, v50, v4, v59, v62, fv45, v53, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm] defined: v63 is X
// [Asm] defs: [v64]
// [Asm] live_set: [v3, v40, v42, fv55, v41, v64, v60, v51, v63, zero, v50, v4, v62, fv45, v53, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm] defined: v64 is X
// [Asm] defs: [fv65]
// [Asm] live_set: [v3, v40, v42, fv55, v41, v64, v60, v51, v63, zero, v50, v4, v62, fv45, v53, fv65, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm] defined: fv65 is F
// [Asm] defs: [fv66]
// [Asm] live_set: [v3, v40, v42, fv55, v41, v64, v60, v51, v63, zero, v50, v4, v62, fv45, v53, fv66, fv65, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm] defined: fv66 is F
// [Asm] defs: [fv67]
// [Asm] live_set: [v3, v40, fv67, v42, fv55, v41, v64, v60, v51, v63, zero, v50, v4, v62, fv45, v53, fv66, fv65, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm] defined: fv67 is F
// [Asm] defs: [fv68]
// [Asm] live_set: [v3, v40, fv67, v42, fv55, v41, v64, v51, v63, zero, v50, v4, fv68, v62, fv45, v53, fv66, fv65, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm] defined: fv68 is F
// [Asm] defs: []
// [Asm] live_set: [v3, v40, fv67, v42, fv55, v41, v64, v51, v63, zero, v50, v4, fv68, v62, fv45, v53, fv66, fv65, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v40, fv67, v42, fv55, v41, v64, v51, v63, zero, v50, v4, fv68, v62, fv45, v53, fv66, fv65, fv56, a0, fv54, v52, fv57, fv46, fv43, v61, fv44, v2]
// [Asm] move: a0 <- v39
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, fv67, v42, fv55, v41, a1, v64, v51, v63, zero, v50, v4, fv68, v62, fv45, v53, fv66, fv65, fv56, a0, fv54, v52, fv57, fv46, fv43, v61, fv44, v2]
// [Asm] move: a1 <- v40
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v3, fv67, v42, fv55, a1, v64, v51, v63, zero, v50, v4, fv68, v62, fv45, v53, fv66, fv65, fv56, a0, fv54, a2, v52, fv57, fv46, fv43, v61, fv44, v2]
// [Asm] move: a2 <- v41
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v3, fv67, fv55, a1, v64, v51, v63, zero, v50, v4, fv68, v62, fv45, v53, fv66, fv65, fv56, a0, fv54, a2, a3, v52, fv57, fv46, fv43, v61, fv44, v2]
// [Asm] move: a3 <- v42
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v3, fv67, fv55, a1, v64, v51, v63, zero, a4, v4, fv68, v62, fv45, v53, fv66, fv65, fv56, a0, fv54, a2, a3, v52, fv57, fv46, fv43, v61, fv44, v2]
// [Asm] move: a4 <- v50
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v3, fv67, fv55, a1, v64, v63, zero, a4, v4, fv68, v62, fv45, v53, a5, fv66, fv65, fv56, a0, fv54, a2, a3, v52, fv57, fv46, fv43, v61, fv44, v2]
// [Asm] move: a5 <- v51
// [Asm] defined: a5 is X
// [Asm] defs: [a6]
// [Asm] live_set: [v3, fv67, fv55, a1, v64, v63, zero, a4, a6, v4, fv68, v62, fv45, v53, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, fv46, fv43, v61, fv44, v2]
// [Asm] move: a6 <- v52
// [Asm] defined: a6 is X
// [Asm] defs: [a7]
// [Asm] live_set: [v3, fv67, fv55, a1, v64, v63, zero, a4, a6, v4, fv68, v62, fv45, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, fv46, fv43, v61, fv44, v2]
// [Asm] move: a7 <- v53
// [Asm] defined: a7 is X
// [Asm] defs: [t0]
// [Asm] live_set: [v3, fv67, fv55, a1, v64, v63, zero, a4, a6, v4, fv68, v62, fv45, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, t0, fv46, fv43, fv44, v2]
// [Asm] move: t0 <- v61
// [Asm] defined: t0 is X
// [Asm] defs: [t1]
// [Asm] live_set: [v3, t1, fv67, fv55, a1, v64, v63, zero, a4, a6, v4, fv68, fv45, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, t0, fv46, fv43, fv44, v2]
// [Asm] move: t1 <- v62
// [Asm] defined: t1 is X
// [Asm] defs: [t2]
// [Asm] live_set: [v3, t1, fv67, fv55, a1, v64, zero, a4, a6, v4, fv68, fv45, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, t0, fv46, fv43, t2, fv44, v2]
// [Asm] move: t2 <- v63
// [Asm] defined: t2 is X
// [Asm] defs: [t3]
// [Asm] live_set: [v3, t1, fv67, fv55, a1, zero, a4, a6, v4, fv68, fv45, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, t3, t0, fv46, fv43, t2, fv44, v2]
// [Asm] move: t3 <- v64
// [Asm] defined: t3 is X
// [Asm] defs: [fa0]
// [Asm] live_set: [v3, t1, fv67, fv55, a1, zero, a4, a6, v4, fv68, fv45, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, t3, t0, fv46, fa0, t2, fv44, v2]
// [Asm] move: fa0 <- fv43
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [v3, t1, fv67, fv55, a1, fa1, zero, a4, a6, v4, fv68, fv45, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, t3, t0, fv46, fa0, t2, v2]
// [Asm] move: fa1 <- fv44
// [Asm] defined: fa1 is F
// [Asm] defs: [fa2]
// [Asm] live_set: [v3, t1, fv67, fv55, a1, fa1, fa2, zero, a4, a6, v4, fv68, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, t3, t0, fv46, fa0, t2, v2]
// [Asm] move: fa2 <- fv45
// [Asm] defined: fa2 is F
// [Asm] defs: [fa3]
// [Asm] live_set: [v3, t1, fv67, fv55, a1, fa1, fa2, zero, a4, a6, v4, fv68, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, t3, t0, fa3, fa0, t2, v2]
// [Asm] move: fa3 <- fv46
// [Asm] defined: fa3 is F
// [Asm] defs: [fa4]
// [Asm] live_set: [v3, t1, fv67, fv55, a1, fa1, fa2, zero, a4, a6, v4, fv68, a5, fv66, fv65, fv56, a0, fa4, a2, a3, fv57, a7, t3, t0, fa3, fa0, t2, v2]
// [Asm] move: fa4 <- fv54
// [Asm] defined: fa4 is F
// [Asm] defs: [fa5]
// [Asm] live_set: [v3, t1, fv67, a1, fa1, fa2, zero, a4, a6, v4, fv68, a5, fv66, fv65, fv56, a0, fa4, a2, a3, fv57, a7, t3, t0, fa5, fa3, fa0, t2, v2]
// [Asm] move: fa5 <- fv55
// [Asm] defined: fa5 is F
// [Asm] defs: [fa6]
// [Asm] live_set: [v3, t1, fv67, a1, fa1, fa2, zero, fa6, a4, a6, v4, fv68, a5, fv66, fv65, fa4, a0, a2, a3, fv57, a7, t3, t0, fa5, fa3, fa0, t2, v2]
// [Asm] move: fa6 <- fv56
// [Asm] defined: fa6 is F
// [Asm] defs: [fa7]
// [Asm] live_set: [v3, t1, fv67, a1, fa1, fa2, zero, fa6, a4, a6, v4, fv68, a5, fv66, fv65, fa4, a0, a2, a3, fa7, a7, t3, t0, fa5, fa3, fa0, t2, v2]
// [Asm] move: fa7 <- fv57
// [Asm] defined: fa7 is F
// [Asm] defs: [ft0]
// [Asm] live_set: [v3, t1, fv67, ft0, a1, fa1, fa2, zero, fa6, a4, a6, v4, fv68, a5, fv66, a0, fa4, a2, a3, fa7, a7, t3, t0, fa5, fa3, fa0, t2, v2]
// [Asm] move: ft0 <- fv65
// [Asm] defined: ft0 is F
// [Asm] defs: [ft1]
// [Asm] live_set: [v3, t1, fv67, ft0, ft1, a1, fa1, fa2, zero, fa6, a4, a6, v4, fv68, a5, fa4, a0, a2, a3, fa7, a7, t3, t0, fa5, fa3, fa0, t2, v2]
// [Asm] move: ft1 <- fv66
// [Asm] defined: ft1 is F
// [Asm] defs: [ft2]
// [Asm] live_set: [v3, t1, ft0, ft1, a1, fa1, fa2, zero, fa6, a4, a6, v4, fv68, a5, fa4, a0, ft2, a2, a3, fa7, a7, t3, t0, fa5, fa3, fa0, t2, v2]
// [Asm] move: ft2 <- fv67
// [Asm] defined: ft2 is F
// [Asm] defs: [ft3]
// [Asm] live_set: [v3, t1, ft0, ft1, a1, fa1, fa2, zero, fa6, a4, a6, v4, a5, fa4, a0, ft2, a2, a3, fa7, a7, t3, t0, fa5, fa3, ft3, fa0, t2, v2]
// [Asm] move: ft3 <- fv68
// [Asm] defined: ft3 is F
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [v3, zero, a0, v4, v2]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v69]
// [Asm] live_set: [v3, v69, zero, v4, v2]
// [Asm] move: v69 <- a0
// [Asm] defined: v69 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v69, zero, v4, v2]
// [Asm] defs: [v70]
// [Asm] live_set: [v3, v69, zero, v4, v70, v2]
// [Asm] defined: v70 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v3, v71, zero, v4, v70, v2]
// [Asm] defined: v71 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v71, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] defs: [v74]
// [Asm] live_set: [v4, v74, zero, v3]
// [Asm] defined: v74 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v74, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v3]
// [Asm] move: a0 <- v74
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0]
// [Asm] move: a1 <- v3
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move: a2 <- v4
// [Asm] defined: a2 is X
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v75]
// [Asm] live_set: [zero]
// [Asm] move: v75 <- a0
// [Asm] defined: v75 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v76]
// [Asm] live_set: [zero, v76]
// [Asm] move: v76 <- zero
// [Asm] defined: v76 is X
// [Asm] skip edge 2 -> 0
// [Asm] Label("stress.454") clobbered_x: @hashset.of([s7, t1, a0, s1, s2, s5, a2, a1, s3, a3, s10, s6, t3, t0, s8, s9, s4, a4, s0, t2])
// [Asm] Label("stress.454") clobbered_f: @hashset.of([fs6, fs0, fs7, ft2, ft1, ft0, fa1, fs2, fa2, fa3, fs9, ft3, fs11, fa0, fs4, fs5, fs3, fs1, fs10, fs8])
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v76, zero ->   mv a0, zero
// [Asm] subst   j .stress.454_3 ->   j .stress.454_3
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   mv v4, a2 ->   mv s2, a2
// [Asm] subst   li v145, 3 ->   li a0, 3
// [Asm] subst   blt v145, v2, .stress.454_2 ->   blt a0, s0, .stress.454_2
// [Asm] subst   ld v6, 0(v4) ->   ld a3, 0(s2)
// [Asm] subst   lw v7, 0(v6) ->   lw a0, 0(a3)
// [Asm] subst   lw v8, 4(v6) ->   lw a1, 4(a3)
// [Asm] subst   lw v9, 8(v6) ->   lw a2, 8(a3)
// [Asm] subst   lw v10, 12(v6) ->   lw a3, 12(a3)
// [Asm] subst   ld v11, 8(v4) ->   ld a4, 8(s2)
// [Asm] subst   lw v12, 0(v11) ->   lw s3, 0(a4)
// [Asm] subst   lw v13, 4(v11) ->   lw s4, 4(a4)
// [Asm] subst   lw v14, 8(v11) ->   lw s5, 8(a4)
// [Asm] subst   lw v15, 12(v11) ->   lw s6, 12(a4)
// [Asm] subst   ld v16, 16(v4) ->   ld a4, 16(s2)
// [Asm] subst   lw v17, 0(v16) ->   lw s7, 0(a4)
// [Asm] subst   lw v18, 4(v16) ->   lw s8, 4(a4)
// [Asm] subst   lw v19, 8(v16) ->   lw s9, 8(a4)
// [Asm] subst   lw v20, 12(v16) ->   lw s10, 12(a4)
// [Asm] subst   ld v21, 0(v3) ->   ld a4, 0(s1)
// [Asm] subst   fld fv22, 0(v21) ->   fld fa0, 0(a4)
// [Asm] subst   fld fv23, 8(v21) ->   fld fa1, 8(a4)
// [Asm] subst   fld fv24, 16(v21) ->   fld fa2, 16(a4)
// [Asm] subst   fld fv25, 24(v21) ->   fld fa3, 24(a4)
// [Asm] subst   ld v26, 8(v3) ->   ld a4, 8(s1)
// [Asm] subst   fld fv27, 0(v26) ->   fld fs0, 0(a4)
// [Asm] subst   fld fv28, 8(v26) ->   fld fs1, 8(a4)
// [Asm] subst   fld fv29, 16(v26) ->   fld fs2, 16(a4)
// [Asm] subst   fld fv30, 24(v26) ->   fld fs3, 24(a4)
// [Asm] subst   ld v31, 16(v3) ->   ld a4, 16(s1)
// [Asm] subst   fld fv32, 0(v31) ->   fld fs4, 0(a4)
// [Asm] subst   fld fv33, 8(v31) ->   fld fs5, 8(a4)
// [Asm] subst   fld fv34, 16(v31) ->   fld fs6, 16(a4)
// [Asm] subst   fld fv35, 24(v31) ->   fld fs7, 24(a4)
// [Asm] subst   mv a4, v12 ->   mv a4, s3
// [Asm] subst   mv a5, v13 ->   mv a5, s4
// [Asm] subst   mv a6, v14 ->   mv a6, s5
// [Asm] subst   mv a7, v15 ->   mv a7, s6
// [Asm] subst   mv t0, v17 ->   mv t0, s7
// [Asm] subst   mv t1, v18 ->   mv t1, s8
// [Asm] subst   mv t2, v19 ->   mv t2, s9
// [Asm] subst   mv t3, v20 ->   mv t3, s10
// [Asm] subst   fmv.d fa4, fv27 ->   fmv.d fa4, fs0
// [Asm] subst   fmv.d fa5, fv28 ->   fmv.d fa5, fs1
// [Asm] subst   fmv.d fa6, fv29 ->   fmv.d fa6, fs2
// [Asm] subst   fmv.d fa7, fv30 ->   fmv.d fa7, fs3
// [Asm] subst   fmv.d ft0, fv32 ->   fmv.d ft0, fs4
// [Asm] subst   fmv.d ft1, fv33 ->   fmv.d ft1, fs5
// [Asm] subst   fmv.d ft2, fv34 ->   fmv.d ft2, fs6
// [Asm] subst   fmv.d ft3, fv35 ->   fmv.d ft3, fs7
// [Asm] subst   call fma_mixed.67 ->   call fma_mixed.67
// [Asm] subst   ld v37, 0(v36) ->   ld a1, 0(a0)
// [Asm] subst   ld v38, 8(v36) ->   ld a0, 8(a0)
// [Asm] subst   lw v39, 0(v37) ->   lw t5, 0(a1)
// [Asm] subst   lw v40, 4(v37) ->   lw t5, 4(a1)
// [Asm] subst   lw v41, 8(v37) ->   lw t5, 8(a1)
// [Asm] subst   lw v42, 12(v37) ->   lw t5, 12(a1)
// [Asm] subst   fld fv43, 0(v38) ->   fld fs8, 0(a0)
// [Asm] subst   fld fv44, 8(v38) ->   fld fs9, 8(a0)
// [Asm] subst   fld fv45, 16(v38) ->   fld fs10, 16(a0)
// [Asm] subst   fld fv46, 24(v38) ->   fld fs11, 24(a0)
// [Asm] subst   mv a0, v39 ->   mv a0, t5
// [Asm] subst   mv a1, v40 ->   mv a1, t5
// [Asm] subst   mv a2, v41 ->   mv a2, t5
// [Asm] subst   mv a3, v42 ->   mv a3, t5
// [Asm] subst   mv a4, v12 ->   mv a4, s3
// [Asm] subst   mv a5, v13 ->   mv a5, s4
// [Asm] subst   mv a6, v14 ->   mv a6, s5
// [Asm] subst   mv a7, v15 ->   mv a7, s6
// [Asm] subst   mv t0, v17 ->   mv t0, s7
// [Asm] subst   mv t1, v18 ->   mv t1, s8
// [Asm] subst   mv t2, v19 ->   mv t2, s9
// [Asm] subst   mv t3, v20 ->   mv t3, s10
// [Asm] subst   fmv.d fa0, fv43 ->   fmv.d fa0, fs8
// [Asm] subst   fmv.d fa1, fv44 ->   fmv.d fa1, fs9
// [Asm] subst   fmv.d fa2, fv45 ->   fmv.d fa2, fs10
// [Asm] subst   fmv.d fa3, fv46 ->   fmv.d fa3, fs11
// [Asm] subst   fmv.d fa4, fv27 ->   fmv.d fa4, fs0
// [Asm] subst   fmv.d fa5, fv28 ->   fmv.d fa5, fs1
// [Asm] subst   fmv.d fa6, fv29 ->   fmv.d fa6, fs2
// [Asm] subst   fmv.d fa7, fv30 ->   fmv.d fa7, fs3
// [Asm] subst   fmv.d ft0, fv32 ->   fmv.d ft0, fs4
// [Asm] subst   fmv.d ft1, fv33 ->   fmv.d ft1, fs5
// [Asm] subst   fmv.d ft2, fv34 ->   fmv.d ft2, fs6
// [Asm] subst   fmv.d ft3, fv35 ->   fmv.d ft3, fs7
// [Asm] subst   call fma_mixed.67 ->   call fma_mixed.67
// [Asm] subst   ld v48, 0(v47) ->   ld a1, 0(a0)
// [Asm] subst   ld v49, 8(v47) ->   ld a0, 8(a0)
// [Asm] subst   lw v50, 0(v48) ->   lw s3, 0(a1)
// [Asm] subst   lw v51, 4(v48) ->   lw s4, 4(a1)
// [Asm] subst   lw v52, 8(v48) ->   lw s5, 8(a1)
// [Asm] subst   lw v53, 12(v48) ->   lw s6, 12(a1)
// [Asm] subst   fld fv54, 0(v49) ->   fld fs0, 0(a0)
// [Asm] subst   fld fv55, 8(v49) ->   fld fs1, 8(a0)
// [Asm] subst   fld fv56, 16(v49) ->   fld fs2, 16(a0)
// [Asm] subst   fld fv57, 24(v49) ->   fld fs3, 24(a0)
// [Asm] subst   mv a0, v39 ->   mv a0, t5
// [Asm] subst   mv a1, v40 ->   mv a1, t5
// [Asm] subst   mv a2, v41 ->   mv a2, t5
// [Asm] subst   mv a3, v42 ->   mv a3, t5
// [Asm] subst   mv a4, v50 ->   mv a4, s3
// [Asm] subst   mv a5, v51 ->   mv a5, s4
// [Asm] subst   mv a6, v52 ->   mv a6, s5
// [Asm] subst   mv a7, v53 ->   mv a7, s6
// [Asm] subst   mv t0, v17 ->   mv t0, s7
// [Asm] subst   mv t1, v18 ->   mv t1, s8
// [Asm] subst   mv t2, v19 ->   mv t2, s9
// [Asm] subst   mv t3, v20 ->   mv t3, s10
// [Asm] subst   fmv.d fa0, fv43 ->   fmv.d fa0, fs8
// [Asm] subst   fmv.d fa1, fv44 ->   fmv.d fa1, fs9
// [Asm] subst   fmv.d fa2, fv45 ->   fmv.d fa2, fs10
// [Asm] subst   fmv.d fa3, fv46 ->   fmv.d fa3, fs11
// [Asm] subst   fmv.d fa4, fv54 ->   fmv.d fa4, fs0
// [Asm] subst   fmv.d fa5, fv55 ->   fmv.d fa5, fs1
// [Asm] subst   fmv.d fa6, fv56 ->   fmv.d fa6, fs2
// [Asm] subst   fmv.d fa7, fv57 ->   fmv.d fa7, fs3
// [Asm] subst   fmv.d ft0, fv32 ->   fmv.d ft0, fs4
// [Asm] subst   fmv.d ft1, fv33 ->   fmv.d ft1, fs5
// [Asm] subst   fmv.d ft2, fv34 ->   fmv.d ft2, fs6
// [Asm] subst   fmv.d ft3, fv35 ->   fmv.d ft3, fs7
// [Asm] subst   call fma_mixed.67 ->   call fma_mixed.67
// [Asm] subst   ld v59, 0(v58) ->   ld a1, 0(a0)
// [Asm] subst   ld v60, 8(v58) ->   ld a0, 8(a0)
// [Asm] subst   lw v61, 0(v59) ->   lw t0, 0(a1)
// [Asm] subst   lw v62, 4(v59) ->   lw t1, 4(a1)
// [Asm] subst   lw v63, 8(v59) ->   lw t2, 8(a1)
// [Asm] subst   lw v64, 12(v59) ->   lw t3, 12(a1)
// [Asm] subst   fld fv65, 0(v60) ->   fld ft0, 0(a0)
// [Asm] subst   fld fv66, 8(v60) ->   fld ft1, 8(a0)
// [Asm] subst   fld fv67, 16(v60) ->   fld ft2, 16(a0)
// [Asm] subst   fld fv68, 24(v60) ->   fld ft3, 24(a0)
// [Asm] subst   mv a0, v39 ->   mv a0, t5
// [Asm] subst   mv a1, v40 ->   mv a1, t5
// [Asm] subst   mv a2, v41 ->   mv a2, t5
// [Asm] subst   mv a3, v42 ->   mv a3, t5
// [Asm] subst   mv a4, v50 ->   mv a4, s3
// [Asm] subst   mv a5, v51 ->   mv a5, s4
// [Asm] subst   mv a6, v52 ->   mv a6, s5
// [Asm] subst   mv a7, v53 ->   mv a7, s6
// [Asm] subst   fmv.d fa0, fv43 ->   fmv.d fa0, fs8
// [Asm] subst   fmv.d fa1, fv44 ->   fmv.d fa1, fs9
// [Asm] subst   fmv.d fa2, fv45 ->   fmv.d fa2, fs10
// [Asm] subst   fmv.d fa3, fv46 ->   fmv.d fa3, fs11
// [Asm] subst   fmv.d fa4, fv54 ->   fmv.d fa4, fs0
// [Asm] subst   fmv.d fa5, fv55 ->   fmv.d fa5, fs1
// [Asm] subst   fmv.d fa6, fv56 ->   fmv.d fa6, fs2
// [Asm] subst   fmv.d fa7, fv57 ->   fmv.d fa7, fs3
// [Asm] subst   call fma_mixed.67 ->   call fma_mixed.67
// [Asm] subst   ld v70, 0(v69) ->   ld a1, 0(a0)
// [Asm] subst   ld v71, 8(v69) ->   ld a0, 8(a0)
// [Asm] subst   sd v70, 0(v4) ->   sd a1, 0(s2)
// [Asm] subst   sd v71, 0(v3) ->   sd a0, 0(s1)
// [Asm] subst   addi v74, v2, 1 ->   addi a0, s0, 1
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   mv a2, v4 ->   mv a2, s2
// [Asm] subst   call stress.454 ->   call stress.454
// [Asm] subst   mv v76, zero ->   mv a0, zero
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: FnParam(fref=f0, fpref=$f.20) -> fv22, Insn(iref=%15) -> fv44, FnParam(fref=f0, fpref=$f.19) -> fv21, FnParam(fref=f0, fpref=$f.9) -> v11, FnParam(fref=f0, fpref=$f.5) -> v7, Insn(iref=%8) -> v37, FnParam(fref=f0, fpref=$f.7) -> v9, Insn(iref=%10) -> fv39, Insn(iref=%14) -> fv43, FnParam(fref=f0, fpref=$f.10) -> v12, Insn(iref=%4) -> v33, Mem(fref=f0, mref=m1) -> v27, FnParam(fref=f0, fpref=$f.23) -> fv25, Insn(iref=%1) -> v30, Insn(iref=%11) -> fv40, Insn(iref=%6) -> v35, FnParam(fref=f0, fpref=$f.12) -> fv14, FnParam(fref=f0, fpref=$f.15) -> fv17, Self(fref=f0) -> v0, Insn(iref=%9) -> fv38, Insn(iref=%16) -> fv45, Mem(fref=f0, mref=m2) -> v28, FnParam(fref=f0, fpref=$f.3) -> v5, FnParam(fref=f0, fpref=$f.13) -> fv15, FnParam(fref=f0, fpref=$f.11) -> v13, FnParam(fref=f0, fpref=$f.22) -> fv24, FnParam(fref=f0, fpref=$f.0) -> v2, FnParam(fref=f0, fpref=$f.6) -> v8, Insn(iref=%5) -> v34, Insn(iref=%0) -> v29, Insn(iref=%3) -> v32, Insn(iref=%18) -> v47, Insn(iref=%13) -> fv42, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.17) -> fv19, FnParam(fref=f0, fpref=$f.2) -> v4, Insn(iref=%7) -> v36, Insn(iref=%17) -> v46, FnParam(fref=f0, fpref=$f.14) -> fv16, FnParam(fref=f0, fpref=$f.18) -> fv20, Mem(fref=f0, mref=m0) -> v26, Insn(iref=%2) -> v31, FnParam(fref=f0, fpref=$f.4) -> v6, FnParam(fref=f0, fpref=$f.21) -> fv23, FnParam(fref=f0, fpref=$f.16) -> fv18, FnParam(fref=f0, fpref=$f.8) -> v10, Insn(iref=%12) -> fv41
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Double, op=Mul, args=[FnParam(fref=f0, fpref=$f.15), FnParam(fref=f0, fpref=$f.19)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[FnParam(fref=f0, fpref=$f.14), FnParam(fref=f0, fpref=$f.18)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[FnParam(fref=f0, fpref=$f.13), FnParam(fref=f0, fpref=$f.17)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[FnParam(fref=f0, fpref=$f.12), FnParam(fref=f0, fpref=$f.16)])
// [Asm] defs: []
// [Asm] live_set: [t1, a5, fa4, a0, ft2, ft1, ft0, a2, a1, s11, a3, fa1, fa7, t3, a7, t0, fa5, fa2, fa3, fa6, ft3, a4, fa0, a6, t2]
// [Asm] defs: [v2]
// [Asm] live_set: [t1, a5, fa4, ft2, ft1, ft0, a2, a1, s11, a3, fa1, fa7, t3, a7, t0, fa5, fa2, fa3, fa6, ft3, a4, fa0, a6, t2, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, t1, a5, fa4, ft2, ft1, ft0, a2, a3, s11, fa1, fa7, t3, a7, t0, fa5, fa2, fa3, fa6, ft3, a4, fa0, a6, t2, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, t1, a5, fa4, ft2, ft1, ft0, s11, a3, fa1, fa7, t3, a7, t0, fa5, fa2, fa3, fa6, ft3, a4, fa0, a6, v4, t2, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, t1, v5, a5, fa4, ft2, ft1, ft0, s11, fa1, fa7, t3, a7, t0, fa5, fa2, fa3, fa6, ft3, a4, fa0, a6, v4, t2, v3]
// [Asm] move: v5 <- a3
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, t1, v5, a5, fa4, ft2, ft1, ft0, s11, fa1, fa7, t3, a7, t0, fa5, fa2, fa3, fa6, ft3, fa0, a6, v4, v6, t2, v3]
// [Asm] move: v6 <- a4
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, t1, v5, fa4, v7, ft2, ft1, ft0, s11, fa1, fa7, t3, a7, t0, fa5, fa2, fa3, fa6, ft3, fa0, a6, v4, v6, t2, v3]
// [Asm] move: v7 <- a5
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, t1, v5, fa4, v7, ft2, ft1, ft0, s11, fa1, fa7, t3, a7, t0, fa5, fa2, fa3, fa6, ft3, fa0, v8, v4, t2, v6, v3]
// [Asm] move: v8 <- a6
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, t1, v5, fa4, v7, ft2, ft1, ft0, s11, v9, fa1, fa7, t3, t0, fa5, fa3, fa2, ft3, fa6, v8, fa0, v4, v6, t2, v3]
// [Asm] move: v9 <- a7
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, t1, v5, v10, fa4, v7, ft2, ft1, ft0, s11, v9, fa1, fa7, t3, fa5, fa3, fa2, ft3, fa6, v8, fa0, v4, v6, t2, v3]
// [Asm] move: v10 <- t0
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, v5, v10, fa4, v7, ft2, ft1, ft0, s11, v9, fa1, fa7, t3, fa5, fa3, fa2, ft3, fa6, v8, fa0, v4, v6, t2, v3]
// [Asm] move: v11 <- t1
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v2, v11, v5, v10, fa4, v7, ft2, ft1, ft0, v12, s11, v9, fa1, fa7, t3, fa5, fa3, fa2, ft3, fa6, v8, fa0, v4, v6, v3]
// [Asm] move: v12 <- t2
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v11, v5, v10, v13, fa4, v7, ft2, ft1, ft0, v12, s11, v9, fa1, fa7, fa5, fa3, fa2, ft3, fa6, v8, fa0, v4, v6, v3]
// [Asm] move: v13 <- t3
// [Asm] defined: v13 is X
// [Asm] defs: [fv14]
// [Asm] live_set: [v2, v11, v5, v10, v13, fa4, v7, ft2, ft1, ft0, v12, fv14, s11, v9, fa1, fa7, fa5, fa3, fa2, ft3, fa6, v8, v4, v6, v3]
// [Asm] move: fv14 <- fa0
// [Asm] defined: fv14 is F
// [Asm] defs: [fv15]
// [Asm] live_set: [v2, v11, v5, v10, v13, fa4, v7, ft2, ft1, ft0, v12, fv14, s11, fv15, v9, fa7, fa5, fa3, fa2, ft3, fa6, v8, v4, v6, v3]
// [Asm] move: fv15 <- fa1
// [Asm] defined: fv15 is F
// [Asm] defs: [fv16]
// [Asm] live_set: [v2, v11, v5, v10, v13, fa4, v7, ft2, ft1, ft0, v12, fv14, s11, fv15, fv16, v9, fa7, fa5, fa3, ft3, fa6, v8, v4, v6, v3]
// [Asm] move: fv16 <- fa2
// [Asm] defined: fv16 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [v2, v11, v5, v10, v13, fa4, v7, ft2, ft1, ft0, v12, fv14, s11, fv15, fv16, v9, fa7, fa5, ft3, fa6, v8, v4, v6, fv17, v3]
// [Asm] move: fv17 <- fa3
// [Asm] defined: fv17 is F
// [Asm] defs: [fv18]
// [Asm] live_set: [v2, v11, v5, v10, v13, v7, ft2, ft1, ft0, v12, fv14, s11, fv15, fv16, v9, fa7, fa5, ft3, fa6, v8, v4, v6, fv18, fv17, v3]
// [Asm] move: fv18 <- fa4
// [Asm] defined: fv18 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [v2, v11, v5, v10, v13, v7, fv19, ft2, ft1, ft0, v12, fv14, s11, fv15, fv16, v9, fa7, ft3, fa6, v8, v4, v6, fv18, fv17, v3]
// [Asm] move: fv19 <- fa5
// [Asm] defined: fv19 is F
// [Asm] defs: [fv20]
// [Asm] live_set: [v2, v11, v5, v10, v13, fv20, v7, fv19, ft2, ft1, ft0, v12, fv14, s11, fv15, fv16, v9, fa7, ft3, v8, v4, v6, fv18, fv17, v3]
// [Asm] move: fv20 <- fa6
// [Asm] defined: fv20 is F
// [Asm] defs: [fv21]
// [Asm] live_set: [v2, v11, v5, v10, v13, fv20, v7, fv19, ft2, ft1, ft0, v12, fv14, s11, fv15, fv16, v9, ft3, v8, v4, v6, fv18, fv17, fv21, v3]
// [Asm] move: fv21 <- fa7
// [Asm] defined: fv21 is F
// [Asm] defs: [fv22]
// [Asm] live_set: [v2, v11, v5, v10, v13, fv20, v7, fv19, ft2, ft1, s11, v12, fv14, fv16, fv15, v9, fv22, ft3, v8, v4, v6, fv18, fv17, fv21, v3]
// [Asm] move: fv22 <- ft0
// [Asm] defined: fv22 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [v2, v11, fv23, v5, v10, v13, fv20, v7, fv19, ft2, fv14, s11, v12, fv15, fv16, v9, fv22, ft3, v8, v4, v6, fv18, fv17, fv21, v3]
// [Asm] move: fv23 <- ft1
// [Asm] defined: fv23 is F
// [Asm] defs: [fv24]
// [Asm] live_set: [v2, v11, fv24, fv23, v5, v10, v13, fv20, v7, fv19, fv14, s11, v12, fv15, fv16, v9, fv22, ft3, v8, v4, v6, fv18, fv17, fv21, v3]
// [Asm] move: fv24 <- ft2
// [Asm] defined: fv24 is F
// [Asm] defs: [fv25]
// [Asm] live_set: [v2, v11, fv24, fv23, v5, v10, v13, fv20, v7, fv19, fv14, s11, v12, fv15, fv16, v9, fv22, fv25, v8, v4, v6, fv18, fv17, fv21, v3]
// [Asm] move: fv25 <- ft3
// [Asm] defined: fv25 is F
// [Asm] defs: [v29]
// [Asm] live_set: [v11, fv23, fv24, v5, v10, v13, fv20, v7, fv19, fv14, s11, v12, fv15, fv16, v9, fv22, fv25, v29, v8, v4, fv18, fv17, fv21, v3]
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v11, fv23, fv24, v5, v13, v30, fv20, v7, fv19, fv14, s11, v12, fv15, fv16, v9, fv22, fv25, v8, v4, fv18, fv17, fv21, v3]
// [Asm] defined: v30 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v11, fv23, fv24, v5, v13, v30, fv20, fv19, fv14, s11, v12, fv15, fv16, v31, v9, fv22, fv25, v8, v4, fv18, fv17, fv21]
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [fv23, fv24, v5, v13, v30, fv20, fv19, v32, fv14, s11, v12, fv15, fv16, v9, fv22, fv25, v8, v4, fv18, fv17, fv21]
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [fv23, fv24, v5, v13, v30, fv20, fv19, v32, fv14, s11, v12, fv15, fv16, v33, v9, fv22, fv25, fv18, fv17, fv21]
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [fv23, fv24, v5, v13, v30, fv20, fv19, v32, fv14, s11, fv16, fv15, v9, fv22, fv25, fv18, fv17, v34, fv21]
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [fv23, fv24, v13, v30, fv20, fv19, v32, fv14, s11, fv16, fv15, fv22, fv25, v35, fv18, fv17, v34, fv21]
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [fv23, fv24, v30, fv20, v36, fv19, v32, fv14, s11, fv16, fv15, fv22, fv25, fv18, fv17, v34, fv21]
// [Asm] defined: v36 is X
// [Asm] defs: [v26]
// [Asm] live_set: [fv23, fv24, v26, v30, fv20, v36, fv19, v32, fv14, fv15, fv16, fv22, fv25, fv18, fv17, v34, fv21]
// [Asm] defined: v26 is X
// [Asm] defs: [s11]
// [Asm] live_set: [fv23, fv24, v26, v30, fv20, v36, fv19, v32, s11, fv14, fv15, fv16, fv22, fv25, fv18, fv17, v34, fv21]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [fv23, fv24, v26, fv20, v36, fv19, v32, s11, fv14, fv15, fv16, fv22, fv25, fv18, fv17, v34, fv21]
// [Asm] defs: []
// [Asm] live_set: [fv23, fv24, v26, fv20, v36, fv19, s11, fv14, fv15, fv16, fv22, fv25, fv18, fv17, v34, fv21]
// [Asm] defs: []
// [Asm] live_set: [fv23, fv24, v26, fv20, v36, fv19, s11, fv14, fv15, fv16, fv22, fv25, fv18, fv17, fv21]
// [Asm] defs: []
// [Asm] live_set: [fv23, fv24, v26, fv20, fv19, s11, fv14, fv15, fv16, fv22, fv25, fv18, fv17, fv21]
// [Asm] defs: [fv39]
// [Asm] live_set: [fv24, fv23, v26, fv39, fv25, fv20, fv19, s11, fv16, fv15, fv17, fv21]
// [Asm] defined: fv39 is F
// [Asm] defs: [fv41]
// [Asm] live_set: [fv24, v26, fv39, fv25, fv41, fv20, s11, fv16, fv17, fv21]
// [Asm] defined: fv41 is F
// [Asm] defs: [fv43]
// [Asm] live_set: [v26, fv39, fv25, fv41, fv43, s11, fv17, fv21]
// [Asm] defined: fv43 is F
// [Asm] defs: [fv45]
// [Asm] live_set: [fv45, v26, fv39, fv43, fv41, s11]
// [Asm] defined: fv45 is F
// [Asm] defs: [v27]
// [Asm] live_set: [fv45, v26, fv39, v27, fv43, fv41]
// [Asm] defined: v27 is X
// [Asm] defs: [s11]
// [Asm] live_set: [fv45, v26, fv39, v27, fv43, fv41, s11]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [fv45, v26, fv41, v27, fv43, s11]
// [Asm] defs: []
// [Asm] live_set: [fv45, s11, v26, v27, fv43]
// [Asm] defs: []
// [Asm] live_set: [fv45, s11, v26, v27]
// [Asm] defs: []
// [Asm] live_set: [s11, v26, v27]
// [Asm] defs: [v28]
// [Asm] live_set: [v28, v26, v27]
// [Asm] defined: v28 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v28, v26, v27]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v28, v27]
// [Asm] defs: []
// [Asm] live_set: [v28]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v28
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("fma_mixed.67") clobbered_x: @hashset.of([t3, a7, t0, t1, a5, a0, a4, a6, a2, a1, t2, a3])
// [Asm] Label("fma_mixed.67") clobbered_f: @hashset.of([fa7, fa5, fa2, fa3, fa4, ft3, fa6, fa0, ft2, ft1, ft0, fa1])
// [Asm] subst   mulw v29, v2, v6 ->   mulw a0, a0, a4
// [Asm] subst   add v30, v29, v10 ->   add a0, a0, t0
// [Asm] subst   mulw v31, v3, v7 ->   mulw a1, a1, a5
// [Asm] subst   add v32, v31, v11 ->   add a1, a1, t1
// [Asm] subst   mulw v33, v4, v8 ->   mulw a2, a2, a6
// [Asm] subst   add v34, v33, v12 ->   add a2, a2, t2
// [Asm] subst   mulw v35, v5, v9 ->   mulw a3, a3, a7
// [Asm] subst   add v36, v35, v13 ->   add a3, a3, t3
// [Asm] subst   addi v26, s11, -16 ->   addi a4, s11, -16
// [Asm] subst   andi s11, v26, -8 ->   andi s11, a4, -8
// [Asm] subst   sw v30, 0(v26) ->   sw a0, 0(a4)
// [Asm] subst   sw v32, 4(v26) ->   sw a1, 4(a4)
// [Asm] subst   sw v34, 8(v26) ->   sw a2, 8(a4)
// [Asm] subst   sw v36, 12(v26) ->   sw a3, 12(a4)
// [Asm] subst   fmadd.d fv39, fv14, fv18, fv22 ->   fmadd.d fa0, fa0, fa4, ft0
// [Asm] subst   fmadd.d fv41, fv15, fv19, fv23 ->   fmadd.d fa1, fa1, fa5, ft1
// [Asm] subst   fmadd.d fv43, fv16, fv20, fv24 ->   fmadd.d fa2, fa2, fa6, ft2
// [Asm] subst   fmadd.d fv45, fv17, fv21, fv25 ->   fmadd.d fa3, fa3, fa7, ft3
// [Asm] subst   addi v27, s11, -32 ->   addi a0, s11, -32
// [Asm] subst   andi s11, v27, -8 ->   andi s11, a0, -8
// [Asm] subst   fsd fv39, 0(v27) ->   fsd fa0, 0(a0)
// [Asm] subst   fsd fv41, 8(v27) ->   fsd fa1, 8(a0)
// [Asm] subst   fsd fv43, 16(v27) ->   fsd fa2, 16(a0)
// [Asm] subst   fsd fv45, 24(v27) ->   fsd fa3, 24(a0)
// [Asm] subst   addi v28, s11, -16 ->   addi a1, s11, -16
// [Asm] subst   andi s11, v28, -8 ->   andi s11, a1, -8
// [Asm] subst   sd v26, 0(v28) ->   sd a4, 0(a1)
// [Asm] subst   sd v27, 8(v28) ->   sd a0, 8(a1)
// [Asm] subst   mv a0, v28 ->   mv a0, a1
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] stress.454:
// [Asm] # block info: defs: [v3, v4, v145, v2], uses: [a2, a1, a0, v145, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v2, v4, zero, v3]
// [Asm] # block parameters: []
// [Asm] .stress.454_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   li v145, 3  # live: [v2, v4, zero, v145, v3]
// [Asm]   blt v145, v2, .stress.454_2  # live: [v2, v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [fv24, v58, fv67, fv30, fv55, a1, fv35, fa1, v64, v60, v51, v63, fa2, fv25, ft6, a4, fa6, v20, v50, a6, ft10, ft5, v59, fv27, v6, v62, ft4, v10, ft9, v49, fv65, fa4, ft2, v37, v17, a3, v52, v31, a7, fa7, fv28, v48, v75, fa3, fv34, ft3, fv43, fv29, t2, v61, v40, fv23, t1, v14, v16, v69, v13, v42, v26, v7, ft1, v41, ft0, v12, fv22, v8, v19, v47, v74, ft7, v11, fv68, fv45, v71, fv32, v53, v21, fv56, fv66, a5, a0, fv54, v36, a2, fv57, v9, v39, ft8, t3, t0, fv46, fa5, v18, fv33, fa0, t4, v38, v70, v15, fv44, v76], uses: [fv24, v58, fv67, fv30, fv55, a1, fv35, fa1, v64, v60, v51, v63, fa2, fv25, v20, fa6, a4, v50, a6, v59, fv27, v6, v62, v10, v49, fv65, fa4, ft2, v37, v17, a3, v52, v31, fa7, a7, fv28, v48, fa3, fv34, ft3, fv43, fv29, t2, v61, v3, v40, fv23, t1, v16, v14, v69, v13, v42, v26, v7, ft1, v41, ft0, v12, fv22, zero, v8, v19, v4, v47, v74, v11, fv68, fv45, v71, fv32, v53, v21, fv56, fv66, a5, a0, fv54, v36, a2, fv57, v9, v39, t3, fv46, t0, fa5, v18, fa0, fv33, v38, v70, v15, fv44, v2], upward_exposed: [v2, v4, zero, v3], params_defs: []
// [Asm] # live_in: [v3, v4, zero, v2], live_out: [zero, v76]
// [Asm] # block parameters: []
// [Asm] .stress.454_1:
// [Asm]   ld v6, 0(v4)  # live: [v3, zero, v4, v6, v2]
// [Asm]   lw v7, 0(v6)  # live: [v3, v7, zero, v4, v6, v2]
// [Asm]   lw v8, 4(v6)  # live: [v3, v7, zero, v8, v4, v6, v2]
// [Asm]   lw v9, 8(v6)  # live: [v3, v7, zero, v8, v4, v6, v9, v2]
// [Asm]   lw v10, 12(v6)  # live: [v3, v7, zero, v8, v4, v10, v9, v2]
// [Asm]   ld v11, 8(v4)  # live: [v3, v7, zero, v8, v4, v11, v10, v9, v2]
// [Asm]   lw v12, 0(v11)  # live: [v3, v7, v12, zero, v8, v4, v11, v10, v9, v2]
// [Asm]   lw v13, 4(v11)  # live: [v3, v13, v7, v12, zero, v8, v4, v11, v10, v9, v2]
// [Asm]   lw v14, 8(v11)  # live: [v3, v14, v13, v7, v12, zero, v8, v4, v11, v10, v9, v2]
// [Asm]   lw v15, 12(v11)  # live: [v3, v14, v13, v7, v12, zero, v8, v4, v10, v9, v15, v2]
// [Asm]   ld v16, 16(v4)  # live: [v3, v14, v16, v13, v7, v12, zero, v8, v4, v10, v9, v15, v2]
// [Asm]   lw v17, 0(v16)  # live: [v3, v14, v16, v13, v7, v12, zero, v8, v4, v10, v17, v9, v15, v2]
// [Asm]   lw v18, 4(v16)  # live: [v3, v14, v16, v13, v7, v12, zero, v8, v4, v10, v17, v9, v18, v15, v2]
// [Asm]   lw v19, 8(v16)  # live: [v3, v14, v16, v13, v7, v12, zero, v8, v19, v4, v10, v17, v9, v18, v15, v2]
// [Asm]   lw v20, 12(v16)  # live: [v3, v14, v13, v7, v12, zero, v20, v8, v19, v4, v10, v17, v9, v18, v15, v2]
// [Asm]   ld v21, 0(v3)  # live: [v3, v14, v13, v7, v12, zero, v20, v8, v19, v4, v10, v21, v17, v9, v18, v15, v2]
// [Asm]   fld fv22, 0(v21)  # live: [v3, v14, v13, v7, v12, fv22, zero, v20, v8, v19, v4, v10, v21, v17, v9, v18, v15, v2]
// [Asm]   fld fv23, 8(v21)  # live: [v3, fv23, v14, v13, v7, v12, fv22, zero, v20, v8, v19, v4, v10, v21, v17, v9, v18, v15, v2]
// [Asm]   fld fv24, 16(v21)  # live: [v3, fv24, fv23, v14, v13, v7, v12, fv22, zero, v20, v8, v19, v4, v10, v21, v17, v9, v18, v15, v2]
// [Asm]   fld fv25, 24(v21)  # live: [v3, fv24, fv23, v14, v13, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, v10, v17, v9, v18, v15, v2]
// [Asm]   ld v26, 8(v3)  # live: [v3, fv24, fv23, v14, v13, v26, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, v10, v17, v9, v18, v15, v2]
// [Asm]   fld fv27, 0(v26)  # live: [v3, fv24, fv23, v14, v13, v26, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, fv27, v10, v17, v9, v18, v15, v2]
// [Asm]   fld fv28, 8(v26)  # live: [v3, fv24, fv23, v14, v13, v26, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, fv27, v10, v17, v9, fv28, v18, v15, v2]
// [Asm]   fld fv29, 16(v26)  # live: [v3, fv24, fv23, v14, v13, v26, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, fv27, v10, v17, v9, fv28, v18, fv29, v15, v2]
// [Asm]   fld fv30, 24(v26)  # live: [v3, fv24, fv23, v14, v13, fv30, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, fv27, v10, v17, v9, fv28, v18, fv29, v15, v2]
// [Asm]   ld v31, 16(v3)  # live: [v3, fv24, fv23, v14, v13, fv30, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, fv27, v10, v17, v31, v9, fv28, v18, fv29, v15, v2]
// [Asm]   fld fv32, 0(v31)  # live: [v3, fv24, fv23, v14, v13, fv30, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, fv27, fv32, v10, v17, v31, v9, fv28, v18, fv29, v15, v2]
// [Asm]   fld fv33, 8(v31)  # live: [v3, fv24, fv23, v14, v13, fv30, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, fv27, fv32, v10, v17, v31, v9, fv28, v18, fv33, fv29, v15, v2]
// [Asm]   fld fv34, 16(v31)  # live: [v3, fv24, fv23, v14, v13, fv30, v7, v12, fv22, zero, fv25, v20, v8, v19, v4, fv27, fv32, v10, v17, v31, v9, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm]   fld fv35, 24(v31)  # live: [v3, fv24, fv23, v14, v13, fv30, v7, v12, fv35, fv22, zero, fv25, v20, v8, v19, v4, fv27, fv32, v10, v17, v9, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm]   # save_ctx2  # live: [v3, fv24, fv23, v14, v13, fv30, v7, v12, fv35, fv22, zero, fv25, v20, v8, v19, v4, fv27, fv32, v10, v17, v9, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm]   mv a0, v7  # live: [v3, fv24, fv23, v14, v13, fv30, v12, fv35, fv22, zero, fv25, v20, v8, v19, v4, fv27, fv32, v10, a0, v17, v9, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm]   mv a1, v8  # live: [v3, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, v20, v19, v4, fv27, fv32, v10, a0, v17, v9, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm]   mv a2, v9  # live: [v3, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, v20, v19, v4, fv27, fv32, v10, a0, a2, v17, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm]   mv a3, v10  # live: [v3, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, v20, v19, v4, fv27, fv32, a0, a2, v17, a3, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm]   mv a4, v12  # live: [v3, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, a4, v20, v19, v4, fv27, fv32, a0, a2, v17, a3, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm]   mv a5, v13  # live: [v3, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, a4, v20, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm]   mv a6, v14  # live: [v3, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm]   mv a7, v15  # live: [v3, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm]   mv t0, v17  # live: [v3, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, t0, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm]   mv t1, v18  # live: [v3, t1, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, t0, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm]   mv t2, v19  # live: [v3, t1, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, t0, fv28, v18, fv34, fv33, fv29, t2, v15, v2]
// [Asm]   mv t3, v20  # live: [v3, t1, fv24, fv23, v14, v13, fv30, a1, v12, fv35, fv22, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, t3, t0, fv28, v18, fv34, fv33, fv29, t2, v15, v2]
// [Asm]   fmv.d fa0, fv22  # live: [v3, t1, fv24, fv23, v14, v13, fv30, a1, v12, fv35, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, t3, t0, fv28, v18, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm]   fmv.d fa1, fv23  # live: [v3, t1, fv24, v14, v13, fv30, a1, v12, fv35, fa1, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, t3, t0, fv28, v18, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm]   fmv.d fa2, fv24  # live: [v3, t1, v14, v13, fv30, a1, v12, fv35, fa1, fa2, zero, fv25, a4, v20, a6, v19, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, t3, t0, fv28, v18, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm]   fmv.d fa3, fv25  # live: [v3, t1, v14, v13, fv30, a1, v12, fv35, fa1, fa2, zero, v20, a4, v19, a6, v4, fv27, fv32, a5, a0, a2, v17, a3, a7, t3, t0, fv28, v18, fa3, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm]   fmv.d fa4, fv27  # live: [v3, t1, v14, v13, fv30, a1, v12, fv35, fa1, fa2, zero, v20, a4, v19, a6, v4, fv27, fv32, a5, fa4, a0, a2, v17, a3, a7, t3, t0, fv28, v18, fa3, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm]   fmv.d fa5, fv28  # live: [v3, t1, v14, v13, fv30, a1, v12, fv35, fa1, fa2, zero, v20, a4, v19, a6, v4, fv27, fv32, a5, fa4, a0, a2, v17, a3, a7, t3, t0, fv28, v18, fa5, fa3, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm]   fmv.d fa6, fv29  # live: [v3, t1, v14, v13, fv30, a1, v12, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv27, fv32, a5, fa4, a0, a2, v17, a3, a7, t3, t0, fv28, v18, fa5, fa3, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm]   fmv.d fa7, fv30  # live: [v3, t1, v14, v13, fv30, a1, v12, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv27, fv32, a5, fa4, a0, a2, v17, a3, fa7, a7, t3, t0, fv28, v18, fa5, fa3, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm]   fmv.d ft0, fv32  # live: [v3, t1, v14, v13, fv30, ft0, a1, v12, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv27, fv32, a5, fa4, a0, a2, v17, a3, fa7, a7, t3, t0, fv28, v18, fa5, fa3, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm]   fmv.d ft1, fv33  # live: [v3, t1, v14, v13, fv30, ft0, ft1, a1, v12, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv27, fv32, a5, fa4, a0, a2, v17, a3, fa7, a7, t3, t0, fv28, v18, fa5, fa3, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm]   fmv.d ft2, fv34  # live: [v3, t1, v14, v13, fv30, ft0, ft1, a1, v12, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv27, fv32, a5, fa4, a0, ft2, a2, v17, a3, fa7, a7, t3, t0, fv28, v18, fa5, fa3, fv34, fa0, fv33, fv29, t2, v15, v2]
// [Asm]   fmv.d ft3, fv35  # live: [v3, t1, v14, v13, fv30, ft0, ft1, a1, v12, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv27, fv32, a5, fa4, a0, ft2, a2, v17, a3, fa7, a7, t3, t0, fv28, v18, fa5, fa3, fv34, ft3, fa0, fv33, fv29, t2, v15, v2]
// [Asm]   call fma_mixed.67  # live: [v3, v14, v13, fv30, v12, fv35, zero, v20, v19, v4, fv27, fv32, a0, v17, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm]   mv v36, a0  # live: [v3, v14, v13, fv30, v12, fv35, zero, v20, v19, v4, fv27, fv32, v36, v17, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm]   # restore_ctx2  # live: [v3, v14, v13, fv30, v12, fv35, zero, v20, v19, v4, fv27, fv32, v36, v17, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm]   ld v37, 0(v36)  # live: [v3, v14, v13, fv30, v12, fv35, zero, v20, v19, v4, fv27, fv32, v36, v37, v17, fv28, v18, fv34, fv33, fv29, v15, v2]
// [Asm]   ld v38, 8(v36)  # live: [v3, v14, v13, fv30, v12, fv35, zero, v20, v19, v4, fv27, fv32, v37, v17, fv28, v18, fv34, fv33, fv29, v38, v15, v2]
// [Asm]   lw v39, 0(v37)  # live: [v3, v14, v13, fv30, v12, fv35, zero, v20, v19, v4, fv27, fv32, v37, v17, v39, fv28, v18, fv34, fv33, fv29, v38, v15, v2]
// [Asm]   lw v40, 4(v37)  # live: [v3, v40, v14, v13, fv30, v12, fv35, zero, v20, v19, v4, fv27, fv32, v37, v17, v39, fv28, v18, fv34, fv33, fv29, v38, v15, v2]
// [Asm]   lw v41, 8(v37)  # live: [v3, v40, v14, v13, fv30, v41, v12, fv35, zero, v20, v19, v4, fv27, fv32, v37, v17, v39, fv28, v18, fv34, fv33, fv29, v38, v15, v2]
// [Asm]   lw v42, 12(v37)  # live: [v3, v40, v14, v42, v13, fv30, v41, v12, fv35, zero, v20, v19, v4, fv27, fv32, v17, v39, fv28, v18, fv34, fv33, fv29, v38, v15, v2]
// [Asm]   fld fv43, 0(v38)  # live: [v3, v40, v14, v42, v13, fv30, v41, v12, fv35, zero, v20, v19, v4, fv27, fv32, v17, v39, fv28, v18, fv34, fv43, fv33, fv29, v38, v15, v2]
// [Asm]   fld fv44, 8(v38)  # live: [v3, v40, v14, v42, v13, fv30, v41, v12, fv35, zero, v20, v19, v4, fv27, fv32, v17, v39, fv28, v18, fv34, fv43, fv33, fv29, v38, v15, fv44, v2]
// [Asm]   fld fv45, 16(v38)  # live: [v3, v40, v14, v42, v13, fv30, v41, v12, fv35, zero, v20, v19, v4, fv27, fv45, fv32, v17, v39, fv28, v18, fv34, fv43, fv33, fv29, v38, v15, fv44, v2]
// [Asm]   fld fv46, 24(v38)  # live: [v3, v40, v14, v42, v13, fv30, v41, v12, fv35, zero, v20, v19, v4, fv27, fv45, fv32, v17, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm]   # save_ctx2  # live: [v3, v40, v14, v42, v13, fv30, v41, v12, fv35, zero, v20, v19, v4, fv27, fv45, fv32, v17, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm]   mv a0, v39  # live: [v3, v40, v14, v42, v13, fv30, v41, v12, fv35, zero, v20, v19, v4, fv27, fv45, fv32, a0, v17, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm]   mv a1, v40  # live: [v3, v40, v14, v42, v13, fv30, v41, a1, v12, fv35, zero, v20, v19, v4, fv27, fv45, fv32, a0, v17, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm]   mv a2, v41  # live: [v3, v40, v14, v42, v13, fv30, v41, a1, v12, fv35, zero, v20, v19, v4, fv27, fv45, fv32, a0, a2, v17, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm]   mv a3, v42  # live: [v3, v40, v14, v42, v13, fv30, v41, a1, v12, fv35, zero, v20, v19, v4, fv27, fv45, fv32, a0, a2, v17, a3, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm]   mv a4, v12  # live: [v3, v40, v14, v42, v13, fv30, v41, a1, fv35, zero, v20, a4, v19, v4, fv27, fv45, fv32, a0, a2, v17, a3, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm]   mv a5, v13  # live: [v3, v40, v14, v42, fv30, v41, a1, fv35, zero, v20, a4, v19, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm]   mv a6, v14  # live: [v3, v40, v42, fv30, v41, a1, fv35, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, fv46, fv28, v18, fv34, fv43, fv33, fv29, v15, fv44, v2]
// [Asm]   mv a7, v15  # live: [v3, v40, v42, fv30, v41, a1, fv35, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, fv46, fv28, v18, fv34, fv43, fv33, fv29, fv44, v2]
// [Asm]   mv t0, v17  # live: [v3, v40, v42, fv30, v41, a1, fv35, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, t0, fv46, fv28, v18, fv34, fv43, fv33, fv29, fv44, v2]
// [Asm]   mv t1, v18  # live: [v3, v40, t1, v42, fv30, v41, a1, fv35, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, t0, fv46, fv28, v18, fv34, fv43, fv33, fv29, fv44, v2]
// [Asm]   mv t2, v19  # live: [v3, v40, t1, v42, fv30, v41, a1, fv35, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, t0, fv46, fv28, v18, fv34, fv43, fv33, fv29, t2, fv44, v2]
// [Asm]   mv t3, v20  # live: [v3, v40, t1, v42, fv30, v41, a1, fv35, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, t3, t0, fv46, fv28, v18, fv34, fv43, fv33, fv29, t2, fv44, v2]
// [Asm]   fmv.d fa0, fv43  # live: [v3, v40, t1, v42, fv30, v41, a1, fv35, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, t3, t0, fv46, fv28, v18, fv34, fv43, fv33, fa0, fv29, t2, fv44, v2]
// [Asm]   fmv.d fa1, fv44  # live: [v3, v40, t1, v42, fv30, v41, a1, fv35, fa1, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, t3, t0, fv46, fv28, v18, fv34, fv43, fv33, fa0, fv29, t2, fv44, v2]
// [Asm]   fmv.d fa2, fv45  # live: [v3, v40, t1, v42, fv30, v41, a1, fv35, fa1, fa2, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, t3, t0, fv46, fv28, v18, fv34, fv43, fv33, fa0, fv29, t2, fv44, v2]
// [Asm]   fmv.d fa3, fv46  # live: [v3, v40, t1, v42, fv30, v41, a1, fv35, fa1, fa2, zero, v20, a4, v19, a6, v4, fv27, fv45, fv32, a5, a0, a2, v17, a3, v39, a7, t3, t0, fv46, fv28, v18, fa3, fv34, fv43, fv33, fa0, fv29, t2, fv44, v2]
// [Asm]   fmv.d fa4, fv27  # live: [v3, v40, t1, v42, fv30, v41, a1, fv35, fa1, fa2, zero, v20, a4, v19, a6, v4, fv45, fv32, a5, fa4, a0, a2, v17, a3, v39, a7, t3, t0, fv46, fv28, v18, fa3, fv34, fv43, fv33, fa0, fv29, t2, fv44, v2]
// [Asm]   fmv.d fa5, fv28  # live: [v3, v40, t1, v42, fv30, v41, a1, fv35, fa1, fa2, zero, v20, a4, v19, a6, v4, fv45, fv32, a5, fa4, a0, a2, v17, a3, v39, a7, t3, t0, fv46, v18, fa5, fa3, fv43, fv34, fa0, fv33, fv29, t2, fv44, v2]
// [Asm]   fmv.d fa6, fv29  # live: [v3, v40, t1, v42, fv30, v41, a1, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv45, fv32, a5, fa4, a0, a2, v17, a3, v39, a7, t3, t0, fv46, v18, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm]   fmv.d fa7, fv30  # live: [v3, v40, t1, v42, v41, a1, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv45, fv32, a5, fa4, a0, a2, v17, a3, v39, fa7, a7, t3, t0, fv46, v18, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm]   fmv.d ft0, fv32  # live: [v3, v40, t1, v42, v41, ft0, a1, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv45, fv32, a5, fa4, a0, a2, v17, a3, v39, fa7, a7, t3, t0, fv46, v18, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm]   fmv.d ft1, fv33  # live: [v3, v40, t1, v42, v41, ft0, ft1, a1, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv45, fv32, a5, fa4, a0, a2, v17, a3, v39, fa7, a7, t3, t0, fv46, v18, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm]   fmv.d ft2, fv34  # live: [v3, v40, t1, v42, v41, ft0, ft1, a1, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv45, fv32, a5, fa4, a0, ft2, a2, v17, a3, v39, fa7, a7, t3, t0, fv46, v18, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm]   fmv.d ft3, fv35  # live: [v3, v40, t1, v42, v41, ft0, ft1, a1, fv35, fa1, fa2, zero, v20, fa6, a4, v19, a6, v4, fv45, fv32, a5, fa4, a0, ft2, a2, v17, a3, v39, fa7, a7, t3, t0, fv46, v18, fa5, fa3, ft3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm]   call fma_mixed.67  # live: [v3, v40, v42, v41, fv35, zero, v20, v19, v4, fv45, fv32, a0, v17, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   mv v47, a0  # live: [v3, v40, v42, v41, fv35, zero, v20, v19, v4, v47, fv45, fv32, v17, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   # restore_ctx2  # live: [v3, v40, v42, v41, fv35, zero, v20, v19, v4, v47, fv45, fv32, v17, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   ld v48, 0(v47)  # live: [v3, v40, v42, v41, fv35, zero, v20, v19, v4, v47, fv45, fv32, v17, v39, fv46, v18, v48, fv43, fv34, fv33, fv44, v2]
// [Asm]   ld v49, 8(v47)  # live: [v3, v40, v42, v41, fv35, zero, v20, v19, v4, fv45, fv32, v49, v17, v39, fv46, v18, v48, fv43, fv34, fv33, fv44, v2]
// [Asm]   lw v50, 0(v48)  # live: [v3, v40, v42, v41, fv35, zero, v50, v20, v19, v4, fv45, fv32, v49, v17, v39, fv46, v18, v48, fv43, fv34, fv33, fv44, v2]
// [Asm]   lw v51, 4(v48)  # live: [v3, v40, v42, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, fv32, v49, v17, v39, fv46, v18, v48, fv43, fv34, fv33, fv44, v2]
// [Asm]   lw v52, 8(v48)  # live: [v3, v40, v42, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, fv32, v49, v17, v52, v39, fv46, v18, v48, fv43, fv34, fv33, fv44, v2]
// [Asm]   lw v53, 12(v48)  # live: [v3, v40, v42, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, v49, v17, v52, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   fld fv54, 0(v49)  # live: [v3, v40, v42, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, v49, fv54, v17, v52, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   fld fv55, 8(v49)  # live: [v3, v40, v42, fv55, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, v49, fv54, v17, v52, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   fld fv56, 16(v49)  # live: [v3, v40, v42, fv55, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, v49, fv56, fv54, v17, v52, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   fld fv57, 24(v49)  # live: [v3, v40, v42, fv55, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, fv56, fv54, v17, v52, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   # save_ctx2  # live: [v3, v40, v42, fv55, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, fv56, fv54, v17, v52, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   mv a0, v39  # live: [v3, v40, v42, fv55, v41, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, fv56, a0, fv54, v17, v52, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   mv a1, v40  # live: [v3, v40, v42, fv55, v41, a1, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, fv56, a0, fv54, v17, v52, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   mv a2, v41  # live: [v3, v40, v42, fv55, v41, a1, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, fv56, a0, fv54, a2, v17, v52, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   mv a3, v42  # live: [v3, v40, v42, fv55, v41, a1, fv35, v51, zero, v50, v20, v19, v4, fv45, v53, fv32, fv56, a0, fv54, a2, v17, v52, a3, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   mv a4, v50  # live: [v3, v40, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, v20, v19, v4, fv45, v53, fv32, fv56, a0, fv54, a2, v17, v52, a3, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   mv a5, v51  # live: [v3, v40, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, v20, v19, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v17, v52, a3, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   mv a6, v52  # live: [v3, v40, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, v20, a6, v19, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v17, v52, a3, fv57, v39, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   mv a7, v53  # live: [v3, v40, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, v20, a6, v19, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v17, v52, a3, fv57, v39, a7, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   mv t0, v17  # live: [v3, v40, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, v20, a6, v19, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v52, a3, fv57, v39, a7, t0, fv46, v18, fv43, fv34, fv33, fv44, v2]
// [Asm]   mv t1, v18  # live: [v3, v40, t1, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, v20, a6, v19, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v52, a3, fv57, v39, a7, t0, fv46, fv43, fv34, fv33, fv44, v2]
// [Asm]   mv t2, v19  # live: [v3, v40, t1, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, v20, a6, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v52, a3, fv57, v39, a7, t0, fv46, fv43, fv34, fv33, t2, fv44, v2]
// [Asm]   mv t3, v20  # live: [v3, v40, t1, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, a6, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v52, a3, fv57, v39, a7, t3, t0, fv46, fv43, fv34, fv33, t2, fv44, v2]
// [Asm]   fmv.d fa0, fv43  # live: [v3, v40, t1, v42, fv55, v41, a1, fv35, v51, zero, v50, a4, a6, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v52, a3, fv57, v39, a7, t3, t0, fv46, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm]   fmv.d fa1, fv44  # live: [v3, v40, t1, v42, fv55, v41, a1, fv35, fa1, v51, zero, v50, a4, a6, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v52, a3, fv57, v39, a7, t3, t0, fv46, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm]   fmv.d fa2, fv45  # live: [v3, v40, t1, v42, fv55, v41, a1, fv35, fa1, v51, fa2, zero, v50, a4, a6, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v52, a3, fv57, v39, a7, t3, t0, fv46, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm]   fmv.d fa3, fv46  # live: [v3, v40, t1, v42, fv55, v41, a1, fv35, fa1, v51, fa2, zero, v50, a4, a6, v4, fv45, v53, fv32, a5, fv56, a0, fv54, a2, v52, a3, fv57, v39, a7, t3, t0, fv46, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm]   fmv.d fa4, fv54  # live: [v3, v40, t1, v42, fv55, v41, a1, fv35, fa1, v51, fa2, zero, v50, a4, a6, v4, fv45, v53, fv32, a5, fv56, fa4, a0, fv54, a2, v52, a3, fv57, v39, a7, t3, t0, fv46, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm]   fmv.d fa5, fv55  # live: [v3, v40, t1, v42, fv55, v41, a1, fv35, fa1, v51, fa2, zero, v50, a4, a6, v4, fv45, v53, fv32, a5, fv56, fa4, a0, fv54, a2, v52, a3, fv57, v39, a7, t3, t0, fv46, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm]   fmv.d fa6, fv56  # live: [v3, v40, t1, v42, fv55, v41, a1, fv35, fa1, v51, fa2, zero, v50, fa6, a4, a6, v4, fv45, v53, fv32, a5, fv56, fa4, a0, fv54, a2, v52, a3, fv57, v39, a7, t3, t0, fv46, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm]   fmv.d fa7, fv57  # live: [v3, v40, t1, v42, fv55, v41, a1, fv35, fa1, v51, fa2, zero, v50, fa6, a4, a6, v4, fv45, v53, fv32, a5, fv56, fa4, a0, fv54, a2, v52, a3, fv57, v39, fa7, a7, t3, t0, fv46, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm]   fmv.d ft0, fv32  # live: [v3, v40, t1, v42, fv55, v41, ft0, a1, fv35, fa1, v51, fa2, zero, v50, fa6, a4, a6, v4, fv45, v53, fv56, a5, a0, fa4, fv54, a2, v52, a3, fv57, v39, fa7, a7, t3, t0, fv46, fa5, fa3, fv43, fv34, fa0, fv33, t2, fv44, v2]
// [Asm]   fmv.d ft1, fv33  # live: [v3, v40, t1, v42, fv55, v41, ft0, ft1, a1, fv35, fa1, v51, fa2, zero, v50, fa6, a4, a6, v4, fv45, v53, fv56, a5, a0, fa4, fv54, a2, v52, a3, fv57, v39, fa7, a7, t3, t0, fv46, fa5, fa3, fv43, fv34, fa0, t2, fv44, v2]
// [Asm]   fmv.d ft2, fv34  # live: [v3, v40, t1, v42, fv55, v41, ft0, ft1, a1, fv35, fa1, v51, fa2, zero, v50, fa6, a4, a6, v4, fv45, v53, fv56, a5, a0, fa4, fv54, ft2, a2, v52, a3, fv57, v39, fa7, a7, t3, t0, fv46, fa5, fa3, fv43, fa0, t2, fv44, v2]
// [Asm]   fmv.d ft3, fv35  # live: [v3, v40, t1, v42, fv55, v41, ft0, ft1, a1, fa1, v51, fa2, zero, v50, fa6, a4, a6, v4, fv45, v53, fv56, a5, a0, fa4, fv54, ft2, a2, v52, a3, fv57, v39, fa7, a7, t3, t0, fv46, fa5, fa3, ft3, fv43, fa0, t2, fv44, v2]
// [Asm]   call fma_mixed.67  # live: [v3, v40, v42, fv55, v41, v51, zero, v50, v4, fv45, v53, fv56, a0, fv54, v52, fv57, v39, fv46, fv43, fv44, v2]
// [Asm]   mv v58, a0  # live: [v3, v40, v58, v42, fv55, v41, v51, zero, v50, v4, fv45, v53, fv56, fv54, v52, fv57, v39, fv46, fv43, fv44, v2]
// [Asm]   # restore_ctx2  # live: [v3, v40, v58, v42, fv55, v41, v51, zero, v50, v4, fv45, v53, fv56, fv54, v52, fv57, v39, fv46, fv43, fv44, v2]
// [Asm]   ld v59, 0(v58)  # live: [v3, v40, v58, v42, fv55, v41, v51, zero, v50, v4, v59, fv45, v53, fv56, fv54, v52, fv57, v39, fv46, fv43, fv44, v2]
// [Asm]   ld v60, 8(v58)  # live: [v3, v40, v42, fv55, v41, v60, v51, zero, v50, v4, v59, fv45, v53, fv56, fv54, v52, fv57, v39, fv46, fv43, fv44, v2]
// [Asm]   lw v61, 0(v59)  # live: [v3, v40, v42, fv55, v41, v60, v51, zero, v50, v4, v59, fv45, v53, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm]   lw v62, 4(v59)  # live: [v3, v40, v42, fv55, v41, v60, v51, zero, v50, v4, v59, v62, fv45, v53, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm]   lw v63, 8(v59)  # live: [v3, v40, v42, fv55, v41, v60, v51, v63, zero, v50, v4, v59, v62, fv45, v53, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm]   lw v64, 12(v59)  # live: [v3, v40, v42, fv55, v41, v64, v60, v51, v63, zero, v50, v4, v62, fv45, v53, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm]   fld fv65, 0(v60)  # live: [v3, v40, v42, fv55, v41, v64, v60, v51, v63, zero, v50, v4, v62, fv45, v53, fv65, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm]   fld fv66, 8(v60)  # live: [v3, v40, v42, fv55, v41, v64, v60, v51, v63, zero, v50, v4, v62, fv45, v53, fv66, fv65, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm]   fld fv67, 16(v60)  # live: [v3, v40, fv67, v42, fv55, v41, v64, v60, v51, v63, zero, v50, v4, v62, fv45, v53, fv66, fv65, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm]   fld fv68, 24(v60)  # live: [v3, v40, fv67, v42, fv55, v41, v64, v51, v63, zero, v50, v4, fv68, v62, fv45, v53, fv66, fv65, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm]   # save_ctx2  # live: [v3, v40, fv67, v42, fv55, v41, v64, v51, v63, zero, v50, v4, fv68, v62, fv45, v53, fv66, fv65, fv56, fv54, v52, fv57, v39, fv46, fv43, v61, fv44, v2]
// [Asm]   mv a0, v39  # live: [v3, v40, fv67, v42, fv55, v41, v64, v51, v63, zero, v50, v4, fv68, v62, fv45, v53, fv66, fv65, fv56, a0, fv54, v52, fv57, fv46, fv43, v61, fv44, v2]
// [Asm]   mv a1, v40  # live: [v3, fv67, v42, fv55, v41, a1, v64, v51, v63, zero, v50, v4, fv68, v62, fv45, v53, fv66, fv65, fv56, a0, fv54, v52, fv57, fv46, fv43, v61, fv44, v2]
// [Asm]   mv a2, v41  # live: [v3, fv67, v42, fv55, a1, v64, v51, v63, zero, v50, v4, fv68, v62, fv45, v53, fv66, fv65, fv56, a0, fv54, a2, v52, fv57, fv46, fv43, v61, fv44, v2]
// [Asm]   mv a3, v42  # live: [v3, fv67, fv55, a1, v64, v51, v63, zero, v50, v4, fv68, v62, fv45, v53, fv66, fv65, fv56, a0, fv54, a2, a3, v52, fv57, fv46, fv43, v61, fv44, v2]
// [Asm]   mv a4, v50  # live: [v3, fv67, fv55, a1, v64, v51, v63, zero, a4, v4, fv68, v62, fv45, v53, fv66, fv65, fv56, a0, fv54, a2, a3, v52, fv57, fv46, fv43, v61, fv44, v2]
// [Asm]   mv a5, v51  # live: [v3, fv67, fv55, a1, v64, v63, zero, a4, v4, fv68, v62, fv45, v53, a5, fv66, fv65, fv56, a0, fv54, a2, a3, v52, fv57, fv46, fv43, v61, fv44, v2]
// [Asm]   mv a6, v52  # live: [v3, fv67, fv55, a1, v64, v63, zero, a4, a6, v4, fv68, v62, fv45, v53, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, fv46, fv43, v61, fv44, v2]
// [Asm]   mv a7, v53  # live: [v3, fv67, fv55, a1, v64, v63, zero, a4, a6, v4, fv68, v62, fv45, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, fv46, fv43, v61, fv44, v2]
// [Asm]   mv t0, v61  # live: [v3, fv67, fv55, a1, v64, v63, zero, a4, a6, v4, fv68, v62, fv45, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, t0, fv46, fv43, fv44, v2]
// [Asm]   mv t1, v62  # live: [v3, t1, fv67, fv55, a1, v64, v63, zero, a4, a6, v4, fv68, fv45, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, t0, fv46, fv43, fv44, v2]
// [Asm]   mv t2, v63  # live: [v3, t1, fv67, fv55, a1, v64, zero, a4, a6, v4, fv68, fv45, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, t0, fv46, fv43, t2, fv44, v2]
// [Asm]   mv t3, v64  # live: [v3, t1, fv67, fv55, a1, zero, a4, a6, v4, fv68, fv45, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, t3, t0, fv46, fv43, t2, fv44, v2]
// [Asm]   fmv.d fa0, fv43  # live: [v3, t1, fv67, fv55, a1, zero, a4, a6, v4, fv68, fv45, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, t3, t0, fv46, fa0, t2, fv44, v2]
// [Asm]   fmv.d fa1, fv44  # live: [v3, t1, fv67, fv55, a1, fa1, zero, a4, a6, v4, fv68, fv45, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, t3, t0, fv46, fa0, t2, v2]
// [Asm]   fmv.d fa2, fv45  # live: [v3, t1, fv67, fv55, a1, fa1, fa2, zero, a4, a6, v4, fv68, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, t3, t0, fv46, fa0, t2, v2]
// [Asm]   fmv.d fa3, fv46  # live: [v3, t1, fv67, fv55, a1, fa1, fa2, zero, a4, a6, v4, fv68, a5, fv66, fv65, fv56, a0, fv54, a2, a3, fv57, a7, t3, t0, fa3, fa0, t2, v2]
// [Asm]   fmv.d fa4, fv54  # live: [v3, t1, fv67, fv55, a1, fa1, fa2, zero, a4, a6, v4, fv68, a5, fv66, fv65, fv56, a0, fa4, a2, a3, fv57, a7, t3, t0, fa3, fa0, t2, v2]
// [Asm]   fmv.d fa5, fv55  # live: [v3, t1, fv67, a1, fa1, fa2, zero, a4, a6, v4, fv68, a5, fv66, fv65, fv56, a0, fa4, a2, a3, fv57, a7, t3, t0, fa5, fa3, fa0, t2, v2]
// [Asm]   fmv.d fa6, fv56  # live: [v3, t1, fv67, a1, fa1, fa2, zero, fa6, a4, a6, v4, fv68, a5, fv66, fv65, fa4, a0, a2, a3, fv57, a7, t3, t0, fa5, fa3, fa0, t2, v2]
// [Asm]   fmv.d fa7, fv57  # live: [v3, t1, fv67, a1, fa1, fa2, zero, fa6, a4, a6, v4, fv68, a5, fv66, fv65, fa4, a0, a2, a3, fa7, a7, t3, t0, fa5, fa3, fa0, t2, v2]
// [Asm]   fmv.d ft0, fv65  # live: [v3, t1, fv67, ft0, a1, fa1, fa2, zero, fa6, a4, a6, v4, fv68, a5, fv66, a0, fa4, a2, a3, fa7, a7, t3, t0, fa5, fa3, fa0, t2, v2]
// [Asm]   fmv.d ft1, fv66  # live: [v3, t1, fv67, ft0, ft1, a1, fa1, fa2, zero, fa6, a4, a6, v4, fv68, a5, fa4, a0, a2, a3, fa7, a7, t3, t0, fa5, fa3, fa0, t2, v2]
// [Asm]   fmv.d ft2, fv67  # live: [v3, t1, ft0, ft1, a1, fa1, fa2, zero, fa6, a4, a6, v4, fv68, a5, fa4, a0, ft2, a2, a3, fa7, a7, t3, t0, fa5, fa3, fa0, t2, v2]
// [Asm]   fmv.d ft3, fv68  # live: [v3, t1, ft0, ft1, a1, fa1, fa2, zero, fa6, a4, a6, v4, a5, fa4, a0, ft2, a2, a3, fa7, a7, t3, t0, fa5, fa3, ft3, fa0, t2, v2]
// [Asm]   call fma_mixed.67  # live: [v3, zero, a0, v4, v2]
// [Asm]   mv v69, a0  # live: [v3, v69, zero, v4, v2]
// [Asm]   # restore_ctx2  # live: [v3, v69, zero, v4, v2]
// [Asm]   ld v70, 0(v69)  # live: [v3, v69, zero, v4, v70, v2]
// [Asm]   ld v71, 8(v69)  # live: [v3, v71, zero, v4, v70, v2]
// [Asm]   sd v70, 0(v4)  # live: [v2, v4, v71, zero, v3]
// [Asm]   sd v71, 0(v3)  # live: [v2, v4, zero, v3]
// [Asm]   addi v74, v2, 1  # live: [v4, v74, zero, v3]
// [Asm]   # save_ctx2  # live: [v4, v74, zero, v3]
// [Asm]   mv a0, v74  # live: [v4, zero, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, zero, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, zero, a0]
// [Asm]   call stress.454  # live: [zero, a0]
// [Asm]   mv v75, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v76, zero  # live: [zero, v76]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: [v76]
// [Asm] # live_in: [zero, v76], live_out: []
// [Asm] # block parameters: [v76]
// [Asm] .stress.454_3:
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v76], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [zero, v76]
// [Asm] # block parameters: []
// [Asm] .stress.454_2:
// [Asm] # control
// [Asm]   mv v76, zero  # live: [zero, v76]
// [Asm]   j .stress.454_3  # live: [zero, v76]
// [Asm] 
// [Asm] # leaf false
// [Asm] init_vd_arr.453:
// [Asm] # block info: defs: [v3, v27, v2], uses: [a1, a0, v27, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0, zero], live_out: [v3, s11, zero, v2]
// [Asm] # block parameters: []
// [Asm] .init_vd_arr.453_0:
// [Asm]   # save_ctx1  # live: [a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, s11, zero, v2]
// [Asm] # control
// [Asm]   li v27, 2  # live: [v3, s11, zero, v27, v2]
// [Asm]   blt v27, v2, .init_vd_arr.453_2  # live: [v3, s11, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [fv10, t1, v16, v7, fv12, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, fv8, ft2, a2, v17, a3, fv6, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v11, fv10, a0, v7, fv8, fv12, a1, s11, fv6, v9, zero, v4, v3], upward_exposed: [v3, s11, zero, v2], params_defs: []
// [Asm] # live_in: [v2, s11, zero, v3], live_out: [v17, zero]
// [Asm] # block parameters: []
// [Asm] .init_vd_arr.453_1:
// [Asm]   fcvt.d.w fv6, v2  # live: [v3, zero, s11, fv6, v2]
// [Asm]   addi v7, v2, 1  # live: [v3, zero, v7, s11, fv6, v2]
// [Asm]   fcvt.d.w fv8, v7  # live: [v3, zero, v7, fv8, s11, fv6, v2]
// [Asm]   addi v9, v2, 2  # live: [v3, zero, v7, fv8, s11, fv6, v9, v2]
// [Asm]   fcvt.d.w fv10, v9  # live: [v3, fv10, zero, v7, fv8, s11, fv6, v2]
// [Asm]   addi v11, v2, 3  # live: [v3, v11, fv10, zero, v7, fv8, s11, fv6, v2]
// [Asm]   fcvt.d.w fv12, v11  # live: [v3, fv10, zero, v7, fv8, fv12, s11, fv6, v2]
// [Asm]   addi v4, s11, -32  # live: [v3, fv10, zero, v7, fv8, v4, fv12, fv6, v2]
// [Asm]   andi s11, v4, -8  # live: [v3, fv10, zero, v7, fv8, v4, fv12, fv6, v2]
// [Asm]   fsd fv6, 0(v4)  # live: [v3, fv10, zero, v7, fv8, v4, fv12, v2]
// [Asm]   fsd fv8, 8(v4)  # live: [v3, fv10, zero, v7, v4, fv12, v2]
// [Asm]   fsd fv10, 16(v4)  # live: [v3, zero, v7, v4, fv12, v2]
// [Asm]   fsd fv12, 24(v4)  # live: [v7, v2, v4, zero, v3]
// [Asm]   th.surd v4, v3, v2, 3  # live: [v7, zero, v3]
// [Asm]   # save_ctx2  # live: [v7, zero, v3]
// [Asm]   mv a0, v7  # live: [zero, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, zero, a0]
// [Asm]   call init_vd_arr.453  # live: [zero, a0]
// [Asm]   mv v16, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v17, zero  # live: [v17, zero]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: [v17]
// [Asm] # live_in: [v17, zero], live_out: []
// [Asm] # block parameters: [v17]
// [Asm] .init_vd_arr.453_3:
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v17, zero]
// [Asm] # block parameters: []
// [Asm] .init_vd_arr.453_2:
// [Asm] # control
// [Asm]   mv v17, zero  # live: [v17, zero]
// [Asm]   j .init_vd_arr.453_3  # live: [v17, zero]
// [Asm] 
// [Asm] # leaf true
// [Asm] fma_mixed.67:
// [Asm] # block info: defs: [v2, fv23, fv24, v13, v26, fv39, v7, fv20, fv19, v32, fv14, s11, v12, fv15, fv16, v28, v33, fv22, fv25, v29, fv41, v27, v8, v4, v6, v34, fv21, v11, v5, fv45, v10, a0, v30, v36, v31, v9, fv43, v35, fv18, fv17, v3], uses: [fv24, fv39, a1, s11, fv15, v28, v33, fa1, fa2, fv25, fa6, a4, v27, fv41, a6, v6, v5, v10, fa4, ft2, a3, v31, a7, fa7, fa3, ft3, fv43, t2, fv18, fv17, v3, t1, fv23, v13, v26, v7, fv20, fv19, ft1, v32, ft0, fv14, v12, fv16, fv22, v29, v8, v4, v34, fv21, v11, fv45, a5, a0, v30, v36, a2, v9, t3, t0, fa5, fa0, v35, v2], upward_exposed: [t1, a5, a0, fa4, ft2, a2, ft0, ft1, a1, a3, s11, fa1, a7, t3, fa7, t0, fa5, fa3, fa2, fa6, a4, ft3, fa0, a6, t2], params_defs: []
// [Asm] # live_in: [t1, a5, a0, fa4, ft2, a2, ft0, ft1, a1, a3, s11, fa1, a7, t3, fa7, t0, fa5, fa3, fa2, fa6, a4, ft3, fa0, a6, t2], live_out: []
// [Asm] # block parameters: []
// [Asm] .fma_mixed.67_0:
// [Asm]   # save_ctx1  # live: [t1, a5, fa4, a0, ft2, ft1, ft0, a2, a1, s11, a3, fa1, fa7, t3, a7, t0, fa5, fa2, fa3, fa6, ft3, a4, fa0, a6, t2]
// [Asm]   mv v2, a0  # live: [t1, a5, fa4, ft2, ft1, ft0, a2, a1, s11, a3, fa1, fa7, t3, a7, t0, fa5, fa2, fa3, fa6, ft3, a4, fa0, a6, t2, v2]
// [Asm]   mv v3, a1  # live: [v2, t1, a5, fa4, ft2, ft1, ft0, a2, a3, s11, fa1, fa7, t3, a7, t0, fa5, fa2, fa3, fa6, ft3, a4, fa0, a6, t2, v3]
// [Asm]   mv v4, a2  # live: [v2, t1, a5, fa4, ft2, ft1, ft0, s11, a3, fa1, fa7, t3, a7, t0, fa5, fa2, fa3, fa6, ft3, a4, fa0, a6, v4, t2, v3]
// [Asm]   mv v5, a3  # live: [v2, t1, v5, a5, fa4, ft2, ft1, ft0, s11, fa1, fa7, t3, a7, t0, fa5, fa2, fa3, fa6, ft3, a4, fa0, a6, v4, t2, v3]
// [Asm]   mv v6, a4  # live: [v2, t1, v5, a5, fa4, ft2, ft1, ft0, s11, fa1, fa7, t3, a7, t0, fa5, fa2, fa3, fa6, ft3, fa0, a6, v4, v6, t2, v3]
// [Asm]   mv v7, a5  # live: [v2, t1, v5, fa4, v7, ft2, ft1, ft0, s11, fa1, fa7, t3, a7, t0, fa5, fa2, fa3, fa6, ft3, fa0, a6, v4, v6, t2, v3]
// [Asm]   mv v8, a6  # live: [v2, t1, v5, fa4, v7, ft2, ft1, ft0, s11, fa1, fa7, t3, a7, t0, fa5, fa2, fa3, fa6, ft3, fa0, v8, v4, t2, v6, v3]
// [Asm]   mv v9, a7  # live: [v2, t1, v5, fa4, v7, ft2, ft1, ft0, s11, v9, fa1, fa7, t3, t0, fa5, fa3, fa2, ft3, fa6, v8, fa0, v4, v6, t2, v3]
// [Asm]   mv v10, t0  # live: [v2, t1, v5, v10, fa4, v7, ft2, ft1, ft0, s11, v9, fa1, fa7, t3, fa5, fa3, fa2, ft3, fa6, v8, fa0, v4, v6, t2, v3]
// [Asm]   mv v11, t1  # live: [v2, v11, v5, v10, fa4, v7, ft2, ft1, ft0, s11, v9, fa1, fa7, t3, fa5, fa3, fa2, ft3, fa6, v8, fa0, v4, v6, t2, v3]
// [Asm]   mv v12, t2  # live: [v2, v11, v5, v10, fa4, v7, ft2, ft1, ft0, v12, s11, v9, fa1, fa7, t3, fa5, fa3, fa2, ft3, fa6, v8, fa0, v4, v6, v3]
// [Asm]   mv v13, t3  # live: [v2, v11, v5, v10, v13, fa4, v7, ft2, ft1, ft0, v12, s11, v9, fa1, fa7, fa5, fa3, fa2, ft3, fa6, v8, fa0, v4, v6, v3]
// [Asm]   fmv.d fv14, fa0  # live: [v2, v11, v5, v10, v13, fa4, v7, ft2, ft1, ft0, v12, fv14, s11, v9, fa1, fa7, fa5, fa3, fa2, ft3, fa6, v8, v4, v6, v3]
// [Asm]   fmv.d fv15, fa1  # live: [v2, v11, v5, v10, v13, fa4, v7, ft2, ft1, ft0, v12, fv14, s11, fv15, v9, fa7, fa5, fa3, fa2, ft3, fa6, v8, v4, v6, v3]
// [Asm]   fmv.d fv16, fa2  # live: [v2, v11, v5, v10, v13, fa4, v7, ft2, ft1, ft0, v12, fv14, s11, fv15, fv16, v9, fa7, fa5, fa3, ft3, fa6, v8, v4, v6, v3]
// [Asm]   fmv.d fv17, fa3  # live: [v2, v11, v5, v10, v13, fa4, v7, ft2, ft1, ft0, v12, fv14, s11, fv15, fv16, v9, fa7, fa5, ft3, fa6, v8, v4, v6, fv17, v3]
// [Asm]   fmv.d fv18, fa4  # live: [v2, v11, v5, v10, v13, v7, ft2, ft1, ft0, v12, fv14, s11, fv15, fv16, v9, fa7, fa5, ft3, fa6, v8, v4, v6, fv18, fv17, v3]
// [Asm]   fmv.d fv19, fa5  # live: [v2, v11, v5, v10, v13, v7, fv19, ft2, ft1, ft0, v12, fv14, s11, fv15, fv16, v9, fa7, ft3, fa6, v8, v4, v6, fv18, fv17, v3]
// [Asm]   fmv.d fv20, fa6  # live: [v2, v11, v5, v10, v13, fv20, v7, fv19, ft2, ft1, ft0, v12, fv14, s11, fv15, fv16, v9, fa7, ft3, v8, v4, v6, fv18, fv17, v3]
// [Asm]   fmv.d fv21, fa7  # live: [v2, v11, v5, v10, v13, fv20, v7, fv19, ft2, ft1, ft0, v12, fv14, s11, fv15, fv16, v9, ft3, v8, v4, v6, fv18, fv17, fv21, v3]
// [Asm]   fmv.d fv22, ft0  # live: [v2, v11, v5, v10, v13, fv20, v7, fv19, ft2, ft1, s11, v12, fv14, fv16, fv15, v9, fv22, ft3, v8, v4, v6, fv18, fv17, fv21, v3]
// [Asm]   fmv.d fv23, ft1  # live: [v2, v11, fv23, v5, v10, v13, fv20, v7, fv19, ft2, fv14, s11, v12, fv15, fv16, v9, fv22, ft3, v8, v4, v6, fv18, fv17, fv21, v3]
// [Asm]   fmv.d fv24, ft2  # live: [v2, v11, fv24, fv23, v5, v10, v13, fv20, v7, fv19, fv14, s11, v12, fv15, fv16, v9, fv22, ft3, v8, v4, v6, fv18, fv17, fv21, v3]
// [Asm]   fmv.d fv25, ft3  # live: [v2, v11, fv24, fv23, v5, v10, v13, fv20, v7, fv19, fv14, s11, v12, fv15, fv16, v9, fv22, fv25, v8, v4, v6, fv18, fv17, fv21, v3]
// [Asm]   mulw v29, v2, v6  # live: [v11, fv23, fv24, v5, v10, v13, fv20, v7, fv19, fv14, s11, v12, fv15, fv16, v9, fv22, fv25, v29, v8, v4, fv18, fv17, fv21, v3]
// [Asm]   add v30, v29, v10  # live: [v11, fv23, fv24, v5, v13, v30, fv20, v7, fv19, fv14, s11, v12, fv15, fv16, v9, fv22, fv25, v8, v4, fv18, fv17, fv21, v3]
// [Asm]   mulw v31, v3, v7  # live: [v11, fv23, fv24, v5, v13, v30, fv20, fv19, fv14, s11, v12, fv15, fv16, v31, v9, fv22, fv25, v8, v4, fv18, fv17, fv21]
// [Asm]   add v32, v31, v11  # live: [fv23, fv24, v5, v13, v30, fv20, fv19, v32, fv14, s11, v12, fv15, fv16, v9, fv22, fv25, v8, v4, fv18, fv17, fv21]
// [Asm]   mulw v33, v4, v8  # live: [fv23, fv24, v5, v13, v30, fv20, fv19, v32, fv14, s11, v12, fv15, fv16, v33, v9, fv22, fv25, fv18, fv17, fv21]
// [Asm]   add v34, v33, v12  # live: [fv23, fv24, v5, v13, v30, fv20, fv19, v32, fv14, s11, fv16, fv15, v9, fv22, fv25, fv18, fv17, v34, fv21]
// [Asm]   mulw v35, v5, v9  # live: [fv23, fv24, v13, v30, fv20, fv19, v32, fv14, s11, fv16, fv15, fv22, fv25, v35, fv18, fv17, v34, fv21]
// [Asm]   add v36, v35, v13  # live: [fv23, fv24, v30, fv20, v36, fv19, v32, fv14, s11, fv16, fv15, fv22, fv25, fv18, fv17, v34, fv21]
// [Asm]   addi v26, s11, -16  # live: [fv23, fv24, v26, v30, fv20, v36, fv19, v32, fv14, fv15, fv16, fv22, fv25, fv18, fv17, v34, fv21]
// [Asm]   andi s11, v26, -8  # live: [fv23, fv24, v26, v30, fv20, v36, fv19, v32, s11, fv14, fv15, fv16, fv22, fv25, fv18, fv17, v34, fv21]
// [Asm]   sw v30, 0(v26)  # live: [fv23, fv24, v26, fv20, v36, fv19, v32, s11, fv14, fv15, fv16, fv22, fv25, fv18, fv17, v34, fv21]
// [Asm]   sw v32, 4(v26)  # live: [fv23, fv24, v26, fv20, v36, fv19, s11, fv14, fv15, fv16, fv22, fv25, fv18, fv17, v34, fv21]
// [Asm]   sw v34, 8(v26)  # live: [fv23, fv24, v26, fv20, v36, fv19, s11, fv14, fv15, fv16, fv22, fv25, fv18, fv17, fv21]
// [Asm]   sw v36, 12(v26)  # live: [fv23, fv24, v26, fv20, fv19, s11, fv14, fv15, fv16, fv22, fv25, fv18, fv17, fv21]
// [Asm]   fmadd.d fv39, fv14, fv18, fv22  # live: [fv24, fv23, v26, fv39, fv25, fv20, fv19, s11, fv16, fv15, fv17, fv21]
// [Asm]   fmadd.d fv41, fv15, fv19, fv23  # live: [fv24, v26, fv39, fv25, fv41, fv20, s11, fv16, fv17, fv21]
// [Asm]   fmadd.d fv43, fv16, fv20, fv24  # live: [v26, fv39, fv25, fv41, fv43, s11, fv17, fv21]
// [Asm]   fmadd.d fv45, fv17, fv21, fv25  # live: [fv45, v26, fv39, fv43, fv41, s11]
// [Asm]   addi v27, s11, -32  # live: [fv45, v26, fv39, v27, fv43, fv41]
// [Asm]   andi s11, v27, -8  # live: [fv45, v26, fv39, v27, fv43, fv41, s11]
// [Asm]   fsd fv39, 0(v27)  # live: [fv45, v26, fv41, v27, fv43, s11]
// [Asm]   fsd fv41, 8(v27)  # live: [fv45, s11, v26, v27, fv43]
// [Asm]   fsd fv43, 16(v27)  # live: [fv45, s11, v26, v27]
// [Asm]   fsd fv45, 24(v27)  # live: [s11, v26, v27]
// [Asm]   addi v28, s11, -16  # live: [v28, v26, v27]
// [Asm]   andi s11, v28, -8  # live: [v28, v26, v27]
// [Asm]   sd v26, 0(v28)  # live: [v28, v27]
// [Asm]   sd v27, 8(v28)  # live: [v28]
// [Asm] # control
// [Asm]   mv a0, v28  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.451:
// [Asm] # block info: defs: [v2, v25, t1, v14, v13, v26, fv19, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, v29, fa6, fv41, a4, v8, a6, v4, ft10, ft5, ft7, v11, ft4, v5, ft9, a5, a0, fa4, v36, ft2, a2, a3, v24, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, v23, fa0, t4, t2, v3], uses: [v3, v25, v5, v14, a0, v13, v36, fv19, a2, a1, s11, v18, zero, v29, fv41, v4, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.451_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, -16  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [s11, zero, v2]
// [Asm]   addi v3, s11, -24  # live: [v2, zero, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, s11, zero, v3]
// [Asm]   sd v2, 0(v3)  # live: [v2, s11, zero, v3]
// [Asm]   sd v2, 8(v3)  # live: [v2, s11, zero, v3]
// [Asm]   sd v2, 16(v3)  # live: [s11, zero, v3]
// [Asm]   # save_ctx2  # live: [s11, zero, v3]
// [Asm]   mv a0, zero  # live: [s11, zero, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, s11, zero, a0, v3]
// [Asm]   call init_vi_arr.452  # live: [s11, zero, a0, v3]
// [Asm]   mv v8, a0  # live: [s11, zero, v3]
// [Asm]   # restore_ctx2  # live: [s11, zero, v3]
// [Asm]   addi v4, s11, -32  # live: [v4, zero, v3]
// [Asm]   andi s11, v4, -8  # live: [v4, s11, zero, v3]
// [Asm]   fmv.d.x fv41, zero  # live: [v4, s11, zero, fv41, v3]
// [Asm]   fsd fv41, 0(v4)  # live: [v4, s11, zero, fv41, v3]
// [Asm]   fsd fv41, 8(v4)  # live: [v4, s11, zero, fv41, v3]
// [Asm]   fsd fv41, 16(v4)  # live: [v4, s11, zero, fv41, v3]
// [Asm]   fsd fv41, 24(v4)  # live: [v4, s11, zero, v3]
// [Asm]   addi v5, s11, -24  # live: [v4, v5, zero, v3]
// [Asm]   andi s11, v5, -8  # live: [v4, v5, zero, v3]
// [Asm]   sd v4, 0(v5)  # live: [v4, v5, zero, v3]
// [Asm]   sd v4, 8(v5)  # live: [v4, v5, zero, v3]
// [Asm]   sd v4, 16(v5)  # live: [v5, zero, v3]
// [Asm]   # save_ctx2  # live: [v5, zero, v3]
// [Asm]   mv a0, zero  # live: [v5, zero, a0, v3]
// [Asm]   mv a1, v5  # live: [v5, a1, zero, a0, v3]
// [Asm]   call init_vd_arr.453  # live: [v5, zero, a0, v3]
// [Asm]   mv v11, a0  # live: [v5, zero, v3]
// [Asm]   # restore_ctx2  # live: [v5, zero, v3]
// [Asm]   # save_ctx2  # live: [v5, zero, v3]
// [Asm]   li v36, 1  # live: [v36, v5, zero, v3]
// [Asm]   mv a0, v36  # live: [v5, zero, a0, v3]
// [Asm]   mv a1, v5  # live: [v5, a1, zero, a0, v3]
// [Asm]   mv a2, v3  # live: [a2, v5, a1, zero, a0, v3]
// [Asm]   call stress.454  # live: [v5, zero, a0, v3]
// [Asm]   mv v12, a0  # live: [v5, zero, v3]
// [Asm]   # restore_ctx2  # live: [v5, zero, v3]
// [Asm]   ld v13, 0(v3)  # live: [v5, zero, v13]
// [Asm]   lw v14, 0(v13)  # live: [v14, v5, zero]
// [Asm]   ld v18, 0(v5)  # live: [v14, v18, zero]
// [Asm]   fld fv19, 0(v18)  # live: [fv19, v14, zero]
// [Asm]   # save_ctx2  # live: [fv19, v14, zero]
// [Asm]   mv a0, v14  # live: [fv19, zero, a0]
// [Asm]   call minimbt_print_int  # live: [fv19, zero, a0]
// [Asm]   mv v23, a0  # live: [fv19, zero]
// [Asm]   # restore_ctx2  # live: [fv19, zero]
// [Asm]   # save_ctx2  # live: [fv19, zero]
// [Asm]   li v29, 10  # live: [fv19, zero, v29]
// [Asm]   mv a0, v29  # live: [fv19, zero, a0]
// [Asm]   call minimbt_print_char  # live: [fv19, zero, a0]
// [Asm]   mv v24, a0  # live: [fv19, zero]
// [Asm]   # restore_ctx2  # live: [fv19, zero]
// [Asm]   fcvt.w.d v25, fv19, rtz  # live: [v25, zero]
// [Asm]   # save_ctx2  # live: [v25, zero]
// [Asm]   mv a0, v25  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v26, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.451  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] init_vi_arr.452:
// [Asm] # block info: defs: [v3, v19, v2], uses: [v19, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0, zero], live_out: [v3, s11, zero, v2]
// [Asm] # block parameters: []
// [Asm] .init_vi_arr.452_0:
// [Asm]   # save_ctx1  # live: [a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, s11, zero, v2]
// [Asm] # control
// [Asm]   li v19, 2  # live: [v3, v19, s11, zero, v2]
// [Asm]   blt v19, v2, .init_vi_arr.452_2  # live: [v3, s11, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, v7, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v3, a0, zero, v7, v8, v4, v6, a1, s11, v2], upward_exposed: [v3, s11, zero, v2], params_defs: []
// [Asm] # live_in: [v2, s11, zero, v3], live_out: [v13, zero]
// [Asm] # block parameters: []
// [Asm] .init_vi_arr.452_1:
// [Asm]   addi v6, v2, 1  # live: [v3, zero, v6, s11, v2]
// [Asm]   addi v7, v2, 2  # live: [v3, zero, v7, v6, s11, v2]
// [Asm]   addi v8, v2, 3  # live: [v3, zero, v8, v7, v6, s11, v2]
// [Asm]   addi v4, s11, -16  # live: [v3, zero, v8, v7, v4, v6, v2]
// [Asm]   andi s11, v4, -8  # live: [v3, zero, v8, v7, v4, v6, v2]
// [Asm]   sw v2, 0(v4)  # live: [v3, zero, v8, v7, v4, v6, v2]
// [Asm]   sw v6, 4(v4)  # live: [v3, zero, v8, v7, v4, v6, v2]
// [Asm]   sw v7, 8(v4)  # live: [v3, zero, v8, v4, v6, v2]
// [Asm]   sw v8, 12(v4)  # live: [v2, v4, v6, zero, v3]
// [Asm]   th.surd v4, v3, v2, 3  # live: [v6, zero, v3]
// [Asm]   # save_ctx2  # live: [v6, zero, v3]
// [Asm]   mv a0, v6  # live: [zero, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, zero, a0]
// [Asm]   call init_vi_arr.452  # live: [zero, a0]
// [Asm]   mv v12, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v13, zero]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: [v13]
// [Asm] # live_in: [v13, zero], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .init_vi_arr.452_3:
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v13, zero]
// [Asm] # block parameters: []
// [Asm] .init_vi_arr.452_2:
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v13, zero]
// [Asm]   j .init_vi_arr.452_3  # live: [v13, zero]
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 2013265920 # 2GB - 128MB
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 67108864 # 64MB
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl stress.454
// [Main]   .type stress.454, @function
// [Main] # leaf false
// [Main] stress.454:
// [Main] .stress.454_0:
// [Main]   addi sp, sp, -224
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   sd s8, 72(sp)
// [Main]   sd s9, 80(sp)
// [Main]   sd s10, 88(sp)
// [Main]   fsd fs0, 96(sp)
// [Main]   fsd fs1, 104(sp)
// [Main]   fsd fs2, 112(sp)
// [Main]   fsd fs3, 120(sp)
// [Main]   fsd fs4, 128(sp)
// [Main]   fsd fs5, 136(sp)
// [Main]   fsd fs6, 144(sp)
// [Main]   fsd fs7, 152(sp)
// [Main]   fsd fs8, 160(sp)
// [Main]   fsd fs9, 168(sp)
// [Main]   fsd fs10, 176(sp)
// [Main]   fsd fs11, 184(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main]   li a0, 3
// [Main]   blt a0, s0, .stress.454_2
// [Main] 
// [Main] .stress.454_1:
// [Main]   ld a3, 0(s2)
// [Main]   lw a0, 0(a3)
// [Main]   lw a1, 4(a3)
// [Main]   lw a2, 8(a3)
// [Main]   lw a3, 12(a3)
// [Main]   ld a4, 8(s2)
// [Main]   lw s3, 0(a4)
// [Main]   lw s4, 4(a4)
// [Main]   lw s5, 8(a4)
// [Main]   lw s6, 12(a4)
// [Main]   ld a4, 16(s2)
// [Main]   lw s7, 0(a4)
// [Main]   lw s8, 4(a4)
// [Main]   lw s9, 8(a4)
// [Main]   lw s10, 12(a4)
// [Main]   ld a4, 0(s1)
// [Main]   fld fa0, 0(a4)
// [Main]   fld fa1, 8(a4)
// [Main]   fld fa2, 16(a4)
// [Main]   fld fa3, 24(a4)
// [Main]   ld a4, 8(s1)
// [Main]   fld fs0, 0(a4)
// [Main]   fld fs1, 8(a4)
// [Main]   fld fs2, 16(a4)
// [Main]   fld fs3, 24(a4)
// [Main]   ld a4, 16(s1)
// [Main]   fld fs4, 0(a4)
// [Main]   fld fs5, 8(a4)
// [Main]   fld fs6, 16(a4)
// [Main]   fld fs7, 24(a4)
// [Main]   mv a4, s3
// [Main]   mv a5, s4
// [Main]   mv a6, s5
// [Main]   mv a7, s6
// [Main]   mv t0, s7
// [Main]   mv t1, s8
// [Main]   mv t2, s9
// [Main]   mv t3, s10
// [Main]   fmv.d fa4, fs0
// [Main]   fmv.d fa5, fs1
// [Main]   fmv.d fa6, fs2
// [Main]   fmv.d fa7, fs3
// [Main]   fmv.d ft0, fs4
// [Main]   fmv.d ft1, fs5
// [Main]   fmv.d ft2, fs6
// [Main]   fmv.d ft3, fs7
// [Main]   call fma_mixed.67
// [Main]   ld a1, 0(a0)
// [Main]   ld a0, 8(a0)
// [Main]   lw t5, 0(a1)
// [Main]   sw t5, 192(sp)
// [Main]   lw t5, 4(a1)
// [Main]   sw t5, 200(sp)
// [Main]   lw t5, 8(a1)
// [Main]   sw t5, 208(sp)
// [Main]   lw t5, 12(a1)
// [Main]   sw t5, 216(sp)
// [Main]   fld fs8, 0(a0)
// [Main]   fld fs9, 8(a0)
// [Main]   fld fs10, 16(a0)
// [Main]   fld fs11, 24(a0)
// [Main]   lw t5, 192(sp)
// [Main]   mv a0, t5
// [Main]   lw t5, 200(sp)
// [Main]   mv a1, t5
// [Main]   lw t5, 208(sp)
// [Main]   mv a2, t5
// [Main]   lw t5, 216(sp)
// [Main]   mv a3, t5
// [Main]   mv a4, s3
// [Main]   mv a5, s4
// [Main]   mv a6, s5
// [Main]   mv a7, s6
// [Main]   mv t0, s7
// [Main]   mv t1, s8
// [Main]   mv t2, s9
// [Main]   mv t3, s10
// [Main]   fmv.d fa0, fs8
// [Main]   fmv.d fa1, fs9
// [Main]   fmv.d fa2, fs10
// [Main]   fmv.d fa3, fs11
// [Main]   fmv.d fa4, fs0
// [Main]   fmv.d fa5, fs1
// [Main]   fmv.d fa6, fs2
// [Main]   fmv.d fa7, fs3
// [Main]   fmv.d ft0, fs4
// [Main]   fmv.d ft1, fs5
// [Main]   fmv.d ft2, fs6
// [Main]   fmv.d ft3, fs7
// [Main]   call fma_mixed.67
// [Main]   ld a1, 0(a0)
// [Main]   ld a0, 8(a0)
// [Main]   lw s3, 0(a1)
// [Main]   lw s4, 4(a1)
// [Main]   lw s5, 8(a1)
// [Main]   lw s6, 12(a1)
// [Main]   fld fs0, 0(a0)
// [Main]   fld fs1, 8(a0)
// [Main]   fld fs2, 16(a0)
// [Main]   fld fs3, 24(a0)
// [Main]   lw t5, 192(sp)
// [Main]   mv a0, t5
// [Main]   lw t5, 200(sp)
// [Main]   mv a1, t5
// [Main]   lw t5, 208(sp)
// [Main]   mv a2, t5
// [Main]   lw t5, 216(sp)
// [Main]   mv a3, t5
// [Main]   mv a4, s3
// [Main]   mv a5, s4
// [Main]   mv a6, s5
// [Main]   mv a7, s6
// [Main]   mv t0, s7
// [Main]   mv t1, s8
// [Main]   mv t2, s9
// [Main]   mv t3, s10
// [Main]   fmv.d fa0, fs8
// [Main]   fmv.d fa1, fs9
// [Main]   fmv.d fa2, fs10
// [Main]   fmv.d fa3, fs11
// [Main]   fmv.d fa4, fs0
// [Main]   fmv.d fa5, fs1
// [Main]   fmv.d fa6, fs2
// [Main]   fmv.d fa7, fs3
// [Main]   fmv.d ft0, fs4
// [Main]   fmv.d ft1, fs5
// [Main]   fmv.d ft2, fs6
// [Main]   fmv.d ft3, fs7
// [Main]   call fma_mixed.67
// [Main]   ld a1, 0(a0)
// [Main]   ld a0, 8(a0)
// [Main]   lw t0, 0(a1)
// [Main]   lw t1, 4(a1)
// [Main]   lw t2, 8(a1)
// [Main]   lw t3, 12(a1)
// [Main]   fld ft0, 0(a0)
// [Main]   fld ft1, 8(a0)
// [Main]   fld ft2, 16(a0)
// [Main]   fld ft3, 24(a0)
// [Main]   lw t5, 192(sp)
// [Main]   mv a0, t5
// [Main]   lw t5, 200(sp)
// [Main]   mv a1, t5
// [Main]   lw t5, 208(sp)
// [Main]   mv a2, t5
// [Main]   lw t5, 216(sp)
// [Main]   mv a3, t5
// [Main]   mv a4, s3
// [Main]   mv a5, s4
// [Main]   mv a6, s5
// [Main]   mv a7, s6
// [Main]   fmv.d fa0, fs8
// [Main]   fmv.d fa1, fs9
// [Main]   fmv.d fa2, fs10
// [Main]   fmv.d fa3, fs11
// [Main]   fmv.d fa4, fs0
// [Main]   fmv.d fa5, fs1
// [Main]   fmv.d fa6, fs2
// [Main]   fmv.d fa7, fs3
// [Main]   call fma_mixed.67
// [Main]   ld a1, 0(a0)
// [Main]   ld a0, 8(a0)
// [Main]   sd a1, 0(s2)
// [Main]   sd a0, 0(s1)
// [Main]   addi a0, s0, 1
// [Main]   mv a1, s1
// [Main]   mv a2, s2
// [Main]   call stress.454
// [Main]   mv a0, zero
// [Main] 
// [Main] .stress.454_3:
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   ld s8, 72(sp)
// [Main]   ld s9, 80(sp)
// [Main]   ld s10, 88(sp)
// [Main]   fld fs0, 96(sp)
// [Main]   fld fs1, 104(sp)
// [Main]   fld fs2, 112(sp)
// [Main]   fld fs3, 120(sp)
// [Main]   fld fs4, 128(sp)
// [Main]   fld fs5, 136(sp)
// [Main]   fld fs6, 144(sp)
// [Main]   fld fs7, 152(sp)
// [Main]   fld fs8, 160(sp)
// [Main]   fld fs9, 168(sp)
// [Main]   fld fs10, 176(sp)
// [Main]   fld fs11, 184(sp)
// [Main]   addi sp, sp, 224
// [Main]   ret
// [Main] 
// [Main] .stress.454_2:
// [Main]   mv a0, zero
// [Main]   j .stress.454_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_vd_arr.453
// [Main]   .type init_vd_arr.453, @function
// [Main] # leaf false
// [Main] init_vd_arr.453:
// [Main] .init_vd_arr.453_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a2, 2
// [Main]   blt a2, a0, .init_vd_arr.453_2
// [Main] 
// [Main] .init_vd_arr.453_1:
// [Main]   fcvt.d.w fa0, a0
// [Main]   addi a2, a0, 1
// [Main]   fcvt.d.w fa1, a2
// [Main]   addi a3, a0, 2
// [Main]   fcvt.d.w fa2, a3
// [Main]   addi a3, a0, 3
// [Main]   fcvt.d.w fa3, a3
// [Main]   addi a3, s11, -32
// [Main]   andi s11, a3, -8
// [Main]   fsd fa0, 0(a3)
// [Main]   fsd fa1, 8(a3)
// [Main]   fsd fa2, 16(a3)
// [Main]   fsd fa3, 24(a3)
// [Main]   th.surd a3, a1, a0, 3
// [Main]   mv a0, a2
// [Main]   call init_vd_arr.453
// [Main]   mv a0, zero
// [Main] 
// [Main] .init_vd_arr.453_3:
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .init_vd_arr.453_2:
// [Main]   mv a0, zero
// [Main]   j .init_vd_arr.453_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl fma_mixed.67
// [Main]   .type fma_mixed.67, @function
// [Main] # leaf true
// [Main] fma_mixed.67:
// [Main] .fma_mixed.67_0:
// [Main]   mulw a0, a0, a4
// [Main]   add a0, a0, t0
// [Main]   mulw a1, a1, a5
// [Main]   add a1, a1, t1
// [Main]   mulw a2, a2, a6
// [Main]   add a2, a2, t2
// [Main]   mulw a3, a3, a7
// [Main]   add a3, a3, t3
// [Main]   addi a4, s11, -16
// [Main]   andi s11, a4, -8
// [Main]   sw a0, 0(a4)
// [Main]   sw a1, 4(a4)
// [Main]   sw a2, 8(a4)
// [Main]   sw a3, 12(a4)
// [Main]   fmadd.d fa0, fa0, fa4, ft0
// [Main]   fmadd.d fa1, fa1, fa5, ft1
// [Main]   fmadd.d fa2, fa2, fa6, ft2
// [Main]   fmadd.d fa3, fa3, fa7, ft3
// [Main]   addi a0, s11, -32
// [Main]   andi s11, a0, -8
// [Main]   fsd fa0, 0(a0)
// [Main]   fsd fa1, 8(a0)
// [Main]   fsd fa2, 16(a0)
// [Main]   fsd fa3, 24(a0)
// [Main]   addi a1, s11, -16
// [Main]   andi s11, a1, -8
// [Main]   sd a4, 0(a1)
// [Main]   sd a0, 8(a1)
// [Main]   mv a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.451
// [Main]   .type main.451, @function
// [Main] # leaf false
// [Main] main.451:
// [Main] .main.451_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   fsd fs0, 24(sp)
// [Main]   addi a0, s11, -16
// [Main]   andi s11, a0, -8
// [Main]   addi s0, s11, -24
// [Main]   andi s11, s0, -8
// [Main]   sd a0, 0(s0)
// [Main]   sd a0, 8(s0)
// [Main]   sd a0, 16(s0)
// [Main]   mv a0, zero
// [Main]   mv a1, s0
// [Main]   call init_vi_arr.452
// [Main]   addi a0, s11, -32
// [Main]   andi s11, a0, -8
// [Main]   fmv.d.x fa0, zero
// [Main]   fsd fa0, 0(a0)
// [Main]   fsd fa0, 8(a0)
// [Main]   fsd fa0, 16(a0)
// [Main]   fsd fa0, 24(a0)
// [Main]   addi s1, s11, -24
// [Main]   andi s11, s1, -8
// [Main]   sd a0, 0(s1)
// [Main]   sd a0, 8(s1)
// [Main]   sd a0, 16(s1)
// [Main]   mv a0, zero
// [Main]   mv a1, s1
// [Main]   call init_vd_arr.453
// [Main]   li a0, 1
// [Main]   mv a1, s1
// [Main]   mv a2, s0
// [Main]   call stress.454
// [Main]   ld a0, 0(s0)
// [Main]   lw a0, 0(a0)
// [Main]   ld a1, 0(s1)
// [Main]   fld fs0, 0(a1)
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   fcvt.w.d a0, fs0, rtz
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   fld fs0, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.451
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_vi_arr.452
// [Main]   .type init_vi_arr.452, @function
// [Main] # leaf false
// [Main] init_vi_arr.452:
// [Main] .init_vi_arr.452_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a2, a1
// [Main]   li a1, 2
// [Main]   blt a1, a0, .init_vi_arr.452_2
// [Main] 
// [Main] .init_vi_arr.452_1:
// [Main]   addi a1, a0, 1
// [Main]   addi a3, a0, 2
// [Main]   addi a4, a0, 3
// [Main]   addi a5, s11, -16
// [Main]   andi s11, a5, -8
// [Main]   sw a0, 0(a5)
// [Main]   sw a1, 4(a5)
// [Main]   sw a3, 8(a5)
// [Main]   sw a4, 12(a5)
// [Main]   th.surd a5, a2, a0, 3
// [Main]   mv a0, a1
// [Main]   mv a1, a2
// [Main]   call init_vi_arr.452
// [Main]   mv a0, zero
// [Main] 
// [Main] .init_vi_arr.452_3:
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .init_vi_arr.452_2:
// [Main]   mv a0, zero
// [Main]   j .init_vi_arr.452_3
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("fma_int", (Int, Int, Int, Int)), args: [("vi11", Int), ("vi12", Int), ("vi13", Int), ("vi14", Int), ("vi21", Int), ("vi22", Int), ("vi23", Int), ("vi24", Int), ("vi31", Int), ("vi32", Int), ("vi33", Int), ("vi34", Int)], body: Let(("vir1", Var(None)), Prim(Prim(Var("vi11"), Var("vi21"), Mul, kind=None), Var("vi31"), Add, kind=None), Let(("vir2", Var(None)), Prim(Prim(Var("vi12"), Var("vi22"), Mul, kind=None), Var("vi32"), Add, kind=None), Let(("vir3", Var(None)), Prim(Prim(Var("vi13"), Var("vi23"), Mul, kind=None), Var("vi33"), Add, kind=None), Let(("vir4", Var(None)), Prim(Prim(Var("vi14"), Var("vi24"), Mul, kind=None), Var("vi34"), Add, kind=None), Tuple([Var("vir1"), Var("vir2"), Var("vir3"), Var("vir4")])))))}, LetRec({tyvars: [], name: ("fma_double", (Double, Double, Double, Double)), args: [("vd11", Double), ("vd12", Double), ("vd13", Double), ("vd14", Double), ("vd21", Double), ("vd22", Double), ("vd23", Double), ("vd24", Double), ("vd31", Double), ("vd32", Double), ("vd33", Double), ("vd34", Double)], body: Let(("vdr1", Var(None)), Prim(Prim(Var("vd11"), Var("vd21"), Mul, kind=None), Var("vd31"), Add, kind=None), Let(("vdr2", Var(None)), Prim(Prim(Var("vd12"), Var("vd22"), Mul, kind=None), Var("vd32"), Add, kind=None), Let(("vdr3", Var(None)), Prim(Prim(Var("vd13"), Var("vd23"), Mul, kind=None), Var("vd33"), Add, kind=None), Let(("vdr4", Var(None)), Prim(Prim(Var("vd14"), Var("vd24"), Mul, kind=None), Var("vd34"), Add, kind=None), Tuple([Var("vdr1"), Var("vdr2"), Var("vdr3"), Var("vdr4")])))))}, LetRec({tyvars: [], name: ("fma_mixed", ((Int, Int, Int, Int), (Double, Double, Double, Double))), args: [("vi11", Int), ("vi12", Int), ("vi13", Int), ("vi14", Int), ("vi21", Int), ("vi22", Int), ("vi23", Int), ("vi24", Int), ("vi31", Int), ("vi32", Int), ("vi33", Int), ("vi34", Int), ("vd11", Double), ("vd12", Double), ("vd13", Double), ("vd14", Double), ("vd21", Double), ("vd22", Double), ("vd23", Double), ("vd24", Double), ("vd31", Double), ("vd32", Double), ("vd33", Double), ("vd34", Double)], body: Let(("vir", Var(None)), App(Var("fma_int"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34")]), Let(("vdr", Var(None)), App(Var("fma_double"), targs=None, [Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Tuple([Var("vir"), Var("vdr")])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("vi_arr", Var(None)), Array(Int(3), Tuple([Int(0), Int(0), Int(0), Int(0)])), LetRec({tyvars: [], name: ("init_vi_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Int(0)]), Let(("vd_arr", Var(None)), Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)])), LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))))))))))}, Unit))))
// [Typer] resolve: Let(("vir1", Var(None)), Prim(Prim(Var("vi11"), Var("vi21"), Mul, kind=None), Var("vi31"), Add, kind=None), Let(("vir2", Var(None)), Prim(Prim(Var("vi12"), Var("vi22"), Mul, kind=None), Var("vi32"), Add, kind=None), Let(("vir3", Var(None)), Prim(Prim(Var("vi13"), Var("vi23"), Mul, kind=None), Var("vi33"), Add, kind=None), Let(("vir4", Var(None)), Prim(Prim(Var("vi14"), Var("vi24"), Mul, kind=None), Var("vi34"), Add, kind=None), Tuple([Var("vir1"), Var("vir2"), Var("vir3"), Var("vir4")])))))
// [Typer] resolve: Prim(Prim(Var("vi11"), Var("vi21"), Mul, kind=None), Var("vi31"), Add, kind=None)
// [Typer] resolve: Prim(Var("vi11"), Var("vi21"), Mul, kind=None)
// [Typer] resolve: Var("vi11")
// [Typer] resolve: Var("vi21")
// [Typer] resolve: Var("vi31")
// [Typer] resolve: Let(("vir2", Var(None)), Prim(Prim(Var("vi12"), Var("vi22"), Mul, kind=None), Var("vi32"), Add, kind=None), Let(("vir3", Var(None)), Prim(Prim(Var("vi13"), Var("vi23"), Mul, kind=None), Var("vi33"), Add, kind=None), Let(("vir4", Var(None)), Prim(Prim(Var("vi14"), Var("vi24"), Mul, kind=None), Var("vi34"), Add, kind=None), Tuple([Var("vir1"), Var("vir2"), Var("vir3"), Var("vir4")]))))
// [Typer] resolve: Prim(Prim(Var("vi12"), Var("vi22"), Mul, kind=None), Var("vi32"), Add, kind=None)
// [Typer] resolve: Prim(Var("vi12"), Var("vi22"), Mul, kind=None)
// [Typer] resolve: Var("vi12")
// [Typer] resolve: Var("vi22")
// [Typer] resolve: Var("vi32")
// [Typer] resolve: Let(("vir3", Var(None)), Prim(Prim(Var("vi13"), Var("vi23"), Mul, kind=None), Var("vi33"), Add, kind=None), Let(("vir4", Var(None)), Prim(Prim(Var("vi14"), Var("vi24"), Mul, kind=None), Var("vi34"), Add, kind=None), Tuple([Var("vir1"), Var("vir2"), Var("vir3"), Var("vir4")])))
// [Typer] resolve: Prim(Prim(Var("vi13"), Var("vi23"), Mul, kind=None), Var("vi33"), Add, kind=None)
// [Typer] resolve: Prim(Var("vi13"), Var("vi23"), Mul, kind=None)
// [Typer] resolve: Var("vi13")
// [Typer] resolve: Var("vi23")
// [Typer] resolve: Var("vi33")
// [Typer] resolve: Let(("vir4", Var(None)), Prim(Prim(Var("vi14"), Var("vi24"), Mul, kind=None), Var("vi34"), Add, kind=None), Tuple([Var("vir1"), Var("vir2"), Var("vir3"), Var("vir4")]))
// [Typer] resolve: Prim(Prim(Var("vi14"), Var("vi24"), Mul, kind=None), Var("vi34"), Add, kind=None)
// [Typer] resolve: Prim(Var("vi14"), Var("vi24"), Mul, kind=None)
// [Typer] resolve: Var("vi14")
// [Typer] resolve: Var("vi24")
// [Typer] resolve: Var("vi34")
// [Typer] resolve: Tuple([Var("vir1"), Var("vir2"), Var("vir3"), Var("vir4")])
// [Typer] resolve: LetRec({tyvars: [], name: ("fma_double", (Double, Double, Double, Double)), args: [("vd11", Double), ("vd12", Double), ("vd13", Double), ("vd14", Double), ("vd21", Double), ("vd22", Double), ("vd23", Double), ("vd24", Double), ("vd31", Double), ("vd32", Double), ("vd33", Double), ("vd34", Double)], body: Let(("vdr1", Var(None)), Prim(Prim(Var("vd11"), Var("vd21"), Mul, kind=None), Var("vd31"), Add, kind=None), Let(("vdr2", Var(None)), Prim(Prim(Var("vd12"), Var("vd22"), Mul, kind=None), Var("vd32"), Add, kind=None), Let(("vdr3", Var(None)), Prim(Prim(Var("vd13"), Var("vd23"), Mul, kind=None), Var("vd33"), Add, kind=None), Let(("vdr4", Var(None)), Prim(Prim(Var("vd14"), Var("vd24"), Mul, kind=None), Var("vd34"), Add, kind=None), Tuple([Var("vdr1"), Var("vdr2"), Var("vdr3"), Var("vdr4")])))))}, LetRec({tyvars: [], name: ("fma_mixed", ((Int, Int, Int, Int), (Double, Double, Double, Double))), args: [("vi11", Int), ("vi12", Int), ("vi13", Int), ("vi14", Int), ("vi21", Int), ("vi22", Int), ("vi23", Int), ("vi24", Int), ("vi31", Int), ("vi32", Int), ("vi33", Int), ("vi34", Int), ("vd11", Double), ("vd12", Double), ("vd13", Double), ("vd14", Double), ("vd21", Double), ("vd22", Double), ("vd23", Double), ("vd24", Double), ("vd31", Double), ("vd32", Double), ("vd33", Double), ("vd34", Double)], body: Let(("vir", Var(None)), App(Var("fma_int"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34")]), Let(("vdr", Var(None)), App(Var("fma_double"), targs=None, [Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Tuple([Var("vir"), Var("vdr")])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("vi_arr", Var(None)), Array(Int(3), Tuple([Int(0), Int(0), Int(0), Int(0)])), LetRec({tyvars: [], name: ("init_vi_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Int(0)]), Let(("vd_arr", Var(None)), Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)])), LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))))))))))}, Unit)))
// [Typer] resolve: Let(("vdr1", Var(None)), Prim(Prim(Var("vd11"), Var("vd21"), Mul, kind=None), Var("vd31"), Add, kind=None), Let(("vdr2", Var(None)), Prim(Prim(Var("vd12"), Var("vd22"), Mul, kind=None), Var("vd32"), Add, kind=None), Let(("vdr3", Var(None)), Prim(Prim(Var("vd13"), Var("vd23"), Mul, kind=None), Var("vd33"), Add, kind=None), Let(("vdr4", Var(None)), Prim(Prim(Var("vd14"), Var("vd24"), Mul, kind=None), Var("vd34"), Add, kind=None), Tuple([Var("vdr1"), Var("vdr2"), Var("vdr3"), Var("vdr4")])))))
// [Typer] resolve: Prim(Prim(Var("vd11"), Var("vd21"), Mul, kind=None), Var("vd31"), Add, kind=None)
// [Typer] resolve: Prim(Var("vd11"), Var("vd21"), Mul, kind=None)
// [Typer] resolve: Var("vd11")
// [Typer] resolve: Var("vd21")
// [Typer] resolve: Var("vd31")
// [Typer] resolve: Let(("vdr2", Var(None)), Prim(Prim(Var("vd12"), Var("vd22"), Mul, kind=None), Var("vd32"), Add, kind=None), Let(("vdr3", Var(None)), Prim(Prim(Var("vd13"), Var("vd23"), Mul, kind=None), Var("vd33"), Add, kind=None), Let(("vdr4", Var(None)), Prim(Prim(Var("vd14"), Var("vd24"), Mul, kind=None), Var("vd34"), Add, kind=None), Tuple([Var("vdr1"), Var("vdr2"), Var("vdr3"), Var("vdr4")]))))
// [Typer] resolve: Prim(Prim(Var("vd12"), Var("vd22"), Mul, kind=None), Var("vd32"), Add, kind=None)
// [Typer] resolve: Prim(Var("vd12"), Var("vd22"), Mul, kind=None)
// [Typer] resolve: Var("vd12")
// [Typer] resolve: Var("vd22")
// [Typer] resolve: Var("vd32")
// [Typer] resolve: Let(("vdr3", Var(None)), Prim(Prim(Var("vd13"), Var("vd23"), Mul, kind=None), Var("vd33"), Add, kind=None), Let(("vdr4", Var(None)), Prim(Prim(Var("vd14"), Var("vd24"), Mul, kind=None), Var("vd34"), Add, kind=None), Tuple([Var("vdr1"), Var("vdr2"), Var("vdr3"), Var("vdr4")])))
// [Typer] resolve: Prim(Prim(Var("vd13"), Var("vd23"), Mul, kind=None), Var("vd33"), Add, kind=None)
// [Typer] resolve: Prim(Var("vd13"), Var("vd23"), Mul, kind=None)
// [Typer] resolve: Var("vd13")
// [Typer] resolve: Var("vd23")
// [Typer] resolve: Var("vd33")
// [Typer] resolve: Let(("vdr4", Var(None)), Prim(Prim(Var("vd14"), Var("vd24"), Mul, kind=None), Var("vd34"), Add, kind=None), Tuple([Var("vdr1"), Var("vdr2"), Var("vdr3"), Var("vdr4")]))
// [Typer] resolve: Prim(Prim(Var("vd14"), Var("vd24"), Mul, kind=None), Var("vd34"), Add, kind=None)
// [Typer] resolve: Prim(Var("vd14"), Var("vd24"), Mul, kind=None)
// [Typer] resolve: Var("vd14")
// [Typer] resolve: Var("vd24")
// [Typer] resolve: Var("vd34")
// [Typer] resolve: Tuple([Var("vdr1"), Var("vdr2"), Var("vdr3"), Var("vdr4")])
// [Typer] resolve: LetRec({tyvars: [], name: ("fma_mixed", ((Int, Int, Int, Int), (Double, Double, Double, Double))), args: [("vi11", Int), ("vi12", Int), ("vi13", Int), ("vi14", Int), ("vi21", Int), ("vi22", Int), ("vi23", Int), ("vi24", Int), ("vi31", Int), ("vi32", Int), ("vi33", Int), ("vi34", Int), ("vd11", Double), ("vd12", Double), ("vd13", Double), ("vd14", Double), ("vd21", Double), ("vd22", Double), ("vd23", Double), ("vd24", Double), ("vd31", Double), ("vd32", Double), ("vd33", Double), ("vd34", Double)], body: Let(("vir", Var(None)), App(Var("fma_int"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34")]), Let(("vdr", Var(None)), App(Var("fma_double"), targs=None, [Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Tuple([Var("vir"), Var("vdr")])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("vi_arr", Var(None)), Array(Int(3), Tuple([Int(0), Int(0), Int(0), Int(0)])), LetRec({tyvars: [], name: ("init_vi_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Int(0)]), Let(("vd_arr", Var(None)), Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)])), LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))))))))))}, Unit))
// [Typer] resolve: Let(("vir", Var(None)), App(Var("fma_int"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34")]), Let(("vdr", Var(None)), App(Var("fma_double"), targs=None, [Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Tuple([Var("vir"), Var("vdr")])))
// [Typer] resolve: App(Var("fma_int"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34")])
// [Typer] resolve: Var("vi11")
// [Typer] resolve: Var("vi12")
// [Typer] resolve: Var("vi13")
// [Typer] resolve: Var("vi14")
// [Typer] resolve: Var("vi21")
// [Typer] resolve: Var("vi22")
// [Typer] resolve: Var("vi23")
// [Typer] resolve: Var("vi24")
// [Typer] resolve: Var("vi31")
// [Typer] resolve: Var("vi32")
// [Typer] resolve: Var("vi33")
// [Typer] resolve: Var("vi34")
// [Typer] resolve: Var("fma_int")
// [Typer] resolve: Let(("vdr", Var(None)), App(Var("fma_double"), targs=None, [Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Tuple([Var("vir"), Var("vdr")]))
// [Typer] resolve: App(Var("fma_double"), targs=None, [Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")])
// [Typer] resolve: Var("vd11")
// [Typer] resolve: Var("vd12")
// [Typer] resolve: Var("vd13")
// [Typer] resolve: Var("vd14")
// [Typer] resolve: Var("vd21")
// [Typer] resolve: Var("vd22")
// [Typer] resolve: Var("vd23")
// [Typer] resolve: Var("vd24")
// [Typer] resolve: Var("vd31")
// [Typer] resolve: Var("vd32")
// [Typer] resolve: Var("vd33")
// [Typer] resolve: Var("vd34")
// [Typer] resolve: Var("fma_double")
// [Typer] resolve: Tuple([Var("vir"), Var("vdr")])
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("vi_arr", Var(None)), Array(Int(3), Tuple([Int(0), Int(0), Int(0), Int(0)])), LetRec({tyvars: [], name: ("init_vi_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Int(0)]), Let(("vd_arr", Var(None)), Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)])), LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))))))))))}, Unit)
// [Typer] resolve: Let(("vi_arr", Var(None)), Array(Int(3), Tuple([Int(0), Int(0), Int(0), Int(0)])), LetRec({tyvars: [], name: ("init_vi_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Int(0)]), Let(("vd_arr", Var(None)), Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)])), LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))))))))))
// [Typer] resolve: Array(Int(3), Tuple([Int(0), Int(0), Int(0), Int(0)]))
// [Typer] resolve: Int(3)
// [Typer] resolve: Tuple([Int(0), Int(0), Int(0), Int(0)])
// [Typer] resolve: LetRec({tyvars: [], name: ("init_vi_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Int(0)]), Let(("vd_arr", Var(None)), Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)])), LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit)))))))))))))
// [Typer] resolve: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)
// [Typer] resolve: If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)
// [Typer] resolve: LE(Var("i"), Int(2))
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(2)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit))
// [Typer] resolve: Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)]))
// [Typer] resolve: Var("vi_arr")
// [Typer] resolve: Var("i")
// [Typer] resolve: Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])
// [Typer] resolve: Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)
// [Typer] resolve: App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])
// [Typer] resolve: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("init_vi_arr")
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Int(0)]), Let(("vd_arr", Var(None)), Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)])), LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))))))))
// [Typer] resolve: App(Var("init_vi_arr"), targs=None, [Int(0)])
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("init_vi_arr")
// [Typer] resolve: Let(("vd_arr", Var(None)), Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)])), LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit)))))))))))
// [Typer] resolve: Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)]))
// [Typer] resolve: Int(3)
// [Typer] resolve: Tuple([Double(0), Double(0), Double(0), Double(0)])
// [Typer] resolve: LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))))))
// [Typer] resolve: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)
// [Typer] resolve: If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)
// [Typer] resolve: LE(Var("i"), Int(2))
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(2)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit))
// [Typer] resolve: Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])]))
// [Typer] resolve: Var("vd_arr")
// [Typer] resolve: Var("i")
// [Typer] resolve: Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])
// [Typer] resolve: Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)
// [Typer] resolve: App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])
// [Typer] resolve: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("init_vd_arr")
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit)))))))))
// [Typer] resolve: App(Var("init_vd_arr"), targs=None, [Int(0)])
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("init_vd_arr")
// [Typer] resolve: LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))))
// [Typer] resolve: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))
// [Typer] resolve: Get(Var("vi_arr"), Int(0))
// [Typer] resolve: Var("vi_arr")
// [Typer] resolve: Int(0)
// [Typer] resolve: LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)))))))))))))))))
// [Typer] resolve: Get(Var("vi_arr"), Int(1))
// [Typer] resolve: Var("vi_arr")
// [Typer] resolve: Int(1)
// [Typer] resolve: LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))
// [Typer] resolve: Get(Var("vi_arr"), Int(2))
// [Typer] resolve: Var("vi_arr")
// [Typer] resolve: Int(2)
// [Typer] resolve: LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)))))))))))))))
// [Typer] resolve: Get(Var("vd_arr"), Int(0))
// [Typer] resolve: Var("vd_arr")
// [Typer] resolve: Int(0)
// [Typer] resolve: LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))
// [Typer] resolve: Get(Var("vd_arr"), Int(1))
// [Typer] resolve: Var("vd_arr")
// [Typer] resolve: Int(1)
// [Typer] resolve: LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)))))))))))))
// [Typer] resolve: Get(Var("vd_arr"), Int(2))
// [Typer] resolve: Var("vd_arr")
// [Typer] resolve: Int(2)
// [Typer] resolve: LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))
// [Typer] resolve: App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")])
// [Typer] resolve: Var("vi11")
// [Typer] resolve: Var("vi12")
// [Typer] resolve: Var("vi13")
// [Typer] resolve: Var("vi14")
// [Typer] resolve: Var("vi21")
// [Typer] resolve: Var("vi22")
// [Typer] resolve: Var("vi23")
// [Typer] resolve: Var("vi24")
// [Typer] resolve: Var("vi31")
// [Typer] resolve: Var("vi32")
// [Typer] resolve: Var("vi33")
// [Typer] resolve: Var("vi34")
// [Typer] resolve: Var("vd11")
// [Typer] resolve: Var("vd12")
// [Typer] resolve: Var("vd13")
// [Typer] resolve: Var("vd14")
// [Typer] resolve: Var("vd21")
// [Typer] resolve: Var("vd22")
// [Typer] resolve: Var("vd23")
// [Typer] resolve: Var("vd24")
// [Typer] resolve: Var("vd31")
// [Typer] resolve: Var("vd32")
// [Typer] resolve: Var("vd33")
// [Typer] resolve: Var("vd34")
// [Typer] resolve: Var("fma_mixed")
// [Typer] resolve: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)))))))))))
// [Typer] resolve: Var("vir")
// [Typer] resolve: LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))
// [Typer] resolve: Var("vdr")
// [Typer] resolve: LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)))))))))
// [Typer] resolve: App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")])
// [Typer] resolve: Var("vi11")
// [Typer] resolve: Var("vi12")
// [Typer] resolve: Var("vi13")
// [Typer] resolve: Var("vi14")
// [Typer] resolve: Var("vi21")
// [Typer] resolve: Var("vi22")
// [Typer] resolve: Var("vi23")
// [Typer] resolve: Var("vi24")
// [Typer] resolve: Var("vi31")
// [Typer] resolve: Var("vi32")
// [Typer] resolve: Var("vi33")
// [Typer] resolve: Var("vi34")
// [Typer] resolve: Var("vd11")
// [Typer] resolve: Var("vd12")
// [Typer] resolve: Var("vd13")
// [Typer] resolve: Var("vd14")
// [Typer] resolve: Var("vd21")
// [Typer] resolve: Var("vd22")
// [Typer] resolve: Var("vd23")
// [Typer] resolve: Var("vd24")
// [Typer] resolve: Var("vd31")
// [Typer] resolve: Var("vd32")
// [Typer] resolve: Var("vd33")
// [Typer] resolve: Var("vd34")
// [Typer] resolve: Var("fma_mixed")
// [Typer] resolve: LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))
// [Typer] resolve: Var("vir")
// [Typer] resolve: LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)))))))
// [Typer] resolve: Var("vdr")
// [Typer] resolve: LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))
// [Typer] resolve: App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")])
// [Typer] resolve: Var("vi11")
// [Typer] resolve: Var("vi12")
// [Typer] resolve: Var("vi13")
// [Typer] resolve: Var("vi14")
// [Typer] resolve: Var("vi21")
// [Typer] resolve: Var("vi22")
// [Typer] resolve: Var("vi23")
// [Typer] resolve: Var("vi24")
// [Typer] resolve: Var("vi31")
// [Typer] resolve: Var("vi32")
// [Typer] resolve: Var("vi33")
// [Typer] resolve: Var("vi34")
// [Typer] resolve: Var("vd11")
// [Typer] resolve: Var("vd12")
// [Typer] resolve: Var("vd13")
// [Typer] resolve: Var("vd14")
// [Typer] resolve: Var("vd21")
// [Typer] resolve: Var("vd22")
// [Typer] resolve: Var("vd23")
// [Typer] resolve: Var("vd24")
// [Typer] resolve: Var("vd31")
// [Typer] resolve: Var("vd32")
// [Typer] resolve: Var("vd33")
// [Typer] resolve: Var("vd34")
// [Typer] resolve: Var("fma_mixed")
// [Typer] resolve: LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)))))
// [Typer] resolve: Var("vir")
// [Typer] resolve: LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))
// [Typer] resolve: Var("vdr")
// [Typer] resolve: LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)))
// [Typer] resolve: App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")])
// [Typer] resolve: Var("vi11")
// [Typer] resolve: Var("vi12")
// [Typer] resolve: Var("vi13")
// [Typer] resolve: Var("vi14")
// [Typer] resolve: Var("vi21")
// [Typer] resolve: Var("vi22")
// [Typer] resolve: Var("vi23")
// [Typer] resolve: Var("vi24")
// [Typer] resolve: Var("vi31")
// [Typer] resolve: Var("vi32")
// [Typer] resolve: Var("vi33")
// [Typer] resolve: Var("vi34")
// [Typer] resolve: Var("vd11")
// [Typer] resolve: Var("vd12")
// [Typer] resolve: Var("vd13")
// [Typer] resolve: Var("vd14")
// [Typer] resolve: Var("vd21")
// [Typer] resolve: Var("vd22")
// [Typer] resolve: Var("vd23")
// [Typer] resolve: Var("vd24")
// [Typer] resolve: Var("vd31")
// [Typer] resolve: Var("vd32")
// [Typer] resolve: Var("vd33")
// [Typer] resolve: Var("vd34")
// [Typer] resolve: Var("fma_mixed")
// [Typer] resolve: Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))
// [Typer] resolve: Put(Var("vi_arr"), Int(0), Var("vir"))
// [Typer] resolve: Var("vi_arr")
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("vir")
// [Typer] resolve: Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)
// [Typer] resolve: Put(Var("vd_arr"), Int(0), Var("vdr"))
// [Typer] resolve: Var("vd_arr")
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("vdr")
// [Typer] resolve: Unit
// [Typer] resolve: LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit)))))))
// [Typer] resolve: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)
// [Typer] resolve: If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)
// [Typer] resolve: LE(Var("i"), Int(3))
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(3)
// [Typer] resolve: Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit))
// [Typer] resolve: App(Var("iter_fma"), targs=None, [])
// [Typer] resolve: Var("iter_fma")
// [Typer] resolve: Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)
// [Typer] resolve: App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])
// [Typer] resolve: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("stress")
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))
// [Typer] resolve: App(Var("stress"), targs=None, [Int(1)])
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("stress")
// [Typer] resolve: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit)))))
// [Typer] resolve: Get(Var("vi_arr"), Int(0))
// [Typer] resolve: Var("vi_arr")
// [Typer] resolve: Int(0)
// [Typer] resolve: LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))
// [Typer] resolve: Get(Var("vd_arr"), Int(0))
// [Typer] resolve: Var("vd_arr")
// [Typer] resolve: Int(0)
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit)))
// [Typer] resolve: App(Var("print_int"), targs=None, [Var("vi11")])
// [Typer] resolve: Var("vi11")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))
// [Typer] resolve: App(Var("print_char"), targs=None, [Int(10)])
// [Typer] resolve: Int(10)
// [Typer] resolve: Var("print_char")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit)
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])])
// [Typer] resolve: App(Var("int_of_float"), targs=None, [Var("vd11")])
// [Typer] resolve: Var("vd11")
// [Typer] resolve: Var("int_of_float")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("fma_int", (Int, Int, Int, Int)), args: [("vi11", Int), ("vi12", Int), ("vi13", Int), ("vi14", Int), ("vi21", Int), ("vi22", Int), ("vi23", Int), ("vi24", Int), ("vi31", Int), ("vi32", Int), ("vi33", Int), ("vi34", Int)], body: Let(("vir1", Var(None)), Prim(Prim(Var("vi11"), Var("vi21"), Mul, kind=None), Var("vi31"), Add, kind=None), Let(("vir2", Var(None)), Prim(Prim(Var("vi12"), Var("vi22"), Mul, kind=None), Var("vi32"), Add, kind=None), Let(("vir3", Var(None)), Prim(Prim(Var("vi13"), Var("vi23"), Mul, kind=None), Var("vi33"), Add, kind=None), Let(("vir4", Var(None)), Prim(Prim(Var("vi14"), Var("vi24"), Mul, kind=None), Var("vi34"), Add, kind=None), Tuple([Var("vir1"), Var("vir2"), Var("vir3"), Var("vir4")])))))}, LetRec({tyvars: [], name: ("fma_double", (Double, Double, Double, Double)), args: [("vd11", Double), ("vd12", Double), ("vd13", Double), ("vd14", Double), ("vd21", Double), ("vd22", Double), ("vd23", Double), ("vd24", Double), ("vd31", Double), ("vd32", Double), ("vd33", Double), ("vd34", Double)], body: Let(("vdr1", Var(None)), Prim(Prim(Var("vd11"), Var("vd21"), Mul, kind=None), Var("vd31"), Add, kind=None), Let(("vdr2", Var(None)), Prim(Prim(Var("vd12"), Var("vd22"), Mul, kind=None), Var("vd32"), Add, kind=None), Let(("vdr3", Var(None)), Prim(Prim(Var("vd13"), Var("vd23"), Mul, kind=None), Var("vd33"), Add, kind=None), Let(("vdr4", Var(None)), Prim(Prim(Var("vd14"), Var("vd24"), Mul, kind=None), Var("vd34"), Add, kind=None), Tuple([Var("vdr1"), Var("vdr2"), Var("vdr3"), Var("vdr4")])))))}, LetRec({tyvars: [], name: ("fma_mixed", ((Int, Int, Int, Int), (Double, Double, Double, Double))), args: [("vi11", Int), ("vi12", Int), ("vi13", Int), ("vi14", Int), ("vi21", Int), ("vi22", Int), ("vi23", Int), ("vi24", Int), ("vi31", Int), ("vi32", Int), ("vi33", Int), ("vi34", Int), ("vd11", Double), ("vd12", Double), ("vd13", Double), ("vd14", Double), ("vd21", Double), ("vd22", Double), ("vd23", Double), ("vd24", Double), ("vd31", Double), ("vd32", Double), ("vd33", Double), ("vd34", Double)], body: Let(("vir", Var(None)), App(Var("fma_int"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34")]), Let(("vdr", Var(None)), App(Var("fma_double"), targs=None, [Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Tuple([Var("vir"), Var("vdr")])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("vi_arr", Var(None)), Array(Int(3), Tuple([Int(0), Int(0), Int(0), Int(0)])), LetRec({tyvars: [], name: ("init_vi_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Int(0)]), Let(("vd_arr", Var(None)), Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)])), LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))))))))))}, Unit)))) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("vir1", Var(None)), Prim(Prim(Var("vi11"), Var("vi21"), Mul, kind=None), Var("vi31"), Add, kind=None), Let(("vir2", Var(None)), Prim(Prim(Var("vi12"), Var("vi22"), Mul, kind=None), Var("vi32"), Add, kind=None), Let(("vir3", Var(None)), Prim(Prim(Var("vi13"), Var("vi23"), Mul, kind=None), Var("vi33"), Add, kind=None), Let(("vir4", Var(None)), Prim(Prim(Var("vi14"), Var("vi24"), Mul, kind=None), Var("vi34"), Add, kind=None), Tuple([Var("vir1"), Var("vir2"), Var("vir3"), Var("vir4")]))))) against (Int, Int, Int, Int)
// [Typer] infer: Prim(Prim(Var("vi11"), Var("vi21"), Mul, kind=None), Var("vi31"), Add, kind=None)
// [Typer] infer: Prim(Var("vi11"), Var("vi21"), Mul, kind=None)
// [Typer] infer: Var("vi11")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("vi21")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("vi31")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("vir2", Var(None)), Prim(Prim(Var("vi12"), Var("vi22"), Mul, kind=None), Var("vi32"), Add, kind=None), Let(("vir3", Var(None)), Prim(Prim(Var("vi13"), Var("vi23"), Mul, kind=None), Var("vi33"), Add, kind=None), Let(("vir4", Var(None)), Prim(Prim(Var("vi14"), Var("vi24"), Mul, kind=None), Var("vi34"), Add, kind=None), Tuple([Var("vir1"), Var("vir2"), Var("vir3"), Var("vir4")])))) against (Int, Int, Int, Int)
// [Typer] infer: Prim(Prim(Var("vi12"), Var("vi22"), Mul, kind=None), Var("vi32"), Add, kind=None)
// [Typer] infer: Prim(Var("vi12"), Var("vi22"), Mul, kind=None)
// [Typer] infer: Var("vi12")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("vi22")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("vi32")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("vir3", Var(None)), Prim(Prim(Var("vi13"), Var("vi23"), Mul, kind=None), Var("vi33"), Add, kind=None), Let(("vir4", Var(None)), Prim(Prim(Var("vi14"), Var("vi24"), Mul, kind=None), Var("vi34"), Add, kind=None), Tuple([Var("vir1"), Var("vir2"), Var("vir3"), Var("vir4")]))) against (Int, Int, Int, Int)
// [Typer] infer: Prim(Prim(Var("vi13"), Var("vi23"), Mul, kind=None), Var("vi33"), Add, kind=None)
// [Typer] infer: Prim(Var("vi13"), Var("vi23"), Mul, kind=None)
// [Typer] infer: Var("vi13")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("vi23")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("vi33")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("vir4", Var(None)), Prim(Prim(Var("vi14"), Var("vi24"), Mul, kind=None), Var("vi34"), Add, kind=None), Tuple([Var("vir1"), Var("vir2"), Var("vir3"), Var("vir4")])) against (Int, Int, Int, Int)
// [Typer] infer: Prim(Prim(Var("vi14"), Var("vi24"), Mul, kind=None), Var("vi34"), Add, kind=None)
// [Typer] infer: Prim(Var("vi14"), Var("vi24"), Mul, kind=None)
// [Typer] infer: Var("vi14")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("vi24")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("vi34")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Tuple([Var("vir1"), Var("vir2"), Var("vir3"), Var("vir4")]) against (Int, Int, Int, Int)
// [Typer] check: Var("vir1") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vir2") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vir3") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vir4") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("fma_double", (Double, Double, Double, Double)), args: [("vd11", Double), ("vd12", Double), ("vd13", Double), ("vd14", Double), ("vd21", Double), ("vd22", Double), ("vd23", Double), ("vd24", Double), ("vd31", Double), ("vd32", Double), ("vd33", Double), ("vd34", Double)], body: Let(("vdr1", Var(None)), Prim(Prim(Var("vd11"), Var("vd21"), Mul, kind=None), Var("vd31"), Add, kind=None), Let(("vdr2", Var(None)), Prim(Prim(Var("vd12"), Var("vd22"), Mul, kind=None), Var("vd32"), Add, kind=None), Let(("vdr3", Var(None)), Prim(Prim(Var("vd13"), Var("vd23"), Mul, kind=None), Var("vd33"), Add, kind=None), Let(("vdr4", Var(None)), Prim(Prim(Var("vd14"), Var("vd24"), Mul, kind=None), Var("vd34"), Add, kind=None), Tuple([Var("vdr1"), Var("vdr2"), Var("vdr3"), Var("vdr4")])))))}, LetRec({tyvars: [], name: ("fma_mixed", ((Int, Int, Int, Int), (Double, Double, Double, Double))), args: [("vi11", Int), ("vi12", Int), ("vi13", Int), ("vi14", Int), ("vi21", Int), ("vi22", Int), ("vi23", Int), ("vi24", Int), ("vi31", Int), ("vi32", Int), ("vi33", Int), ("vi34", Int), ("vd11", Double), ("vd12", Double), ("vd13", Double), ("vd14", Double), ("vd21", Double), ("vd22", Double), ("vd23", Double), ("vd24", Double), ("vd31", Double), ("vd32", Double), ("vd33", Double), ("vd34", Double)], body: Let(("vir", Var(None)), App(Var("fma_int"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34")]), Let(("vdr", Var(None)), App(Var("fma_double"), targs=None, [Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Tuple([Var("vir"), Var("vdr")])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("vi_arr", Var(None)), Array(Int(3), Tuple([Int(0), Int(0), Int(0), Int(0)])), LetRec({tyvars: [], name: ("init_vi_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Int(0)]), Let(("vd_arr", Var(None)), Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)])), LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))))))))))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("vdr1", Var(None)), Prim(Prim(Var("vd11"), Var("vd21"), Mul, kind=None), Var("vd31"), Add, kind=None), Let(("vdr2", Var(None)), Prim(Prim(Var("vd12"), Var("vd22"), Mul, kind=None), Var("vd32"), Add, kind=None), Let(("vdr3", Var(None)), Prim(Prim(Var("vd13"), Var("vd23"), Mul, kind=None), Var("vd33"), Add, kind=None), Let(("vdr4", Var(None)), Prim(Prim(Var("vd14"), Var("vd24"), Mul, kind=None), Var("vd34"), Add, kind=None), Tuple([Var("vdr1"), Var("vdr2"), Var("vdr3"), Var("vdr4")]))))) against (Double, Double, Double, Double)
// [Typer] infer: Prim(Prim(Var("vd11"), Var("vd21"), Mul, kind=None), Var("vd31"), Add, kind=None)
// [Typer] infer: Prim(Var("vd11"), Var("vd21"), Mul, kind=None)
// [Typer] infer: Var("vd11")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] infer: Var("vd21")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] infer: Var("vd31")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] check: Let(("vdr2", Var(None)), Prim(Prim(Var("vd12"), Var("vd22"), Mul, kind=None), Var("vd32"), Add, kind=None), Let(("vdr3", Var(None)), Prim(Prim(Var("vd13"), Var("vd23"), Mul, kind=None), Var("vd33"), Add, kind=None), Let(("vdr4", Var(None)), Prim(Prim(Var("vd14"), Var("vd24"), Mul, kind=None), Var("vd34"), Add, kind=None), Tuple([Var("vdr1"), Var("vdr2"), Var("vdr3"), Var("vdr4")])))) against (Double, Double, Double, Double)
// [Typer] infer: Prim(Prim(Var("vd12"), Var("vd22"), Mul, kind=None), Var("vd32"), Add, kind=None)
// [Typer] infer: Prim(Var("vd12"), Var("vd22"), Mul, kind=None)
// [Typer] infer: Var("vd12")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] infer: Var("vd22")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] infer: Var("vd32")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] check: Let(("vdr3", Var(None)), Prim(Prim(Var("vd13"), Var("vd23"), Mul, kind=None), Var("vd33"), Add, kind=None), Let(("vdr4", Var(None)), Prim(Prim(Var("vd14"), Var("vd24"), Mul, kind=None), Var("vd34"), Add, kind=None), Tuple([Var("vdr1"), Var("vdr2"), Var("vdr3"), Var("vdr4")]))) against (Double, Double, Double, Double)
// [Typer] infer: Prim(Prim(Var("vd13"), Var("vd23"), Mul, kind=None), Var("vd33"), Add, kind=None)
// [Typer] infer: Prim(Var("vd13"), Var("vd23"), Mul, kind=None)
// [Typer] infer: Var("vd13")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] infer: Var("vd23")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] infer: Var("vd33")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] check: Let(("vdr4", Var(None)), Prim(Prim(Var("vd14"), Var("vd24"), Mul, kind=None), Var("vd34"), Add, kind=None), Tuple([Var("vdr1"), Var("vdr2"), Var("vdr3"), Var("vdr4")])) against (Double, Double, Double, Double)
// [Typer] infer: Prim(Prim(Var("vd14"), Var("vd24"), Mul, kind=None), Var("vd34"), Add, kind=None)
// [Typer] infer: Prim(Var("vd14"), Var("vd24"), Mul, kind=None)
// [Typer] infer: Var("vd14")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] infer: Var("vd24")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] infer: Var("vd34")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] check: Tuple([Var("vdr1"), Var("vdr2"), Var("vdr3"), Var("vdr4")]) against (Double, Double, Double, Double)
// [Typer] check: Var("vdr1") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vdr2") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vdr3") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vdr4") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: LetRec({tyvars: [], name: ("fma_mixed", ((Int, Int, Int, Int), (Double, Double, Double, Double))), args: [("vi11", Int), ("vi12", Int), ("vi13", Int), ("vi14", Int), ("vi21", Int), ("vi22", Int), ("vi23", Int), ("vi24", Int), ("vi31", Int), ("vi32", Int), ("vi33", Int), ("vi34", Int), ("vd11", Double), ("vd12", Double), ("vd13", Double), ("vd14", Double), ("vd21", Double), ("vd22", Double), ("vd23", Double), ("vd24", Double), ("vd31", Double), ("vd32", Double), ("vd33", Double), ("vd34", Double)], body: Let(("vir", Var(None)), App(Var("fma_int"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34")]), Let(("vdr", Var(None)), App(Var("fma_double"), targs=None, [Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Tuple([Var("vir"), Var("vdr")])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("vi_arr", Var(None)), Array(Int(3), Tuple([Int(0), Int(0), Int(0), Int(0)])), LetRec({tyvars: [], name: ("init_vi_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Int(0)]), Let(("vd_arr", Var(None)), Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)])), LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))))))))))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("vir", Var(None)), App(Var("fma_int"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34")]), Let(("vdr", Var(None)), App(Var("fma_double"), targs=None, [Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Tuple([Var("vir"), Var("vdr")]))) against ((Int, Int, Int, Int), (Double, Double, Double, Double))
// [Typer] infer: App(Var("fma_int"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34")])
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int) -> (Int, Int, Int, Int)))
// [Typer] inst result: (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int) -> (Int, Int, Int, Int)
// [Typer] check: Var("vi11") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi12") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi13") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi14") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi21") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi22") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi23") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi24") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi31") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi32") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi33") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi34") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and (Int, Int, Int, Int)
// [Typer] union: Var(None) and (Int, Int, Int, Int)
// [Typer] check: Let(("vdr", Var(None)), App(Var("fma_double"), targs=None, [Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Tuple([Var("vir"), Var("vdr")])) against ((Int, Int, Int, Int), (Double, Double, Double, Double))
// [Typer] infer: App(Var("fma_double"), targs=None, [Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")])
// [Typer] inst: TypeScheme(([], (Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) -> (Double, Double, Double, Double)))
// [Typer] inst result: (Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) -> (Double, Double, Double, Double)
// [Typer] check: Var("vd11") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd12") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd13") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd14") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd21") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd22") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd23") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd24") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd31") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd32") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd33") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd34") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and (Double, Double, Double, Double)
// [Typer] union: Var(None) and (Double, Double, Double, Double)
// [Typer] check: Tuple([Var("vir"), Var("vdr")]) against ((Int, Int, Int, Int), (Double, Double, Double, Double))
// [Typer] check: Var("vir") against (Int, Int, Int, Int)
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Int)))
// [Typer] inst result: (Int, Int, Int, Int)
// [Typer] unify: (Int, Int, Int, Int) and (Int, Int, Int, Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vdr") against (Double, Double, Double, Double)
// [Typer] inst: TypeScheme(([], (Double, Double, Double, Double)))
// [Typer] inst result: (Double, Double, Double, Double)
// [Typer] unify: (Double, Double, Double, Double) and (Double, Double, Double, Double)
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("vi_arr", Var(None)), Array(Int(3), Tuple([Int(0), Int(0), Int(0), Int(0)])), LetRec({tyvars: [], name: ("init_vi_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Int(0)]), Let(("vd_arr", Var(None)), Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)])), LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))))))))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("vi_arr", Var(None)), Array(Int(3), Tuple([Int(0), Int(0), Int(0), Int(0)])), LetRec({tyvars: [], name: ("init_vi_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Int(0)]), Let(("vd_arr", Var(None)), Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)])), LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))))))))))
// [Typer] infer: Array(Int(3), Tuple([Int(0), Int(0), Int(0), Int(0)]))
// [Typer] infer: Tuple([Int(0), Int(0), Int(0), Int(0)])
// [Typer] infer: Int(0)
// [Typer] infer: Int(0)
// [Typer] infer: Int(0)
// [Typer] infer: Int(0)
// [Typer] check: Int(3) against Int
// [Typer] unify: Var(None) and Array[(Int, Int, Int, Int)]
// [Typer] union: Var(None) and Array[(Int, Int, Int, Int)]
// [Typer] infer: LetRec({tyvars: [], name: ("init_vi_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Int(0)]), Let(("vd_arr", Var(None)), Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)])), LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit)))))))))))))
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)
// [Typer] infer: If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)
// [Typer] check: LE(Var("i"), Int(2)) against Bool
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(2)
// [Typer] unify: Int and Int
// [Typer] infer: Let(("_", Var(None)), Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])), Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit))
// [Typer] infer: Put(Var("vi_arr"), Var("i"), Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)]))
// [Typer] infer: Tuple([Var("i"), Prim(Var("i"), Int(1), Add, kind=None), Prim(Var("i"), Int(2), Add, kind=None), Prim(Var("i"), Int(3), Add, kind=None)])
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] infer: Prim(Var("i"), Int(2), Add, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(2)
// [Typer] unify: Int and Int
// [Typer] infer: Prim(Var("i"), Int(3), Add, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(3)
// [Typer] unify: Int and Int
// [Typer] check: Var("vi_arr") against Array[(Int, Int, Int, Int)]
// [Typer] inst: TypeScheme(([], Array[(Int, Int, Int, Int)]))
// [Typer] inst result: Array[(Int, Int, Int, Int)]
// [Typer] unify: Array[(Int, Int, Int, Int)] and Array[(Int, Int, Int, Int)]
// [Typer] unify: (Int, Int, Int, Int) and (Int, Int, Int, Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)
// [Typer] infer: App(Var("init_vi_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])
// [Typer] inst: TypeScheme(([], (Int) -> Var(None)))
// [Typer] inst result: (Int) -> Var(None)
// [Typer] check: Prim(Var("i"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Var(None)
// [Typer] union: Var(None) and Var(None)
// [Typer] infer: Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] infer: Let(("_", Var(None)), App(Var("init_vi_arr"), targs=None, [Int(0)]), Let(("vd_arr", Var(None)), Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)])), LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))))))))
// [Typer] infer: App(Var("init_vi_arr"), targs=None, [Int(0)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("vd_arr", Var(None)), Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)])), LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit)))))))))))
// [Typer] infer: Array(Int(3), Tuple([Double(0), Double(0), Double(0), Double(0)]))
// [Typer] infer: Tuple([Double(0), Double(0), Double(0), Double(0)])
// [Typer] infer: Double(0)
// [Typer] infer: Double(0)
// [Typer] infer: Double(0)
// [Typer] infer: Double(0)
// [Typer] check: Int(3) against Int
// [Typer] unify: Var(None) and Array[(Double, Double, Double, Double)]
// [Typer] union: Var(None) and Array[(Double, Double, Double, Double)]
// [Typer] infer: LetRec({tyvars: [], name: ("init_vd_arr", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))))))
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)
// [Typer] infer: If(LE(Var("i"), Int(2)), Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)
// [Typer] check: LE(Var("i"), Int(2)) against Bool
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(2)
// [Typer] unify: Int and Int
// [Typer] infer: Let(("_", Var(None)), Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])), Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit))
// [Typer] infer: Put(Var("vd_arr"), Var("i"), Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])]))
// [Typer] infer: Tuple([App(Var("float_of_int"), targs=None, [Var("i")]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)]), App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])])
// [Typer] infer: App(Var("float_of_int"), targs=None, [Var("i")])
// [Typer] inst: TypeScheme(([], (Int) -> Double))
// [Typer] inst result: (Int) -> Double
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])
// [Typer] inst: TypeScheme(([], (Int) -> Double))
// [Typer] inst result: (Int) -> Double
// [Typer] check: Prim(Var("i"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] infer: App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(2), Add, kind=None)])
// [Typer] inst: TypeScheme(([], (Int) -> Double))
// [Typer] inst result: (Int) -> Double
// [Typer] check: Prim(Var("i"), Int(2), Add, kind=None) against Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(2) against Int
// [Typer] infer: App(Var("float_of_int"), targs=None, [Prim(Var("i"), Int(3), Add, kind=None)])
// [Typer] inst: TypeScheme(([], (Int) -> Double))
// [Typer] inst result: (Int) -> Double
// [Typer] check: Prim(Var("i"), Int(3), Add, kind=None) against Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(3) against Int
// [Typer] check: Var("vd_arr") against Array[(Double, Double, Double, Double)]
// [Typer] inst: TypeScheme(([], Array[(Double, Double, Double, Double)]))
// [Typer] inst result: Array[(Double, Double, Double, Double)]
// [Typer] unify: Array[(Double, Double, Double, Double)] and Array[(Double, Double, Double, Double)]
// [Typer] unify: (Double, Double, Double, Double) and (Double, Double, Double, Double)
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)
// [Typer] infer: App(Var("init_vd_arr"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])
// [Typer] inst: TypeScheme(([], (Int) -> Var(None)))
// [Typer] inst result: (Int) -> Var(None)
// [Typer] check: Prim(Var("i"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Var(None)
// [Typer] union: Var(None) and Var(None)
// [Typer] infer: Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] infer: Let(("_", Var(None)), App(Var("init_vd_arr"), targs=None, [Int(0)]), LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit)))))))))
// [Typer] infer: App(Var("init_vd_arr"), targs=None, [Int(0)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: LetRec({tyvars: [], name: ("iter_fma", Var(None)), args: [], body: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))}, LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))))
// [Typer] typevars: []
// [Typer] infer: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))))
// [Typer] infer: Get(Var("vi_arr"), Int(0))
// [Typer] infer: Var("vi_arr")
// [Typer] inst: TypeScheme(([], Array[(Int, Int, Int, Int)]))
// [Typer] inst result: Array[(Int, Int, Int, Int)]
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Get(Var("vi_arr"), Int(1)), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)))))))))))))))))
// [Typer] infer: Get(Var("vi_arr"), Int(1))
// [Typer] infer: Var("vi_arr")
// [Typer] inst: TypeScheme(([], Array[(Int, Int, Int, Int)]))
// [Typer] inst result: Array[(Int, Int, Int, Int)]
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Get(Var("vi_arr"), Int(2)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))))
// [Typer] infer: Get(Var("vi_arr"), Int(2))
// [Typer] infer: Var("vi_arr")
// [Typer] inst: TypeScheme(([], Array[(Int, Int, Int, Int)]))
// [Typer] inst result: Array[(Int, Int, Int, Int)]
// [Typer] check: Int(2) against Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)))))))))))))))
// [Typer] infer: Get(Var("vd_arr"), Int(0))
// [Typer] infer: Var("vd_arr")
// [Typer] inst: TypeScheme(([], Array[(Double, Double, Double, Double)]))
// [Typer] inst result: Array[(Double, Double, Double, Double)]
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] infer: LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Get(Var("vd_arr"), Int(1)), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))))
// [Typer] infer: Get(Var("vd_arr"), Int(1))
// [Typer] infer: Var("vd_arr")
// [Typer] inst: TypeScheme(([], Array[(Double, Double, Double, Double)]))
// [Typer] inst result: Array[(Double, Double, Double, Double)]
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] infer: LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Get(Var("vd_arr"), Int(2)), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)))))))))))))
// [Typer] infer: Get(Var("vd_arr"), Int(2))
// [Typer] infer: Var("vd_arr")
// [Typer] inst: TypeScheme(([], Array[(Double, Double, Double, Double)]))
// [Typer] inst result: Array[(Double, Double, Double, Double)]
// [Typer] check: Int(2) against Int
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] infer: LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))))
// [Typer] infer: App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")])
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) -> ((Int, Int, Int, Int), (Double, Double, Double, Double))))
// [Typer] inst result: (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) -> ((Int, Int, Int, Int), (Double, Double, Double, Double))
// [Typer] check: Var("vi11") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi12") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi13") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi14") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi21") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi22") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi23") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi24") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi31") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi32") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi33") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi34") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vd11") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd12") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd13") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd14") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd21") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd22") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd23") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd24") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd31") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd32") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd33") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd34") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and (Int, Int, Int, Int)
// [Typer] union: Var(None) and (Int, Int, Int, Int)
// [Typer] unify: Var(None) and (Double, Double, Double, Double)
// [Typer] union: Var(None) and (Double, Double, Double, Double)
// [Typer] infer: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Var("vir"), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)))))))))))
// [Typer] infer: Var("vir")
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Int)))
// [Typer] inst result: (Int, Int, Int, Int)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))))
// [Typer] infer: Var("vdr")
// [Typer] inst: TypeScheme(([], (Double, Double, Double, Double)))
// [Typer] inst result: (Double, Double, Double, Double)
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] infer: LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)))))))))
// [Typer] infer: App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")])
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) -> ((Int, Int, Int, Int), (Double, Double, Double, Double))))
// [Typer] inst result: (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) -> ((Int, Int, Int, Int), (Double, Double, Double, Double))
// [Typer] check: Var("vi11") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi12") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi13") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi14") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi21") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi22") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi23") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi24") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi31") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi32") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi33") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi34") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vd11") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd12") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd13") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd14") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd21") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd22") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd23") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd24") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd31") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd32") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd33") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd34") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and (Int, Int, Int, Int)
// [Typer] union: Var(None) and (Int, Int, Int, Int)
// [Typer] unify: Var(None) and (Double, Double, Double, Double)
// [Typer] union: Var(None) and (Double, Double, Double, Double)
// [Typer] infer: LetTuple([("vi21", Var(None)), ("vi22", Var(None)), ("vi23", Var(None)), ("vi24", Var(None))], Var("vir"), LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))))
// [Typer] infer: Var("vir")
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Int)))
// [Typer] inst result: (Int, Int, Int, Int)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: LetTuple([("vd21", Var(None)), ("vd22", Var(None)), ("vd23", Var(None)), ("vd24", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)))))))
// [Typer] infer: Var("vdr")
// [Typer] inst: TypeScheme(([], (Double, Double, Double, Double)))
// [Typer] inst result: (Double, Double, Double, Double)
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] infer: LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))))
// [Typer] infer: App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")])
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) -> ((Int, Int, Int, Int), (Double, Double, Double, Double))))
// [Typer] inst result: (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) -> ((Int, Int, Int, Int), (Double, Double, Double, Double))
// [Typer] check: Var("vi11") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi12") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi13") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi14") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi21") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi22") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi23") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi24") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi31") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi32") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi33") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi34") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vd11") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd12") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd13") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd14") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd21") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd22") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd23") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd24") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd31") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd32") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd33") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd34") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and (Int, Int, Int, Int)
// [Typer] union: Var(None) and (Int, Int, Int, Int)
// [Typer] unify: Var(None) and (Double, Double, Double, Double)
// [Typer] union: Var(None) and (Double, Double, Double, Double)
// [Typer] infer: LetTuple([("vi31", Var(None)), ("vi32", Var(None)), ("vi33", Var(None)), ("vi34", Var(None))], Var("vir"), LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)))))
// [Typer] infer: Var("vir")
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Int)))
// [Typer] inst result: (Int, Int, Int, Int)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: LetTuple([("vd31", Var(None)), ("vd32", Var(None)), ("vd33", Var(None)), ("vd34", Var(None))], Var("vdr"), LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))))
// [Typer] infer: Var("vdr")
// [Typer] inst: TypeScheme(([], (Double, Double, Double, Double)))
// [Typer] inst result: (Double, Double, Double, Double)
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] infer: LetTuple([("vir", Var(None)), ("vdr", Var(None))], App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")]), Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)))
// [Typer] infer: App(Var("fma_mixed"), targs=None, [Var("vi11"), Var("vi12"), Var("vi13"), Var("vi14"), Var("vi21"), Var("vi22"), Var("vi23"), Var("vi24"), Var("vi31"), Var("vi32"), Var("vi33"), Var("vi34"), Var("vd11"), Var("vd12"), Var("vd13"), Var("vd14"), Var("vd21"), Var("vd22"), Var("vd23"), Var("vd24"), Var("vd31"), Var("vd32"), Var("vd33"), Var("vd34")])
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) -> ((Int, Int, Int, Int), (Double, Double, Double, Double))))
// [Typer] inst result: (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) -> ((Int, Int, Int, Int), (Double, Double, Double, Double))
// [Typer] check: Var("vi11") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi12") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi13") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi14") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi21") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi22") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi23") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi24") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi31") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi32") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi33") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vi34") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("vd11") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd12") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd13") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd14") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd21") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd22") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd23") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd24") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd31") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd32") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd33") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("vd34") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and (Int, Int, Int, Int)
// [Typer] union: Var(None) and (Int, Int, Int, Int)
// [Typer] unify: Var(None) and (Double, Double, Double, Double)
// [Typer] union: Var(None) and (Double, Double, Double, Double)
// [Typer] infer: Let(("_", Var(None)), Put(Var("vi_arr"), Int(0), Var("vir")), Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit))
// [Typer] infer: Put(Var("vi_arr"), Int(0), Var("vir"))
// [Typer] infer: Var("vir")
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Int)))
// [Typer] inst result: (Int, Int, Int, Int)
// [Typer] check: Var("vi_arr") against Array[(Int, Int, Int, Int)]
// [Typer] inst: TypeScheme(([], Array[(Int, Int, Int, Int)]))
// [Typer] inst result: Array[(Int, Int, Int, Int)]
// [Typer] unify: Array[(Int, Int, Int, Int)] and Array[(Int, Int, Int, Int)]
// [Typer] unify: (Int, Int, Int, Int) and (Int, Int, Int, Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("vd_arr"), Int(0), Var("vdr")), Unit)
// [Typer] infer: Put(Var("vd_arr"), Int(0), Var("vdr"))
// [Typer] infer: Var("vdr")
// [Typer] inst: TypeScheme(([], (Double, Double, Double, Double)))
// [Typer] inst result: (Double, Double, Double, Double)
// [Typer] check: Var("vd_arr") against Array[(Double, Double, Double, Double)]
// [Typer] inst: TypeScheme(([], Array[(Double, Double, Double, Double)]))
// [Typer] inst result: Array[(Double, Double, Double, Double)]
// [Typer] unify: Array[(Double, Double, Double, Double)] and Array[(Double, Double, Double, Double)]
// [Typer] unify: (Double, Double, Double, Double) and (Double, Double, Double, Double)
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] infer: LetRec({tyvars: [], name: ("stress", Var(None)), args: [("i", Int)], body: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)}, Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit)))))))
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit), Unit)
// [Typer] infer: If(LE(Var("i"), Int(3)), Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)), Unit)
// [Typer] check: LE(Var("i"), Int(3)) against Bool
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(3)
// [Typer] unify: Int and Int
// [Typer] infer: Let(("_", Var(None)), App(Var("iter_fma"), targs=None, []), Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit))
// [Typer] infer: App(Var("iter_fma"), targs=None, [])
// [Typer] inst: TypeScheme(([], () -> Unit))
// [Typer] inst result: () -> Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Unit)
// [Typer] infer: App(Var("stress"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])
// [Typer] inst: TypeScheme(([], (Int) -> Var(None)))
// [Typer] inst result: (Int) -> Var(None)
// [Typer] check: Prim(Var("i"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Var(None)
// [Typer] union: Var(None) and Var(None)
// [Typer] infer: Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] infer: Let(("_", Var(None)), App(Var("stress"), targs=None, [Int(1)]), LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))))
// [Typer] infer: App(Var("stress"), targs=None, [Int(1)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: LetTuple([("vi11", Var(None)), ("vi12", Var(None)), ("vi13", Var(None)), ("vi14", Var(None))], Get(Var("vi_arr"), Int(0)), LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit)))))
// [Typer] infer: Get(Var("vi_arr"), Int(0))
// [Typer] infer: Var("vi_arr")
// [Typer] inst: TypeScheme(([], Array[(Int, Int, Int, Int)]))
// [Typer] inst result: Array[(Int, Int, Int, Int)]
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: LetTuple([("vd11", Var(None)), ("vd12", Var(None)), ("vd13", Var(None)), ("vd14", Var(None))], Get(Var("vd_arr"), Int(0)), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))))
// [Typer] infer: Get(Var("vd_arr"), Int(0))
// [Typer] infer: Var("vd_arr")
// [Typer] inst: TypeScheme(([], Array[(Double, Double, Double, Double)]))
// [Typer] inst result: Array[(Double, Double, Double, Double)]
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("vi11")]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit)))
// [Typer] infer: App(Var("print_int"), targs=None, [Var("vi11")])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("vi11") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit))
// [Typer] infer: App(Var("print_char"), targs=None, [Int(10)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(10) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])]), Unit)
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("vd11")])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), targs=None, [Var("vd11")]) against Int
// [Typer] infer: Var("vd11")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {fma_int.1: Once, fma_double.34: Once, fma_mixed.67: Many(4), main.118: Once, init_vi_arr.126: Many(2), init_vd_arr.155: Many(2), iter_fma.181: Once, stress.316: Many(2)}
// [KnfOpt] Knf inline Some(fma_int)
// [KnfOpt] Knf inline Some(fma_double)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(iter_fma)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 71
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {fma_mixed.67: Many(4), main.118: Once, init_vi_arr.126: Many(2), init_vd_arr.155: Many(2), stress.316: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 71
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 71
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {fma_mixed.67: Many(4), main.118: Once, init_vi_arr.126: Many(2), init_vd_arr.155: Many(2), stress.316: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 71
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 71
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 5 5 0
// [KnfOpt] Tuple freq: {vir1.360: MayEscape, vir2.362: MayEscape, vir3.364: MayEscape, vir4.366: MayEscape, vdr1.368: MayEscape, vdr2.370: MayEscape, vdr3.372: MayEscape, vdr4.374: MayEscape, vir.116: MayEscape, vdr.117: MayEscape, i.128: MayEscape, _131: MayEscape, _133: MayEscape, _135: MayEscape, _136: MayEscape, _140: MayEscape, vi_arr.125: MayEscape, i.157: MayEscape, _161: MayEscape, _164: MayEscape, _167: MayEscape, _159: MayEscape, _162: MayEscape, _165: MayEscape, _168: MayEscape, _169: MayEscape, _173: MayEscape, vd_arr.154: MayEscape, _376: Destructed, _382: Destructed, _388: Destructed, _394: Destructed, _400: Destructed, _406: Destructed, vi11.377: MayEscape, vi12.378: MayEscape, vi13.379: MayEscape, vi14.380: MayEscape, vi21.383: MayEscape, vi22.384: MayEscape, vi23.385: MayEscape, vi24.386: MayEscape, vi31.389: MayEscape, vi32.390: MayEscape, vi33.391: MayEscape, vi34.392: MayEscape, vd11.395: MayEscape, vd12.396: MayEscape, vd13.397: MayEscape, vd14.398: MayEscape, vd21.401: MayEscape, vd22.402: MayEscape, vd23.403: MayEscape, vd24.404: MayEscape, vd31.407: MayEscape, vd32.408: MayEscape, vd33.409: MayEscape, vd34.410: MayEscape, _411: Destructed, vir.412: Destructed, vdr.413: Destructed, vi11.414: MayEscape, vi12.415: MayEscape, vi13.416: MayEscape, vi14.417: MayEscape, vd11.418: MayEscape, vd12.419: MayEscape, vd13.420: MayEscape, vd14.421: MayEscape, _422: Destructed, vir.423: Destructed, vdr.424: Destructed, vi21.425: MayEscape, vi22.426: MayEscape, vi23.427: MayEscape, vi24.428: MayEscape, vd21.429: MayEscape, vd22.430: MayEscape, vd23.431: MayEscape, vd24.432: MayEscape, _433: Destructed, vir.434: Destructed, vdr.435: Destructed, vi31.436: MayEscape, vi32.437: MayEscape, vi33.438: MayEscape, vi34.439: MayEscape, vd31.440: MayEscape, vd32.441: MayEscape, vd33.442: MayEscape, vd34.443: MayEscape, _444: Destructed, vir.445: MayEscape, vdr.446: MayEscape, _323: MayEscape, _120: MayEscape, _121: MayEscape, _122: MayEscape, _123: MayEscape, _119: MayEscape, _124: MayEscape, _145: MayEscape, _149: MayEscape, _150: MayEscape, _151: MayEscape, _152: MayEscape, _148: MayEscape, _153: MayEscape, _178: MayEscape, _328: MayEscape, _332: Destructed, _342: Destructed, vi11.334: MayEscape, _353: MayEscape, vd11.344: MayEscape, _356: MayEscape}
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f1: Multiple, f10: Once, f2: Multiple, f3: Multiple, f0: Multiple})
// [CoreOpt] allow_inline: false %2 init_vi_arr.452 false false true false true
// [CoreOpt] allow_inline: false %5 init_vd_arr.453 false false true false true
// [CoreOpt] allow_inline: false %6 stress.454 false false true false true
// [CoreOpt] allow_inline: false %7 init_vi_arr.452 true false true false true
// [CoreOpt] allow_inline: false %0 main.451 false true true false true
// [CoreOpt] allow_inline: false %11 init_vd_arr.453 true false true false true
// [CoreOpt] allow_inline: false %31 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %42 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %53 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %64 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %70 stress.454 true false true false true
// [CoreOpt] allow_inline: false %2 init_vi_arr.452 false false true false true
// [CoreOpt] allow_inline: false %5 init_vd_arr.453 false false true false true
// [CoreOpt] allow_inline: false %6 stress.454 false false true false true
// [CoreOpt] allow_inline: false %7 init_vi_arr.452 true false true false true
// [CoreOpt] allow_inline: false %0 main.451 false true true false true
// [CoreOpt] allow_inline: false %11 init_vd_arr.453 true false true false true
// [CoreOpt] allow_inline: false %31 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %42 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %53 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %64 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %70 stress.454 true false true false true
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f1: Multiple, f10: Once, f2: Multiple, f3: Multiple, f0: Multiple})
// [CoreOpt] allow_inline: false %2 init_vi_arr.452 false false true false true
// [CoreOpt] allow_inline: false %5 init_vd_arr.453 false false true false true
// [CoreOpt] allow_inline: false %6 stress.454 false false true false true
// [CoreOpt] allow_inline: false %7 init_vi_arr.452 true false true false true
// [CoreOpt] allow_inline: false %0 main.451 false true true false true
// [CoreOpt] allow_inline: false %11 init_vd_arr.453 true false true false true
// [CoreOpt] allow_inline: false %31 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %42 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %53 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %64 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %70 stress.454 true false true false true
// [CoreOpt] allow_inline: false %2 init_vi_arr.452 false false true false true
// [CoreOpt] allow_inline: false %5 init_vd_arr.453 false false true false true
// [CoreOpt] allow_inline: false %6 stress.454 false false true false true
// [CoreOpt] allow_inline: false %7 init_vi_arr.452 true false true false true
// [CoreOpt] allow_inline: false %0 main.451 false true true false true
// [CoreOpt] allow_inline: false %11 init_vd_arr.453 true false true false true
// [CoreOpt] allow_inline: false %31 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %42 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %53 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %64 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %70 stress.454 true false true false true
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f1: Multiple, f10: Once, f2: Multiple, f3: Multiple, f0: Multiple})
// [CoreOpt] allow_inline: false %2 init_vi_arr.452 false false true false true
// [CoreOpt] allow_inline: false %5 init_vd_arr.453 false false true false true
// [CoreOpt] allow_inline: false %6 stress.454 false false true false true
// [CoreOpt] allow_inline: false %7 init_vi_arr.452 true false true false true
// [CoreOpt] allow_inline: false %0 main.451 false true true false true
// [CoreOpt] allow_inline: false %11 init_vd_arr.453 true false true false true
// [CoreOpt] allow_inline: false %31 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %42 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %53 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %64 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %70 stress.454 true false true false true
// [CoreOpt] allow_inline: false %2 init_vi_arr.452 false false true false true
// [CoreOpt] allow_inline: false %5 init_vd_arr.453 false false true false true
// [CoreOpt] allow_inline: false %6 stress.454 false false true false true
// [CoreOpt] allow_inline: false %7 init_vi_arr.452 true false true false true
// [CoreOpt] allow_inline: false %0 main.451 false true true false true
// [CoreOpt] allow_inline: false %11 init_vd_arr.453 true false true false true
// [CoreOpt] allow_inline: false %31 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %42 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %53 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %64 fma_mixed.67 true false true false true
// [CoreOpt] allow_inline: false %70 stress.454 true false true false true
// [CoreOpt] LVN subst Insn(iref=%6) with Insn(iref=%1)
// [CoreOpt] LVN subst Insn(iref=%10) with Insn(iref=%2)
