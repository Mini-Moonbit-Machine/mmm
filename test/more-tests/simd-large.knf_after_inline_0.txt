let rec fma_mixed.67: ((Int, Int, Int, Int), (Double, Double, Double, Double)) = (vi11.69: Int, vi12.71: Int, vi13.73: Int, vi14.75: Int, vi21.77: Int, vi22.79: Int, vi23.81: Int, vi24.83: Int, vi31.85: Int, vi32.87: Int, vi33.89: Int, vi34.91: Int, vd11.93: Double, vd12.95: Double, vd13.97: Double, vd14.99: Double, vd21.101: Double, vd22.103: Double, vd23.105: Double, vd24.107: Double, vd31.109: Double, vd32.111: Double, vd33.113: Double, vd34.115: Double) {
  let _359: Int = Mul(vi11.69, vi21.77)
  let vir1.360: Int = Add(_359, vi31.85)
  let _361: Int = Mul(vi12.71, vi22.79)
  let vir2.362: Int = Add(_361, vi32.87)
  let _363: Int = Mul(vi13.73, vi23.81)
  let vir3.364: Int = Add(_363, vi33.89)
  let _365: Int = Mul(vi14.75, vi24.83)
  let vir4.366: Int = Add(_365, vi34.91)
  let vir.116: (Int, Int, Int, Int) = Tuple([vir1.360, vir2.362, vir3.364, vir4.366, ])
  let _367: Double = FMul(vd11.93, vd21.101)
  let vdr1.368: Double = FAdd(_367, vd31.109)
  let _369: Double = FMul(vd12.95, vd22.103)
  let vdr2.370: Double = FAdd(_369, vd32.111)
  let _371: Double = FMul(vd13.97, vd23.105)
  let vdr3.372: Double = FAdd(_371, vd33.113)
  let _373: Double = FMul(vd14.99, vd24.107)
  let vdr4.374: Double = FAdd(_373, vd34.115)
  let vdr.117: (Double, Double, Double, Double) = Tuple([vdr1.368, vdr2.370, vdr3.372, vdr4.374, ])
  Tuple([vir.116, vdr.117, ])
}
let rec main.118: Unit = () {
  let _119: Int = Int(3)
  let _120: Int = Int(0)
  let _121: Int = Int(0)
  let _122: Int = Int(0)
  let _123: Int = Int(0)
  let _124: (Int, Int, Int, Int) = Tuple([_120, _121, _122, _123, ])
  let vi_arr.125: Array[(Int, Int, Int, Int)] = ExtApply(minimbt_create_ptr_array, [_119, _124, ])
  let rec init_vi_arr.126: Unit = (i.128: Int) {
    let _129: Int = Int(2)
    let _144: Unit = if (i.128 <= _129) then {
      let _130: Int = Int(1)
      let _131: Int = Add(i.128, _130)
      let _132: Int = Int(2)
      let _133: Int = Add(i.128, _132)
      let _134: Int = Int(3)
      let _135: Int = Add(i.128, _134)
      let _136: (Int, Int, Int, Int) = Tuple([i.128, _131, _133, _135, ])
      let _138: Unit = Put vi_arr.125[i.128] = _136
      let _139: Int = Int(1)
      let _140: Int = Add(i.128, _139)
      let _142: Unit = Apply(init_vi_arr.126, [_140, ])
      Unit
    } else {
      Unit
    }
    Unit
  }
  let _145: Int = Int(0)
  let _147: Unit = Apply(init_vi_arr.126, [_145, ])
  let _148: Int = Int(3)
  let _149: Double = Double(0)
  let _150: Double = Double(0)
  let _151: Double = Double(0)
  let _152: Double = Double(0)
  let _153: (Double, Double, Double, Double) = Tuple([_149, _150, _151, _152, ])
  let vd_arr.154: Array[(Double, Double, Double, Double)] = ExtApply(minimbt_create_ptr_array, [_148, _153, ])
  let rec init_vd_arr.155: Unit = (i.157: Int) {
    let _158: Int = Int(2)
    let _177: Unit = if (i.157 <= _158) then {
      let _159: Double = ExtApply(minimbt_float_of_int, [i.157, ])
      let _160: Int = Int(1)
      let _161: Int = Add(i.157, _160)
      let _162: Double = ExtApply(minimbt_float_of_int, [_161, ])
      let _163: Int = Int(2)
      let _164: Int = Add(i.157, _163)
      let _165: Double = ExtApply(minimbt_float_of_int, [_164, ])
      let _166: Int = Int(3)
      let _167: Int = Add(i.157, _166)
      let _168: Double = ExtApply(minimbt_float_of_int, [_167, ])
      let _169: (Double, Double, Double, Double) = Tuple([_159, _162, _165, _168, ])
      let _171: Unit = Put vd_arr.154[i.157] = _169
      let _172: Int = Int(1)
      let _173: Int = Add(i.157, _172)
      let _175: Unit = Apply(init_vd_arr.155, [_173, ])
      Unit
    } else {
      Unit
    }
    Unit
  }
  let _178: Int = Int(0)
  let _180: Unit = Apply(init_vd_arr.155, [_178, ])
  let rec stress.316: Unit = (i.318: Int) {
    let _319: Int = Int(3)
    let _327: Unit = if (i.318 <= _319) then {
      let _375: Int = Int(0)
      let _376: (Int, Int, Int, Int) = Get vi_arr.125[_375]
      let (vi11.377: Int, vi12.378: Int, vi13.379: Int, vi14.380: Int) = _376
      let _381: Int = Int(1)
      let _382: (Int, Int, Int, Int) = Get vi_arr.125[_381]
      let (vi21.383: Int, vi22.384: Int, vi23.385: Int, vi24.386: Int) = _382
      let _387: Int = Int(2)
      let _388: (Int, Int, Int, Int) = Get vi_arr.125[_387]
      let (vi31.389: Int, vi32.390: Int, vi33.391: Int, vi34.392: Int) = _388
      let _393: Int = Int(0)
      let _394: (Double, Double, Double, Double) = Get vd_arr.154[_393]
      let (vd11.395: Double, vd12.396: Double, vd13.397: Double, vd14.398: Double) = _394
      let _399: Int = Int(1)
      let _400: (Double, Double, Double, Double) = Get vd_arr.154[_399]
      let (vd21.401: Double, vd22.402: Double, vd23.403: Double, vd24.404: Double) = _400
      let _405: Int = Int(2)
      let _406: (Double, Double, Double, Double) = Get vd_arr.154[_405]
      let (vd31.407: Double, vd32.408: Double, vd33.409: Double, vd34.410: Double) = _406
      let _411: ((Int, Int, Int, Int), (Double, Double, Double, Double)) = Apply(fma_mixed.67, [vi11.377, vi12.378, vi13.379, vi14.380, vi21.383, vi22.384, vi23.385, vi24.386, vi31.389, vi32.390, vi33.391, vi34.392, vd11.395, vd12.396, vd13.397, vd14.398, vd21.401, vd22.402, vd23.403, vd24.404, vd31.407, vd32.408, vd33.409, vd34.410, ])
      let (vir.412: (Int, Int, Int, Int), vdr.413: (Double, Double, Double, Double)) = _411
      let (vi11.414: Int, vi12.415: Int, vi13.416: Int, vi14.417: Int) = vir.412
      let (vd11.418: Double, vd12.419: Double, vd13.420: Double, vd14.421: Double) = vdr.413
      let _422: ((Int, Int, Int, Int), (Double, Double, Double, Double)) = Apply(fma_mixed.67, [vi11.414, vi12.415, vi13.416, vi14.417, vi21.383, vi22.384, vi23.385, vi24.386, vi31.389, vi32.390, vi33.391, vi34.392, vd11.418, vd12.419, vd13.420, vd14.421, vd21.401, vd22.402, vd23.403, vd24.404, vd31.407, vd32.408, vd33.409, vd34.410, ])
      let (vir.423: (Int, Int, Int, Int), vdr.424: (Double, Double, Double, Double)) = _422
      let (vi21.425: Int, vi22.426: Int, vi23.427: Int, vi24.428: Int) = vir.423
      let (vd21.429: Double, vd22.430: Double, vd23.431: Double, vd24.432: Double) = vdr.424
      let _433: ((Int, Int, Int, Int), (Double, Double, Double, Double)) = Apply(fma_mixed.67, [vi11.414, vi12.415, vi13.416, vi14.417, vi21.425, vi22.426, vi23.427, vi24.428, vi31.389, vi32.390, vi33.391, vi34.392, vd11.418, vd12.419, vd13.420, vd14.421, vd21.429, vd22.430, vd23.431, vd24.432, vd31.407, vd32.408, vd33.409, vd34.410, ])
      let (vir.434: (Int, Int, Int, Int), vdr.435: (Double, Double, Double, Double)) = _433
      let (vi31.436: Int, vi32.437: Int, vi33.438: Int, vi34.439: Int) = vir.434
      let (vd31.440: Double, vd32.441: Double, vd33.442: Double, vd34.443: Double) = vdr.435
      let _444: ((Int, Int, Int, Int), (Double, Double, Double, Double)) = Apply(fma_mixed.67, [vi11.414, vi12.415, vi13.416, vi14.417, vi21.425, vi22.426, vi23.427, vi24.428, vi31.436, vi32.437, vi33.438, vi34.439, vd11.418, vd12.419, vd13.420, vd14.421, vd21.429, vd22.430, vd23.431, vd24.432, vd31.440, vd32.441, vd33.442, vd34.443, ])
      let (vir.445: (Int, Int, Int, Int), vdr.446: (Double, Double, Double, Double)) = _444
      let _447: Int = Int(0)
      let _448: Unit = Put vi_arr.125[_447] = vir.445
      let _449: Int = Int(0)
      let _450: Unit = Put vd_arr.154[_449] = vdr.446
      let _321: Unit = Unit
      let _322: Int = Int(1)
      let _323: Int = Add(i.318, _322)
      let _325: Unit = Apply(stress.316, [_323, ])
      Unit
    } else {
      Unit
    }
    Unit
  }
  let _328: Int = Int(1)
  let _330: Unit = Apply(stress.316, [_328, ])
  let _331: Int = Int(0)
  let _332: (Int, Int, Int, Int) = Get vi_arr.125[_331]
  let (vi11.334: Int, vi12.336: Int, vi13.338: Int, vi14.340: Int) = _332
  let _341: Int = Int(0)
  let _342: (Double, Double, Double, Double) = Get vd_arr.154[_341]
  let (vd11.344: Double, vd12.346: Double, vd13.348: Double, vd14.350: Double) = _342
  let _352: Unit = ExtApply(minimbt_print_int, [vi11.334, ])
  let _353: Int = Int(10)
  let _355: Unit = ExtApply(minimbt_print_char, [_353, ])
  let _356: Int = ExtApply(minimbt_int_of_float, [vd11.344, ])
  let _358: Unit = ExtApply(minimbt_print_int, [_356, ])
  Unit
}
Apply(main.118, [])
