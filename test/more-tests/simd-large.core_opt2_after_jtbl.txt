# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn stress.454 #f3 : fn(int32, array[(double, double, double, double)], array[(int32, int32, int32, int32)]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f0, 3)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: (int32, int32, int32, int32) = load (int32, int32, int32, int32) field($f2, 0 * @ptr)
    let %2: int32 = load int32 field(%1, 0 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %3: int32 = load int32 field(%1, 1 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %4: int32 = load int32 field(%1, 2 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %5: int32 = load int32 field(%1, 3 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %6: (int32, int32, int32, int32) = load (int32, int32, int32, int32) field($f2, 1 * @ptr)
    let %7: int32 = load int32 field(%6, 0 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %8: int32 = load int32 field(%6, 1 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %9: int32 = load int32 field(%6, 2 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %10: int32 = load int32 field(%6, 3 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %11: (int32, int32, int32, int32) = load (int32, int32, int32, int32) field($f2, 2 * @ptr)
    let %12: int32 = load int32 field(%11, 0 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %13: int32 = load int32 field(%11, 1 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %14: int32 = load int32 field(%11, 2 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %15: int32 = load int32 field(%11, 3 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %16: (double, double, double, double) = load (double, double, double, double) field($f1, 0 * @ptr)
    let %17: double = load double field(%16, 0 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %18: double = load double field(%16, 1 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %19: double = load double field(%16, 2 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %20: double = load double field(%16, 3 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %21: (double, double, double, double) = load (double, double, double, double) field($f1, 1 * @ptr)
    let %22: double = load double field(%21, 0 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %23: double = load double field(%21, 1 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %24: double = load double field(%21, 2 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %25: double = load double field(%21, 3 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %26: (double, double, double, double) = load (double, double, double, double) field($f1, 2 * @ptr)
    let %27: double = load double field(%26, 0 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %28: double = load double field(%26, 1 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %29: double = load double field(%26, 2 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %30: double = load double field(%26, 3 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %31: ((int32, int32, int32, int32), (double, double, double, double)) = call f0(%2, %3, %4, %5, %7, %8, %9, %10, %12, %13, %14, %15, %17, %18, %19, %20, %22, %23, %24, %25, %27, %28, %29, %30)
    let %32: (int32, int32, int32, int32) = load (int32, int32, int32, int32) field(%31, 0 * @(@ptr, @(@ptr, @32)))
    let %33: (double, double, double, double) = load (double, double, double, double) field(%31, 1 * @(@ptr, @(@ptr, @32)))
    let %34: int32 = load int32 field(%32, 0 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %35: int32 = load int32 field(%32, 1 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %36: int32 = load int32 field(%32, 2 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %37: int32 = load int32 field(%32, 3 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %38: double = load double field(%33, 0 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %39: double = load double field(%33, 1 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %40: double = load double field(%33, 2 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %41: double = load double field(%33, 3 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %42: ((int32, int32, int32, int32), (double, double, double, double)) = call f0(%34, %35, %36, %37, %7, %8, %9, %10, %12, %13, %14, %15, %38, %39, %40, %41, %22, %23, %24, %25, %27, %28, %29, %30)
    let %43: (int32, int32, int32, int32) = load (int32, int32, int32, int32) field(%42, 0 * @(@ptr, @(@ptr, @32)))
    let %44: (double, double, double, double) = load (double, double, double, double) field(%42, 1 * @(@ptr, @(@ptr, @32)))
    let %45: int32 = load int32 field(%43, 0 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %46: int32 = load int32 field(%43, 1 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %47: int32 = load int32 field(%43, 2 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %48: int32 = load int32 field(%43, 3 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %49: double = load double field(%44, 0 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %50: double = load double field(%44, 1 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %51: double = load double field(%44, 2 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %52: double = load double field(%44, 3 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %53: ((int32, int32, int32, int32), (double, double, double, double)) = call f0(%34, %35, %36, %37, %45, %46, %47, %48, %12, %13, %14, %15, %38, %39, %40, %41, %49, %50, %51, %52, %27, %28, %29, %30)
    let %54: (int32, int32, int32, int32) = load (int32, int32, int32, int32) field(%53, 0 * @(@ptr, @(@ptr, @32)))
    let %55: (double, double, double, double) = load (double, double, double, double) field(%53, 1 * @(@ptr, @(@ptr, @32)))
    let %56: int32 = load int32 field(%54, 0 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %57: int32 = load int32 field(%54, 1 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %58: int32 = load int32 field(%54, 2 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %59: int32 = load int32 field(%54, 3 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %60: double = load double field(%55, 0 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %61: double = load double field(%55, 1 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %62: double = load double field(%55, 2 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %63: double = load double field(%55, 3 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %64: ((int32, int32, int32, int32), (double, double, double, double)) = call f0(%34, %35, %36, %37, %45, %46, %47, %48, %56, %57, %58, %59, %38, %39, %40, %41, %49, %50, %51, %52, %60, %61, %62, %63)
    let %65: (int32, int32, int32, int32) = load (int32, int32, int32, int32) field(%64, 0 * @(@ptr, @(@ptr, @32)))
    let %66: (double, double, double, double) = load (double, double, double, double) field(%64, 1 * @(@ptr, @(@ptr, @32)))
    let _ = store (int32, int32, int32, int32) field($f2, 0 * @ptr) <- %65
    let _ = store (double, double, double, double) field($f1, 0 * @ptr) <- %66
    let %69: int32 = add($f0, 1)
    let %70: unit = call f3(%69, $f1, $f2)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return ()
  }
}
.fn init_vd_arr.453 #f2 : fn(int32, array[(double, double, double, double)]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f0, 2)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: double = conv.i2d($f0)
    let %2: int32 = add($f0, 1)
    let %3: double = conv.i2d(%2)
    let %4: int32 = add($f0, 2)
    let %5: double = conv.i2d(%4)
    let %6: int32 = add($f0, 3)
    let %7: double = conv.i2d(%6)
    let _ = alloc <m0: (double, double, double, double) heap(4)> <- [0] = %1, [1] = %3, [2] = %5, [3] = %7
    let %12: ptr = compute_address unit offset(0, $f0 * @64)
    let _ = store (double, double, double, double) raw($f1, %12) <- f2.m0
    let %11: unit = call f2(%2, $f1)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return ()
  }
}
.fn fma_mixed.67 #f0 : fn(int32, int32, int32, int32, int32, int32, int32, int32, int32, int32, int32, int32, double, double, double, double, double, double, double, double, double, double, double, double) -> ((int32, int32, int32, int32), (double, double, double, double))
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = mul($f0, $f4)
    let %1: int32 = add(%0, $f8)
    let %2: int32 = mul($f1, $f5)
    let %3: int32 = add(%2, $f9)
    let %4: int32 = mul($f2, $f6)
    let %5: int32 = add(%4, $f10)
    let %6: int32 = mul($f3, $f7)
    let %7: int32 = add(%6, $f11)
    let _ = alloc <m0: (int32, int32, int32, int32) heap(4)> <- [0] = %1, [1] = %3, [2] = %5, [3] = %7
    let %9: double = mul($f12, $f16)
    let %10: double = add(%9, $f20)
    let %11: double = mul($f13, $f17)
    let %12: double = add(%11, $f21)
    let %13: double = mul($f14, $f18)
    let %14: double = add(%13, $f22)
    let %15: double = mul($f15, $f19)
    let %16: double = add(%15, $f23)
    let _ = alloc <m1: (double, double, double, double) heap(4)> <- [0] = %10, [1] = %12, [2] = %14, [3] = %16
    let _ = alloc <m2: ((int32, int32, int32, int32), (double, double, double, double)) heap(2)> <- [0] = f0.m0, [1] = f0.m1
    return f0.m2
  }
}
.fn main.451 #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: (int32, int32, int32, int32) heap(4)> <- [0] = 0, [1] = 0, [2] = 0, [3] = 0
    let _ = alloc <m1: array[(int32, int32, int32, int32)] heap(3)> <- [..] = f4.m0
    let %2: unit = call f1(0, f4.m1)
    let _ = alloc <m2: (double, double, double, double) heap(4)> <- [0] = 0, [1] = 0, [2] = 0, [3] = 0
    let _ = alloc <m3: array[(double, double, double, double)] heap(3)> <- [..] = f4.m2
    let %5: unit = call f2(0, f4.m3)
    let %6: unit = call f3(1, f4.m3, f4.m1)
    let %7: (int32, int32, int32, int32) = load (int32, int32, int32, int32) field(f4.m1, 0 * @ptr)
    let %8: int32 = load int32 field(%7, 0 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %9: int32 = load int32 field(%7, 1 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %10: int32 = load int32 field(%7, 2 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %11: int32 = load int32 field(%7, 3 * @(@32, @(@32, @(@32, @(@32, @32)))))
    let %12: (double, double, double, double) = load (double, double, double, double) field(f4.m3, 0 * @ptr)
    let %13: double = load double field(%12, 0 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %14: double = load double field(%12, 1 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %15: double = load double field(%12, 2 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %16: double = load double field(%12, 3 * @(@64, @(@64, @(@64, @(@64, @32)))))
    let %17: unit = ext_call minimbt_print_int(%8)
    let %18: unit = ext_call minimbt_print_char(10)
    let %19: int32 = conv.d2i.rtz(%13)
    let %20: unit = ext_call minimbt_print_int(%19)
    return ()
  }
}
.fn T$start #f10 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f4()
    return %0
  }
}
.fn init_vi_arr.452 #f1 : fn(int32, array[(int32, int32, int32, int32)]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f0, 2)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: int32 = add($f0, 1)
    let %2: int32 = add($f0, 2)
    let %3: int32 = add($f0, 3)
    let _ = alloc <m0: (int32, int32, int32, int32) heap(4)> <- [0] = $f0, [1] = %1, [2] = %2, [3] = %3
    let %8: ptr = compute_address unit offset(0, $f0 * @64)
    let _ = store (int32, int32, int32, int32) raw($f1, %8) <- f1.m0
    let %7: unit = call f1(%1, $f1)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return ()
  }
}
.thunk ::0 start

