let rec fma_int.1: (Int, Int, Int, Int) = (vi11.3: Int, vi12.5: Int, vi13.7: Int, vi14.9: Int, vi21.11: Int, vi22.13: Int, vi23.15: Int, vi24.17: Int, vi31.19: Int, vi32.21: Int, vi33.23: Int, vi34.25: Int) {
  let _26: Int = Mul(vi11.3, vi21.11)
  let vir1.27: Int = Add(_26, vi31.19)
  let _28: Int = Mul(vi12.5, vi22.13)
  let vir2.29: Int = Add(_28, vi32.21)
  let _30: Int = Mul(vi13.7, vi23.15)
  let vir3.31: Int = Add(_30, vi33.23)
  let _32: Int = Mul(vi14.9, vi24.17)
  let vir4.33: Int = Add(_32, vi34.25)
  Tuple([vir1.27, vir2.29, vir3.31, vir4.33, ])
}
let rec fma_double.34: (Double, Double, Double, Double) = (vd11.36: Double, vd12.38: Double, vd13.40: Double, vd14.42: Double, vd21.44: Double, vd22.46: Double, vd23.48: Double, vd24.50: Double, vd31.52: Double, vd32.54: Double, vd33.56: Double, vd34.58: Double) {
  let _59: Double = FMul(vd11.36, vd21.44)
  let vdr1.60: Double = FAdd(_59, vd31.52)
  let _61: Double = FMul(vd12.38, vd22.46)
  let vdr2.62: Double = FAdd(_61, vd32.54)
  let _63: Double = FMul(vd13.40, vd23.48)
  let vdr3.64: Double = FAdd(_63, vd33.56)
  let _65: Double = FMul(vd14.42, vd24.50)
  let vdr4.66: Double = FAdd(_65, vd34.58)
  Tuple([vdr1.60, vdr2.62, vdr3.64, vdr4.66, ])
}
let rec fma_mixed.67: ((Int, Int, Int, Int), (Double, Double, Double, Double)) = (vi11.69: Int, vi12.71: Int, vi13.73: Int, vi14.75: Int, vi21.77: Int, vi22.79: Int, vi23.81: Int, vi24.83: Int, vi31.85: Int, vi32.87: Int, vi33.89: Int, vi34.91: Int, vd11.93: Double, vd12.95: Double, vd13.97: Double, vd14.99: Double, vd21.101: Double, vd22.103: Double, vd23.105: Double, vd24.107: Double, vd31.109: Double, vd32.111: Double, vd33.113: Double, vd34.115: Double) {
  let vir.116: (Int, Int, Int, Int) = Apply(fma_int.1, [vi11.69, vi12.71, vi13.73, vi14.75, vi21.77, vi22.79, vi23.81, vi24.83, vi31.85, vi32.87, vi33.89, vi34.91, ])
  let vdr.117: (Double, Double, Double, Double) = Apply(fma_double.34, [vd11.93, vd12.95, vd13.97, vd14.99, vd21.101, vd22.103, vd23.105, vd24.107, vd31.109, vd32.111, vd33.113, vd34.115, ])
  Tuple([vir.116, vdr.117, ])
}
let rec main.118: Unit = () {
  let _119: Int = Int(3)
  let _120: Int = Int(0)
  let _121: Int = Int(0)
  let _122: Int = Int(0)
  let _123: Int = Int(0)
  let _124: (Int, Int, Int, Int) = Tuple([_120, _121, _122, _123, ])
  let vi_arr.125: Array[(Int, Int, Int, Int)] = ExtApply(minimbt_create_ptr_array, [_119, _124, ])
  let rec init_vi_arr.126: Unit = (i.128: Int) {
    let _129: Int = Int(2)
    let _144: Unit = if (i.128 <= _129) then {
      let _130: Int = Int(1)
      let _131: Int = Add(i.128, _130)
      let _132: Int = Int(2)
      let _133: Int = Add(i.128, _132)
      let _134: Int = Int(3)
      let _135: Int = Add(i.128, _134)
      let _136: (Int, Int, Int, Int) = Tuple([i.128, _131, _133, _135, ])
      let _138: Unit = Put vi_arr.125[i.128] = _136
      let _139: Int = Int(1)
      let _140: Int = Add(i.128, _139)
      let _142: Unit = Apply(init_vi_arr.126, [_140, ])
      Unit
    } else {
      Unit
    }
    Unit
  }
  let _145: Int = Int(0)
  let _147: Unit = Apply(init_vi_arr.126, [_145, ])
  let _148: Int = Int(3)
  let _149: Double = Double(0)
  let _150: Double = Double(0)
  let _151: Double = Double(0)
  let _152: Double = Double(0)
  let _153: (Double, Double, Double, Double) = Tuple([_149, _150, _151, _152, ])
  let vd_arr.154: Array[(Double, Double, Double, Double)] = ExtApply(minimbt_create_ptr_array, [_148, _153, ])
  let rec init_vd_arr.155: Unit = (i.157: Int) {
    let _158: Int = Int(2)
    let _177: Unit = if (i.157 <= _158) then {
      let _159: Double = ExtApply(minimbt_float_of_int, [i.157, ])
      let _160: Int = Int(1)
      let _161: Int = Add(i.157, _160)
      let _162: Double = ExtApply(minimbt_float_of_int, [_161, ])
      let _163: Int = Int(2)
      let _164: Int = Add(i.157, _163)
      let _165: Double = ExtApply(minimbt_float_of_int, [_164, ])
      let _166: Int = Int(3)
      let _167: Int = Add(i.157, _166)
      let _168: Double = ExtApply(minimbt_float_of_int, [_167, ])
      let _169: (Double, Double, Double, Double) = Tuple([_159, _162, _165, _168, ])
      let _171: Unit = Put vd_arr.154[i.157] = _169
      let _172: Int = Int(1)
      let _173: Int = Add(i.157, _172)
      let _175: Unit = Apply(init_vd_arr.155, [_173, ])
      Unit
    } else {
      Unit
    }
    Unit
  }
  let _178: Int = Int(0)
  let _180: Unit = Apply(init_vd_arr.155, [_178, ])
  let rec iter_fma.181: Unit = () {
    let _182: Int = Int(0)
    let _183: (Int, Int, Int, Int) = Get vi_arr.125[_182]
    let (vi11.185: Int, vi12.187: Int, vi13.189: Int, vi14.191: Int) = _183
    let _192: Int = Int(1)
    let _193: (Int, Int, Int, Int) = Get vi_arr.125[_192]
    let (vi21.195: Int, vi22.197: Int, vi23.199: Int, vi24.201: Int) = _193
    let _202: Int = Int(2)
    let _203: (Int, Int, Int, Int) = Get vi_arr.125[_202]
    let (vi31.205: Int, vi32.207: Int, vi33.209: Int, vi34.211: Int) = _203
    let _212: Int = Int(0)
    let _213: (Double, Double, Double, Double) = Get vd_arr.154[_212]
    let (vd11.215: Double, vd12.217: Double, vd13.219: Double, vd14.221: Double) = _213
    let _222: Int = Int(1)
    let _223: (Double, Double, Double, Double) = Get vd_arr.154[_222]
    let (vd21.225: Double, vd22.227: Double, vd23.229: Double, vd24.231: Double) = _223
    let _232: Int = Int(2)
    let _233: (Double, Double, Double, Double) = Get vd_arr.154[_232]
    let (vd31.235: Double, vd32.237: Double, vd33.239: Double, vd34.241: Double) = _233
    let _242: ((Int, Int, Int, Int), (Double, Double, Double, Double)) = Apply(fma_mixed.67, [vi11.185, vi12.187, vi13.189, vi14.191, vi21.195, vi22.197, vi23.199, vi24.201, vi31.205, vi32.207, vi33.209, vi34.211, vd11.215, vd12.217, vd13.219, vd14.221, vd21.225, vd22.227, vd23.229, vd24.231, vd31.235, vd32.237, vd33.239, vd34.241, ])
    let (vir.244: (Int, Int, Int, Int), vdr.246: (Double, Double, Double, Double)) = _242
    let (vi11.248: Int, vi12.250: Int, vi13.252: Int, vi14.254: Int) = vir.244
    let (vd11.256: Double, vd12.258: Double, vd13.260: Double, vd14.262: Double) = vdr.246
    let _263: ((Int, Int, Int, Int), (Double, Double, Double, Double)) = Apply(fma_mixed.67, [vi11.248, vi12.250, vi13.252, vi14.254, vi21.195, vi22.197, vi23.199, vi24.201, vi31.205, vi32.207, vi33.209, vi34.211, vd11.256, vd12.258, vd13.260, vd14.262, vd21.225, vd22.227, vd23.229, vd24.231, vd31.235, vd32.237, vd33.239, vd34.241, ])
    let (vir.265: (Int, Int, Int, Int), vdr.267: (Double, Double, Double, Double)) = _263
    let (vi21.269: Int, vi22.271: Int, vi23.273: Int, vi24.275: Int) = vir.265
    let (vd21.277: Double, vd22.279: Double, vd23.281: Double, vd24.283: Double) = vdr.267
    let _284: ((Int, Int, Int, Int), (Double, Double, Double, Double)) = Apply(fma_mixed.67, [vi11.248, vi12.250, vi13.252, vi14.254, vi21.269, vi22.271, vi23.273, vi24.275, vi31.205, vi32.207, vi33.209, vi34.211, vd11.256, vd12.258, vd13.260, vd14.262, vd21.277, vd22.279, vd23.281, vd24.283, vd31.235, vd32.237, vd33.239, vd34.241, ])
    let (vir.286: (Int, Int, Int, Int), vdr.288: (Double, Double, Double, Double)) = _284
    let (vi31.290: Int, vi32.292: Int, vi33.294: Int, vi34.296: Int) = vir.286
    let (vd31.298: Double, vd32.300: Double, vd33.302: Double, vd34.304: Double) = vdr.288
    let _305: ((Int, Int, Int, Int), (Double, Double, Double, Double)) = Apply(fma_mixed.67, [vi11.248, vi12.250, vi13.252, vi14.254, vi21.269, vi22.271, vi23.273, vi24.275, vi31.290, vi32.292, vi33.294, vi34.296, vd11.256, vd12.258, vd13.260, vd14.262, vd21.277, vd22.279, vd23.281, vd24.283, vd31.298, vd32.300, vd33.302, vd34.304, ])
    let (vir.307: (Int, Int, Int, Int), vdr.309: (Double, Double, Double, Double)) = _305
    let _310: Int = Int(0)
    let _312: Unit = Put vi_arr.125[_310] = vir.307
    let _313: Int = Int(0)
    let _315: Unit = Put vd_arr.154[_313] = vdr.309
    Unit
  }
  let rec stress.316: Unit = (i.318: Int) {
    let _319: Int = Int(3)
    let _327: Unit = if (i.318 <= _319) then {
      let _321: Unit = Apply(iter_fma.181, [])
      let _322: Int = Int(1)
      let _323: Int = Add(i.318, _322)
      let _325: Unit = Apply(stress.316, [_323, ])
      Unit
    } else {
      Unit
    }
    Unit
  }
  let _328: Int = Int(1)
  let _330: Unit = Apply(stress.316, [_328, ])
  let _331: Int = Int(0)
  let _332: (Int, Int, Int, Int) = Get vi_arr.125[_331]
  let (vi11.334: Int, vi12.336: Int, vi13.338: Int, vi14.340: Int) = _332
  let _341: Int = Int(0)
  let _342: (Double, Double, Double, Double) = Get vd_arr.154[_341]
  let (vd11.344: Double, vd12.346: Double, vd13.348: Double, vd14.350: Double) = _342
  let _352: Unit = ExtApply(minimbt_print_int, [vi11.334, ])
  let _353: Int = Int(10)
  let _355: Unit = ExtApply(minimbt_print_char, [_353, ])
  let _356: Int = ExtApply(minimbt_int_of_float, [vd11.344, ])
  let _358: Unit = ExtApply(minimbt_print_int, [_356, ])
  Unit
}
Apply(main.118, [])
