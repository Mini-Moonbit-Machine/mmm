let pi.1: Double = Double(3.141592653589793)
let _2: Double = Double(4)
let _3: Double = Double(12.566370614359172)
let solar_mass.4: Double = Double(39.47841760435743)
let days_per_year.5: Double = Double(365.24)
let rec loop_j.630: Unit = (j.187: Int, e.150: Array[Double], bm.170: Double, bx.158: Double, by.160: Double, bz.162: Double, bodies.146: Array[(Double, Double, Double, Double, Double, Double, Double)]) {
  let _188: Int = Int(1)
  let _189: Int = Int(4)
  let _227: Unit = if (j.187 <= _189) then {
    let b2.190: (Double, Double, Double, Double, Double, Double, Double) = Get bodies.146[j.187]
    let (b2x.192: Double, b2y.194: Double, b2z.196: Double, b2vx.198: Double, b2vy.200: Double, b2vz.202: Double, b2m.204: Double) = b2.190
    let dx.205: Double = FSub(bx.158, b2x.192)
    let dy.206: Double = FSub(by.160, b2y.194)
    let dz.207: Double = FSub(bz.162, b2z.196)
    let _208: Double = FMul(dx.205, dx.205)
    let _209: Double = FMul(dy.206, dy.206)
    let _210: Double = FAdd(_208, _209)
    let _211: Double = FMul(dz.207, dz.207)
    let dist2.212: Double = FAdd(_210, _211)
    let _213: Int = Int(0)
    let _214: Int = Int(0)
    let _215: Double = Get e.150[_214]
    let _216: Double = FMul(bm.170, b2m.204)
    let _217: Double = ExtApply(minimbt_sqrt, [dist2.212, ])
    let _218: Double = FDiv(_216, _217)
    let _219: Double = FSub(_215, _218)
    let _221: Unit = Put e.150[_213] = _219
    let _222: Int = Int(1)
    let _223: Int = Add(j.187, _222)
    let _225: Unit = Apply(loop_j.630, [_223, e.150, bm.170, bx.158, by.160, bz.162, bodies.146, ])
    Unit
  } else {
    Unit
  }
  Unit
}
let rec loop_i.629: Unit = (i.153: Int, e.150: Array[Double], bodies.146: Array[(Double, Double, Double, Double, Double, Double, Double)]) {
  let _154: Int = Int(1)
  let _155: Int = Int(4)
  let _237: Unit = if (i.153 <= _155) then {
    let b.156: (Double, Double, Double, Double, Double, Double, Double) = Get bodies.146[i.153]
    let (bx.158: Double, by.160: Double, bz.162: Double, bvx.164: Double, bvy.166: Double, bvz.168: Double, bm.170: Double) = b.156
    let _171: Int = Int(0)
    let _172: Int = Int(0)
    let _173: Double = Get e.150[_172]
    let _174: Double = Double(0.5)
    let _175: Double = FMul(_174, bm.170)
    let _176: Double = FMul(bvx.164, bvx.164)
    let _177: Double = FMul(bvy.166, bvy.166)
    let _178: Double = FAdd(_176, _177)
    let _179: Double = FMul(bvz.168, bvz.168)
    let _180: Double = FAdd(_178, _179)
    let _181: Double = FMul(_175, _180)
    let _182: Double = FAdd(_173, _181)
    let _184: Unit = Put e.150[_171] = _182
    let _228: Int = Int(1)
    let _229: Int = Add(i.153, _228)
    let _231: Unit = Apply(loop_j.630, [_229, e.150, bm.170, bx.158, by.160, bz.162, bodies.146, ])
    let _232: Int = Int(1)
    let _233: Int = Add(i.153, _232)
    let _235: Unit = Apply(loop_i.629, [_233, e.150, bodies.146, ])
    Unit
  } else {
    Unit
  }
  Unit
}
let rec energy.628: Double = (bodies.146: Array[(Double, Double, Double, Double, Double, Double, Double)]) {
  let n.147: Int = Int(5)
  let _148: Int = Int(1)
  let _149: Double = Double(0)
  let e.150: Array[Double] = ExtApply(minimbt_create_float_array, [_148, _149, ])
  let _238: Int = Int(0)
  let _240: Unit = Apply(loop_i.629, [_238, e.150, bodies.146, ])
  let _241: Int = Int(0)
  Get e.150[_241]
}
let rec loop_i.632: Unit = (i.472: Int, px.464: Array[Double], py.467: Array[Double], pz.470: Array[Double], bodies.412: Array[(Double, Double, Double, Double, Double, Double, Double)]) {
  let _473: Int = Int(1)
  let _474: Int = Int(4)
  let _475: Unit = if (i.472 <= _474) then {
    let b.476: (Double, Double, Double, Double, Double, Double, Double) = Get bodies.412[i.472]
    let (bx.477: Double, by.478: Double, bz.479: Double, bvx.480: Double, bvy.481: Double, bvz.482: Double, bm.483: Double) = b.476
    let _484: Int = Int(0)
    let _485: Int = Int(0)
    let _486: Double = Get px.464[_485]
    let _487: Double = FMul(bvx.480, bm.483)
    let _488: Double = FAdd(_486, _487)
    let _489: Unit = Put px.464[_484] = _488
    let _490: Int = Int(0)
    let _491: Int = Int(0)
    let _492: Double = Get py.467[_491]
    let _493: Double = FMul(bvy.481, bm.483)
    let _494: Double = FAdd(_492, _493)
    let _495: Unit = Put py.467[_490] = _494
    let _496: Int = Int(0)
    let _497: Int = Int(0)
    let _498: Double = Get pz.470[_497]
    let _499: Double = FMul(bvz.482, bm.483)
    let _500: Double = FAdd(_498, _499)
    let _501: Unit = Put pz.470[_496] = _500
    let _502: Int = Int(1)
    let _503: Int = Add(i.472, _502)
    let _504: Unit = Apply(loop_i.632, [_503, px.464, py.467, pz.470, bodies.412, ])
    Unit
  } else {
    Unit
  }
  Unit
}
let rec loop_j.635: Unit = (j.546: Int, _440: Double, i.533: Int, bm.544: Double, bx.538: Double, by.539: Double, bz.540: Double, bvx.541: Double, bvy.542: Double, bvz.543: Double, bodies.412: Array[(Double, Double, Double, Double, Double, Double, Double)]) {
  let _547: Int = Int(1)
  let _548: Int = Int(4)
  let _549: Unit = if (j.546 <= _548) then {
    let b2.550: (Double, Double, Double, Double, Double, Double, Double) = Get bodies.412[j.546]
    let (b2x.551: Double, b2y.552: Double, b2z.553: Double, b2vx.554: Double, b2vy.555: Double, b2vz.556: Double, b2m.557: Double) = b2.550
    let dx.558: Double = FSub(bx.538, b2x.551)
    let dy.559: Double = FSub(by.539, b2y.552)
    let dz.560: Double = FSub(bz.540, b2z.553)
    let _561: Double = FMul(dx.558, dx.558)
    let _562: Double = FMul(dy.559, dy.559)
    let _563: Double = FAdd(_561, _562)
    let _564: Double = FMul(dz.560, dz.560)
    let dist2.565: Double = FAdd(_563, _564)
    let _566: Double = ExtApply(minimbt_sqrt, [dist2.565, ])
    let _567: Double = FMul(dist2.565, _566)
    let mag.568: Double = FDiv(_440, _567)
    let _569: Double = FMul(dx.558, b2m.557)
    let _570: Double = FMul(_569, mag.568)
    let _571: Double = FSub(bvx.541, _570)
    let _572: Double = FMul(dy.559, b2m.557)
    let _573: Double = FMul(_572, mag.568)
    let _574: Double = FSub(bvy.542, _573)
    let _575: Double = FMul(dz.560, b2m.557)
    let _576: Double = FMul(_575, mag.568)
    let _577: Double = FSub(bvz.543, _576)
    let new_b.578: (Double, Double, Double, Double, Double, Double, Double) = Tuple([bx.538, by.539, bz.540, _571, _574, _577, bm.544, ])
    let _579: Unit = Put bodies.412[i.533] = new_b.578
    let _580: Double = FMul(dx.558, b2m.557)
    let _581: Double = FMul(_580, mag.568)
    let _582: Double = FSub(b2vx.554, _581)
    let _583: Double = FMul(dy.559, b2m.557)
    let _584: Double = FMul(_583, mag.568)
    let _585: Double = FSub(b2vy.555, _584)
    let _586: Double = FMul(dz.560, b2m.557)
    let _587: Double = FMul(_586, mag.568)
    let _588: Double = FSub(b2vz.556, _587)
    let new_b2.589: (Double, Double, Double, Double, Double, Double, Double) = Tuple([b2x.551, b2y.552, b2z.553, _582, _585, _588, b2m.557, ])
    let _590: Unit = Put bodies.412[j.546] = new_b2.589
    let _591: Int = Int(1)
    let _592: Int = Add(j.546, _591)
    let _593: Unit = Apply(loop_j.635, [_592, _440, i.533, bm.544, bx.538, by.539, bz.540, bvx.541, bvy.542, bvz.543, bodies.412, ])
    Unit
  } else {
    Unit
  }
  Unit
}
let rec loop_i.634: Unit = (i.533: Int, _440: Double, bodies.412: Array[(Double, Double, Double, Double, Double, Double, Double)]) {
  let _534: Int = Int(1)
  let _535: Int = Int(4)
  let _536: Unit = if (i.533 <= _535) then {
    let b.537: (Double, Double, Double, Double, Double, Double, Double) = Get bodies.412[i.533]
    let (bx.538: Double, by.539: Double, bz.540: Double, bvx.541: Double, bvy.542: Double, bvz.543: Double, bm.544: Double) = b.537
    let _594: Int = Int(1)
    let _595: Int = Add(i.533, _594)
    let _596: Unit = Apply(loop_j.635, [_595, _440, i.533, bm.544, bx.538, by.539, bz.540, bvx.541, bvy.542, bvz.543, bodies.412, ])
    let _597: Int = Int(1)
    let _598: Int = Add(i.533, _597)
    let _599: Unit = Apply(loop_i.634, [_598, _440, bodies.412, ])
    Unit
  } else {
    Unit
  }
  Unit
}
let rec update_axis.636: Unit = (i.603: Int, _440: Double, bodies.412: Array[(Double, Double, Double, Double, Double, Double, Double)]) {
  let _604: Int = Int(1)
  let _605: Int = Int(4)
  let _606: Unit = if (i.603 <= _605) then {
    let b.607: (Double, Double, Double, Double, Double, Double, Double) = Get bodies.412[i.603]
    let (bx.608: Double, by.609: Double, bz.610: Double, bvx.611: Double, bvy.612: Double, bvz.613: Double, bm.614: Double) = b.607
    let _615: Double = FMul(_440, bvx.611)
    let _616: Double = FAdd(bx.608, _615)
    let _617: Double = FMul(_440, bvy.612)
    let _618: Double = FAdd(by.609, _617)
    let _619: Double = FMul(_440, bvz.613)
    let _620: Double = FAdd(bz.610, _619)
    let new_b.621: (Double, Double, Double, Double, Double, Double, Double) = Tuple([_616, _618, _620, bvx.611, bvy.612, bvz.613, bm.614, ])
    let _622: Unit = Put bodies.412[i.603] = new_b.621
    let _623: Int = Int(1)
    let _624: Int = Add(i.603, _623)
    let _625: Unit = Apply(update_axis.636, [_624, _440, bodies.412, ])
    Unit
  } else {
    Unit
  }
  Unit
}
let rec loop_i.633: Unit = (i.439: Int, iters.436: Int, bodies.412: Array[(Double, Double, Double, Double, Double, Double, Double)]) {
  let _448: Unit = if (i.439 <= iters.436) then {
    let _440: Double = Double(0.01)
    let n.531: Int = Int(5)
    let _600: Int = Int(0)
    let _601: Unit = Apply(loop_i.634, [_600, _440, bodies.412, ])
    let _626: Int = Int(0)
    let _627: Unit = Apply(update_axis.636, [_626, _440, bodies.412, ])
    let _442: Unit = Unit
    let _443: Int = Int(1)
    let _444: Int = Add(i.439, _443)
    let _446: Unit = Apply(loop_i.633, [_444, iters.436, bodies.412, ])
    Unit
  } else {
    Unit
  }
  Unit
}
let rec main.631: Unit = () {
  let _338: Double = Double(4.841431442464721)
  let _339: Double = Double(1.1603200440274284)
  let _340: Double = Double(-1.1603200440274284)
  let _341: Double = Double(0.10362204447112311)
  let _342: Double = Double(-0.10362204447112311)
  let _343: Double = Double(0.001660076642744037)
  let _344: Double = Double(0.606326392995832)
  let _345: Double = Double(0.007699011184197404)
  let _346: Double = Double(2.81198684491626)
  let _347: Double = Double(0.0000690460016972063)
  let _348: Double = Double(0.02521836165988763)
  let _349: Double = Double(-0.02521836165988763)
  let _350: Double = Double(0.0009547919384243266)
  let _351: Double = Double(0.03769367487038949)
  let jupiter.352: (Double, Double, Double, Double, Double, Double, Double) = Tuple([_338, _340, _342, _344, _346, _349, _351, ])
  let _353: Double = Double(8.34336671824458)
  let _354: Double = Double(4.124798564124305)
  let _355: Double = Double(0.4035234171143214)
  let _356: Double = Double(-0.4035234171143214)
  let _357: Double = Double(0.002767425107268624)
  let _358: Double = Double(1.0107743461787924)
  let _359: Double = Double(-1.0107743461787924)
  let _360: Double = Double(0.004998528012349172)
  let _361: Double = Double(1.8256623712304119)
  let _362: Double = Double(0.000023029345528229068)
  let _363: Double = Double(0.008411238160730385)
  let _364: Double = Double(0.0002858859806661308)
  let _365: Double = Double(0.011286326131968767)
  let saturn.366: (Double, Double, Double, Double, Double, Double, Double) = Tuple([_353, _354, _356, _359, _361, _363, _365, ])
  let _367: Double = Double(12.894369562139131)
  let _368: Double = Double(15.111151401698631)
  let _369: Double = Double(-15.111151401698631)
  let _370: Double = Double(0.22330757889265587)
  let _371: Double = Double(-0.22330757889265587)
  let _372: Double = Double(0.002964601375647616)
  let _373: Double = Double(1.0827910064415354)
  let _374: Double = Double(0.0023784717395948095)
  let _375: Double = Double(0.8687130181696082)
  let _376: Double = Double(0.000029658956854023756)
  let _377: Double = Double(0.010832637401363636)
  let _378: Double = Double(-0.010832637401363636)
  let _379: Double = Double(0.00004366244043351563)
  let _380: Double = Double(0.0017237240570597112)
  let uranus.381: (Double, Double, Double, Double, Double, Double, Double) = Tuple([_367, _369, _371, _373, _375, _378, _380, ])
  let _382: Double = Double(15.379697114850917)
  let _383: Double = Double(25.919314609987964)
  let _384: Double = Double(-25.919314609987964)
  let _385: Double = Double(0.17925877295037118)
  let _386: Double = Double(0.0026806777249038932)
  let _387: Double = Double(0.979090732243898)
  let _388: Double = Double(0.001628241700382423)
  let _389: Double = Double(0.5946989986476762)
  let _390: Double = Double(0.00009515922545197159)
  let _391: Double = Double(0.034755955504078104)
  let _392: Double = Double(-0.034755955504078104)
  let _393: Double = Double(0.00005151389020466116)
  let _394: Double = Double(0.002033686869924631)
  let neptune.395: (Double, Double, Double, Double, Double, Double, Double) = Tuple([_382, _384, _385, _387, _389, _392, _394, ])
  let _396: Double = Double(0)
  let _397: Double = Double(0)
  let _398: Double = Double(0)
  let _399: Double = Double(0)
  let _400: Double = Double(0)
  let _401: Double = Double(0)
  let sun.402: (Double, Double, Double, Double, Double, Double, Double) = Tuple([_396, _397, _398, _399, _400, _401, solar_mass.4, ])
  let _403: Int = Int(5)
  let _404: Double = Double(0)
  let _405: Double = Double(0)
  let _406: Double = Double(0)
  let _407: Double = Double(0)
  let _408: Double = Double(0)
  let _409: Double = Double(0)
  let _410: Double = Double(0)
  let _411: (Double, Double, Double, Double, Double, Double, Double) = Tuple([_404, _405, _406, _407, _408, _409, _410, ])
  let bodies.412: Array[(Double, Double, Double, Double, Double, Double, Double)] = ExtApply(minimbt_create_ptr_array, [_403, _411, ])
  let _413: Int = Int(0)
  let _415: Unit = Put bodies.412[_413] = sun.402
  let _416: Int = Int(1)
  let _418: Unit = Put bodies.412[_416] = jupiter.352
  let _419: Int = Int(2)
  let _421: Unit = Put bodies.412[_419] = saturn.366
  let _422: Int = Int(3)
  let _424: Unit = Put bodies.412[_422] = uranus.381
  let _425: Int = Int(4)
  let _427: Unit = Put bodies.412[_425] = neptune.395
  let n.461: Int = Int(5)
  let _462: Int = Int(1)
  let _463: Double = Double(0)
  let px.464: Array[Double] = ExtApply(minimbt_create_float_array, [_462, _463, ])
  let _465: Int = Int(1)
  let _466: Double = Double(0)
  let py.467: Array[Double] = ExtApply(minimbt_create_float_array, [_465, _466, ])
  let _468: Int = Int(1)
  let _469: Double = Double(0)
  let pz.470: Array[Double] = ExtApply(minimbt_create_float_array, [_468, _469, ])
  let _505: Int = Int(0)
  let _506: Unit = Apply(loop_i.632, [_505, px.464, py.467, pz.470, bodies.412, ])
  let _507: Int = Int(0)
  let b.508: (Double, Double, Double, Double, Double, Double, Double) = Get bodies.412[_507]
  let (bx.509: Double, by.510: Double, bz.511: Double, bvx.512: Double, bvy.513: Double, bvz.514: Double, bm.515: Double) = b.508
  let _516: Int = Int(0)
  let _517: Double = Get px.464[_516]
  let _518: Double = FDiv(_517, solar_mass.4)
  let _519: Double = FNeg(_518)
  let _520: Int = Int(0)
  let _521: Double = Get py.467[_520]
  let _522: Double = FDiv(_521, solar_mass.4)
  let _523: Double = FNeg(_522)
  let _524: Int = Int(0)
  let _525: Double = Get pz.470[_524]
  let _526: Double = FDiv(_525, solar_mass.4)
  let _527: Double = FNeg(_526)
  let new_b.528: (Double, Double, Double, Double, Double, Double, Double) = Tuple([bx.509, by.510, bz.511, _519, _523, _527, bm.515, ])
  let _529: Int = Int(0)
  let _530: Unit = Put bodies.412[_529] = new_b.528
  let _429: Unit = Unit
  let _430: Double = Apply(energy.628, [bodies.412, ])
  let _431: Double = Double(1000000000)
  let _432: Double = FMul(_430, _431)
  let _433: Int = ExtApply(minimbt_int_of_float, [_432, ])
  let _435: Unit = ExtApply(minimbt_print_int, [_433, ])
  let iters.436: Int = Int(500000)
  let _449: Int = Int(1)
  let _451: Unit = Apply(loop_i.633, [_449, iters.436, bodies.412, ])
  let _452: Int = Int(10)
  let _454: Unit = ExtApply(minimbt_print_char, [_452, ])
  let _455: Double = Apply(energy.628, [bodies.412, ])
  let _456: Double = Double(1000000000)
  let _457: Double = FMul(_455, _456)
  let _458: Int = ExtApply(minimbt_int_of_float, [_457, ])
  let _460: Unit = ExtApply(minimbt_print_int, [_458, ])
  Unit
}
Apply(main.631, [])
