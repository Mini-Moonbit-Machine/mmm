# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn loop_i.634 #f5 : fn(int32, double, array[(double, double, double, double, double, double, double)]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f0, 4)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: (double, double, double, double, double, double, double) = load (double, double, double, double, double, double, double) offset($f2, $f0 * @ptr)
    let %2: double = load double field(%1, 0 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %3: double = load double field(%1, 1 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %4: double = load double field(%1, 2 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %5: double = load double field(%1, 3 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %6: double = load double field(%1, 4 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %7: double = load double field(%1, 5 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %8: double = load double field(%1, 6 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %9: int32 = add($f0, 1)
    let %10: unit = call f4(%9, $f1, $f0, %8, %2, %3, %4, %5, %6, %7, $f2)
    let %11: int32 = add($f0, 1)
    let %12: unit = call f5(%11, $f1, $f2)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return ()
  }
}
.fn loop_i.632 #f3 : fn(int32, array[double], array[double], array[double], array[(double, double, double, double, double, double, double)]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f0, 4)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: (double, double, double, double, double, double, double) = load (double, double, double, double, double, double, double) offset($f4, $f0 * @ptr)
    let %2: double = load double field(%1, 0 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %3: double = load double field(%1, 1 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %4: double = load double field(%1, 2 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %5: double = load double field(%1, 3 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %6: double = load double field(%1, 4 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %7: double = load double field(%1, 5 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %8: double = load double field(%1, 6 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %9: double = load double field($f1, 0 * @64)
    let %10: double = mul(%5, %8)
    let %11: double = add(%9, %10)
    let _ = store double field($f1, 0 * @64) <- %11
    let %13: double = load double field($f2, 0 * @64)
    let %14: double = mul(%6, %8)
    let %15: double = add(%13, %14)
    let _ = store double field($f2, 0 * @64) <- %15
    let %17: double = load double field($f3, 0 * @64)
    let %18: double = mul(%7, %8)
    let %19: double = add(%17, %18)
    let _ = store double field($f3, 0 * @64) <- %19
    let %21: int32 = add($f0, 1)
    let %22: unit = call f3(%21, $f1, $f2, $f3, $f4)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return ()
  }
}
.fn loop_i.633 #f7 : fn(int32, int32, array[(double, double, double, double, double, double, double)]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f0, $f1)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: unit = call f5(0, 0.01, $f2)
    let %2: unit = call f6(0, 0.01, $f2)
    let %3: int32 = add($f0, 1)
    let %4: unit = call f7(%3, $f1, $f2)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return ()
  }
}
.fn loop_j.630 #f0 : fn(int32, array[double], double, double, double, double, array[(double, double, double, double, double, double, double)]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f0, 4)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: (double, double, double, double, double, double, double) = load (double, double, double, double, double, double, double) offset($f6, $f0 * @ptr)
    let %2: double = load double field(%1, 0 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %3: double = load double field(%1, 1 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %4: double = load double field(%1, 2 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %5: double = load double field(%1, 3 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %6: double = load double field(%1, 4 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %7: double = load double field(%1, 5 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %8: double = load double field(%1, 6 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %9: double = sub($f3, %2)
    let %10: double = sub($f4, %3)
    let %11: double = sub($f5, %4)
    let %12: double = mul(%9, %9)
    let %13: double = mul(%10, %10)
    let %14: double = add(%12, %13)
    let %15: double = mul(%11, %11)
    let %16: double = add(%14, %15)
    let %17: double = load double field($f1, 0 * @64)
    let %18: double = mul($f2, %8)
    let %19: double = sqrt(%16)
    let %20: double = div(%18, %19)
    let %21: double = sub(%17, %20)
    let _ = store double field($f1, 0 * @64) <- %21
    let %23: int32 = add($f0, 1)
    let %24: unit = call f0(%23, $f1, $f2, $f3, $f4, $f5, $f6)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return ()
  }
}
.fn loop_j.635 #f4 : fn(int32, double, int32, double, double, double, double, double, double, double, array[(double, double, double, double, double, double, double)]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f0, 4)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: (double, double, double, double, double, double, double) = load (double, double, double, double, double, double, double) offset($f10, $f0 * @ptr)
    let %2: double = load double field(%1, 0 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %3: double = load double field(%1, 1 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %4: double = load double field(%1, 2 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %5: double = load double field(%1, 3 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %6: double = load double field(%1, 4 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %7: double = load double field(%1, 5 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %8: double = load double field(%1, 6 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %9: double = sub($f4, %2)
    let %10: double = sub($f5, %3)
    let %11: double = sub($f6, %4)
    let %12: double = mul(%9, %9)
    let %13: double = mul(%10, %10)
    let %14: double = add(%12, %13)
    let %15: double = mul(%11, %11)
    let %16: double = add(%14, %15)
    let %17: double = sqrt(%16)
    let %18: double = mul(%16, %17)
    let %19: double = div($f1, %18)
    let %20: double = mul(%9, %8)
    let %21: double = mul(%20, %19)
    let %22: double = sub($f7, %21)
    let %23: double = mul(%10, %8)
    let %24: double = mul(%23, %19)
    let %25: double = sub($f8, %24)
    let %26: double = mul(%11, %8)
    let %27: double = mul(%26, %19)
    let %28: double = sub($f9, %27)
    let _ = alloc <m0: (double, double, double, double, double, double, double) heap(7)> <- [0] = $f4, [1] = $f5, [2] = $f6, [3] = %22, [4] = %25, [5] = %28, [6] = $f3
    let _ = store (double, double, double, double, double, double, double) offset($f10, $f2 * @ptr) <- f4.m0
    let %31: double = mul(%9, %8)
    let %32: double = mul(%31, %19)
    let %33: double = sub(%5, %32)
    let %34: double = mul(%10, %8)
    let %35: double = mul(%34, %19)
    let %36: double = sub(%6, %35)
    let %37: double = mul(%11, %8)
    let %38: double = mul(%37, %19)
    let %39: double = sub(%7, %38)
    let _ = alloc <m1: (double, double, double, double, double, double, double) heap(7)> <- [0] = %2, [1] = %3, [2] = %4, [3] = %33, [4] = %36, [5] = %39, [6] = %8
    let _ = store (double, double, double, double, double, double, double) offset($f10, $f0 * @ptr) <- f4.m1
    let %42: int32 = add($f0, 1)
    let %43: unit = call f4(%42, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return ()
  }
}
.fn main.631 #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: (double, double, double, double, double, double, double) heap(7)> <- [0] = 4.841431442464721, [1] = -1.1603200440274284, [2] = -0.10362204447112311, [3] = 0.606326392995832, [4] = 2.81198684491626, [5] = -0.02521836165988763, [6] = 0.03769367487038949
    let _ = alloc <m1: (double, double, double, double, double, double, double) heap(7)> <- [0] = 8.34336671824458, [1] = 4.124798564124305, [2] = -0.4035234171143214, [3] = -1.0107743461787924, [4] = 1.8256623712304119, [5] = 0.008411238160730385, [6] = 0.011286326131968767
    let _ = alloc <m2: (double, double, double, double, double, double, double) heap(7)> <- [0] = 12.894369562139131, [1] = -15.111151401698631, [2] = -0.22330757889265587, [3] = 1.0827910064415354, [4] = 0.8687130181696082, [5] = -0.010832637401363636, [6] = 0.0017237240570597112
    let _ = alloc <m3: (double, double, double, double, double, double, double) heap(7)> <- [0] = 15.379697114850917, [1] = -25.919314609987964, [2] = 0.17925877295037118, [3] = 0.979090732243898, [4] = 0.5946989986476762, [5] = -0.034755955504078104, [6] = 0.002033686869924631
    let %4: double = load_symbol ::3
    let _ = alloc <m4: (double, double, double, double, double, double, double) heap(7)> <- [0] = 0, [1] = 0, [2] = 0, [3] = 0, [4] = 0, [5] = 0, [6] = %4
    let _ = alloc <m5: (double, double, double, double, double, double, double) heap(7)> <- [0] = 0, [1] = 0, [2] = 0, [3] = 0, [4] = 0, [5] = 0, [6] = 0
    let _ = alloc <m6: array[(double, double, double, double, double, double, double)] heap(5)> <- [..] = f8.m5
    let _ = store (double, double, double, double, double, double, double) field(f8.m6, 0 * @ptr) <- f8.m4
    let _ = store (double, double, double, double, double, double, double) field(f8.m6, 1 * @ptr) <- f8.m0
    let _ = store (double, double, double, double, double, double, double) field(f8.m6, 2 * @ptr) <- f8.m1
    let _ = store (double, double, double, double, double, double, double) field(f8.m6, 3 * @ptr) <- f8.m2
    let _ = store (double, double, double, double, double, double, double) field(f8.m6, 4 * @ptr) <- f8.m3
    let _ = alloc <m7: array[double] heap(1)> <- [..] = 0
    let _ = alloc <m8: array[double] heap(1)> <- [..] = 0
    let _ = alloc <m9: array[double] heap(1)> <- [..] = 0
    let %16: unit = call f3(0, f8.m7, f8.m8, f8.m9, f8.m6)
    let %17: (double, double, double, double, double, double, double) = load (double, double, double, double, double, double, double) field(f8.m6, 0 * @ptr)
    let %18: double = load double field(%17, 0 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %19: double = load double field(%17, 1 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %20: double = load double field(%17, 2 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %21: double = load double field(%17, 3 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %22: double = load double field(%17, 4 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %23: double = load double field(%17, 5 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %24: double = load double field(%17, 6 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %25: double = load double field(f8.m7, 0 * @64)
    let %26: double = load_symbol ::3
    let %27: double = div(%25, %26)
    let %28: double = neg(%27)
    let %29: double = load double field(f8.m8, 0 * @64)
    let %30: double = load_symbol ::3
    let %31: double = div(%29, %30)
    let %32: double = neg(%31)
    let %33: double = load double field(f8.m9, 0 * @64)
    let %34: double = load_symbol ::3
    let %35: double = div(%33, %34)
    let %36: double = neg(%35)
    let _ = alloc <m10: (double, double, double, double, double, double, double) heap(7)> <- [0] = %18, [1] = %19, [2] = %20, [3] = %28, [4] = %32, [5] = %36, [6] = %24
    let _ = store (double, double, double, double, double, double, double) field(f8.m6, 0 * @ptr) <- f8.m10
    let %39: double = call f2(f8.m6)
    let %40: double = mul(%39, 1000000000)
    let %41: int32 = conv.d2i.rtz(%40)
    let %42: unit = ext_call minimbt_print_int(%41)
    let %43: unit = call f7(1, 500000, f8.m6)
    let %44: unit = ext_call minimbt_print_char(10)
    let %45: double = call f2(f8.m6)
    let %46: double = mul(%45, 1000000000)
    let %47: int32 = conv.d2i.rtz(%46)
    let %48: unit = ext_call minimbt_print_int(%47)
    return ()
  }
}
.fn loop_i.629 #f1 : fn(int32, array[double], array[(double, double, double, double, double, double, double)]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f0, 4)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: (double, double, double, double, double, double, double) = load (double, double, double, double, double, double, double) offset($f2, $f0 * @ptr)
    let %2: double = load double field(%1, 0 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %3: double = load double field(%1, 1 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %4: double = load double field(%1, 2 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %5: double = load double field(%1, 3 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %6: double = load double field(%1, 4 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %7: double = load double field(%1, 5 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %8: double = load double field(%1, 6 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %9: double = load double field($f1, 0 * @64)
    let %10: double = mul(0.5, %8)
    let %11: double = mul(%5, %5)
    let %12: double = mul(%6, %6)
    let %13: double = add(%11, %12)
    let %14: double = mul(%7, %7)
    let %15: double = add(%13, %14)
    let %16: double = mul(%10, %15)
    let %17: double = add(%9, %16)
    let _ = store double field($f1, 0 * @64) <- %17
    let %19: int32 = add($f0, 1)
    let %20: unit = call f0(%19, $f1, %8, %2, %3, %4, $f2)
    let %21: int32 = add($f0, 1)
    let %22: unit = call f1(%21, $f1, $f2)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return ()
  }
}
.fn T$start #f18 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f8()
    return %0
  }
}
.fn energy.628 #f2 : fn(array[(double, double, double, double, double, double, double)]) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[double] heap(1)> <- [..] = 0
    let %1: unit = call f1(0, f2.m0, $f0)
    let %2: double = load double field(f2.m0, 0 * @64)
    return %2
  }
}
.fn update_axis.636 #f6 : fn(int32, double, array[(double, double, double, double, double, double, double)]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f0, 4)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: (double, double, double, double, double, double, double) = load (double, double, double, double, double, double, double) offset($f2, $f0 * @ptr)
    let %2: double = load double field(%1, 0 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %3: double = load double field(%1, 1 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %4: double = load double field(%1, 2 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %5: double = load double field(%1, 3 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %6: double = load double field(%1, 4 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %7: double = load double field(%1, 5 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %8: double = load double field(%1, 6 * @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @(@64, @32))))))))
    let %9: double = mul($f1, %5)
    let %10: double = add(%2, %9)
    let %11: double = mul($f1, %6)
    let %12: double = add(%3, %11)
    let %13: double = mul($f1, %7)
    let %14: double = add(%4, %13)
    let _ = alloc <m0: (double, double, double, double, double, double, double) heap(7)> <- [0] = %10, [1] = %12, [2] = %14, [3] = %5, [4] = %6, [5] = %7, [6] = %8
    let _ = store (double, double, double, double, double, double, double) offset($f2, $f0 * @ptr) <- f6.m0
    let %17: int32 = add($f0, 1)
    let %18: unit = call f6(%17, $f1, $f2)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return ()
  }
}
.thunk ::0 pi.1
.thunk ::1 _2
.thunk ::2 _3
.thunk ::3 solar_mass.4
.thunk ::4 days_per_year.5
.thunk ::5 start

